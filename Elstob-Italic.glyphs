{
.appVersion = "1161";
classes = (
{
code = "acutecomb gravecomb tildecomb uni0302 uni0304\012uni0305 uni0306 uni0307 uni0308 uni030A uni030C\012uni035B";
name = CombDiacritics;
},
{
code = "a b c d e g h i j k l m n o p q r s t u v w x y z\012agrave aacute acircumflex atilde adieresis aring ae\012ccedilla egrave eacute ecircumflex edieresis igrave\012iacute icircumflex idieresis eth ntilde ograve\012oacute ocircumflex otilde odieresis oslash ugrave\012uacute ucircumflex udieresis yacute thorn ydieresis\012germandbls amacron emacron imacron omacron umacron\012abreve cdotaccent dcaron ebreve eogonek gdotaccent\012ibreve dotlessi lslash obreve oe tcaron ubreve\012longs uni0195 uni01BF uni01E3 uni01EB uni021D\012uni0233 uni0237 uni1D79 uni1E8F uni1E9C uniA741\012uniA751 uniA753 uniA757 uniA75D uniA76B uniA76F\012uniA77A uniA77A.alt uniA77C uniA783 uniA785 uniA787\012# uniFB00 uniFB01 uniFB02 uniFB03 uniFB04\012uniFB05 uniFB06\012# f_f_udieresis f_thorn f_thorn.nordic f_eth.nordic\012# f_j f_udieresis f_odieresis";
name = AllLowerCaseexclf;
},
{
code = "agrave acircumflex atilde adieresis aring egrave\012ecircumflex edieresis igrave iacute icircumflex\012idieresis ograve ocircumflex otilde odieresis\012ugrave ucircumflex udieresis ydieresis amacron\012abreve emacron ebreve imacron ibreve omacron\012obreve umacron ubreve uni01E3";
name = HighDiacritics;
},
{
code = "f uniFB00 f.alt uniFB00.alt";
name = LowerCase_f;
}
);
copyright = "Copyright (c) 1998-2018 by Peter S. Baker";
customParameters = (
{
name = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
name = license;
value = "Licensed under the SIL Open Font License, version 1.1";
},
{
name = panose;
value = (
0,
0,
5,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
29,
31,
36,
42,
79,
86
);
},
{
name = codePageRanges;
value = (
1252,
1250,
1254,
1257,
1258
);
},
{
name = glyphOrder;
value = (
.notdef,
uni0000,
uni000D,
A,
A.swash,
AE,
AE.swash,
AEacute,
Aacute,
Abreve,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Aringacute,
Atilde,
B,
C,
Cacute,
acute.case,
acutecomb.case,
CapCaron,
uni030C.case,
CapCircumflex,
uni0302.case,
CapDieresis,
uni0308.case,
CapDoubleAcute,
uni030B.case,
CapDoubleGrave,
uni030F.case,
CapGrave,
gravecomb.case,
CapMacron,
uni0304.case,
CapTilde,
tildecomb.case,
Ccaron,
Ccedilla,
Ccircumflex,
Cdotaccent,
D,
D.swash,
Dcaron,
Dcroat,
Delta,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eng,
Eogonek,
Eth,
Euro,
F,
G,
Gbreve,
Gcaron,
Gcircumflex,
Gcommaaccent,
Gdotaccent,
H,
H18543,
H18551,
Hbar,
Hcircumflex,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
J.swash,
Jcircumflex,
K,
Kcommaaccent,
L,
Lacute,
Lcaron,
Lcommaaccent,
Ldot,
Lslash,
M,
N,
Nacute,
Ncaron,
Ncommaaccent,
Ntilde,
O,
OE,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohorn,
Ohungarumlaut,
Omacron,
Omega,
Oslash,
Oslashacute,
Otilde,
P,
PoisonMark,
Q,
Q.swash,
Q_u,
R,
Racute,
Rcaron,
Rcommaaccent,
S,
Sacute,
Scaron,
Scedilla,
Scircumflex,
Scommaaccent,
T,
T.alt,
Tbar,
Tcaron,
Tcommaaccent,
Theta,
Thorn,
Thorn.nordic,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhorn,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
uni01F7.ss07,
X,
X.ss07,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
uni021C.ss07,
Yoghflatdot,
Z,
Zacute,
Zcaron,
Zdotaccent,
a,
a.sc,
aacute,
aacute.sc,
abreve,
acircumflex,
acircumflex.sc,
acute,
acutecomb,
acutecomb.sc,
adieresis,
adieresis.sc,
ae,
ae.sc,
ae.square,
aeacute,
aeacute.square,
afii301,
afii57929,
afii61664,
afii64937,
agrave,
agrave.sc,
amacron,
amacron.sc,
ampersand,
ampersand.sc,
angleleft,
angleright,
aogonek,
aogonek.sc,
approxequal,
aring,
aring.sc,
aringacute,
arrowdown,
arrowleft,
arrowright,
arrowup,
asciicircum,
asciitilde,
asterisk,
at,
atilde,
atilde.sc,
b,
b.sc,
backslash,
bar,
beta,
braceleft,
braceleft.alt,
braceright,
braceright.alt,
bracketleft,
bracketleft.alt,
bracketright,
bracketright.alt,
breve,
brokenbar,
bullet,
c,
c.sc,
cacute,
cacute.sc,
caron,
caron.alt,
caron.sc,
ccaron,
ccaron.sc,
ccedilla,
ccedilla.sc,
ccircumflex,
cdotaccent,
cdotaccent.sc,
cedilla,
cent,
cent.oldstyle,
chi,
c.ss04,
circumflex,
c.ss05,
colon,
colon.alt,
comma,
copyright,
currency,
d,
d.sc,
dagger,
daggerdbl,
dcaron,
dcaron.sc,
dcroat,
degree,
d.ss04,
dieresis,
divide,
dollar,
dollar.oldstyle,
dotaccent,
dotbelowcomb,
dotlessi,
e,
e.sc,
eacute,
eacute.sc,
ebreve,
ecaron,
ecaron.sc,
ecircumflex,
ecircumflex.sc,
edieresis,
edieresis.sc,
edotaccent,
egrave,
egrave.sc,
eight,
eight.oldstyle,
eight.supold,
ellipsis,
emacron,
emacron.sc,
emdash,
emptyset,
endash,
eng,
eogonek,
eogonek.alt,
eogonek.enlargedalt,
eogonek.sc,
equal,
eth,
eth.alt,
eth.nordic,
eth.nordicenlarged,
eth.sc,
exclam,
exclam.alt,
exclam.sc,
exclamdbl,
exclamdown,
exclamdown.sc,
f,
f.alt,
f.sc,
f_eth,
f_eth.nordic,
f_f.alt,
f_f_t,
f_f_udieresis,
f_f_y,
f_j,
f_odieresis,
f_r,
f_t,
f_t_y,
f_thorn,
f_thorn.nordic,
f_udieresis,
f_y,
figuredash,
five,
five.oldstyle,
five.supold,
fiveeighths,
florin,
four,
four.oldstyle,
four.supold,
fraction,
g,
g.sc,
gamma,
gbreve,
gcaron,
gcaron.sc,
gcircumflex,
gcommaaccent,
gdotaccent,
gdotaccent.sc,
germandbls,
germandbls.sc,
germandbls.sc1,
grave,
gravecomb,
gravecomb.sc,
greater,
greaterequal,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
h,
h.sc,
hbar,
hcircumflex,
hookabovecomb,
hungarumlaut,
hyphen,
hyphen.cap,
i,
i.sc,
i.sc1,
iacute,
iacute.sc,
ibreve,
icircumflex,
icircumflex.sc,
idieresis,
idieresis.sc,
igrave,
igrave.sc,
i.ss04,
ij,
imacron,
imacron.sc,
infinity,
integral,
iogonek,
itilde,
j,
j.alt,
j.sc,
jcircumflex,
j.ss04,
k,
k.sc,
k.swash,
k_i,
k_i.alt,
kcommaaccent,
kgreenlandic,
l,
l.sc,
lacute,
lcaron,
lcommaaccent,
ldot,
less,
lessequal,
l.ss04,
logicaland,
logicalnot,
backslash.ss10,
longs,
slash.ss10,
lozenge,
lslash,
lslash.sc,
m,
m.sc,
macron,
mdotmacronacute,
m.ss04,
minus,
minute,
mu,
multiply,
n,
n.sc,
nacute,
nacute.sc,
napostrophe,
ncaron,
ncaron.sc,
ncommaaccent,
nine,
nine.oldstyle,
nine.supold,
notequal,
ntilde,
ntilde.sc,
numbersign,
numbersign.sc,
o,
o.sc,
oacute,
oacute.sc,
obreve,
ocircumflex,
ocircumflex.sc,
odieresis,
odieresis.sc,
oe,
oe.sc,
ogonek,
ograve,
ograve.sc,
ohorn,
ohungarumlaut,
omacron,
omacron.sc,
omega,
one,
one.oldstyle,
one.supold,
onedotenleader,
oneeighth,
onehalf,
onequarter,
onethird,
ordfeminine,
ordmasculine,
oslash,
oslash.sc,
oslashacute,
otilde,
otilde.sc,
p,
p.sc,
paragraph,
parenleft,
parenleft.alt,
parenleft.alt1,
parenleft.sc,
parenright,
parenright.alt,
parenright.alt1,
parenright.sc,
partialdiff,
percent,
percent.sc,
period,
periodcentered,
perthousand,
phi,
pi,
plus,
plusminus,
prescription,
product,
q,
q.sc,
q.superscript,
question,
question.alt,
question.sc,
questiondown,
questiondown.sc,
quotedbl,
quotedblbase,
quotedblleft,
quotedblleft.alt,
quotedblleft.sc,
quotedblright,
quotedblright.alt,
quotedblright.sc,
quoteleft,
quoteleft.alt,
quoteleft.sc,
quotereversed,
quoteright,
quoteright.alt,
quoteright.sc,
quotesinglbase,
quotesingle,
r,
r.sc,
racute,
radical,
rcaron,
rcaron.sc,
rcommaaccent,
registered,
ring,
s,
s.sc,
sacute,
sacute.sc,
scaron,
scaron.sc,
scedilla,
scedilla.sc,
scircumflex,
scommaaccent,
second,
section,
semicolon,
semicolon.alt,
seven,
seven.oldstyle,
seven.supold,
seveneighths,
sigma,
six,
six.oldstyle,
six.supold,
slash,
space,
sterling,
summation,
t,
t.sc,
t_t_r,
t_t_y,
tbar,
tcaron,
tcaron.sc,
tcommaaccent,
therefore,
theta,
thorn,
thorn.nordic,
thorn.nordicenlarged,
thorn.nordicsc,
thorn.sc,
three,
three.oldstyle,
three.supold,
threeeighths,
threequarters,
tilde,
tildecomb,
tildecomb.sc,
trademark,
two,
two.oldstyle,
two.supold,
twodotenleader,
twothirds,
u,
u.sc,
u10190,
u10191,
u10192,
u10193,
u10194,
u10195,
u10196,
u10197,
u10198,
u10199,
u1019A,
u10330,
u10331,
u10332,
u10333,
u10334,
u10335,
u10336,
u10337,
u10338,
u10339,
u1033A,
u1033B,
u1033C,
u1033D,
u1033E,
u1033F,
u10340,
u10341,
u10342,
u10343,
u10344,
u10345,
u10346,
u10347,
u10348,
u10349,
u1034A,
uacute,
uacute.sc,
ubreve,
ucircumflex,
ucircumflex.sc,
udieresis,
udieresis.sc,
ugrave,
ugrave.sc,
uhorn,
uhungarumlaut,
umacron,
umacron.sc,
underscore,
underscoredbl,
uni00A0,
uni00AD,
uni00B2,
uni00B3,
uni00B9,
uni0180,
uni0181,
uni0182,
uni0183,
uni0184,
uni0185,
uni0186,
uni0187,
uni0188,
uni0189,
uni018A,
uni018B,
uni018C,
uni018D,
uni018E,
uni018F,
uni0190,
uni0191,
uni0193,
uni0194,
uni0195,
uni0196,
uni0197,
uni0198,
uni0199,
uni019A,
uni019B,
uni019C,
uni019D,
uni019E,
uni019F,
uni01A2,
uni01A3,
uni01A4,
uni01A5,
uni01A6,
uni01A7,
uni01A8,
uni01A9,
uni01AA,
uni01AB,
uni01AC,
uni01AD,
uni01AE,
uni01B1,
uni01B2,
uni01B3,
uni01B4,
uni01B5,
uni01B6,
uni01B7,
uni01B8,
uni01B9,
uni01BA,
uni01BB,
uni01BC,
uni01BD,
uni01BE,
uni01BF,
uni01C0,
uni01C1,
uni01C2,
uni01C3,
uni01C4,
uni01C5,
uni01C6,
uni01C7,
uni01C8,
uni01C9,
uni01CA,
uni01CB,
uni01CC,
uni01CD,
uni01CE,
uni01CF,
uni01D0,
uni01D1,
uni01D2,
uni01D3,
uni01D4,
uni01D5,
uni01D6,
uni01D7,
uni01D8,
uni01D9,
uni01DA,
uni01DB,
uni01DC,
uni01DD,
uni01DE,
uni01DF,
uni01E0,
uni01E1,
uni01E2,
uni01E3,
uni01E3.sc,
uni01E3.square,
uni01E4,
uni01E5,
uni01E8,
uni01E9,
uni01EA,
uni01EB,
uni01EC,
uni01ED,
uni01EE,
uni01EF,
uni01F0,
uni01F1,
uni01F2,
uni01F3,
uni01F4,
uni01F5,
uni01F6,
uni01F7,
uni01F8,
uni01F9,
uni0200,
uni0201,
uni0202,
uni0203,
uni0204,
uni0205,
uni0206,
uni0207,
uni0208,
uni0209,
uni020A,
uni020B,
uni020C,
uni020D,
uni020E,
uni020F,
uni0210,
uni0211,
uni0212,
uni0213,
uni0214,
uni0215,
uni0216,
uni0217,
uni021A,
uni021B,
uni021C,
uni021D,
uni021E,
uni021F,
uni0220,
uni0221,
uni0222,
uni0223,
uni0224,
uni0225,
uni0226,
uni0227,
uni0228,
uni0229,
uni022A,
uni022B,
uni022C,
uni022D,
uni022E,
uni022F,
uni0230,
uni0231,
uni0232,
uni0233,
uni0233.sc,
uni0237,
uni0238,
uni0239,
uni0248,
uni0249,
uni0250,
uni0251,
uni0252,
uni0253,
uni0254,
uni0255,
uni0256,
uni0257,
uni0258,
uni0259,
uni025A,
uni025B,
uni025C,
uni025D,
uni025E,
uni025F,
uni0260,
uni0261,
uni0262,
uni0263,
uni0264,
uni0265,
uni0266,
uni0267,
uni0268,
uni0269,
uni026A,
uni026B,
uni026C,
uni026D,
uni026E,
uni026F,
uni0270,
uni0271,
uni0272,
uni0273,
uni0274,
uni0275,
uni0276,
uni0277,
uni0278,
uni0279,
uni027A,
uni027B,
uni027C,
uni027D,
uni027E,
uni027F,
uni0280,
uni0281,
uni0282,
uni0283,
uni0284,
uni0285,
uni0286,
uni0287,
uni0288,
uni0289,
uni028A,
uni028B,
uni028C,
uni028D,
uni028E,
uni028F,
uni0290,
uni0291,
uni0292,
uni0293,
uni0294,
uni0294.alt,
uni0295,
uni0296,
uni0297,
uni0298,
uni0299,
uni029A,
uni029B,
uni029C,
uni029D,
uni029E,
uni029F,
uni02A0,
uni02A1,
uni02A2,
uni02A3,
uni02A4,
uni02A5,
uni02A6,
uni02A7,
uni02A8,
uni02A9,
uni02AA,
uni02AB,
uni02AC,
uni02AD,
uni02B0,
uni02B1,
uni02B2,
uni02B3,
uni02B4,
uni02B5,
uni02B6,
uni02B7,
uni02B8,
uni02B9,
uni02BA,
uni02BB,
uni02BE,
uni02BF,
uni02C0,
uni02C1,
uni02C2,
uni02C3,
uni02C4,
uni02C5,
uni02C8,
uni02C9,
uni02CA,
uni02CB,
uni02CC,
uni02CD,
uni02CE,
uni02CF,
uni02D0,
uni02D1,
uni02D2,
uni02D3,
uni02D4,
uni02D5,
uni02D6,
uni02D7,
uni02DE,
uni02DF,
uni02E0,
uni02E1,
uni02E2,
uni02E3,
uni02E4,
uni02E5,
uni02E6,
uni02E7,
uni02E8,
uni02E9,
uni02EA,
uni02EB,
uni02EC,
uni02ED,
uni02EE,
uni02EF,
uni02F0,
uni02F1,
uni02F2,
uni02F3,
uni02F4,
uni02F5,
uni02F6,
uni02F7,
uni02F8,
uni02F9,
uni02FA,
uni02FB,
uni02FC,
uni02FD,
uni02FE,
uni02FF,
uni0302,
uni0302.sc,
uni0304,
uni0304.sc,
uni0305,
uni0306,
uni0307,
uni0308,
uni0308.sc,
uni030A,
uni030B,
uni030C,
uni030D,
uni030E,
uni030F,
uni0310,
uni0311,
uni0312,
uni0313,
uni0314,
uni0315,
uni0316,
uni0317,
uni0318,
uni0319,
uni031A,
uni031B,
uni031C,
uni031D,
uni031E,
uni031F,
uni0320,
uni0321,
uni0322,
uni0324,
uni0325,
uni0326,
uni0327,
uni0328,
uni0329,
uni032A,
uni032B,
uni032C,
uni032D,
uni032E,
uni032F,
uni0330,
uni0331,
uni0332,
uni0333,
uni0334,
uni0335,
uni0336,
uni0337,
uni0338,
uni0339,
uni033A,
uni033B,
uni033C,
uni033D,
uni033E,
uni033F,
uni0340,
uni0341,
uni0346,
uni0347,
uni0348,
uni0349,
uni034A,
uni034B,
uni034C,
uni034D,
uni034E,
uni0350,
uni0351,
uni0352,
uni0353,
uni0354,
uni0355,
uni0356,
uni0357,
uni0359,
uni035B,
uni035C,
uni035D,
uni035E,
uni035F,
uni0360,
uni0361,
uni0362,
uni0363,
uni0364,
uni0365,
uni0366,
uni0367,
uni0368,
uni0369,
uni036A,
uni036B,
uni036C,
uni036D,
uni036E,
uni036F,
uni037E,
uni10FB,
uni16A0,
uni16A0.rtl,
uni16A1,
uni16A1.rtl,
uni16A2,
uni16A2.rtl,
uni16A3,
uni16A3.rtl,
uni16A4,
uni16A4.rtl,
uni16A5,
uni16A5.rtl,
uni16A6,
uni16A6.rtl,
uni16A7,
uni16A7.rtl,
uni16A8,
uni16A8.rtl,
uni16A9,
uni16A9.rtl,
uni16AA,
uni16AA.rtl,
uni16AB,
uni16AB.rtl,
uni16AC,
uni16AC.rtl,
uni16AD,
uni16AD.rtl,
uni16AE,
uni16AE.rtl,
uni16AF,
uni16AF.rtl,
uni16B0,
uni16B0.rtl,
uni16B1,
uni16B1.rtl,
uni16B2,
uni16B2.rtl,
uni16B3,
uni16B3.rtl,
uni16B4,
uni16B4.rtl,
uni16B5,
uni16B5.rtl,
uni16B6,
uni16B6.rtl,
uni16B7,
uni16B7.rtl,
uni16B8,
uni16B8.rtl,
uni16B9,
uni16B9.rtl,
uni16BA,
uni16BA.rtl,
uni16BB,
uni16BB.rtl,
uni16BC,
uni16BC.rtl,
uni16BD,
uni16BD.rtl,
uni16BE,
uni16BE.rtl,
uni16BF,
uni16BF.rtl,
uni16C0,
uni16C0.rtl,
uni16C1,
uni16C1.rtl,
uni16C2,
uni16C2.rtl,
uni16C3,
uni16C3.rtl,
uni16C4,
uni16C4.rtl,
uni16C5,
uni16C5.rtl,
uni16C6,
uni16C6.rtl,
uni16C7,
uni16C7.rtl,
uni16C8,
uni16C8.rtl,
uni16C9,
uni16C9.rtl,
uni16CA,
uni16CA.rtl,
uni16CB,
uni16CB.rtl,
uni16CC,
uni16CC.rtl,
uni16CD,
uni16CD.rtl,
uni16CE,
uni16CE.rtl,
uni16CF,
uni16CF.rtl,
uni16D0,
uni16D0.rtl,
uni16D1,
uni16D1.rtl,
uni16D2,
uni16D2.rtl,
uni16D3,
uni16D3.rtl,
uni16D4,
uni16D4.rtl,
uni16D5,
uni16D5.rtl,
uni16D6,
uni16D6.rtl,
uni16D7,
uni16D7.rtl,
uni16D8,
uni16D8.rtl,
uni16D9,
uni16D9.rtl,
uni16DA,
uni16DA.rtl,
uni16DB,
uni16DB.rtl,
uni16DC,
uni16DC.rtl,
uni16DD,
uni16DD.rtl,
uni16DE,
uni16DE.rtl,
uni16DF,
uni16DF.rtl,
uni16E0,
uni16E0.rtl,
uni16E1,
uni16E1.rtl,
uni16E2,
uni16E2.rtl,
uni16E3,
uni16E3.rtl,
uni16E4,
uni16E4.rtl,
uni16E5,
uni16E5.rtl,
uni16E6,
uni16E6.rtl,
uni16E7,
uni16E7.rtl,
uni16E8,
uni16E8.rtl,
uni16E9,
uni16E9.rtl,
uni16EA,
uni16EA.rtl,
uni16EB,
uni16EB.rtl,
uni16EC,
uni16EC.rtl,
uni16ED,
uni16ED.rtl,
uni16EE,
uni16EE.rtl,
uni16EF,
uni16EF.rtl,
uni16F0,
uni16F0.rtl,
uni1D00,
uni1D01,
uni1D02,
uni1D03,
uni1D04,
uni1D05,
uni1D06,
uni1D07,
uni1D08,
uni1D09,
uni1D0A,
uni1D0B,
uni1D0C,
uni1D0D,
uni1D0E,
uni1D0F,
uni1D10,
uni1D11,
uni1D12,
uni1D13,
uni1D14,
uni1D15,
uni1D16,
uni1D17,
uni1D18,
uni1D19,
uni1D1A,
uni1D1B,
uni1D1C,
uni1D1D,
uni1D1E,
uni1D1F,
uni1D20,
uni1D21,
uni1D22,
uni1D23,
uni1D24,
uni1D25,
uni1D26,
uni1D27,
uni1D28,
uni1D29,
uni1D2A,
uni1D2B,
uni1D2C,
uni1D2D,
uni1D2E,
uni1D2F,
uni1D30,
uni1D31,
uni1D32,
uni1D33,
uni1D34,
uni1D35,
uni1D36,
uni1D37,
uni1D38,
uni1D39,
uni1D3A,
uni1D3B,
uni1D3C,
uni1D3D,
uni1D3E,
uni1D3F,
uni1D40,
uni1D41,
uni1D42,
uni1D43,
uni1D44,
uni1D45,
uni1D46,
uni1D47,
uni1D48,
uni1D49,
uni1D4A,
uni1D4B,
uni1D4C,
uni1D4D,
uni1D4E,
uni1D4F,
uni1D50,
uni1D51,
uni1D52,
uni1D53,
uni1D54,
uni1D55,
uni1D56,
uni1D57,
uni1D58,
uni1D59,
uni1D5A,
uni1D5B,
uni1D5C,
uni1D5D,
uni1D5E,
uni1D5F,
uni1D60,
uni1D61,
uni1D62,
uni1D63,
uni1D64,
uni1D65,
uni1D66,
uni1D67,
uni1D68,
uni1D69,
uni1D6A,
uni1D6B,
uni1D79,
uni1D9C,
uni1DA0,
uni1DBB,
uni1DCD,
uni1DCE,
uni1DCF,
uni1DD0,
uni1DD1,
uni1DD2,
uni1DD3,
uni1DD4,
uni1DD5,
uni1DD6,
uni1DD7,
uni1DD8,
uni1DD9,
uni1DDA,
uni1DDB,
uni1DDC,
uni1DDD,
uni1DDE,
uni1DDF,
uni1DE0,
uni1DE1,
uni1DE2,
uni1DE3,
uni1DE4,
uni1DE5,
uni1DE6,
uni1E00,
uni1E01,
uni1E02,
uni1E03,
uni1E04,
uni1E05,
uni1E06,
uni1E07,
uni1E08,
uni1E09,
uni1E0A,
uni1E0B,
uni1E0C,
uni1E0D,
uni1E0E,
uni1E0F,
uni1E10,
uni1E11,
uni1E12,
uni1E13,
uni1E14,
uni1E15,
uni1E16,
uni1E17,
uni1E18,
uni1E19,
uni1E1A,
uni1E1B,
uni1E1C,
uni1E1D,
uni1E1E,
uni1E1F,
uni1E20,
uni1E21,
uni1E22,
uni1E23,
uni1E24,
uni1E25,
uni1E26,
uni1E27,
uni1E28,
uni1E29,
uni1E2A,
uni1E2B,
uni1E2C,
uni1E2D,
uni1E2E,
uni1E2F,
uni1E30,
uni1E31,
uni1E32,
uni1E33,
uni1E34,
uni1E35,
uni1E36,
uni1E37,
uni1E38,
uni1E39,
uni1E3A,
uni1E3B,
uni1E3C,
uni1E3D,
uni1E3E,
uni1E3F,
uni1E40,
uni1E41,
uni1E42,
uni1E43,
uni1E44,
uni1E45,
uni1E46,
uni1E47,
uni1E48,
uni1E49,
uni1E4A,
uni1E4B,
uni1E4C,
uni1E4D,
uni1E4E,
uni1E4F,
uni1E50,
uni1E51,
uni1E52,
uni1E53,
uni1E54,
uni1E55,
uni1E56,
uni1E57,
uni1E58,
uni1E59,
uni1E5A,
uni1E5B,
uni1E5C,
uni1E5D,
uni1E5E,
uni1E5F,
uni1E60,
uni1E61,
uni1E62,
uni1E63,
uni1E64,
uni1E65,
uni1E66,
uni1E67,
uni1E68,
uni1E69,
uni1E6A,
uni1E6B,
uni1E6C,
uni1E6D,
uni1E6E,
uni1E6F,
uni1E70,
uni1E71,
uni1E72,
uni1E73,
uni1E74,
uni1E75,
uni1E76,
uni1E77,
uni1E78,
uni1E79,
uni1E7A,
uni1E7B,
uni1E7C,
uni1E7D,
uni1E7E,
uni1E7F,
uni1E86,
uni1E87,
uni1E88,
uni1E89,
uni1E8A,
uni1E8B,
uni1E8C,
uni1E8D,
uni1E8E,
uni1E8F,
uni1E90,
uni1E91,
uni1E92,
uni1E93,
uni1E94,
uni1E95,
uni1E96,
uni1E97,
uni1E98,
uni1E99,
uni1E9A,
uni1E9B,
uni1E9C,
uni1E9D,
uni1E9E,
uni1E9F,
uni1EA0,
uni1EA1,
uni1EA2,
uni1EA3,
uni1EA4,
uni1EA5,
uni1EA6,
uni1EA7,
uni1EA8,
uni1EA9,
uni1EAA,
uni1EAB,
uni1EAC,
uni1EAD,
uni1EAE,
uni1EAF,
uni1EB0,
uni1EB1,
uni1EB2,
uni1EB3,
uni1EB4,
uni1EB5,
uni1EB6,
uni1EB7,
uni1EB8,
uni1EB9,
uni1EBA,
uni1EBB,
uni1EBC,
uni1EBD,
uni1EBE,
uni1EBF,
uni1EC0,
uni1EC1,
uni1EC2,
uni1EC3,
uni1EC4,
uni1EC5,
uni1EC6,
uni1EC7,
uni1EC8,
uni1EC9,
uni1ECA,
uni1ECB,
uni1ECC,
uni1ECD,
uni1ECE,
uni1ECF,
uni1ED0,
uni1ED1,
uni1ED2,
uni1ED3,
uni1ED4,
uni1ED5,
uni1ED6,
uni1ED7,
uni1ED8,
uni1ED9,
uni1EDA,
uni1EDB,
uni1EDC,
uni1EDD,
uni1EDE,
uni1EDF,
uni1EE0,
uni1EE1,
uni1EE2,
uni1EE3,
uni1EE4,
uni1EE5,
uni1EE6,
uni1EE7,
uni1EE8,
uni1EE9,
uni1EEA,
uni1EEB,
uni1EEC,
uni1EED,
uni1EEE,
uni1EEF,
uni1EF0,
uni1EF1,
uni1EF4,
uni1EF5,
uni1EF6,
uni1EF7,
uni1EF8,
uni1EF9,
uni1EFA,
uni1EFB,
uni1EFC,
uni1EFD,
uni1EFE,
uni1EFF,
uni2000,
uni2001,
uni2002,
uni2003,
uni2004,
uni2005,
uni2006,
uni2007,
uni2008,
uni2009,
uni200A,
uni200B,
uni2010,
uni2011,
uni2015,
uni2016,
uni201F,
uni2023,
uni2027,
uni202F,
uni2031,
uni2034,
uni2035,
uni2036,
uni2037,
uni2038,
uni203B,
uni203D,
uni203E,
uni203F,
uni2040,
uni2041,
uni2042,
uni2043,
uni2045,
uni2046,
uni2047,
uni2048,
uni2049,
uni204A,
uni204B,
uni204C,
uni204D,
uni204E,
uni204F,
uni2050,
uni2051,
uni2052,
uni2056,
uni2057,
uni2058,
uni205C,
uni2070,
uni2071,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
uni207A,
uni207B,
uni207C,
uni207D,
uni207E,
uni207F,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni208A,
uni208B,
uni208C,
uni208D,
uni208E,
uni20B0,
uni20DD,
uni2108,
uni2114,
uni211F,
uni2123,
uni2125,
uni2132,
uni214E,
uni2150,
uni2151,
uni2152,
uni2155,
uni2156,
uni2157,
uni2158,
uni2159,
uni215A,
uni215F,
uni2160,
uni2161,
uni2162,
uni2163,
uni2164,
uni2165,
uni2166,
uni2167,
uni2168,
uni2169,
uni216A,
uni216B,
uni216C,
uni216D,
uni216E,
uni216F,
uni2170,
uni2171,
uni2172,
uni2173,
uni2174,
uni2175,
uni2176,
uni2177,
uni2178,
uni2179,
uni217A,
uni217B,
uni217C,
uni217D,
uni217E,
uni217F,
uni2180,
uni2181,
uni2182,
uni2183,
uni2184,
uni2185,
uni2186,
uni2187,
uni2188,
uni2189,
uni21A9,
uni2215,
uni2219,
uni2235,
uni2237,
uni223B,
uni22D7,
uni2308,
uni2309,
uni23D1,
uni23D2,
uni23D3,
uni23D4,
uni2460,
uni2461,
uni2462,
uni2463,
uni2464,
uni2465,
uni2466,
uni2467,
uni2468,
uni2469,
uni246A,
uni246B,
uni246C,
uni246D,
uni246E,
uni246F,
uni2470,
uni2471,
uni2472,
uni2473,
uni2474,
uni2475,
uni2476,
uni2477,
uni2478,
uni2479,
uni247A,
uni247B,
uni247C,
uni247D,
uni247E,
uni247F,
uni2480,
uni2481,
uni2482,
uni2483,
uni2484,
uni2485,
uni2486,
uni2487,
uni2488,
uni2489,
uni248A,
uni248B,
uni248C,
uni248D,
uni248E,
uni248F,
uni2490,
uni2491,
uni2492,
uni2493,
uni2494,
uni2495,
uni2496,
uni2497,
uni2498,
uni2499,
uni249A,
uni249B,
uni249C,
uni249D,
uni249E,
uni249F,
uni24A0,
uni24A1,
uni24A2,
uni24A3,
uni24A4,
uni24A5,
uni24A6,
uni24A7,
uni24A8,
uni24A9,
uni24AA,
uni24AB,
uni24AC,
uni24AD,
uni24AE,
uni24AF,
uni24B0,
uni24B1,
uni24B2,
uni24B3,
uni24B4,
uni24B5,
uni24B6,
uni24B7,
uni24B8,
uni24B9,
uni24BA,
uni24BB,
uni24BC,
uni24BD,
uni24BE,
uni24BF,
uni24C0,
uni24C1,
uni24C2,
uni24C3,
uni24C4,
uni24C5,
uni24C6,
uni24C7,
uni24C8,
uni24C9,
uni24CA,
uni24CB,
uni24CC,
uni24CD,
uni24CE,
uni24CF,
uni24D0,
uni24D1,
uni24D2,
uni24D3,
uni24D4,
uni24D5,
uni24D6,
uni24D7,
uni24D8,
uni24D9,
uni24DA,
uni24DB,
uni24DC,
uni24DD,
uni24DE,
uni24DF,
uni24E0,
uni24E1,
uni24E2,
uni24E3,
uni24E4,
uni24E5,
uni24E6,
uni24E7,
uni24E8,
uni24E9,
uni24EA,
uni24EB,
uni24EC,
uni24ED,
uni24EE,
uni24EF,
uni24F0,
uni24F1,
uni24F2,
uni24F3,
uni24F4,
uni24F5,
uni24F6,
uni24F7,
uni24F8,
uni24F9,
uni24FA,
uni24FB,
uni24FC,
uni24FD,
uni24FE,
uni24FF,
uni25B9,
uni25C3,
uni25CC,
uni2619,
uni261A,
uni261B,
uni261C,
uni261D,
uni261E,
uni261F,
uni271D,
uni2766,
uni2767,
uni2776,
uni2777,
uni2778,
uni2779,
uni277A,
uni277B,
uni277C,
uni277D,
uni277E,
uni277F,
uni27E6,
uni27E7,
uni27E8,
uni27E9,
uni2AFD,
uni2C71,
uni2C72,
uni2C73,
uni2C75,
uni2C76,
uni2C7D,
uni2E00,
uni2E0C,
uni2E0D,
uni2E17,
uni2E19,
uni2E1C,
uni2E1D,
uni2E20,
uni2E21,
uni2E22,
uni2E23,
uni2E24,
uni2E25,
uni2E26,
uni2E27,
uni2E28,
uni2E29,
uni2E2A,
uni2E2B,
uni2E2C,
uni2E2D,
uni2E2E,
uni2E40,
uniA722,
uniA723,
uniA724,
uniA725,
uniA726,
uniA727,
uniA728,
uniA729,
uniA730,
uniA731,
uniA732,
uniA733,
uniA734,
uniA735,
uniA736,
uniA737,
uniA738,
uniA739,
uniA73A,
uniA73B,
uniA73C,
uniA73D,
uniA73E,
uniA73F,
uniA740,
uniA741,
uniA742,
uniA743,
uniA744,
uniA745,
uniA746,
uniA747,
uniA748,
uniA749,
uniA74A,
uniA74B,
uniA74C,
uniA74D,
uniA74E,
uniA74F,
uniA750,
uniA751,
uniA752,
uniA753,
uniA754,
uniA755,
uniA756,
uniA757,
uniA758,
uniA759,
uniA75A,
uniA75B,
uniA75C,
uniA75D,
uniA75E,
uniA75F,
uniA760,
uniA761,
uniA762,
uniA763,
uniA764,
uniA765,
uniA766,
uniA767,
uniA768,
uniA769,
uniA76A,
uniA76B,
uniA76C,
uniA76D,
uniA76E,
uniA76F,
uniA770,
uniA771,
uniA772,
uniA773,
uniA774,
uniA775,
uniA776,
uniA777,
uniA778,
uniA779,
uniA77A,
uniA77A.alt,
uniA77B,
uniA77C,
uniA77D,
uniA77E,
uniA77F,
uniA780,
uniA781,
uniA782,
uniA783,
uniA784,
uniA785,
uniA786,
uniA787,
uniA7FB,
uniA7FC,
uniA7FD,
uniA7FE,
uniA7FF,
uniAB57,
uniE004,
uniE00A,
uniE010,
uniE025,
uniE02C,
uniE033,
uniE036,
uniE03A,
uniE03D,
uniE03F,
uniE040,
uniE041,
uniE042,
uniE043,
uniE044,
uniE066,
uniE076,
uniE077,
uniE08F,
uniE099,
uniE0B7,
uniE0BC,
uniE0C8,
uniE0D1,
uniE0E1,
uniE0E8,
uniE0E9,
uniE0EA,
uniE0EB,
uniE0EC,
uniE0EE,
uniE0F0,
uniE101,
uniE116,
uniE120,
uniE12A,
uniE135,
uniE137,
uniE143,
uniE150,
uniE151,
uniE152,
uniE153,
uniE154,
uniE15C,
uniE162,
uniE163,
uniE168,
uniE189,
uniE18A,
uniE18C,
uniE196,
uniE19E,
uniE1A6,
uniE1A7,
uniE1A8,
uniE1A9,
uniE1AA,
uniE1AB,
uniE1AC,
uniE1AD,
uniE1B0,
uniE1B8,
uniE1D2,
uniE1DC,
uniE208,
uniE20C,
uniE21B,
uniE22D,
uniE244,
uniE246,
uniE24F,
uniE252,
uniE253,
uniE255,
uniE257,
uniE259,
uniE25D,
uniE260,
uniE262,
uniE268,
uniE26D,
uniE282,
uniE288,
uniE2E2,
uniE2EE,
uniE309,
uniE30B,
uniE315,
uniE317,
uniE324,
uniE32B,
uniE32D,
uniE331,
uniE337,
uniE33A,
uniE33B,
uniE342,
uniE34B,
uniE34C,
uniE34D,
uniE34E,
uniE350,
uniE353,
uniE357,
uniE373,
uniE375,
uniE376,
uniE37C,
uniE384,
uniE385,
uniE39F,
uniE39F.nordic,
uniE3D3,
uniE3D4,
uniE3E5,
uniE3E6,
uniE3E7,
uniE404,
uniE40A,
uniE410,
uniE41A,
uniE41D,
uniE41F,
uniE425,
uniE42C,
uniE42D,
uniE42E,
uniE433,
uniE436,
uniE436.square,
uniE43A,
uniE43D,
uniE43F,
uniE43F.square,
uniE440,
uniE441,
uniE441.square,
uniE442,
uniE442.square,
uniE443,
uniE443.square,
uniE444,
uniE44D,
uniE466,
uniE476,
uniE477,
uniE48F,
uniE48F.nordic,
uniE491,
uniE498,
uniE499,
uniE499.alt,
uniE49F,
uniE49F.alt,
uniE4B7,
uniE4BC,
uniE4BC.alt,
uniE4C8,
uniE4CD,
uniE4CF,
uniE4D1,
uniE4E1,
uniE4E2,
uniE4E3,
uniE4E8,
uniE4E8.alt,
uniE4E9,
uniE4EA,
uniE4EA.alt,
uniE4EB,
uniE4EB.alt,
uniE4EC,
uniE4EC.alt,
uniE4EE,
uniE4F0,
uniE501,
uniE516,
uniE517,
uniE52A,
uniE535,
uniE537,
uniE543,
uniE548,
uniE54A,
uniE54B,
uniE550,
uniE551,
uniE552,
uniE553,
uniE554,
uniE562,
uniE563,
uniE568,
uniE58C,
uniE596,
uniE59E,
uniE5A4,
uniE5B0,
uniE5B1,
uniE5B8,
uniE5C5,
uniE5D2,
uniE5D7,
uniE5DC,
uniE5EE,
uniE608,
uniE60C,
uniE60E,
uniE61B,
uniE62C,
uniE62D,
uniE637,
uniE643,
uniE644,
uniE645,
uniE646,
uniE647,
uniE64F,
uniE652,
uniE653,
uniE655,
uniE657,
uniE659,
uniE65D,
uniE660,
uniE662,
uniE665,
uniE668,
uniE66D,
uniE681,
uniE682,
uniE688,
uniE68B,
uniE6A3,
uniE6E2,
uniE6EE,
uniE709,
uniE70B,
uniE715,
uniE717,
uniE724,
uniE727,
uniE72B,
uniE72C,
uniE72D,
uniE731,
uniE734,
uniE735,
uniE737,
uniE73A,
uniE73B,
uniE742,
uniE743,
uniE74B,
uniE74C,
uniE74D,
uniE74E,
uniE74F,
uniE750,
uniE753,
uniE754,
uniE757,
uniE773,
uniE775,
uniE776,
uniE77B,
uniE77C,
uniE781,
uniE784,
uniE785,
uniE79E,
uniE79F,
uniE79F.nordic,
uniE7A2,
uniE7B2,
uniE7C1,
uniE7C2,
uniE7C3,
uniE7C7,
uniE7C8,
uniE7CC,
uniE7D3,
uniE7D4,
uniE7E4,
uniE7E5,
uniE7E6,
uniE7E7,
uniE8A1,
uniE8A2,
uniE8A3,
uniE8B3,
uniE8B4,
uniE8B7,
uniE8B8,
uniE8BA,
uniE8BB,
uniE8BC,
uniE8BD,
uniE8BE,
uniE8BF,
uniE8C1,
uniE8C2,
uniE8C3,
uniE8C5,
uniE8C6,
uniE8C7,
uniE8C8,
uniE8C9,
uniE8CE,
uniE8D1,
uniE8D1.square,
uniE8D3,
uniE8D5,
uniE8D7,
uniE8DD,
uniE8DE,
uniE8DF,
uniE8E0,
uniE8E1,
uniE8E2,
uniE8E3,
uniE8E4,
uniE8E5,
uniE8E6,
uniE8E7,
uniE8E8,
uniE8E9,
uniE8EA,
uniE8EB,
uniE8EC,
uniE8ED,
uniE8F0,
uniE8F1,
uniE8F2,
uniE8F3,
uniEAD0,
uniEAD1,
uniEAD2,
uniEADA,
uniEAF0,
uniEAF1,
uniEAF2,
uniEAF3,
uniEBA0,
uniEBA1,
uniEBA2,
uniEBA3,
uniEBA4,
uniEBA5,
uniEBA6,
uniEBA7,
uniEBA8,
uniEBA9,
uniEBAA,
uniEBAB,
uniEBAC,
uniEBAD,
uniEBAE,
uniEBAF,
uniEBB0,
uniEBB1,
uniEBB2,
uniEBB3,
uniEBB4,
uniEBB5,
uniEBB6,
uniEBB7,
uniEBB8,
uniEBB9,
uniEBBA,
uniEBBB,
uniEBBD,
uniEBBE,
uniEBBF,
uniEBC0,
uniEBC1,
uniEBC2,
uniEBC3,
uniEBC4,
uniEBC5,
uniEBC6,
uniEBC7,
uniEBC8,
uniEBC9,
uniEBCA,
uniEBCB,
uniEBCD,
uniEBCE,
uniEBCF,
uniEBD0,
uniEBD1,
uniEBD2,
uniEBD3,
uniEBD4,
uniEBD5,
uniEBD6,
uniEBD7,
uniEBDA,
uniEBDB,
uniEBDC,
uniEBDD,
uniEBDE,
uniEBDF,
uniEBE0,
uniEBE1,
uniEBE2,
uniEBE3,
uniEBE4,
uniEBE5,
uniEBE6,
uniEBE7,
uniEBE8,
uniEBE9,
uniEBEA,
uniEBEB,
uniEBEC,
uniEBED,
uniEBEE,
uniEBEF,
uniEBF0,
uniEBF1,
uniEBF2,
uniEBF3,
uniEBF3.alt,
uniEBF4,
uniEBF5,
uniEBF6,
uniEBF7,
uniEBF8,
uniEBF9,
uniEBFA,
uniEBFB,
uniEBFC,
uniEBFD,
uniEBFE,
uniEBFF,
uniEEC2,
uniEEC3,
uniEEC4,
uniEEC5,
uniEEC6,
uniEEC7,
uniEEC8,
uniEEC9,
uniEECA,
uniEECB,
uniEECC,
uniEECD,
uniEECE,
uniEECF,
uniEED0,
uniEED1,
uniEED2,
uniEED3,
uniEED4,
uniEED5,
uniEED6,
uniEED7,
uniEED8,
uniEED9,
uniEEDA,
uniEEDB,
uniEEDC,
uniEEDD,
uniEEDE,
uniEEDF,
uniEEE0,
uniEEE1,
uniEEE2,
uniEEE3,
uniEEE4,
uniEEE5,
uniEEE6,
uniEEE7,
uniEEE8,
uniEEE9,
uniEEEA,
uniEEEB,
uniEEEC,
uniEEED,
uniEEEE,
uniEEEF,
uniEEF0,
uniEEF1,
uniEEF2,
uniEEF3,
uniEEF4,
uniEEF5,
uniEEF6,
uniEEF7,
uniEEF8,
uniEEF9,
uniEEFA,
uniEEFB,
uniEEFC,
uniEEFD,
uniEEFE,
uniEEFF,
uniEF0C,
uniEF11,
uniEF15,
uniEF20,
uniEF21,
uniEF22,
uniEF23,
uniEF24,
uniEF25,
uniEF26,
uniEF27,
uniEF28,
uniEF29,
uniEF2A,
uniEF2B,
uniEF2C,
uniEF2D,
uniEFA0,
uniEFA1,
uniEFA2,
uniEFA3,
uniEFA4,
uniEFA5,
uniEFA6,
uniEFA7,
uniEFA8,
uniEFA9,
uniEFAA,
uniEFAB,
uniEFAC,
uniEFAD,
uniEFAE,
uniEFD8,
uniEFD9,
uniEFDB,
uniEFDC,
uniEFDD,
uniEFDE,
uniEFDF,
uniEFE0,
uniEFE1,
uniEFE2,
uniEFE3,
uniEFE4,
uniEFE5,
uniEFE6,
uniEFE7,
uniEFE8,
uniEFE9,
uniEFEA,
uniEFEB,
uniEFEC,
uniEFED,
uniEFEE,
uniEFEF,
uniEFF0,
uniEFF1,
uniEFF2,
uniEFF3,
uniEFF4,
uniEFF5,
uniEFF6,
uniEFF7,
uniEFF8,
uniEFF9,
uniEFFA,
uniEFFB,
uniEFFC,
uniEFFD,
uniEFFE,
uniEFFF,
uniF00A,
uniF00B,
uniF00C,
uniF00D,
uniF012,
uniF013,
uniF016,
uniF017,
uniF01C,
uniF025,
uniF02A,
uniF02B,
uniF02E,
uniF02F,
uniF030,
uniF031,
uniF032,
uniF033,
uniF036,
uniF038,
uniF03A,
uniF03B,
uniF03C,
uniF03D,
uniF03E,
uniF03F,
uniF040,
uniF106,
uniF10A,
uniF10E,
uniF110,
uniF11A,
uniF126,
uniF127,
uniF128,
uniF130,
uniF135,
uniF136,
uniF13A,
uniF13E,
uniF13F,
uniF140,
uniF141,
uniF142,
uniF149,
uniF150,
uniF153,
uniF158,
uniF159,
uniF160,
uniF161,
uniF162,
uniF171,
uniF173,
uniF173.square,
uniF175,
uniF177,
uniF179,
uniF17B,
uniF17D,
uniF181,
uniF183,
uniF183.square,
uniF185,
uniF187,
uniF189,
uniF18B,
uniF18D,
uniF190,
uniF191,
uniF192,
uniF193,
uniF194,
uniF195,
uniF196,
uniF197,
uniF198,
uniF199,
uniF19A,
uniF19B,
uniF19E,
uniF1A5,
uniF1A6,
uniF1A7,
uniF1AC,
uniF1BB,
uniF1BC,
uniF1BD,
uniF1BE,
uniF1BF,
uniF1C0,
uniF1C1,
uniF1C2,
uniF1C5,
uniF1C7,
uniF1C8,
uniF1CA,
uniF1CC,
uniF1D2,
uniF1DA,
uniF1E0,
uniF1E1,
uniF1E2,
uniF1E3,
uniF1E4,
uniF1E5,
uniF1E6,
uniF1E7,
uniF1E8,
uniF1EA,
uniF1EC,
uniF1F0,
uniF1F1,
uniF1F2,
uniF1F4,
uniF1F5,
uniF1F7,
uniF1F8,
uniF1F9,
uniF1FA,
uniF1FB,
uniF1FC,
uniF200,
uniF201,
uniF202,
uniF203,
uniF204,
uniF205,
uniF206,
uniF207,
uniF208,
uniF209,
uniF214,
uniF215,
uniF217,
uniF218,
uniF219,
uniF21A,
uniF21B,
uniF21C,
uniF21D,
uniF21E,
uniF21F,
uniF220,
uniF221,
uniF222,
uniF223,
uniF224,
uniF225,
uniF226,
uniF228,
uniF229,
uniF22A,
uniF22B,
uniF22C,
uniF233,
uniF23A,
uniF23C,
uniF23D,
uniF23E,
uniF23F,
uniF2E0,
uniF2E2,
uniF2E3,
uniF2E4,
uniF2E5,
uniF2E6,
uniF2E7,
uniF2E8,
uniF2E9,
uniF2EA,
uniF2EB,
uniF2EC,
uniF2ED,
uniF2EE,
uniF2EF,
uniF2F0,
uniF2F1,
uniF2F2,
uniF2F3,
uniF2F4,
uniF2F5,
uniF2F6,
uniF2F7,
uniF2F8,
uniF2F9,
uniF2FA,
uniF2FB,
uniF2FD,
uniF2FE,
uniF2FF,
uniF4F9,
uniF4FA,
uniF4FB,
uniF4FC,
uniF4FD,
uniF4FE,
uniF4FF,
uniF6BE,
uniF6FA,
uniF700,
uniF704,
uniF705,
uniF706,
uniF707,
uniF708,
uniF709,
uniF70A,
uniF70B,
uniF70C,
uniF714,
uniF715,
uniF716,
uniF717,
uniF718,
uniF719,
uniF71A,
uniF71B,
uniF71C,
uniF730,
uniF731,
uniF732,
uniF733,
uniF734,
uniF735,
uniF736,
uniF737,
uniF738,
uniF739,
uniF761,
uniF762,
uniF763,
uniF764,
uniF765,
uniF766,
uniF767,
uniF768,
uniF769,
uniF76A,
uniF76B,
uniF76C,
uniF76D,
uniF76E,
uniF76F,
uniF770,
uniF771,
uniF772,
uniF773,
uniF774,
uniF775,
uniF776,
uniF777,
uniF778,
uniF779,
uniF77A,
uniF7A1,
uniF7A2,
uniF7B2,
uniF7B3,
uniF7B4,
uniF7B5,
uniF7B6,
uniF7BF,
uniF7E0,
uniF7E1,
uniF7E2,
uniF7E3,
uniF7E4,
uniF7E5,
uniF7E6,
uniF7E7,
uniF7E8,
uniF7E9,
uniF7EA,
uniF7EB,
uniF7EC,
uniF7ED,
uniF7EE,
uniF7EF,
uniF7F0,
uniF7F1,
uniF7F2,
uniF7F3,
uniF7F4,
uniF7F5,
uniF7F6,
uniF7F8,
uniF7F9,
uniF7FA,
uniF7FB,
uniF7FC,
uniF7FD,
uniF7FE,
uniF7FF,
uniFB00,
uniFB01,
uniFB02,
uniFB03,
uniFB04,
uniFB05,
uniFB06,
uogonek,
uring,
uring.sc,
utilde,
v,
v.sc,
v.ss04,
v.ss05,
w,
w.sc,
wacute,
wcircumflex,
wdieresis,
wgrave,
uni01BF.ss07,
x,
x.sc,
x.ss07,
x.ss04,
x.ss05,
y,
y.sc,
yacute,
yacute.sc,
ycircumflex,
ydieresis,
ydieresis.sc,
yen,
ygrave,
uni021D.ss07,
yoghflatdot,
z,
z.sc,
zacute,
zacute.sc,
zcaron,
zcaron.sc,
zdotaccent,
zdotaccent.sc,
zero,
zero.oldstyle,
zero.oldstylezero,
zero.supold,
zero.zero
);
}
);
date = "2018-06-25 13:40:03 +0000";
disablesNiceNames = 1;
familyName = Elstob;
featurePrefixes = (
{
code = "languagesystem DFLT dflt;\012languagesystem latn dflt;\012languagesystem latn ENG;\012languagesystem latn ISL;\012languagesystem latn NOR;\012languagesystem latn DAN;\012languagesystem latn SVE;\012languagesystem runr dflt;\012";
name = Languagesystems;
},
{
code = "lookup NordicSubs {\012  lookupflag 0 ;\012  sub Thorn by Thorn.nordic ;\012  sub eth by eth.nordic ;\012  sub thorn by thorn.nordic ;\012} NordicSubs ;";
name = NordicSubs;
}
);
features = (
{
automatic = 1;
code = "feature ccmp;\012feature locl;\012feature frac;\012feature ordn;\012feature onum;\012feature zero;\012feature case;\012feature hist;\012feature ss01;\012feature ss02;\012feature ss10;\012feature calt;\012";
name = aalt;
},
{
code = "sub [i j]' @CombDiacritics by [dotlessi uni0237];";
name = ccmp;
},
{
code = "script latn;\012language ISL  exclude_dflt ;\012  lookup NordicSubs ;\012language NOR  exclude_dflt ;\012  lookup NordicSubs ;\012language DAN  exclude_dflt ;\012  lookup NordicSubs ;\012language SVE  exclude_dflt ;\012  lookup NordicSubs ;";
name = locl;
},
{
code = "#script latn;\012sub one slash eight by oneeighth;\012sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub five slash eight by fiveeighths;\012sub three slash four by threequarters;\012sub one slash three by onethird;\012";
name = frac;
},
{
code = "#script latn;\012sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
code = "#script latn;\012sub zero by zero.oldstyle;\012sub one by one.oldstyle;\012sub two by two.oldstyle;\012sub three by three.oldstyle;\012sub four by four.oldstyle;\012sub five by five.oldstyle;\012sub six by six.oldstyle;\012sub seven by seven.oldstyle;\012sub eight by eight.oldstyle;\012sub nine by nine.oldstyle;\012sub dollar by dollar.oldstyle;\012sub cent by cent.oldstyle;\012";
name = onum;
},
{
code = "#script DFLT;\012sub zero by zero.zero;\012sub zero.oldstyle by zero.oldstylezero;\012";
name = zero;
},
{
code = "#script latn;\012sub acute by acute.case;\012sub acutecomb by acutecomb.case;\012sub caron by caron.case;\012sub uni030C by uni030C.case;\012sub circumflex by circumflex.case;\012sub uni0302 by uni0302.case;\012sub dieresis by dieresis.case;\012sub uni0308 by uni0308.case;\012sub grave by grave.case;\012sub gravecomb by gravecomb.case;\012sub macron by macron.case;\012sub uni0304 by uni0304.case;\012sub tilde by tilde.case;\012sub tildecomb by tildecomb.case;\012";
name = case;
},
{
code = "#script latn;\012sub s by longs;\012";
name = hist;
},
{
code = "#script latn;\012sub Thorn by Thorn.nordic ;\012sub eth by eth.nordic ;\012sub thorn by thorn.nordic ;\012";
name = ss01;
},
{
code = "#script latn;\012sub ampersand by uni204A ;\012sub W by uni01F7 ;\012sub d by uniA77A ;\012sub f by uniA77C ;\012sub g by uni1D79 ;\012sub i by dotlessi ;\012sub r by uniA783 ;\012sub s by uniA785 ;\012sub t by uniA787 ;\012sub w by uni01BF ;\012sub y by uni1E8F ;\012";
name = ss02;
},
{
code = "#script latn;\012sub backslash by backslash.ss10;\012sub slash by slash.ss10;\012";
name = ss10;
},
{
code = "sub ae by ae.square ;\012sub aeacute by aeacute.square ;\012sub uni01E3 by uni01E3.square ;";
name = ss11;
},
{
code = "sub [ eogonek eogonek.alt g gdotaccent ] j' by j.alt ;\012sub f' @HighDiacritics by f.alt ;\012script latn;\012language ENG;\012sub @LowerCase_f longs' by s ;\012ignore sub longs' @AllLowerCaseexclf ;\012sub longs' by s ;";
name = calt;
},
{
code = "sub f f i by uniFB03;\012sub f f l by uniFB04;\012sub f f u by f_f_u;\012sub longs longs i by longs_longs_i;\012sub longs longs l by longs_longs_l;\012sub f f by uniFB00;\012sub f i by uniFB01;\012sub f l by uniFB02;\012sub f eth by f_eth;\012sub f eth.nordic by f_eth.nordic;\012sub f thorn by f_thorn;\012sub f thorn.nordic by f_thorn.nordic;\012sub f u by f_u;\012sub f udieresis by f_udieresis;\012sub f odieresis by f_odieresis;\012sub f j by f_j;\012sub longs b by longs_b;\012sub longs i by longs_i;\012sub longs t by uniFB05;\012sub longs h by longs_h;\012sub longs k by longs_k;\012sub longs longs by longs_longs;\012sub longs l by longs_l;";
name = liga;
},
{
code = "sub s t by uniFB06;\012sub c t by c_t;";
name = dlig;
},
{
automatic = 1;
code = "sub longs longs i by longs_longs_i;\012sub longs longs l by longs_longs_l;\012sub longs b by longs_b;\012sub longs h by longs_h;\012sub longs i by longs_i;\012sub longs k by longs_k;\012sub longs l by longs_l;\012sub longs longs by longs_longs;\012";
name = hlig;
}
);
fontMaster = (
{
ascender = 1485;
capHeight = 1363;
custom = Italic;
customParameters = (
{
name = typoAscender;
value = 1485;
},
{
name = typoDescender;
value = -563;
},
{
name = typoLineGap;
value = 900;
},
{
name = winAscent;
value = 2070;
},
{
name = winDescent;
value = 880;
},
{
name = hheaAscender;
value = 1485;
},
{
name = hheaDescender;
value = -563;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 10 values pushed */\012133 117 101 85 73 0 53 0 8 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 18 values pushed */\012122 8 106 8 90 8 78 6 66 6 58 4 42 8 33 5 8 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 18 values pushed */\012130 6 114 6 98 6 84 4 72 4 62 2 50 6 38 2 8 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 15 \012WS[ ]	/* WriteStore */\012NPUSHW[ ]	/* 10 values pushed */\0127872 6848 5824 5056 4288 3776 2752 2176 8 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 23 \012WS[ ]	/* WriteStore */\012NPUSHW[ ]	/* 10 values pushed */\01264 64 64 64 64 64 64 128 8 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\012124 6 108 6 92 6 80 4 68 4 60 2 44 6 36 2 8 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 12 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 12 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 12 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
165,
165,
56,
56,
129,
936,
-18,
966,
-18,
50,
50,
50,
50,
1385,
-27,
1333,
850,
-24,
-430,
1385,
-27,
1333,
866,
-24,
-430,
168,
168,
61,
61,
932,
-18,
950,
-18,
168,
168,
61,
61,
936,
936,
-16,
-18,
936,
950,
-16,
-18,
107,
107,
65,
65,
1416,
1035,
508,
190,
1416,
1035,
508,
190,
114,
114,
89,
89,
1358,
-27,
1484,
852,
-27,
-559,
1385,
-27,
1484,
852,
-27,
-559,
100,
100,
42,
42,
576,
-285,
620,
279,
-240,
-438,
586,
-290,
620,
295,
-249,
-548,
107,
107,
65,
65,
1343,
523,
1416,
1035,
508,
190,
1406,
523,
1416,
1035,
508,
190
);
}
);
descender = -563;
id = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
italicAngle = 10;
userData = {
GSOffsetHorizontal = -14;
GSOffsetVertical = -5;
};
weight = Light;
weightValue = 300;
widthValue = 5;
xHeight = 856;
},
{
ascender = 1485;
capHeight = 1363;
custom = Italic;
customParameters = (
{
name = typoAscender;
value = 1485;
},
{
name = typoDescender;
value = -563;
},
{
name = typoLineGap;
value = 900;
},
{
name = winAscent;
value = 2070;
},
{
name = winDescent;
value = 880;
},
{
name = hheaAscender;
value = 1485;
},
{
name = hheaDescender;
value = -563;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\01256 40 0 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01245 8 29 8 18 7 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01253 6 37 6 25 2 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0122944 1920 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 256 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01247 6 31 6 23 2 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 8 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 8 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 8 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
244,
244,
47,
47,
106,
36,
183,
934,
-19,
977,
-19,
180,
180,
108,
108,
1358,
-27,
1487,
852,
-27,
-559,
1384,
-27,
1487,
852,
-27,
-559,
50,
50,
50,
50,
1352,
520,
1417,
1038,
520,
203,
1352,
520,
1417,
1055,
516,
203
);
}
);
descender = -563;
id = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
italicAngle = 10;
userData = {
GSOffsetHorizontal = 25;
GSOffsetVertical = 10;
};
weight = Bold;
weightValue = 700;
widthValue = 5;
xHeight = 856;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2018-08-15 18:57:35 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"932 -132 LINE",
"932 1508 LINE",
"68 1508 LINE",
"68 -132 LINE"
);
},
{
closed = 1;
nodes = (
"380 -31 OFFCURVE",
"326 2 OFFCURVE",
"296 56 OFFCURVE",
"296 86 QCURVE SMOOTH",
"296 141 OFFCURVE",
"362 213 OFFCURVE",
"414 213 QCURVE SMOOTH",
"450 213 OFFCURVE",
"505 177 OFFCURVE",
"534 119 OFFCURVE",
"534 86 QCURVE SMOOTH",
"534 31 OFFCURVE",
"464 -31 OFFCURVE",
"414 -31 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"310 562 OFFCURVE",
"310 637 QCURVE SMOOTH",
"310 727 OFFCURVE",
"424 788 QCURVE SMOOTH",
"530 844 LINE SMOOTH",
"646 906 OFFCURVE",
"646 995 QCURVE SMOOTH",
"646 1194 OFFCURVE",
"354 1194 QCURVE SMOOTH",
"286 1194 OFFCURVE",
"286 1280 QCURVE SMOOTH",
"286 1362 OFFCURVE",
"370 1362 QCURVE SMOOTH",
"500 1362 OFFCURVE",
"614 1231 QCURVE SMOOTH",
"732 1097 OFFCURVE",
"732 930 QCURVE SMOOTH",
"732 784 OFFCURVE",
"650 741 QCURVE SMOOTH",
"484 653 LINE SMOOTH",
"410 612 OFFCURVE",
"410 563 QCURVE SMOOTH",
"410 509 OFFCURVE",
"430 438 QCURVE",
"386 426 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
6 1 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 3 7 1 5 3 5 99 0 1 1 4 95 0 4 4 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
6 1 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 4 0 1 0 4 1 105 0 3 5 5 3 89 0 3 3 5 95 7 1 5 3 5 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
44 44 1 0 44 47 44 47 46 45 41 39 33 31 25 23 0 27 1 27 8 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"932 -132 LINE",
"932 1508 LINE",
"68 1508 LINE",
"68 -132 LINE"
);
},
{
closed = 1;
nodes = (
"380 -31 OFFCURVE",
"326 2 OFFCURVE",
"296 56 OFFCURVE",
"296 86 QCURVE SMOOTH",
"296 141 OFFCURVE",
"362 213 OFFCURVE",
"414 213 QCURVE SMOOTH",
"450 213 OFFCURVE",
"505 177 OFFCURVE",
"534 119 OFFCURVE",
"534 86 QCURVE SMOOTH",
"534 31 OFFCURVE",
"464 -31 OFFCURVE",
"414 -31 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"310 562 OFFCURVE",
"310 637 QCURVE SMOOTH",
"310 727 OFFCURVE",
"424 788 QCURVE SMOOTH",
"530 844 LINE SMOOTH",
"646 906 OFFCURVE",
"646 995 QCURVE SMOOTH",
"646 1194 OFFCURVE",
"354 1194 QCURVE SMOOTH",
"286 1194 OFFCURVE",
"286 1280 QCURVE SMOOTH",
"286 1362 OFFCURVE",
"370 1362 QCURVE SMOOTH",
"500 1362 OFFCURVE",
"614 1231 QCURVE SMOOTH",
"732 1097 OFFCURVE",
"732 930 QCURVE SMOOTH",
"732 784 OFFCURVE",
"650 741 QCURVE SMOOTH",
"484 653 LINE SMOOTH",
"410 612 OFFCURVE",
"410 563 QCURVE SMOOTH",
"410 509 OFFCURVE",
"430 438 QCURVE",
"386 426 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
6 1 0 0 2 3 0 2 105 0 3 7 1 5 3 5 99 0 1 1 4 95 0 4 4 33 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 4 0 1 0 4 1 105 6 1 0 0 2 3 0 2 105 0 3 5 5 3 89 0 3 3 5 95 7 1 5 3 5 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
44 44 1 0 44 47 44 47 46 45 41 39 33 31 25 23 0 27 1 27 8 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = .notdef;
},
{
glyphname = uni0000;
lastChange = "2018-08-15 18:57:56 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"286 1194 OFFCURVE",
"286 1280 QCURVE SMOOTH",
"286 1362 OFFCURVE",
"370 1362 QCURVE SMOOTH",
"500 1362 OFFCURVE",
"614 1231 QCURVE SMOOTH",
"732 1097 OFFCURVE",
"732 930 QCURVE SMOOTH",
"732 784 OFFCURVE",
"650 741 QCURVE SMOOTH",
"484 653 LINE SMOOTH",
"410 612 OFFCURVE",
"410 563 QCURVE SMOOTH",
"410 509 OFFCURVE",
"430 438 QCURVE",
"386 426 LINE",
"310 562 OFFCURVE",
"310 637 QCURVE SMOOTH",
"310 727 OFFCURVE",
"424 788 QCURVE SMOOTH",
"530 844 LINE SMOOTH",
"646 906 OFFCURVE",
"646 995 QCURVE SMOOTH",
"646 1194 OFFCURVE",
"354 1194 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"534 31 OFFCURVE",
"464 -31 OFFCURVE",
"414 -31 QCURVE SMOOTH",
"380 -31 OFFCURVE",
"326 2 OFFCURVE",
"296 56 OFFCURVE",
"296 86 QCURVE SMOOTH",
"296 141 OFFCURVE",
"362 213 OFFCURVE",
"414 213 QCURVE SMOOTH",
"450 213 OFFCURVE",
"505 177 OFFCURVE",
"534 119 OFFCURVE",
"534 86 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"932 -132 LINE",
"932 1508 LINE",
"68 1508 LINE",
"68 -132 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
6 1 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 3 7 1 5 3 5 99 0 1 1 4 95 0 4 4 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
6 1 0 1 2 1 0 2 128 0 2 3 1 2 3 126 0 4 0 1 0 4 1 105 0 3 5 5 3 89 0 3 3 5 95 7 1 5 3 5 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
44 44 1 0 44 47 44 47 46 45 41 39 33 31 25 23 0 27 1 27 8 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"286 1194 OFFCURVE",
"286 1280 QCURVE SMOOTH",
"286 1362 OFFCURVE",
"370 1362 QCURVE SMOOTH",
"500 1362 OFFCURVE",
"614 1231 QCURVE SMOOTH",
"732 1097 OFFCURVE",
"732 930 QCURVE SMOOTH",
"732 784 OFFCURVE",
"650 741 QCURVE SMOOTH",
"484 653 LINE SMOOTH",
"410 612 OFFCURVE",
"410 563 QCURVE SMOOTH",
"410 509 OFFCURVE",
"430 438 QCURVE",
"386 426 LINE",
"310 562 OFFCURVE",
"310 637 QCURVE SMOOTH",
"310 727 OFFCURVE",
"424 788 QCURVE SMOOTH",
"530 844 LINE SMOOTH",
"646 906 OFFCURVE",
"646 995 QCURVE SMOOTH",
"646 1194 OFFCURVE",
"354 1194 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"534 31 OFFCURVE",
"464 -31 OFFCURVE",
"414 -31 QCURVE SMOOTH",
"380 -31 OFFCURVE",
"326 2 OFFCURVE",
"296 56 OFFCURVE",
"296 86 QCURVE SMOOTH",
"296 141 OFFCURVE",
"362 213 OFFCURVE",
"414 213 QCURVE SMOOTH",
"450 213 OFFCURVE",
"505 177 OFFCURVE",
"534 119 OFFCURVE",
"534 86 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"932 -132 LINE",
"932 1508 LINE",
"68 1508 LINE",
"68 -132 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
6 1 0 0 2 3 0 2 105 0 3 7 1 5 3 5 99 0 1 1 4 95 0 4 4 33 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 4 0 1 0 4 1 105 6 1 0 0 2 3 0 2 105 0 3 5 5 3 89 0 3 3 5 95 7 1 5 3 5 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
44 44 1 0 44 47 44 47 46 45 41 39 33 31 25 23 0 27 1 27 8 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni0000;
},
{
glyphname = uni000D;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 559;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 557;
}
);
note = uni000D;
},
{
glyphname = A;
lastChange = "2018-08-17 18:04:06 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{555, 0}";
},
{
name = ogonek;
position = "{1060, 10}";
},
{
name = top;
position = "{795, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"951 1179 LINE SMOOTH",
"953 1249 OFFCURVE",
"956 1297 OFFCURVE",
"959 1322 CURVE SMOOTH",
"963 1347 OFFCURVE",
"964 1362 OFFCURVE",
"964 1367 CURVE SMOOTH",
"963 1379 OFFCURVE",
"957 1385 OFFCURVE",
"947 1385 CURVE SMOOTH",
"936 1385 OFFCURVE",
"916 1376 OFFCURVE",
"886 1359 CURVE SMOOTH",
"856 1341 OFFCURVE",
"809 1319 OFFCURVE",
"746 1293 CURVE SMOOTH",
"730 1286 OFFCURVE",
"722 1280 OFFCURVE",
"723 1273 CURVE SMOOTH",
"723 1268 OFFCURVE",
"727 1262 OFFCURVE",
"732 1255 CURVE SMOOTH",
"738 1248 OFFCURVE",
"742 1242 OFFCURVE",
"742 1237 CURVE SMOOTH",
"743 1227 OFFCURVE",
"739 1214 OFFCURVE",
"729 1199 CURVE SMOOTH",
"143 201 LINE SMOOTH",
"73 84 OFFCURVE",
"20 69 OFFCURVE",
"-82 69 CURVE SMOOTH",
"-100 69 OFFCURVE",
"-116 -7 OFFCURVE",
"-95 -7 CURVE",
"-38 -2 OFFCURVE",
"33 0 OFFCURVE",
"117 0 CURVE SMOOTH",
"202 0 OFFCURVE",
"273 -2 OFFCURVE",
"331 -7 CURVE",
"349 -7 OFFCURVE",
"365 69 OFFCURVE",
"345 69 CURVE SMOOTH",
"257 69 OFFCURVE",
"212 87 OFFCURVE",
"208 124 CURVE SMOOTH",
"207 139 OFFCURVE",
"213 159 OFFCURVE",
"226 182 CURVE SMOOTH",
"408 506 LINE SMOOTH",
"418 523 OFFCURVE",
"433 531 OFFCURVE",
"454 531 CURVE SMOOTH",
"764 531 LINE SMOOTH",
"785 531 OFFCURVE",
"796 519 OFFCURVE",
"795 496 CURVE SMOOTH",
"785 186 LINE SMOOTH",
"782 111 OFFCURVE",
"759 69 OFFCURVE",
"651 69 CURVE SMOOTH",
"632 69 OFFCURVE",
"616 -7 OFFCURVE",
"636 -7 CURVE",
"693 -2 OFFCURVE",
"764 0 OFFCURVE",
"847 0 CURVE SMOOTH",
"931 0 OFFCURVE",
"1002 -2 OFFCURVE",
"1061 -7 CURVE",
"1079 -7 OFFCURVE",
"1096 69 OFFCURVE",
"1074 69 CURVE SMOOTH",
"978 69 OFFCURVE",
"927 101 OFFCURVE",
"922 165 CURVE SMOOTH",
"921 174 OFFCURVE",
"921 181 OFFCURVE",
"921 186 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"797 610 OFFCURVE",
"786 600 OFFCURVE",
"765 600 CURVE SMOOTH",
"490 600 LINE SMOOTH",
"477 600 OFFCURVE",
"471 603 OFFCURVE",
"470 610 CURVE SMOOTH",
"469 616 OFFCURVE",
"471 622 OFFCURVE",
"476 629 CURVE",
"783 1159 LINE SMOOTH",
"786 1165 OFFCURVE",
"792 1168 OFFCURVE",
"800 1168 CURVE SMOOTH",
"808 1168 OFFCURVE",
"812 1165 OFFCURVE",
"813 1159 CURVE",
"797 629 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"848 531 LINE",
"833 600 LINE",
"418 600 LINE",
"408 531 LINE"
);
},
{
closed = 1;
nodes = (
"747 1168 LINE",
"772 1168 LINE",
"829 186 LINE SMOOTH",
"833 111 OFFCURVE",
"814 69 OFFCURVE",
"706 69 CURVE",
"706 0 LINE",
"1129 0 LINE",
"1129 69 LINE",
"1032 69 OFFCURVE",
"970 98 OFFCURVE",
"965 186 CURVE SMOOTH",
"908 1179 LINE SMOOTH",
"905 1224 OFFCURVE",
"905 1316 OFFCURVE",
"905 1367 CURVE",
"878 1385 LINE",
"804 1342 OFFCURVE",
"754 1314 OFFCURVE",
"672 1284 CURVE",
"674 1263 LINE",
"686 1256 OFFCURVE",
"696 1245 OFFCURVE",
"700 1229 CURVE",
"186 201 LINE SMOOTH",
"127 83 OFFCURVE",
"75 69 OFFCURVE",
"-27 69 CURVE",
"-27 -1 LINE",
"400 -1 LINE",
"400 69 LINE",
"294 69 OFFCURVE",
"228 93 OFFCURVE",
"271 182 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
63 1 8 7 0 1 0 3 2 76 36 11 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 8 0 3 0 8 3 103 0 7 7 98 77 6 4 2 3 0 0 1 97 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 8 0 3 0 8 3 103 6 4 2 3 0 5 1 1 0 1 101 0 7 7 98 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 7 8 7 133 0 8 0 3 0 8 3 103 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
61 44 36 21 21 52 36 21 19 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1230;
},
{
anchors = (
{
name = bottom;
position = "{475, 0}";
},
{
name = ogonek;
position = "{941, 10}";
},
{
name = top;
position = "{715, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"961 1151 LINE SMOOTH",
"959 1198 OFFCURVE",
"966 1312 OFFCURVE",
"962 1335 QCURVE SMOOTH",
"953 1386 OFFCURVE",
"911 1386 QCURVE SMOOTH",
"885 1386 OFFCURVE",
"784 1328 OFFCURVE",
"718 1303 QCURVE SMOOTH",
"656 1279 OFFCURVE",
"659 1260 QCURVE SMOOTH",
"661 1249 OFFCURVE",
"683 1225 OFFCURVE",
"687 1204 OFFCURVE",
"681 1192 QCURVE SMOOTH",
"196 217 LINE SMOOTH",
"166 157 OFFCURVE",
"83 86 OFFCURVE",
"-26 86 QCURVE SMOOTH",
"-42 86 OFFCURVE",
"-45 18 OFFCURVE",
"-41 -8 OFFCURVE",
"-33 -8 QCURVE",
"43 0 OFFCURVE",
"350 0 OFFCURVE",
"428 -8 QCURVE",
"441 -8 OFFCURVE",
"447 49 OFFCURVE",
"441 86 OFFCURVE",
"433 86 QCURVE SMOOTH",
"312 86 OFFCURVE",
"302 141 QCURVE",
"298 162 OFFCURVE",
"316 201 QCURVE SMOOTH",
"453 496 LINE SMOOTH",
"465 522 OFFCURVE",
"496 522 QCURVE SMOOTH",
"744 522 LINE",
"785 524 OFFCURVE",
"787 485 QCURVE SMOOTH",
"800 203 LINE SMOOTH",
"803 129 OFFCURVE",
"754 86 OFFCURVE",
"693 86 QCURVE SMOOTH",
"683 86 OFFCURVE",
"674 27 OFFCURVE",
"680 -8 OFFCURVE",
"688 -8 QCURVE",
"762 0 OFFCURVE",
"1071 0 OFFCURVE",
"1149 -8 QCURVE",
"1161 -8 OFFCURVE",
"1170 47 OFFCURVE",
"1164 86 OFFCURVE",
"1156 86 QCURVE SMOOTH",
"1028 86 OFFCURVE",
"1013 172 QCURVE SMOOTH",
"1012 189 OFFCURVE",
"1011 203 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"780 606 OFFCURVE",
"742 606 QCURVE SMOOTH",
"539 606 LINE SMOOTH",
"521 606 OFFCURVE",
"515 629 OFFCURVE",
"521 637 QCURVE",
"730 1065 LINE SMOOTH",
"736 1077 OFFCURVE",
"744 1077 QCURVE SMOOTH",
"751 1077 OFFCURVE",
"752 1063 QCURVE SMOOTH",
"777 649 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"848 531 LINE",
"833 600 LINE",
"418 600 LINE",
"408 531 LINE"
);
},
{
closed = 1;
nodes = (
"780 1168 LINE",
"746 1168 LINE",
"803 186 LINE SMOOTH",
"807 111 OFFCURVE",
"788 69 OFFCURVE",
"680 69 CURVE",
"680 0 LINE",
"1177 0 LINE",
"1177 69 LINE",
"1080 69 OFFCURVE",
"1018 98 OFFCURVE",
"1013 186 CURVE SMOOTH",
"956 1179 LINE SMOOTH",
"953 1224 OFFCURVE",
"953 1316 OFFCURVE",
"953 1367 CURVE",
"926 1385 LINE",
"852 1345 OFFCURVE",
"754 1307 OFFCURVE",
"672 1284 CURVE",
"674 1243 LINE",
"684 1237 OFFCURVE",
"690 1222 OFFCURVE",
"690 1209 CURVE",
"186 201 LINE SMOOTH",
"127 83 OFFCURVE",
"75 69 OFFCURVE",
"-27 69 CURVE",
"-27 -1 LINE",
"433 -1 LINE",
"433 69 LINE",
"327 69 OFFCURVE",
"261 93 OFFCURVE",
"304 182 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
62 1 8 7 0 1 0 3 2 76 36 11 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 8 0 3 0 8 3 103 0 7 7 37 77 6 4 2 3 0 0 1 97 5 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 8 0 3 0 8 3 103 6 4 2 3 0 5 1 1 0 1 101 0 7 7 37 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 7 8 7 133 0 8 0 3 0 8 3 103 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
61 43 36 21 21 52 36 21 19 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1278;
}
);
leftKerningGroup = A;
note = A;
rightKerningGroup = A;
unicode = 0041;
},
{
glyphname = AE;
lastChange = "2018-08-17 18:04:21 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{798, 0}";
},
{
name = top;
position = "{1398, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1941 344 LINE SMOOTH",
"1945 361 OFFCURVE",
"1864 363 OFFCURVE",
"1859 344 CURVE",
"1823 166 OFFCURVE",
"1721 74 OFFCURVE",
"1554 69 CURVE SMOOTH",
"1326 62 LINE",
"1314 62 LINE SMOOTH",
"1238 62 OFFCURVE",
"1198 95 OFFCURVE",
"1192 161 CURVE SMOOTH",
"1189 191 OFFCURVE",
"1194 237 OFFCURVE",
"1207 300 CURVE SMOOTH",
"1263 583 LINE SMOOTH",
"1266 599 OFFCURVE",
"1277 607 OFFCURVE",
"1295 607 CURVE SMOOTH",
"1515 607 LINE SMOOTH",
"1576 607 OFFCURVE",
"1607 596 OFFCURVE",
"1609 575 CURVE SMOOTH",
"1609 570 OFFCURVE",
"1607 554 OFFCURVE",
"1602 527 CURVE SMOOTH",
"1584 433 LINE SMOOTH",
"1583 425 OFFCURVE",
"1594 421 OFFCURVE",
"1616 421 CURVE SMOOTH",
"1639 421 OFFCURVE",
"1651 426 OFFCURVE",
"1652 436 CURVE SMOOTH",
"1667 557 OFFCURVE",
"1695 699 OFFCURVE",
"1738 864 CURVE",
"1739 874 OFFCURVE",
"1727 879 OFFCURVE",
"1703 879 CURVE SMOOTH",
"1679 879 OFFCURVE",
"1666 874 OFFCURVE",
"1665 864 CURVE SMOOTH",
"1646 764 LINE SMOOTH",
"1632 684 OFFCURVE",
"1615 676 OFFCURVE",
"1530 676 CURVE SMOOTH",
"1309 676 LINE SMOOTH",
"1295 676 OFFCURVE",
"1288 681 OFFCURVE",
"1287 690 CURVE SMOOTH",
"1286 695 OFFCURVE",
"1287 701 OFFCURVE",
"1288 708 CURVE SMOOTH",
"1399 1267 LINE SMOOTH",
"1402 1282 OFFCURVE",
"1410 1289 OFFCURVE",
"1424 1289 CURVE SMOOTH",
"1702 1283 LINE SMOOTH",
"1835 1280 OFFCURVE",
"1906 1225 OFFCURVE",
"1915 1117 CURVE SMOOTH",
"1918 1091 OFFCURVE",
"1915 1054 OFFCURVE",
"1907 1006 CURVE SMOOTH",
"1905 997 OFFCURVE",
"1918 992 OFFCURVE",
"1945 992 CURVE SMOOTH",
"1973 992 OFFCURVE",
"1987 997 OFFCURVE",
"1989 1006 CURVE SMOOTH",
"2054 1325 LINE SMOOTH",
"2055 1330 OFFCURVE",
"2055 1334 OFFCURVE",
"2055 1338 CURVE SMOOTH",
"2054 1351 OFFCURVE",
"2033 1358 OFFCURVE",
"1991 1358 CURVE SMOOTH",
"1740 1355 OFFCURVE",
"1524 1354 OFFCURVE",
"1343 1354 CURVE SMOOTH",
"1270 1354 OFFCURVE",
"1182 1355 OFFCURVE",
"1078 1358 CURVE SMOOTH",
"1058 1358 OFFCURVE",
"1041 1282 OFFCURVE",
"1065 1282 CURVE SMOOTH",
"1114 1282 OFFCURVE",
"1140 1273 OFFCURVE",
"1141 1254 CURVE SMOOTH",
"1142 1241 OFFCURVE",
"1133 1222 OFFCURVE",
"1113 1196 CURVE SMOOTH",
"349 195 LINE SMOOTH",
"271 94 OFFCURVE",
"244 69 OFFCURVE",
"133 69 CURVE SMOOTH",
"114 69 OFFCURVE",
"98 -7 OFFCURVE",
"119 -7 CURVE",
"181 -2 OFFCURVE",
"252 0 OFFCURVE",
"332 0 CURVE SMOOTH",
"412 0 OFFCURVE",
"481 -2 OFFCURVE",
"540 -7 CURVE",
"558 -7 OFFCURVE",
"574 69 OFFCURVE",
"553 69 CURVE SMOOTH",
"447 69 OFFCURVE",
"403 120 OFFCURVE",
"436 168 CURVE SMOOTH",
"731 590 LINE SMOOTH",
"739 601 OFFCURVE",
"751 607 OFFCURVE",
"768 607 CURVE SMOOTH",
"1096 607 LINE SMOOTH",
"1111 607 OFFCURVE",
"1119 603 OFFCURVE",
"1120 595 CURVE SMOOTH",
"1121 589 OFFCURVE",
"1120 581 OFFCURVE",
"1117 570 CURVE SMOOTH",
"1039 177 LINE SMOOTH",
"1020 86 OFFCURVE",
"974 69 OFFCURVE",
"846 69 CURVE SMOOTH",
"828 69 OFFCURVE",
"813 -7 OFFCURVE",
"833 -7 CURVE",
"909 -2 OFFCURVE",
"997 0 OFFCURVE",
"1097 0 CURVE SMOOTH",
"1277 0 OFFCURVE",
"1503 -2 OFFCURVE",
"1775 -7 CURVE SMOOTH",
"1850 -7 LINE SMOOTH",
"1863 -7 OFFCURVE",
"1872 2 OFFCURVE",
"1875 19 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1141 684 OFFCURVE",
"1131 676 OFFCURVE",
"1114 676 CURVE SMOOTH",
"827 676 LINE",
"808 675 OFFCURVE",
"809 687 OFFCURVE",
"817 698 CURVE SMOOTH",
"1197 1203 LINE SMOOTH",
"1227 1243 OFFCURVE",
"1250 1232 OFFCURVE",
"1241 1196 CURVE",
"1144 700 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"421 0 LINE",
"421 69 LINE",
"318 69 OFFCURVE",
"272 90 OFFCURVE",
"272 131 CURVE SMOOTH",
"272 138 OFFCURVE",
"274 162 OFFCURVE",
"289 182 CURVE SMOOTH",
"597 612 LINE",
"961 612 LINE",
"883 166 LINE SMOOTH",
"870 94 OFFCURVE",
"802 58 OFFCURVE",
"667 58 CURVE",
"667 0 LINE",
"1690 0 LINE",
"1751 342 LINE",
"1686 342 LINE",
"1676 290 OFFCURVE",
"1665 254 OFFCURVE",
"1649 222 CURVE SMOOTH",
"1599 119 OFFCURVE",
"1510 65 OFFCURVE",
"1377 61 CURVE SMOOTH",
"1141 54 LINE",
"1059 54 OFFCURVE",
"1015 114 OFFCURVE",
"1015 199 CURVE SMOOTH",
"1015 216 OFFCURVE",
"1016 234 OFFCURVE",
"1020 254 CURVE SMOOTH",
"1083 612 LINE",
"1317 612 LINE SMOOTH",
"1418 612 OFFCURVE",
"1427 577 OFFCURVE",
"1417 517 CURVE SMOOTH",
"1401 425 LINE",
"1460 425 LINE",
"1539 872 LINE",
"1480 872 LINE",
"1465 788 LINE SMOOTH",
"1451 709 OFFCURVE",
"1432 671 OFFCURVE",
"1328 671 CURVE SMOOTH",
"1094 671 LINE",
"1204 1297 LINE",
"1528 1290 LINE SMOOTH",
"1669 1287 OFFCURVE",
"1745 1224 OFFCURVE",
"1745 1096 CURVE SMOOTH",
"1745 1070 OFFCURVE",
"1742 1041 OFFCURVE",
"1736 1008 CURVE",
"1801 1008 LINE",
"1863 1358 LINE",
"871 1358 LINE",
"871 1300 LINE",
"933 1300 OFFCURVE",
"955 1293 OFFCURVE",
"979 1264 CURVE",
"205 201 LINE SMOOTH",
"130 99 OFFCURVE",
"108 69 OFFCURVE",
"-24 69 CURVE",
"-24 0 LINE"
);
},
{
closed = 1;
nodes = (
"1046 1237 LINE",
"1071 1237 LINE",
"972 671 LINE",
"640 671 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
56 1 6 7 1 76 34 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 12 6 9 6 12 114 13 1 9 10 1 2 1 9 2 103 8 1 6 6 7 95 0 7 7 92 77 11 5 3 3 1 1 0 97 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 12 6 9 6 12 114 13 1 9 10 1 2 1 9 2 103 11 5 3 3 1 4 1 0 1 0 101 8 1 6 6 7 95 0 7 7 92 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 12 6 9 6 12 9 128 13 1 9 10 1 2 1 9 2 103 11 5 3 3 1 4 1 0 1 0 101 8 1 6 6 7 95 0 7 7 92 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 12 6 9 6 12 9 128 0 7 8 1 6 12 7 6 105 13 1 9 10 1 2 1 9 2 103 11 5 3 3 1 0 0 1 89 11 5 3 3 1 1 0 97 4 1 0 1 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 12 6 9 6 12 9 128 0 7 8 1 6 12 7 6 105 13 1 9 10 1 2 1 9 2 103 11 5 3 3 1 0 4 0 1 4 105 11 5 3 3 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
119 116 112 111 103 99 94 91 76 74 58 99 22 36 21 21 54 35 97 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1745;
},
{
anchors = (
{
name = bottom;
position = "{1007, 0}";
},
{
name = top;
position = "{1477, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"449 0 LINE",
"449 69 LINE",
"346 69 OFFCURVE",
"300 90 OFFCURVE",
"300 131 CURVE SMOOTH",
"300 137 OFFCURVE",
"302 162 OFFCURVE",
"317 182 CURVE SMOOTH",
"628 594 LINE",
"1005 594 LINE",
"936 203 LINE SMOOTH",
"922 125 OFFCURVE",
"860 86 OFFCURVE",
"737 86 CURVE",
"737 0 LINE",
"1848 0 LINE",
"1911 354 LINE",
"1808 354 LINE",
"1798 299 OFFCURVE",
"1784 260 OFFCURVE",
"1767 227 CURVE SMOOTH",
"1720 137 OFFCURVE",
"1643 92 OFFCURVE",
"1538 90 CURVE SMOOTH",
"1314 86 LINE",
"1247 86 OFFCURVE",
"1180 126 OFFCURVE",
"1180 196 CURVE SMOOTH",
"1180 204 OFFCURVE",
"1180 212 OFFCURVE",
"1182 221 CURVE SMOOTH",
"1248 594 LINE",
"1412 594 LINE SMOOTH",
"1518 594 OFFCURVE",
"1526 547 OFFCURVE",
"1519 506 CURVE SMOOTH",
"1504 417 LINE",
"1605 417 LINE",
"1687 881 LINE",
"1586 881 LINE",
"1567 778 LINE SMOOTH",
"1557 717 OFFCURVE",
"1510 686 OFFCURVE",
"1428 686 CURVE SMOOTH",
"1264 686 LINE",
"1367 1266 LINE",
"1689 1255 LINE SMOOTH",
"1783 1253 OFFCURVE",
"1871 1169 OFFCURVE",
"1871 1052 CURVE SMOOTH",
"1871 1033 OFFCURVE",
"1869 1013 OFFCURVE",
"1865 991 CURVE",
"1965 991 LINE",
"2030 1358 LINE",
"829 1358 LINE",
"829 1272 LINE",
"906 1272 OFFCURVE",
"953 1271 OFFCURVE",
"988 1237 CURVE",
"195 201 LINE SMOOTH",
"118 101 OFFCURVE",
"93 69 OFFCURVE",
"-34 69 CURVE",
"-34 0 LINE"
);
},
{
closed = 1;
nodes = (
"1090 1206 LINE",
"1113 1206 LINE",
"1021 686 LINE",
"697 686 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"462 0 LINE",
"462 86 LINE",
"359 86 OFFCURVE",
"313 107 OFFCURVE",
"313 148 CURVE SMOOTH",
"313 154 OFFCURVE",
"315 179 OFFCURVE",
"330 199 CURVE SMOOTH",
"628 594 LINE",
"1005 594 LINE",
"936 203 LINE SMOOTH",
"922 125 OFFCURVE",
"860 86 OFFCURVE",
"737 86 CURVE",
"737 0 LINE",
"1848 0 LINE",
"1911 354 LINE",
"1808 354 LINE",
"1798 299 OFFCURVE",
"1784 260 OFFCURVE",
"1767 227 CURVE SMOOTH",
"1720 137 OFFCURVE",
"1643 92 OFFCURVE",
"1538 90 CURVE SMOOTH",
"1314 86 LINE",
"1247 86 OFFCURVE",
"1180 126 OFFCURVE",
"1180 196 CURVE SMOOTH",
"1180 204 OFFCURVE",
"1180 212 OFFCURVE",
"1182 221 CURVE SMOOTH",
"1248 594 LINE",
"1412 594 LINE SMOOTH",
"1518 594 OFFCURVE",
"1526 547 OFFCURVE",
"1519 506 CURVE SMOOTH",
"1504 417 LINE",
"1605 417 LINE",
"1687 881 LINE",
"1586 881 LINE",
"1567 778 LINE SMOOTH",
"1557 717 OFFCURVE",
"1510 686 OFFCURVE",
"1428 686 CURVE SMOOTH",
"1264 686 LINE",
"1367 1266 LINE",
"1689 1255 LINE SMOOTH",
"1783 1253 OFFCURVE",
"1871 1169 OFFCURVE",
"1871 1052 CURVE SMOOTH",
"1871 1033 OFFCURVE",
"1869 1013 OFFCURVE",
"1865 991 CURVE",
"1965 991 LINE",
"2030 1358 LINE",
"829 1358 LINE",
"829 1272 LINE",
"906 1272 OFFCURVE",
"953 1271 OFFCURVE",
"988 1237 CURVE",
"208 218 LINE SMOOTH",
"132 119 OFFCURVE",
"106 86 OFFCURVE",
"-21 86 CURVE",
"-21 0 LINE"
);
},
{
closed = 1;
nodes = (
"1090 1206 LINE",
"1113 1206 LINE",
"1021 686 LINE",
"697 686 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
14 1 0 1 1 76 96 1 10 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 17 0 2 0 17 114 0 2 5 0 2 5 126 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 16 1 4 12 1 7 6 4 7 103 3 1 0 0 1 95 0 1 1 31 77 0 5 5 34 77 15 13 11 3 8 8 10 98 14 1 10 10 32 10 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 17 0 2 0 17 114 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 16 1 4 12 1 7 6 4 7 103 3 1 0 0 1 95 0 1 1 31 77 15 13 11 3 8 8 10 98 14 1 10 10 32 10 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 17 0 2 0 17 2 128 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 16 1 4 12 1 7 6 4 7 103 3 1 0 0 1 95 0 1 1 31 77 15 13 11 3 8 8 10 98 14 1 10 10 32 10 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 17 0 2 0 17 2 128 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 16 1 4 12 1 7 6 4 7 103 15 13 11 3 8 14 1 10 8 10 102 3 1 0 0 1 95 0 1 1 31 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 17 0 2 0 17 2 128 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 8 7 9 8 126 0 1 3 1 0 17 1 0 105 16 1 4 12 1 7 6 4 7 103 15 13 11 3 8 10 10 8 89 15 13 11 3 8 8 10 98 14 1 10 8 10 82 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
0 17 0 2 0 17 2 128 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 11 7 9 11 126 0 1 3 1 0 17 1 0 105 16 1 4 12 1 7 6 4 7 103 15 13 2 11 10 10 11 89 15 13 2 11 11 10 97 14 1 10 11 10 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 81 values pushed */
0 17 0 2 0 17 2 128 0 2 5 0 2 5 126 0 5 4 0 5 4 126 0 6 7 9 7 6 9 128 0 9 11 7 9 11 126 0 10 14 10 134 0 1 3 1 0 17 1 0 105 16 1 4 12 1 7 6 4 7 103 15 13 2 11 14 14 11 89 15 13 2 11 11 14 97 0 14 11 14 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
114 112 109 106 101 99 95 93 89 88 82 80 76 74 72 67 63 62 53 52 21 19 51 54 22 98 20 18 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1903;
}
);
leftKerningGroup = AE;
note = AE;
rightKerningGroup = AE;
unicode = 00C6;
},
{
glyphname = AEacute;
lastChange = "2018-08-18 15:23:13 +0000";
layers = (
{
components = (
{
name = AE;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 1230, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1745;
},
{
components = (
{
name = AE;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 1312, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1903;
}
);
leftMetricsKey = AE;
note = AEacute;
rightMetricsKey = AE;
unicode = 01FC;
},
{
glyphname = Aacute;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 190, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = acute.case;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Aacute;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C1;
},
{
glyphname = Abreve;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = breve;
transform = "{1, 0, 0, 1, 242, 458}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = breve;
transform = "{1, 0, 0, 1, 269, 458}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Abreve;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 0102;
},
{
glyphname = Acircumflex;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 260, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = circumflex.case;
transform = "{1, 0, 0, 1, 237, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Acircumflex;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C2;
},
{
glyphname = Adieresis;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 270, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = dieresis.case;
transform = "{1, 0, 0, 1, 282, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Adieresis;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C4;
},
{
glyphname = Agrave;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 70, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = grave.case;
transform = "{1, 0, 0, 1, 30, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Agrave;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C0;
},
{
glyphname = Amacron;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = macron.case;
transform = "{1, 0, 0, 1, 270, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = macron.case;
transform = "{1, 0, 0, 1, 257, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Amacron;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 0100;
},
{
glyphname = Aring;
lastChange = "2018-08-17 18:10:56 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"965 1179 LINE SMOOTH",
"967 1222 OFFCURVE",
"970 1273 OFFCURVE",
"975 1332 CURVE",
"1061 1344 OFFCURVE",
"1127 1420 OFFCURVE",
"1120 1500 CURVE SMOOTH",
"1116 1556 OFFCURVE",
"1095 1602 OFFCURVE",
"1057 1638 CURVE SMOOTH",
"1020 1674 OFFCURVE",
"974 1692 OFFCURVE",
"918 1692 CURVE SMOOTH",
"803 1692 OFFCURVE",
"729 1607 OFFCURVE",
"737 1512 CURVE SMOOTH",
"743 1445 OFFCURVE",
"776 1394 OFFCURVE",
"837 1359 CURVE",
"156 201 LINE SMOOTH",
"86 84 OFFCURVE",
"33 69 OFFCURVE",
"-68 69 CURVE SMOOTH",
"-87 69 OFFCURVE",
"-102 -7 OFFCURVE",
"-82 -7 CURVE",
"-25 -2 OFFCURVE",
"46 0 OFFCURVE",
"131 0 CURVE SMOOTH",
"215 0 OFFCURVE",
"287 -2 OFFCURVE",
"344 -7 CURVE",
"362 -7 OFFCURVE",
"379 69 OFFCURVE",
"359 69 CURVE SMOOTH",
"271 69 OFFCURVE",
"225 87 OFFCURVE",
"222 124 CURVE SMOOTH",
"221 139 OFFCURVE",
"226 159 OFFCURVE",
"240 182 CURVE SMOOTH",
"421 506 LINE SMOOTH",
"431 523 OFFCURVE",
"447 531 OFFCURVE",
"467 531 CURVE SMOOTH",
"777 531 LINE SMOOTH",
"799 531 OFFCURVE",
"809 519 OFFCURVE",
"808 496 CURVE SMOOTH",
"798 186 LINE SMOOTH",
"796 106 OFFCURVE",
"766 69 OFFCURVE",
"665 69 CURVE SMOOTH",
"646 69 OFFCURVE",
"629 -7 OFFCURVE",
"649 -7 CURVE",
"707 -2 OFFCURVE",
"777 0 OFFCURVE",
"861 0 CURVE SMOOTH",
"944 0 OFFCURVE",
"1015 -2 OFFCURVE",
"1074 -7 CURVE",
"1096 -7 OFFCURVE",
"1108 69 OFFCURVE",
"1088 69 CURVE SMOOTH",
"992 69 OFFCURVE",
"941 101 OFFCURVE",
"935 165 CURVE SMOOTH",
"934 174 OFFCURVE",
"934 181 OFFCURVE",
"934 186 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1050 1630 OFFCURVE",
"1077 1393 OFFCURVE",
"939 1393 CURVE SMOOTH",
"886 1393 OFFCURVE",
"834 1440 OFFCURVE",
"827 1512 CURVE SMOOTH",
"822 1575 OFFCURVE",
"855 1630 OFFCURVE",
"918 1630 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"810 610 OFFCURVE",
"799 600 OFFCURVE",
"778 600 CURVE SMOOTH",
"503 600 LINE SMOOTH",
"483 600 OFFCURVE",
"479 610 OFFCURVE",
"490 629 CURVE SMOOTH",
"796 1159 LINE SMOOTH",
"800 1165 OFFCURVE",
"806 1168 OFFCURVE",
"814 1168 CURVE SMOOTH",
"822 1168 OFFCURVE",
"826 1165 OFFCURVE",
"826 1159 CURVE",
"811 629 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"848 531 LINE",
"833 600 LINE",
"418 600 LINE",
"408 531 LINE"
);
},
{
closed = 1;
nodes = (
"747 1168 LINE",
"772 1168 LINE",
"829 186 LINE SMOOTH",
"833 111 OFFCURVE",
"814 69 OFFCURVE",
"706 69 CURVE",
"706 0 LINE",
"1129 0 LINE",
"1129 69 LINE",
"1032 69 OFFCURVE",
"970 98 OFFCURVE",
"965 186 CURVE SMOOTH",
"901 1295 LINE",
"720 1270 LINE",
"186 201 LINE SMOOTH",
"127 83 OFFCURVE",
"75 69 OFFCURVE",
"-27 69 CURVE",
"-27 -1 LINE",
"400 -1 LINE",
"400 69 LINE",
"294 69 OFFCURVE",
"228 93 OFFCURVE",
"271 182 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"921 1255 OFFCURVE",
"1040 1377 OFFCURVE",
"1040 1499 CURVE SMOOTH",
"1040 1545 OFFCURVE",
"1011 1644 OFFCURVE",
"864 1644 CURVE SMOOTH",
"734 1644 OFFCURVE",
"621 1541 OFFCURVE",
"621 1417 CURVE SMOOTH",
"621 1323 OFFCURVE",
"687 1255 OFFCURVE",
"794 1255 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"752 1323 OFFCURVE",
"717 1363 OFFCURVE",
"717 1422 CURVE SMOOTH",
"717 1497 OFFCURVE",
"774 1577 OFFCURVE",
"852 1577 CURVE SMOOTH",
"907 1577 OFFCURVE",
"941 1539 OFFCURVE",
"941 1481 CURVE SMOOTH",
"941 1404 OFFCURVE",
"885 1323 OFFCURVE",
"806 1323 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
71 44 2 10 9 0 1 0 3 2 76 36 11 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 7 11 1 8 9 7 8 105 0 10 0 3 0 10 3 103 0 9 9 98 77 6 4 2 3 0 0 1 97 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 7 11 1 8 9 7 8 105 0 10 0 3 0 10 3 103 6 4 2 3 0 5 1 1 0 1 101 0 9 9 98 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 9 8 10 8 9 10 128 0 7 11 1 8 9 7 8 105 0 10 0 3 0 10 3 103 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 21 values pushed */
60 59 79 76 66 64 59 69 60 69 39 36 21 21 52 36 21 19 12 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1230;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1126 1604 OFFCURVE",
"988 1729 OFFCURVE",
"783 1729 OFFCURVE",
"667 1604 OFFCURVE",
"674 1520 QCURVE SMOOTH",
"685 1400 OFFCURVE",
"796 1341 QCURVE",
"141 217 LINE SMOOTH",
"112 170 OFFCURVE",
"58 113 OFFCURVE",
"-8 92 OFFCURVE",
"-50 86 OFFCURVE",
"-93 86 QCURVE SMOOTH",
"-109 86 OFFCURVE",
"-120 -8 OFFCURVE",
"-108 -8 QCURVE",
"-30 0 OFFCURVE",
"117 0 QCURVE SMOOTH",
"276 0 OFFCURVE",
"353 -8 QCURVE",
"370 -8 OFFCURVE",
"380 86 OFFCURVE",
"366 86 QCURVE SMOOTH",
"341 86 OFFCURVE",
"306 88 OFFCURVE",
"260 100 OFFCURVE",
"241 125 OFFCURVE",
"242 168 OFFCURVE",
"259 201 QCURVE SMOOTH",
"422 496 LINE SMOOTH",
"436 522 OFFCURVE",
"467 522 QCURVE SMOOTH",
"715 522 LINE",
"753 524 OFFCURVE",
"755 485 QCURVE",
"743 203 LINE SMOOTH",
"739 129 OFFCURVE",
"687 86 OFFCURVE",
"626 86 QCURVE SMOOTH",
"614 86 OFFCURVE",
"599 -8 OFFCURVE",
"613 -8 QCURVE",
"690 0 OFFCURVE",
"850 0 QCURVE SMOOTH",
"997 0 OFFCURVE",
"1074 -8 QCURVE",
"1091 -8 OFFCURVE",
"1103 86 OFFCURVE",
"1089 86 QCURVE SMOOTH",
"1019 86 OFFCURVE",
"954 133 OFFCURVE",
"954 203 QCURVE",
"993 1321 LINE",
"1065 1339 OFFCURVE",
"1139 1452 OFFCURVE",
"1133 1520 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"939 1651 OFFCURVE",
"999 1575 OFFCURVE",
"1009 1462 OFFCURVE",
"962 1386 OFFCURVE",
"866 1386 OFFCURVE",
"808 1462 OFFCURVE",
"798 1575 OFFCURVE",
"845 1651 OFFCURVE",
"892 1653 QCURVE"
);
},
{
closed = 1;
nodes = (
"761 649 LINE SMOOTH",
"760 606 OFFCURVE",
"721 606 QCURVE SMOOTH",
"518 606 LINE SMOOTH",
"506 606 OFFCURVE",
"496 627 OFFCURVE",
"503 639 QCURVE SMOOTH",
"749 1065 LINE SMOOTH",
"758 1079 OFFCURVE",
"772 1075 OFFCURVE",
"771 1063 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"848 531 LINE",
"833 600 LINE",
"418 600 LINE",
"408 531 LINE"
);
},
{
closed = 1;
nodes = (
"780 1168 LINE",
"746 1168 LINE",
"803 186 LINE SMOOTH",
"807 111 OFFCURVE",
"788 69 OFFCURVE",
"680 69 CURVE",
"680 0 LINE",
"1177 0 LINE",
"1177 69 LINE",
"1080 69 OFFCURVE",
"1018 98 OFFCURVE",
"1013 186 CURVE SMOOTH",
"949 1300 LINE",
"729 1287 LINE",
"186 201 LINE SMOOTH",
"127 83 OFFCURVE",
"75 69 OFFCURVE",
"-27 69 CURVE",
"-27 -1 LINE",
"433 -1 LINE",
"433 69 LINE",
"327 69 OFFCURVE",
"261 93 OFFCURVE",
"304 182 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"966 1253 OFFCURVE",
"1098 1371 OFFCURVE",
"1098 1522 CURVE SMOOTH",
"1098 1576 OFFCURVE",
"1068 1701 OFFCURVE",
"914 1701 CURVE SMOOTH",
"747 1701 OFFCURVE",
"618 1588 OFFCURVE",
"618 1436 CURVE SMOOTH",
"618 1370 OFFCURVE",
"647 1253 OFFCURVE",
"816 1253 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"798 1339 OFFCURVE",
"761 1394 OFFCURVE",
"761 1460 CURVE SMOOTH",
"761 1538 OFFCURVE",
"807 1622 OFFCURVE",
"879 1622 CURVE SMOOTH",
"960 1622 OFFCURVE",
"963 1542 OFFCURVE",
"963 1508 CURVE SMOOTH",
"963 1439 OFFCURVE",
"917 1339 OFFCURVE",
"840 1339 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
49 1 10 9 21 1 0 3 2 76 40 14 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
6 4 2 3 0 3 1 3 0 1 128 0 7 11 1 8 9 7 8 105 0 10 0 3 0 10 3 103 0 9 9 37 77 5 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
6 4 2 3 0 3 1 3 0 1 128 5 1 1 1 132 0 7 11 1 8 9 7 8 105 0 10 0 3 0 10 3 103 0 9 9 37 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 9 8 10 8 9 10 128 6 4 2 3 0 3 1 3 0 1 128 5 1 1 1 132 0 7 11 1 8 9 7 8 105 0 10 3 3 10 87 0 10 10 3 95 0 3 10 3 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 21 values pushed */
57 56 74 71 61 60 56 64 57 64 25 35 36 38 52 35 36 22 12 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1278;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Aring;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C5;
},
{
glyphname = Atilde;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 260, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1230;
},
{
components = (
{
name = A;
},
{
name = tilde.case;
transform = "{1, 0, 0, 1, 322, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1163;
}
);
leftKerningGroup = A;
leftMetricsKey = A;
note = Atilde;
rightKerningGroup = A;
rightMetricsKey = A;
unicode = 00C3;
},
{
glyphname = B;
lastChange = "2018-08-18 13:17:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{438, 0}";
},
{
name = top;
position = "{678, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1021 552 OFFCURVE",
"927 666 OFFCURVE",
"753 716 CURVE SMOOTH",
"746 718 OFFCURVE",
"741 722 OFFCURVE",
"741 726 CURVE SMOOTH",
"741 729 OFFCURVE",
"744 732 OFFCURVE",
"751 733 CURVE SMOOTH",
"978 765 OFFCURVE",
"1080 884 OFFCURVE",
"1054 1095 CURVE SMOOTH",
"1036 1242 OFFCURVE",
"899 1358 OFFCURVE",
"669 1358 CURVE SMOOTH",
"605 1358 OFFCURVE",
"484 1354 OFFCURVE",
"407 1354 CURVE",
"501 1355 OFFCURVE",
"455 1354 OFFCURVE",
"407 1354 CURVE SMOOTH",
"359 1354 OFFCURVE",
"282 1352 OFFCURVE",
"175 1358 CURVE SMOOTH",
"157 1359 OFFCURVE",
"144 1282 OFFCURVE",
"165 1282 CURVE SMOOTH",
"269 1282 OFFCURVE",
"330 1272 OFFCURVE",
"335 1209 CURVE SMOOTH",
"336 1196 OFFCURVE",
"338 1183 OFFCURVE",
"336 1172 CURVE SMOOTH",
"173 186 LINE SMOOTH",
"158 93 OFFCURVE",
"113 69 OFFCURVE",
"-28 69 CURVE SMOOTH",
"-46 69 OFFCURVE",
"-59 -7 OFFCURVE",
"-38 -7 CURVE",
"93 1 OFFCURVE",
"255 2 OFFCURVE",
"347 -4 CURVE SMOOTH",
"396 -7 OFFCURVE",
"441 -7 OFFCURVE",
"483 -7 CURVE SMOOTH",
"929 -7 OFFCURVE",
"1068 174 OFFCURVE",
"1041 390 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"940 893 OFFCURVE",
"781 753 OFFCURVE",
"515 753 CURVE SMOOTH",
"452 753 OFFCURVE",
"417 763 OFFCURVE",
"417 783 CURVE SMOOTH",
"417 784 OFFCURVE",
"417 788 OFFCURVE",
"418 795 CURVE",
"488 1230 LINE SMOOTH",
"496 1280 OFFCURVE",
"517 1305 OFFCURVE",
"550 1305 CURVE SMOOTH",
"769 1305 OFFCURVE",
"897 1233 OFFCURVE",
"917 1074 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"914 187 OFFCURVE",
"754 57 OFFCURVE",
"479 57 CURVE SMOOTH",
"385 57 OFFCURVE",
"333 94 OFFCURVE",
"324 167 CURVE SMOOTH",
"321 192 OFFCURVE",
"324 229 OFFCURVE",
"332 277 CURVE SMOOTH",
"389 636 LINE SMOOTH",
"395 675 OFFCURVE",
"436 695 OFFCURVE",
"509 695 CURVE SMOOTH",
"720 695 OFFCURVE",
"863 601 OFFCURVE",
"885 422 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"453 0 LINE SMOOTH",
"973 0 OFFCURVE",
"1001 305 OFFCURVE",
"1001 435 CURVE SMOOTH",
"1001 572 OFFCURVE",
"930 673 OFFCURVE",
"756 731 CURVE",
"973 820 OFFCURVE",
"1029 948 OFFCURVE",
"1029 1103 CURVE SMOOTH",
"1029 1273 OFFCURVE",
"898 1358 OFFCURVE",
"693 1358 CURVE SMOOTH",
"185 1358 LINE",
"185 1300 LINE",
"310 1300 OFFCURVE",
"356 1265 OFFCURVE",
"344 1195 CURVE SMOOTH",
"162 163 LINE SMOOTH",
"149 93 OFFCURVE",
"97 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE"
);
},
{
closed = 1;
nodes = (
"484 1297 LINE",
"755 1297 OFFCURVE",
"895 1238 OFFCURVE",
"895 1085 CURVE SMOOTH",
"895 958 OFFCURVE",
"856 749 OFFCURVE",
"387 749 CURVE"
);
},
{
closed = 1;
nodes = (
"348 57 OFFCURVE",
"297 107 OFFCURVE",
"297 206 CURVE SMOOTH",
"297 228 OFFCURVE",
"299 251 OFFCURVE",
"304 277 CURVE SMOOTH",
"376 687 LINE",
"519 687 OFFCURVE",
"605 679 OFFCURVE",
"666 657 CURVE SMOOTH",
"789 613 OFFCURVE",
"864 536 OFFCURVE",
"864 422 CURVE SMOOTH",
"864 302 OFFCURVE",
"788 57 OFFCURVE",
"449 57 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
45 1 5 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 2 4 5 4 2 114 0 5 0 6 1 5 6 105 0 4 4 3 95 0 3 3 92 77 7 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 5 0 6 1 5 6 105 0 4 4 3 95 0 3 3 92 77 0 7 7 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 5 0 6 1 5 6 105 0 7 0 0 7 0 100 0 4 4 3 95 0 3 3 92 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 3 0 4 2 3 4 105 0 5 0 6 1 5 6 105 0 7 0 0 7 89 0 7 7 0 96 0 0 7 0 80 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 2 4 5 4 2 5 128 0 1 6 7 7 1 114 0 3 0 4 2 3 4 105 0 5 0 6 1 5 6 105 0 7 0 0 7 89 0 7 7 0 96 0 0 7 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
37 36 37 44 99 23 35 82 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1025;
},
{
anchors = (
{
name = bottom;
position = "{521, 0}";
},
{
name = top;
position = "{761, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1231 607 OFFCURVE",
"1060 711 QCURVE SMOOTH",
"1041 723 OFFCURVE",
"1039 742 OFFCURVE",
"1058 752 QCURVE SMOOTH",
"1163 803 OFFCURVE",
"1296 983 OFFCURVE",
"1286 1098 QCURVE SMOOTH",
"1276 1214 OFFCURVE",
"1075 1358 OFFCURVE",
"907 1358 QCURVE SMOOTH",
"833 1358 OFFCURVE",
"672 1354 OFFCURVE",
"492 1354 OFFCURVE",
"352 1358 QCURVE SMOOTH",
"337 1358 OFFCURVE",
"325 1288 OFFCURVE",
"327 1264 OFFCURVE",
"333 1264 QCURVE SMOOTH",
"423 1264 OFFCURVE",
"486 1233 OFFCURVE",
"488 1208 QCURVE",
"490 1182 OFFCURVE",
"484 1155 QCURVE SMOOTH",
"281 203 LINE SMOOTH",
"271 152 OFFCURVE",
"210 86 OFFCURVE",
"99 86 QCURVE SMOOTH",
"83 86 OFFCURVE",
"72 16 OFFCURVE",
"75 -8 OFFCURVE",
"83 -8 QCURVE",
"305 0 OFFCURVE",
"434 0 OFFCURVE",
"585 -6 OFFCURVE",
"644 -6 QCURVE SMOOTH",
"1002 -6 OFFCURVE",
"1259 289 OFFCURVE",
"1244 453 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1067 940 OFFCURVE",
"868 760 OFFCURVE",
"694 760 QCURVE SMOOTH",
"642 760 OFFCURVE",
"640 776 QCURVE SMOOTH",
"639 789 OFFCURVE",
"640 797 QCURVE",
"738 1239 LINE",
"744 1280 OFFCURVE",
"781 1280 QCURVE SMOOTH",
"930 1280 OFFCURVE",
"1045 1190 OFFCURVE",
"1053 1094 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1007 282 OFFCURVE",
"821 74 OFFCURVE",
"624 74 QCURVE SMOOTH",
"524 74 OFFCURVE",
"516 164 QCURVE",
"515 198 OFFCURVE",
"520 229 QCURVE",
"610 655 LINE SMOOTH",
"615 682 OFFCURVE",
"642 682 QCURVE SMOOTH",
"818 682 OFFCURVE",
"981 585 OFFCURVE",
"990 479 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"562 0 LINE SMOOTH",
"1129 0 OFFCURVE",
"1170 330 OFFCURVE",
"1170 428 CURVE SMOOTH",
"1170 561 OFFCURVE",
"1082 673 OFFCURVE",
"916 735 CURVE",
"1106 817 OFFCURVE",
"1188 934 OFFCURVE",
"1188 1083 CURVE SMOOTH",
"1188 1253 OFFCURVE",
"1056 1358 OFFCURVE",
"798 1358 CURVE SMOOTH",
"200 1358 LINE",
"200 1272 LINE",
"335 1272 OFFCURVE",
"376 1238 OFFCURVE",
"363 1167 CURVE SMOOTH",
"191 191 LINE SMOOTH",
"178 120 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
},
{
closed = 1;
nodes = (
"626 1280 LINE",
"836 1280 OFFCURVE",
"944 1214 OFFCURVE",
"944 1073 CURVE SMOOTH",
"944 947 OFFCURVE",
"902 768 OFFCURVE",
"536 768 CURVE"
);
},
{
closed = 1;
nodes = (
"481 76 OFFCURVE",
"439 116 OFFCURVE",
"439 197 CURVE SMOOTH",
"439 213 OFFCURVE",
"441 231 OFFCURVE",
"444 250 CURVE SMOOTH",
"519 674 LINE",
"621 674 OFFCURVE",
"688 666 OFFCURVE",
"747 645 CURVE SMOOTH",
"854 607 OFFCURVE",
"900 535 OFFCURVE",
"900 437 CURVE SMOOTH",
"900 262 OFFCURVE",
"806 76 OFFCURVE",
"564 76 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
47 1 5 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 5 0 6 1 5 6 105 4 1 2 2 3 95 0 3 3 31 77 7 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 2 4 5 4 2 114 0 5 0 6 1 5 6 105 0 4 4 3 95 0 3 3 31 77 7 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 5 0 6 1 5 6 105 0 4 4 3 95 0 3 3 31 77 0 7 7 0 96 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 5 0 6 1 5 6 105 0 7 0 0 7 0 100 0 4 4 3 95 0 3 3 31 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 2 4 5 4 2 114 0 1 6 7 7 1 114 0 3 0 4 2 3 4 105 0 5 0 6 1 5 6 105 0 7 0 0 7 89 0 7 7 0 96 0 0 7 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
37 36 22 44 99 23 35 82 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1191;
}
);
leftMetricsKey = H;
note = B;
rightKerningGroup = B;
unicode = 0042;
},
{
glyphname = C;
lastChange = "2018-08-18 13:12:32 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{557, 0}";
},
{
name = top;
position = "{887, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1256 73 OFFCURVE",
"1372 281 OFFCURVE",
"1369 308 CURVE SMOOTH",
"1368 321 OFFCURVE",
"1358 327 OFFCURVE",
"1339 327 CURVE SMOOTH",
"1319 327 OFFCURVE",
"1308 324 OFFCURVE",
"1304 317 CURVE",
"1277 266 OFFCURVE",
"1236 176 OFFCURVE",
"1085 103 CURVE SMOOTH",
"1010 66 OFFCURVE",
"914 48 OFFCURVE",
"797 48 CURVE SMOOTH",
"567 48 OFFCURVE",
"405 224 OFFCURVE",
"384 459 CURVE SMOOTH",
"348 871 OFFCURVE",
"641 1314 OFFCURVE",
"1065 1314 CURVE SMOOTH",
"1289 1314 OFFCURVE",
"1391 1228 OFFCURVE",
"1403 1092 CURVE SMOOTH",
"1404 1080 OFFCURVE",
"1404 1054 OFFCURVE",
"1402 1014 CURVE",
"1402 1006 OFFCURVE",
"1413 1002 OFFCURVE",
"1434 1002 CURVE SMOOTH",
"1454 1002 OFFCURVE",
"1467 1008 OFFCURVE",
"1471 1019 CURVE",
"1492 1119 OFFCURVE",
"1503 1222 OFFCURVE",
"1503 1327 CURVE",
"1440 1337 OFFCURVE",
"1377 1349 OFFCURVE",
"1315 1364 CURVE SMOOTH",
"1252 1378 OFFCURVE",
"1172 1385 OFFCURVE",
"1074 1385 CURVE SMOOTH",
"604 1385 OFFCURVE",
"180 931 OFFCURVE",
"221 458 CURVE SMOOTH",
"248 158 OFFCURVE",
"474 -27 OFFCURVE",
"761 -27 CURVE SMOOTH",
"904 -27 OFFCURVE",
"1032 -12 OFFCURVE",
"1146 19 CURVE SMOOTH",
"1177 27 OFFCURVE",
"1204 33 OFFCURVE",
"1226 36 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"750 -27 OFFCURVE",
"877 -12 OFFCURVE",
"981 19 CURVE SMOOTH",
"1012 28 OFFCURVE",
"1034 33 OFFCURVE",
"1056 36 CURVE",
"1112 99 OFFCURVE",
"1186 270 OFFCURVE",
"1194 317 CURVE",
"1137 317 LINE",
"1041 138 OFFCURVE",
"868 38 OFFCURVE",
"632 38 CURVE SMOOTH",
"392 38 OFFCURVE",
"216 256 OFFCURVE",
"216 559 CURVE SMOOTH",
"216 877 OFFCURVE",
"485 1324 OFFCURVE",
"862 1324 CURVE SMOOTH",
"1216 1324 OFFCURVE",
"1226 1109 OFFCURVE",
"1218 1014 CURVE",
"1280 1014 LINE",
"1302 1133 OFFCURVE",
"1302 1264 OFFCURVE",
"1302 1327 CURVE",
"1282 1327 OFFCURVE",
"1249 1332 OFFCURVE",
"1215 1340 CURVE SMOOTH",
"1080 1370 OFFCURVE",
"986 1385 OFFCURVE",
"901 1385 CURVE SMOOTH",
"276 1385 OFFCURVE",
"60 802 OFFCURVE",
"60 513 CURVE SMOOTH",
"60 200 OFFCURVE",
"267 -27 OFFCURVE",
"597 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
13 1 3 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 98 77 0 4 4 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 4 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
21 36 37 21 36 35 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1264;
},
{
anchors = (
{
name = bottom;
position = "{600, 0}";
},
{
name = top;
position = "{930, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1316 84 OFFCURVE",
"1424 290 OFFCURVE",
"1419 342 CURVE",
"1418 353 OFFCURVE",
"1404 358 OFFCURVE",
"1375 358 CURVE SMOOTH",
"1346 358 OFFCURVE",
"1329 354 OFFCURVE",
"1323 346 CURVE SMOOTH",
"1260 262 OFFCURVE",
"1223 213 OFFCURVE",
"1210 200 CURVE SMOOTH",
"1163 152 OFFCURVE",
"1109 117 OFFCURVE",
"1050 96 CURVE SMOOTH",
"991 74 OFFCURVE",
"922 63 OFFCURVE",
"844 63 CURVE SMOOTH",
"607 63 OFFCURVE",
"477 252 OFFCURVE",
"460 455 CURVE SMOOTH",
"421 888 OFFCURVE",
"711 1298 OFFCURVE",
"1076 1298 CURVE SMOOTH",
"1170 1298 OFFCURVE",
"1249 1278 OFFCURVE",
"1314 1237 CURVE SMOOTH",
"1379 1197 OFFCURVE",
"1415 1142 OFFCURVE",
"1421 1073 CURVE",
"1422 1059 OFFCURVE",
"1421 1034 OFFCURVE",
"1419 999 CURVE",
"1420 986 OFFCURVE",
"1436 979 OFFCURVE",
"1467 979 CURVE SMOOTH",
"1497 979 OFFCURVE",
"1513 984 OFFCURVE",
"1516 995 CURVE SMOOTH",
"1540 1098 OFFCURVE",
"1551 1209 OFFCURVE",
"1548 1329 CURVE",
"1509 1329 OFFCURVE",
"1444 1338 OFFCURVE",
"1354 1357 CURVE SMOOTH",
"1263 1375 OFFCURVE",
"1182 1384 OFFCURVE",
"1109 1384 CURVE SMOOTH",
"612 1384 OFFCURVE",
"178 936 OFFCURVE",
"218 469 CURVE SMOOTH",
"245 164 OFFCURVE",
"493 -27 OFFCURVE",
"793 -27 CURVE SMOOTH",
"943 -27 OFFCURVE",
"1075 -13 OFFCURVE",
"1190 16 CURVE",
"1213 26 OFFCURVE",
"1241 33 OFFCURVE",
"1276 37 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"804 -27 OFFCURVE",
"925 -15 OFFCURVE",
"1033 16 CURVE SMOOTH",
"1064 25 OFFCURVE",
"1094 33 OFFCURVE",
"1126 37 CURVE",
"1166 84 OFFCURVE",
"1270 258 OFFCURVE",
"1285 344 CURVE",
"1188 344 LINE",
"1090 160 OFFCURVE",
"926 68 OFFCURVE",
"698 68 CURVE SMOOTH",
"498 68 OFFCURVE",
"340 242 OFFCURVE",
"340 538 CURVE SMOOTH",
"340 857 OFFCURVE",
"533 1296 OFFCURVE",
"919 1296 CURVE SMOOTH",
"1248 1296 OFFCURVE",
"1273 1113 OFFCURVE",
"1264 995 CURVE",
"1358 995 LINE",
"1376 1129 OFFCURVE",
"1376 1256 OFFCURVE",
"1376 1329 CURVE",
"1342 1330 OFFCURVE",
"1307 1333 OFFCURVE",
"1272 1341 CURVE SMOOTH",
"1138 1371 OFFCURVE",
"1027 1384 OFFCURVE",
"941 1384 CURVE SMOOTH",
"297 1384 OFFCURVE",
"60 796 OFFCURVE",
"60 528 CURVE SMOOTH",
"60 199 OFFCURVE",
"318 -27 OFFCURVE",
"668 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 1 3 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 2 2 31 77 0 4 4 1 97 0 1 1 37 77 0 5 5 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 2 1 4 1 2 4 128 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 4 4 1 97 0 1 1 37 77 0 5 5 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 2 1 4 1 2 4 128 0 3 4 6 4 3 6 128 0 6 5 4 6 5 126 0 1 0 4 3 1 4 105 0 5 5 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
22 36 38 19 17 36 35 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 1350;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = C;
rightKerningGroup = C;
unicode = 0043;
},
{
glyphname = acute.case;
lastChange = "2018-08-14 11:28:22 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"989 1658 OFFCURVE",
"993 1665 OFFCURVE",
"993 1673 CURVE SMOOTH",
"993 1707 OFFCURVE",
"973 1754 OFFCURVE",
"940 1754 CURVE SMOOTH",
"937 1754 OFFCURVE",
"934 1753 OFFCURVE",
"931 1751 CURVE",
"576 1540 LINE SMOOTH",
"568 1535 OFFCURVE",
"561 1530 OFFCURVE",
"556 1523 CURVE",
"551 1516 OFFCURVE",
"548 1509 OFFCURVE",
"548 1503 CURVE SMOOTH",
"548 1491 OFFCURVE",
"566 1480 OFFCURVE",
"585 1480 CURVE SMOOTH",
"596 1480 OFFCURVE",
"607 1483 OFFCURVE",
"620 1489 CURVE SMOOTH",
"985 1657 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"920 1666 LINE",
"866 1760 LINE",
"471 1525 LINE",
"506 1473 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
0 0 0 118 34 1 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"926 1655 LINE",
"859 1771 LINE",
"464 1536 LINE",
"512 1462 LINE"
);
}
);
width = 730;
}
);
note = CapAcute;
},
{
glyphname = acutecomb.case;
lastChange = "2018-08-18 12:03:13 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{168, 1363}";
},
{
name = top;
position = "{238, 1760}";
}
);
components = (
{
name = acute.case;
transform = "{1, 0, 0, 1, -453, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 1 0 74 0 0 0 118 34 1 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{165, 1363}";
},
{
name = top;
position = "{237, 1771}";
}
);
components = (
{
name = acute.case;
transform = "{1, 0, 0, 1, -485, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapAcute.comb;
},
{
glyphname = uni030C.case;
lastChange = "2018-08-18 12:01:04 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{165, 1363}";
},
{
name = top;
position = "{235, 1756}";
}
);
components = (
{
name = caron.case;
transform = "{1, 0, 0, 1, -330, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{177, 1363}";
},
{
name = top;
position = "{258, 1819}";
}
);
components = (
{
name = caron.case;
transform = "{1, 0, 0, 1, -370, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapCaron.comb;
},
{
glyphname = uni0302.case;
lastChange = "2018-08-18 12:03:28 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{167, 1363}";
},
{
name = top;
position = "{237, 1758}";
}
);
components = (
{
name = circumflex.case;
transform = "{1, 0, 0, 1, -382, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{165, 1363}";
},
{
name = top;
position = "{245, 1817}";
}
);
components = (
{
name = circumflex.case;
transform = "{1, 0, 0, 1, -430, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapCircumflex.comb;
},
{
glyphname = uni0308.case;
lastChange = "2018-08-18 12:06:31 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{169, 1363}";
},
{
name = top;
position = "{231, 1715}";
}
);
components = (
{
name = dieresis.case;
transform = "{1, 0, 0, 1, -354, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{170, 1363}";
},
{
name = top;
position = "{239, 1751}";
}
);
components = (
{
name = dieresis.case;
transform = "{1, 0, 0, 1, -372, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapDieresis.comb;
},
{
glyphname = gravecomb.case;
lastChange = "2018-08-17 13:24:19 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{165, 1363}";
},
{
name = top;
position = "{233, 1749}";
}
);
components = (
{
name = grave.case;
transform = "{1, 0, 0, 1, -490, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{158, 1363}";
},
{
name = top;
position = "{231, 1775}";
}
);
components = (
{
name = grave.case;
transform = "{1, 0, 0, 1, -529, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapGrave.comb;
},
{
glyphname = uni0304.case;
lastChange = "2018-08-17 13:24:22 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{171, 1363}";
},
{
name = top;
position = "{220, 1645}";
}
);
components = (
{
name = macron.case;
transform = "{1, 0, 0, 1, -352, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{171, 1363}";
},
{
name = top;
position = "{225, 1670}";
}
);
components = (
{
name = macron.case;
transform = "{1, 0, 0, 1, -406, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapMacron.comb;
},
{
glyphname = tildecomb.case;
lastChange = "2018-08-18 12:03:39 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{168, 1363}";
},
{
name = top;
position = "{223, 1673}";
}
);
components = (
{
name = tilde.case;
transform = "{1, 0, 0, 1, -358, -28}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{170, 1363}";
},
{
name = top;
position = "{233, 1721}";
}
);
components = (
{
name = tilde.case;
transform = "{1, 0, 0, 1, -340, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = CapTilde.comb;
},
{
glyphname = Ccedilla;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1092 73 OFFCURVE",
"1207 282 OFFCURVE",
"1205 308 CURVE SMOOTH",
"1203 330 OFFCURVE",
"1150 334 OFFCURVE",
"1139 317 CURVE",
"1113 266 OFFCURVE",
"1072 176 OFFCURVE",
"921 103 CURVE SMOOTH",
"846 67 OFFCURVE",
"750 48 OFFCURVE",
"633 48 CURVE SMOOTH",
"402 48 OFFCURVE",
"240 224 OFFCURVE",
"220 459 CURVE SMOOTH",
"185 871 OFFCURVE",
"477 1314 OFFCURVE",
"901 1314 CURVE SMOOTH",
"1125 1314 OFFCURVE",
"1228 1228 OFFCURVE",
"1239 1092 CURVE SMOOTH",
"1240 1080 OFFCURVE",
"1239 1054 OFFCURVE",
"1237 1014 CURVE",
"1237 1006 OFFCURVE",
"1248 1002 OFFCURVE",
"1269 1002 CURVE SMOOTH",
"1290 1002 OFFCURVE",
"1303 1008 OFFCURVE",
"1307 1019 CURVE",
"1327 1119 OFFCURVE",
"1338 1222 OFFCURVE",
"1339 1327 CURVE",
"1275 1337 OFFCURVE",
"1213 1349 OFFCURVE",
"1150 1364 CURVE SMOOTH",
"1088 1379 OFFCURVE",
"1008 1385 OFFCURVE",
"910 1385 CURVE SMOOTH",
"439 1385 OFFCURVE",
"16 931 OFFCURVE",
"57 458 CURVE SMOOTH",
"83 158 OFFCURVE",
"310 -27 OFFCURVE",
"596 -27 CURVE SMOOTH",
"600 -27 OFFCURVE",
"603 -27 OFFCURVE",
"605 -27 CURVE",
"519 -157 LINE",
"511 -170 OFFCURVE",
"515 -180 OFFCURVE",
"529 -187 CURVE SMOOTH",
"593 -219 OFFCURVE",
"626 -256 OFFCURVE",
"630 -298 CURVE SMOOTH",
"634 -345 OFFCURVE",
"617 -369 OFFCURVE",
"579 -369 CURVE SMOOTH",
"571 -369 OFFCURVE",
"556 -359 OFFCURVE",
"535 -339 CURVE SMOOTH",
"513 -318 OFFCURVE",
"495 -309 OFFCURVE",
"482 -309 CURVE SMOOTH",
"448 -309 OFFCURVE",
"433 -325 OFFCURVE",
"435 -358 CURVE SMOOTH",
"438 -402 OFFCURVE",
"475 -424 OFFCURVE",
"543 -424 CURVE SMOOTH",
"646 -424 OFFCURVE",
"745 -351 OFFCURVE",
"737 -257 CURVE SMOOTH",
"733 -210 OFFCURVE",
"704 -166 OFFCURVE",
"650 -125 CURVE SMOOTH",
"630 -110 OFFCURVE",
"626 -95 OFFCURVE",
"636 -80 CURVE SMOOTH",
"673 -25 LINE",
"786 -21 OFFCURVE",
"889 -7 OFFCURVE",
"981 19 CURVE SMOOTH",
"1013 28 OFFCURVE",
"1040 33 OFFCURVE",
"1062 36 CURVE"
);
}
);
};
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = cedilla;
transform = "{1, 0, 0, 1, 360, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
36 1 7 5 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 6 7 8 7 6 8 128 0 3 2 1 2 3 114 0 2 0 1 2 1 101 0 7 7 5 97 0 5 5 98 77 0 8 8 0 97 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 6 7 8 7 6 8 128 0 3 2 1 2 3 1 128 0 2 0 1 2 1 101 0 7 7 5 97 0 5 5 98 77 0 8 8 0 97 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 6 7 8 7 6 8 128 0 3 2 1 2 3 1 128 0 5 0 7 6 5 7 105 0 2 0 1 2 1 101 0 8 8 0 97 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 6 7 8 7 6 8 128 0 3 2 1 2 3 1 128 0 5 0 7 6 5 7 105 0 2 0 1 2 1 101 0 8 8 0 97 0 0 0 93 77 0 4 4 93 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 37 21 36 54 33 34 38 19 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1264;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"786 -240 OFFCURVE",
"683 -166 QCURVE",
"657 -150 OFFCURVE",
"649 -135 OFFCURVE",
"660 -119 QCURVE SMOOTH",
"720 -27 LINE",
"749 -27 LINE SMOOTH",
"974 -27 OFFCURVE",
"1146 16 QCURVE",
"1180 31 OFFCURVE",
"1232 37 QCURVE",
"1264 72 OFFCURVE",
"1379 303 OFFCURVE",
"1376 342 QCURVE SMOOTH",
"1374 356 OFFCURVE",
"1288 360 OFFCURVE",
"1279 346 QCURVE",
"1237 272 OFFCURVE",
"1095 129 OFFCURVE",
"917 63 OFFCURVE",
"800 63 QCURVE SMOOTH",
"622 63 OFFCURVE",
"429 303 OFFCURVE",
"416 455 QCURVE SMOOTH",
"387 780 OFFCURVE",
"758 1298 OFFCURVE",
"1032 1298 QCURVE SMOOTH",
"1173 1298 OFFCURVE",
"1270 1237 QCURVE SMOOTH",
"1369 1177 OFFCURVE",
"1378 1073 QCURVE",
"1378 1052 OFFCURVE",
"1375 999 QCURVE",
"1373 979 OFFCURVE",
"1468 979 OFFCURVE",
"1472 995 QCURVE",
"1508 1149 OFFCURVE",
"1504 1329 QCURVE",
"1445 1329 OFFCURVE",
"1174 1384 OFFCURVE",
"1065 1384 QCURVE SMOOTH",
"692 1384 OFFCURVE",
"144 819 OFFCURVE",
"175 469 QCURVE SMOOTH",
"195 239 OFFCURVE",
"358 106 QCURVE SMOOTH",
"475 15 OFFCURVE",
"621 -14 QCURVE",
"492 -229 LINE",
"499 -246 LINE",
"631 -299 OFFCURVE",
"639 -393 QCURVE SMOOTH",
"641 -416 OFFCURVE",
"608 -444 OFFCURVE",
"572 -444 OFFCURVE",
"478 -369 OFFCURVE",
"416 -369 OFFCURVE",
"382 -407 OFFCURVE",
"385 -436 QCURVE SMOOTH",
"395 -526 OFFCURVE",
"553 -526 QCURVE SMOOTH",
"657 -526 OFFCURVE",
"801 -418 OFFCURVE",
"794 -336 QCURVE SMOOTH"
);
}
);
};
components = (
{
name = C;
},
{
name = cedilla;
transform = "{1, 0, 0, 1, 360, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
16 1 9 7 15 1 1 9 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 1 9 2 2 1 114 0 4 4 31 77 0 6 6 3 97 0 3 3 37 77 0 7 7 9 97 0 9 9 32 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 1 9 2 2 1 114 0 2 0 0 2 0 102 0 4 4 31 77 0 6 6 3 97 0 3 3 37 77 0 7 7 9 97 0 9 9 32 9 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 4 3 6 3 4 6 128 0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 1 9 2 9 1 2 128 0 2 0 0 2 0 102 0 6 6 3 97 0 3 3 37 77 0 7 7 9 97 0 9 9 32 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
0 4 3 6 3 4 6 128 0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 1 9 2 9 1 2 128 0 3 0 6 5 3 6 105 0 2 0 0 2 0 102 0 7 7 9 97 0 9 9 32 9 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
58 56 20 36 38 19 17 44 17 19 34 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1468;
}
);
leftKerningGroup = C;
leftMetricsKey = C;
note = Ccedilla;
rightKerningGroup = C;
rightMetricsKey = C;
unicode = 00C7;
},
{
glyphname = Cdotaccent;
lastChange = "2018-08-18 13:12:53 +0000";
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 725, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1264;
},
{
components = (
{
name = C;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 772, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1350;
}
);
leftKerningGroup = C;
leftMetricsKey = C;
note = Cdotaccent;
rightKerningGroup = C;
rightMetricsKey = C;
unicode = 010A;
},
{
glyphname = D;
lastChange = "2018-08-18 13:16:41 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{595, 0}";
},
{
name = center;
position = "{715, 682}";
},
{
name = top;
position = "{765, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1509 1192 OFFCURVE",
"1275 1358 OFFCURVE",
"945 1358 CURVE SMOOTH",
"895 1358 OFFCURVE",
"844 1357 OFFCURVE",
"790 1356 CURVE SMOOTH",
"736 1355 OFFCURVE",
"670 1354 OFFCURVE",
"591 1354 CURVE",
"691 1354 OFFCURVE",
"485 1354 OFFCURVE",
"338 1358 CURVE SMOOTH",
"320 1358 OFFCURVE",
"304 1282 OFFCURVE",
"325 1282 CURVE SMOOTH",
"433 1282 OFFCURVE",
"489 1257 OFFCURVE",
"493 1208 CURVE SMOOTH",
"494 1199 OFFCURVE",
"494 1187 OFFCURVE",
"492 1172 CURVE",
"295 186 LINE SMOOTH",
"285 135 OFFCURVE",
"259 101 OFFCURVE",
"219 84 CURVE SMOOTH",
"192 74 OFFCURVE",
"149 69 OFFCURVE",
"90 69 CURVE SMOOTH",
"72 69 OFFCURVE",
"56 -7 OFFCURVE",
"77 -7 CURVE",
"165 -2 OFFCURVE",
"241 0 OFFCURVE",
"306 0 CURVE SMOOTH",
"370 0 OFFCURVE",
"439 -1 OFFCURVE",
"513 -4 CURVE",
"418 0 OFFCURVE",
"608 -7 OFFCURVE",
"720 -7 CURVE SMOOTH",
"1201 -7 OFFCURVE",
"1572 468 OFFCURVE",
"1534 904 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1409 483 OFFCURVE",
"1071 53 OFFCURVE",
"663 53 CURVE SMOOTH",
"527 53 OFFCURVE",
"455 94 OFFCURVE",
"448 177 CURVE SMOOTH",
"445 206 OFFCURVE",
"449 246 OFFCURVE",
"460 298 CURVE SMOOTH",
"637 1179 LINE SMOOTH",
"651 1247 OFFCURVE",
"678 1280 OFFCURVE",
"721 1289 CURVE SMOOTH",
"743 1294 OFFCURVE",
"785 1296 OFFCURVE",
"849 1296 CURVE SMOOTH",
"1171 1296 OFFCURVE",
"1353 1123 OFFCURVE",
"1374 880 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"575 0 LINE SMOOTH",
"1182 0 OFFCURVE",
"1373 586 OFFCURVE",
"1373 854 CURVE SMOOTH",
"1373 1172 OFFCURVE",
"1136 1358 OFFCURVE",
"747 1358 CURVE SMOOTH",
"187 1358 LINE",
"187 1300 LINE",
"312 1300 OFFCURVE",
"356 1265 OFFCURVE",
"344 1195 CURVE SMOOTH",
"162 163 LINE SMOOTH",
"150 93 OFFCURVE",
"71 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE"
);
},
{
closed = 1;
nodes = (
"309 53 OFFCURVE",
"279 131 OFFCURVE",
"308 298 CURVE SMOOTH",
"484 1297 LINE",
"674 1297 LINE SMOOTH",
"1009 1297 OFFCURVE",
"1224 1101 OFFCURVE",
"1224 820 CURVE SMOOTH",
"1224 584 OFFCURVE",
"1048 53 OFFCURVE",
"516 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 1 2 2 3 95 0 3 3 92 77 5 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 5 5 1 114 4 1 2 2 3 95 0 3 3 92 77 0 5 5 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 1 2 2 3 95 0 3 3 92 77 5 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 5 5 1 114 4 1 2 2 3 95 0 3 3 92 77 0 5 5 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 4 4 3 95 0 3 3 92 77 0 5 5 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 5 0 0 5 0 100 0 4 4 3 95 0 3 3 92 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 3 0 4 2 3 4 105 0 5 0 0 5 89 0 5 5 0 96 0 0 5 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
39 36 99 23 35 82 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1339;
},
{
anchors = (
{
name = bottom;
position = "{681, 0}";
},
{
name = center;
position = "{801, 682}";
},
{
name = top;
position = "{831, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1609 1114 OFFCURVE",
"1261 1358 OFFCURVE",
"987 1358 QCURVE SMOOTH",
"937 1358 OFFCURVE",
"721 1354 OFFCURVE",
"439 1354 OFFCURVE",
"348 1358 QCURVE",
"333 1358 OFFCURVE",
"319 1264 OFFCURVE",
"335 1264 QCURVE SMOOTH",
"431 1264 OFFCURVE",
"487 1229 OFFCURVE",
"489 1204 QCURVE",
"490 1182 OFFCURVE",
"484 1153 QCURVE SMOOTH",
"281 203 LINE SMOOTH",
"272 164 OFFCURVE",
"242 111 OFFCURVE",
"177 86 OFFCURVE",
"97 86 QCURVE SMOOTH",
"83 86 OFFCURVE",
"71 18 OFFCURVE",
"77 -8 OFFCURVE",
"85 -8 QCURVE",
"272 0 OFFCURVE",
"415 0 OFFCURVE",
"722 -8 OFFCURVE",
"765 -8 QCURVE SMOOTH",
"1152 -8 OFFCURVE",
"1656 574 OFFCURVE",
"1628 893 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1395 585 OFFCURVE",
"978 72 OFFCURVE",
"706 72 QCURVE SMOOTH",
"530 69 OFFCURVE",
"520 188 QCURVE SMOOTH",
"518 221 OFFCURVE",
"526 264 QCURVE SMOOTH",
"727 1190 LINE SMOOTH",
"735 1231 OFFCURVE",
"767 1272 OFFCURVE",
"844 1280 OFFCURVE",
"910 1280 QCURVE SMOOTH",
"1100 1280 OFFCURVE",
"1354 1056 OFFCURVE",
"1370 868 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"685 0 LINE SMOOTH",
"1337 0 OFFCURVE",
"1544 569 OFFCURVE",
"1544 834 CURVE SMOOTH",
"1544 1162 OFFCURVE",
"1261 1358 OFFCURVE",
"878 1358 CURVE SMOOTH",
"200 1358 LINE",
"200 1272 LINE",
"335 1272 OFFCURVE",
"376 1238 OFFCURVE",
"363 1167 CURVE SMOOTH",
"191 191 LINE SMOOTH",
"178 120 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
},
{
closed = 1;
nodes = (
"446 72 OFFCURVE",
"423 128 OFFCURVE",
"448 272 CURVE SMOOTH",
"626 1280 LINE",
"782 1280 LINE SMOOTH",
"1103 1280 OFFCURVE",
"1269 1062 OFFCURVE",
"1269 816 CURVE SMOOTH",
"1269 480 OFFCURVE",
"1012 72 OFFCURVE",
"630 72 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 1 2 2 3 95 0 3 3 31 77 5 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 4 4 3 95 0 3 3 31 77 0 5 5 0 96 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 5 0 0 5 0 100 0 4 4 3 95 0 3 3 31 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 4 1 4 2 114 0 1 5 5 1 112 0 3 0 4 2 3 4 105 0 5 0 0 5 89 0 5 5 0 96 0 0 5 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
39 36 98 24 35 82 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
leftMetricsKey = H;
note = D;
rightKerningGroup = D;
unicode = 0044;
},
{
glyphname = Dcaron;
lastChange = "2018-08-18 13:16:43 +0000";
layers = (
{
components = (
{
alignment = -1;
name = D;
},
{
name = uni030C.case;
transform = "{1, 0, 0, 1, 600, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1339;
},
{
components = (
{
name = D;
},
{
name = uni030C.case;
transform = "{1, 0, 0, 1, 654, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1512;
}
);
leftMetricsKey = D;
note = Dcaron;
rightMetricsKey = D;
unicode = 010E;
},
{
glyphname = E;
lastChange = "2018-08-18 12:30:45 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{470, 0}";
},
{
name = ogonek;
position = "{906, 10}";
},
{
name = top;
position = "{730, 1363}";
},
{
name = topleft;
position = "{186, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1062 344 LINE",
"1061 353 OFFCURVE",
"1048 358 OFFCURVE",
"1022 358 CURVE SMOOTH",
"996 358 OFFCURVE",
"981 353 OFFCURVE",
"979 344 CURVE SMOOTH",
"939 165 OFFCURVE",
"835 74 OFFCURVE",
"680 69 CURVE SMOOTH",
"441 61 LINE SMOOTH",
"365 58 OFFCURVE",
"325 94 OFFCURVE",
"316 160 CURVE SMOOTH",
"312 191 OFFCURVE",
"318 237 OFFCURVE",
"329 300 CURVE SMOOTH",
"380 581 LINE SMOOTH",
"383 598 OFFCURVE",
"395 607 OFFCURVE",
"417 607 CURVE SMOOTH",
"615 607 LINE SMOOTH",
"684 607 OFFCURVE",
"720 593 OFFCURVE",
"723 566 CURVE SMOOTH",
"724 557 OFFCURVE",
"723 544 OFFCURVE",
"720 527 CURVE SMOOTH",
"704 437 LINE",
"705 426 OFFCURVE",
"717 421 OFFCURVE",
"738 421 CURVE SMOOTH",
"759 421 OFFCURVE",
"769 426 OFFCURVE",
"771 436 CURVE",
"782 554 OFFCURVE",
"808 697 OFFCURVE",
"850 864 CURVE",
"849 874 OFFCURVE",
"837 879 OFFCURVE",
"814 879 CURVE SMOOTH",
"791 879 OFFCURVE",
"779 874 OFFCURVE",
"777 864 CURVE SMOOTH",
"760 764 LINE SMOOTH",
"753 725 OFFCURVE",
"738 700 OFFCURVE",
"717 688 CURVE SMOOTH",
"703 680 OFFCURVE",
"673 676 OFFCURVE",
"627 676 CURVE SMOOTH",
"435 676 LINE SMOOTH",
"416 676 OFFCURVE",
"404 683 OFFCURVE",
"404 698 CURVE SMOOTH",
"404 702 OFFCURVE",
"404 707 OFFCURVE",
"404 713 CURVE",
"506 1267 LINE SMOOTH",
"509 1282 OFFCURVE",
"519 1289 OFFCURVE",
"538 1289 CURVE SMOOTH",
"598 1289 OFFCURVE",
"700 1287 OFFCURVE",
"843 1280 CURVE SMOOTH",
"927 1276 OFFCURVE",
"1046 1215 OFFCURVE",
"1054 1088 CURVE SMOOTH",
"1055 1073 OFFCURVE",
"1054 1047 OFFCURVE",
"1051 1010 CURVE",
"1052 1001 OFFCURVE",
"1065 996 OFFCURVE",
"1090 996 CURVE SMOOTH",
"1115 996 OFFCURVE",
"1129 1001 OFFCURVE",
"1131 1010 CURVE SMOOTH",
"1187 1320 LINE SMOOTH",
"1188 1327 OFFCURVE",
"1188 1333 OFFCURVE",
"1188 1336 CURVE SMOOTH",
"1188 1351 OFFCURVE",
"1164 1358 OFFCURVE",
"1123 1358 CURVE SMOOTH",
"941 1358 OFFCURVE",
"648 1354 OFFCURVE",
"469 1354 CURVE",
"673 1355 OFFCURVE",
"564 1354 OFFCURVE",
"469 1354 CURVE SMOOTH",
"374 1354 OFFCURVE",
"282 1353 OFFCURVE",
"192 1358 CURVE SMOOTH",
"175 1359 OFFCURVE",
"160 1282 OFFCURVE",
"181 1282 CURVE SMOOTH",
"286 1282 OFFCURVE",
"342 1256 OFFCURVE",
"346 1205 CURVE SMOOTH",
"347 1192 OFFCURVE",
"347 1181 OFFCURVE",
"345 1172 CURVE SMOOTH",
"166 186 LINE SMOOTH",
"148 86 OFFCURVE",
"92 69 OFFCURVE",
"-35 69 CURVE SMOOTH",
"-52 69 OFFCURVE",
"-68 -7 OFFCURVE",
"-47 -7 CURVE",
"41 -2 OFFCURVE",
"145 0 OFFCURVE",
"264 0 CURVE SMOOTH",
"383 0 OFFCURVE",
"524 -1 OFFCURVE",
"687 -4 CURVE",
"530 0 OFFCURVE",
"833 -7 OFFCURVE",
"977 -7 CURVE SMOOTH",
"990 -7 OFFCURVE",
"999 2 OFFCURVE",
"1002 19 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"969 0 LINE",
"1030 342 LINE",
"965 342 LINE",
"955 290 OFFCURVE",
"944 254 OFFCURVE",
"928 222 CURVE SMOOTH",
"877 120 OFFCURVE",
"789 65 OFFCURVE",
"656 61 CURVE SMOOTH",
"420 54 LINE SMOOTH",
"385 53 OFFCURVE",
"356 65 OFFCURVE",
"334 86 CURVE SMOOTH",
"297 121 OFFCURVE",
"286 179 OFFCURVE",
"299 254 CURVE SMOOTH",
"362 612 LINE",
"596 612 LINE SMOOTH",
"700 612 OFFCURVE",
"706 574 OFFCURVE",
"696 517 CURVE SMOOTH",
"680 425 LINE",
"739 425 LINE",
"818 872 LINE",
"759 872 LINE",
"744 788 LINE SMOOTH",
"730 709 OFFCURVE",
"711 671 OFFCURVE",
"607 671 CURVE SMOOTH",
"373 671 LINE",
"483 1297 LINE",
"807 1290 LINE SMOOTH",
"888 1288 OFFCURVE",
"947 1267 OFFCURVE",
"982 1226 CURVE SMOOTH",
"1022 1180 OFFCURVE",
"1033 1111 OFFCURVE",
"1015 1008 CURVE",
"1080 1008 LINE",
"1142 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"310 1300 OFFCURVE",
"355 1265 OFFCURVE",
"343 1195 CURVE SMOOTH",
"162 163 LINE SMOOTH",
"150 93 OFFCURVE",
"91 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
28 1 2 3 44 16 2 5 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 5 0 6 1 5 6 103 4 1 2 2 3 95 0 3 3 92 77 7 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 5 0 6 1 5 6 103 7 1 1 0 0 1 0 99 4 1 2 2 3 95 0 3 3 92 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 3 4 1 2 5 3 2 105 0 5 0 6 1 5 6 103 7 1 1 0 0 1 89 7 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 1 6 0 6 1 0 128 0 0 0 132 0 3 4 1 2 5 3 2 105 0 5 6 6 5 87 0 5 5 6 95 0 6 5 6 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
77 74 69 66 53 75 99 22 35 81 8 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1089;
},
{
anchors = (
{
name = bottom;
position = "{528, 0}";
},
{
name = ogonek;
position = "{1011, 10}";
},
{
name = top;
position = "{748, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1103 383 LINE",
"1107 399 OFFCURVE",
"1010 399 OFFCURVE",
"1008 383 QCURVE",
"931 97 OFFCURVE",
"765 90 QCURVE SMOOTH",
"475 78 LINE SMOOTH",
"377 74 OFFCURVE",
"370 156 QCURVE SMOOTH",
"368 190 OFFCURVE",
"375 223 QCURVE SMOOTH",
"449 571 LINE SMOOTH",
"455 598 OFFCURVE",
"475 598 QCURVE SMOOTH",
"676 598 LINE SMOOTH",
"715 598 OFFCURVE",
"753 576 OFFCURVE",
"748 547 QCURVE SMOOTH",
"726 418 LINE",
"722 401 OFFCURVE",
"808 402 OFFCURVE",
"810 418 QCURVE SMOOTH",
"847 670 OFFCURVE",
"907 885 QCURVE SMOOTH",
"912 903 OFFCURVE",
"821 903 OFFCURVE",
"817 885 QCURVE SMOOTH",
"782 739 LINE SMOOTH",
"775 710 OFFCURVE",
"753 702 QCURVE",
"731 692 OFFCURVE",
"684 692 QCURVE SMOOTH",
"504 692 LINE",
"480 693 OFFCURVE",
"480 711 QCURVE SMOOTH",
"480 717 OFFCURVE",
"481 725 QCURVE",
"596 1233 LINE",
"601 1264 OFFCURVE",
"640 1264 QCURVE SMOOTH",
"763 1264 OFFCURVE",
"911 1257 QCURVE SMOOTH",
"996 1253 OFFCURVE",
"1087 1143 OFFCURVE",
"1091 1094 QCURVE SMOOTH",
"1095 1043 OFFCURVE",
"1093 1010 QCURVE",
"1090 993 OFFCURVE",
"1182 994 OFFCURVE",
"1187 1012 QCURVE",
"1245 1300 LINE SMOOTH",
"1248 1315 OFFCURVE",
"1247 1327 QCURVE",
"1243 1358 OFFCURVE",
"1180 1358 QCURVE SMOOTH",
"1080 1358 OFFCURVE",
"586 1354 OFFCURVE",
"309 1354 OFFCURVE",
"206 1358 QCURVE",
"193 1358 OFFCURVE",
"181 1292 OFFCURVE",
"183 1264 OFFCURVE",
"191 1264 QCURVE SMOOTH",
"337 1264 OFFCURVE",
"343 1196 QCURVE",
"345 1169 OFFCURVE",
"342 1157 QCURVE SMOOTH",
"142 217 LINE SMOOTH",
"125 137 OFFCURVE",
"53 86 OFFCURVE",
"-45 86 QCURVE SMOOTH",
"-59 86 OFFCURVE",
"-71 18 OFFCURVE",
"-65 -8 OFFCURVE",
"-57 -8 QCURVE",
"118 0 OFFCURVE",
"341 0 OFFCURVE",
"879 -8 OFFCURVE",
"979 -8 QCURVE SMOOTH",
"1028 -8 OFFCURVE",
"1033 20 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1085 0 LINE",
"1148 354 LINE",
"1045 354 LINE",
"1035 299 OFFCURVE",
"1022 260 OFFCURVE",
"1004 227 CURVE SMOOTH",
"956 137 OFFCURVE",
"880 92 OFFCURVE",
"775 90 CURVE SMOOTH",
"551 86 LINE SMOOTH",
"522 86 OFFCURVE",
"497 93 OFFCURVE",
"473 106 CURVE SMOOTH",
"428 131 OFFCURVE",
"410 169 OFFCURVE",
"419 221 CURVE SMOOTH",
"485 594 LINE",
"649 594 LINE SMOOTH",
"731 594 OFFCURVE",
"767 565 OFFCURVE",
"756 506 CURVE SMOOTH",
"741 417 LINE",
"842 417 LINE",
"924 881 LINE",
"823 881 LINE",
"804 778 LINE SMOOTH",
"794 717 OFFCURVE",
"747 686 OFFCURVE",
"665 686 CURVE SMOOTH",
"501 686 LINE",
"604 1266 LINE",
"926 1255 LINE SMOOTH",
"968 1254 OFFCURVE",
"1006 1237 OFFCURVE",
"1042 1206 CURVE SMOOTH",
"1098 1156 OFFCURVE",
"1119 1087 OFFCURVE",
"1102 991 CURVE",
"1202 991 LINE",
"1267 1358 LINE",
"192 1358 LINE",
"192 1272 LINE",
"319 1272 OFFCURVE",
"356 1238 OFFCURVE",
"343 1167 CURVE SMOOTH",
"171 191 LINE SMOOTH",
"158 120 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
28 1 2 3 16 1 4 2 44 1 6 7 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
28 1 2 3 16 1 4 5 44 1 6 7 3 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 6 0 9 8 6 9 103 5 1 2 2 3 95 0 3 3 31 77 10 1 1 1 0 96 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 6 0 9 8 6 9 103 10 1 1 0 0 1 0 100 5 1 2 2 3 95 0 3 3 31 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 3 5 1 2 4 3 2 105 0 6 0 9 8 6 9 103 10 1 1 0 0 1 89 10 1 1 1 0 96 0 0 1 0 80 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 1 0 9 1 0 126 0 0 0 132 0 3 5 1 2 4 3 2 105 0 6 9 9 6 87 0 6 6 9 95 0 9 6 9 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
0 2 3 5 5 2 114 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 1 0 9 1 0 126 0 0 0 132 0 3 0 5 4 3 5 103 0 6 9 9 6 87 0 6 6 9 95 0 9 6 9 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
79 78 76 73 68 65 20 21 53 54 21 99 22 35 81 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1205;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"1206 383 LINE",
"1210 399 OFFCURVE",
"1113 399 OFFCURVE",
"1111 383 QCURVE",
"1034 96 OFFCURVE",
"868 90 QCURVE SMOOTH",
"578 78 LINE SMOOTH",
"481 74 OFFCURVE",
"473 156 QCURVE SMOOTH",
"470 190 OFFCURVE",
"478 223 QCURVE SMOOTH",
"552 571 LINE SMOOTH",
"558 598 OFFCURVE",
"578 598 QCURVE SMOOTH",
"779 598 LINE SMOOTH",
"818 598 OFFCURVE",
"857 576 OFFCURVE",
"851 547 QCURVE SMOOTH",
"829 418 LINE",
"825 401 OFFCURVE",
"911 402 OFFCURVE",
"913 418 QCURVE SMOOTH",
"954 674 OFFCURVE",
"1010 885 QCURVE SMOOTH",
"1014 903 OFFCURVE",
"924 903 OFFCURVE",
"920 885 QCURVE SMOOTH",
"885 739 LINE SMOOTH",
"878 710 OFFCURVE",
"856 702 QCURVE",
"834 692 OFFCURVE",
"787 692 QCURVE SMOOTH",
"607 692 LINE",
"584 693 OFFCURVE",
"583 711 QCURVE SMOOTH",
"582 717 OFFCURVE",
"584 725 QCURVE",
"699 1233 LINE",
"704 1264 OFFCURVE",
"743 1264 QCURVE SMOOTH",
"866 1265 OFFCURVE",
"1014 1257 QCURVE SMOOTH",
"1099 1251 OFFCURVE",
"1190 1143 OFFCURVE",
"1194 1094 QCURVE SMOOTH",
"1199 1043 OFFCURVE",
"1196 1010 QCURVE",
"1193 993 OFFCURVE",
"1285 994 OFFCURVE",
"1290 1012 QCURVE",
"1348 1300 LINE SMOOTH",
"1351 1315 OFFCURVE",
"1350 1327 QCURVE",
"1346 1358 OFFCURVE",
"1283 1358 QCURVE SMOOTH",
"1183 1358 OFFCURVE",
"689 1354 OFFCURVE",
"412 1354 OFFCURVE",
"309 1358 QCURVE",
"296 1358 OFFCURVE",
"284 1292 OFFCURVE",
"286 1264 OFFCURVE",
"294 1264 QCURVE SMOOTH",
"440 1264 OFFCURVE",
"446 1196 QCURVE",
"448 1169 OFFCURVE",
"445 1157 QCURVE SMOOTH",
"245 217 LINE SMOOTH",
"227 137 OFFCURVE",
"156 86 OFFCURVE",
"58 86 QCURVE SMOOTH",
"44 86 OFFCURVE",
"32 18 OFFCURVE",
"38 -8 OFFCURVE",
"46 -8 QCURVE",
"221 0 OFFCURVE",
"444 0 OFFCURVE",
"982 -8 OFFCURVE",
"1082 -8 QCURVE SMOOTH",
"1131 -9 OFFCURVE",
"1136 20 QCURVE SMOOTH"
);
}
);
};
hints = (
{
origin = "{0, 40}";
scale = "{1, -1}";
type = Corner;
name = _corner.halfserif;
},
{
origin = "{0, 41}";
type = Corner;
name = _corner.halfserif;
}
);
layerId = "437804EC-007B-4B28-AE22-75F8E74DE2C2";
name = "Aug 14 18, 12:17";
paths = (
{
closed = 1;
nodes = (
"1066 0 LINE",
"1129 354 LINE",
"1026 354 LINE",
"1016 299 OFFCURVE",
"1003 260 OFFCURVE",
"985 227 CURVE SMOOTH",
"937 137 OFFCURVE",
"861 92 OFFCURVE",
"756 90 CURVE SMOOTH",
"532 86 LINE",
"503 86 OFFCURVE",
"478 93 OFFCURVE",
"454 106 CURVE SMOOTH",
"409 131 OFFCURVE",
"391 169 OFFCURVE",
"400 221 CURVE SMOOTH",
"466 594 LINE",
"630 594 LINE SMOOTH",
"712 594 OFFCURVE",
"748 565 OFFCURVE",
"737 506 CURVE SMOOTH",
"722 417 LINE",
"823 417 LINE",
"905 881 LINE",
"804 881 LINE",
"785 778 LINE SMOOTH",
"775 717 OFFCURVE",
"728 686 OFFCURVE",
"646 686 CURVE SMOOTH",
"482 686 LINE",
"585 1266 LINE",
"907 1255 LINE SMOOTH",
"949 1254 OFFCURVE",
"987 1237 OFFCURVE",
"1023 1206 CURVE SMOOTH",
"1079 1156 OFFCURVE",
"1100 1087 OFFCURVE",
"1083 991 CURVE",
"1183 991 LINE",
"1248 1358 LINE",
"358 1358 LINE",
"118 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
28 1 2 3 16 1 4 2 44 1 6 7 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
28 1 2 3 16 1 4 5 44 1 6 7 3 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 6 0 9 8 6 9 103 5 1 2 2 3 95 0 3 3 31 77 10 1 1 1 0 96 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 6 0 9 8 6 9 103 10 1 1 0 0 1 0 100 5 1 2 2 3 95 0 3 3 31 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 3 5 1 2 4 3 2 105 0 6 0 9 8 6 9 103 10 1 1 0 0 1 89 10 1 1 1 0 96 0 0 1 0 80 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
0 4 2 7 2 4 7 128 0 7 6 2 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 1 0 9 1 0 126 0 0 0 132 0 3 5 1 2 4 3 2 105 0 6 9 9 6 87 0 6 6 9 95 0 9 6 9 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
0 2 3 5 5 2 114 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 8 9 11 9 8 11 128 0 11 1 9 11 1 126 0 1 0 9 1 0 126 0 0 0 132 0 3 0 5 4 3 5 103 0 6 9 9 6 87 0 6 6 9 95 0 9 6 9 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
79 78 76 73 68 65 20 21 53 54 21 99 22 35 81 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1255;
}
);
leftMetricsKey = H;
note = E;
rightKerningGroup = AE;
unicode = 0045;
},
{
glyphname = Eacute;
lastChange = "2018-08-18 13:12:09 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 562, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 583, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Eacute;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 00C9;
},
{
glyphname = Ebreve;
lastChange = "2018-08-18 13:12:08 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 653, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 669, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Ebreve;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 0114;
},
{
glyphname = Ecircumflex;
lastChange = "2018-08-18 13:12:08 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 563, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 583, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Ecircumflex;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 00CA;
},
{
glyphname = Edieresis;
lastChange = "2018-08-18 13:12:09 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 654, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 671, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Edieresis;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 00CB;
},
{
glyphname = Egrave;
lastChange = "2018-08-18 13:12:09 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 565, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 590, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Egrave;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 00C8;
},
{
glyphname = Emacron;
lastChange = "2018-08-18 13:12:09 +0000";
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 559, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1089;
},
{
components = (
{
name = E;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 577, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1205;
}
);
leftMetricsKey = E;
note = Emacron;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 0112;
},
{
glyphname = Eogonek;
lastChange = "2018-08-18 12:30:45 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"747 0 LINE",
"585 -99 OFFCURVE",
"509 -191 OFFCURVE",
"509 -288 CURVE SMOOTH",
"509 -337 OFFCURVE",
"521 -484 OFFCURVE",
"705 -484 CURVE SMOOTH",
"793 -484 OFFCURVE",
"860 -454 OFFCURVE",
"904 -394 CURVE",
"888 -369 LINE",
"846 -388 OFFCURVE",
"810 -398 OFFCURVE",
"779 -398 CURVE SMOOTH",
"653 -398 OFFCURVE",
"640 -298 OFFCURVE",
"640 -253 CURVE SMOOTH",
"641 -123 OFFCURVE",
"785 0 OFFCURVE",
"937 0 CURVE SMOOTH",
"979 0 LINE",
"1040 342 LINE",
"975 342 LINE",
"965 290 OFFCURVE",
"954 254 OFFCURVE",
"938 222 CURVE SMOOTH",
"887 120 OFFCURVE",
"799 65 OFFCURVE",
"666 61 CURVE SMOOTH",
"430 54 LINE SMOOTH",
"395 53 OFFCURVE",
"366 65 OFFCURVE",
"344 86 CURVE SMOOTH",
"307 121 OFFCURVE",
"296 179 OFFCURVE",
"309 254 CURVE SMOOTH",
"372 612 LINE",
"606 612 LINE SMOOTH",
"710 612 OFFCURVE",
"716 574 OFFCURVE",
"706 517 CURVE SMOOTH",
"690 425 LINE",
"749 425 LINE",
"828 872 LINE",
"769 872 LINE",
"754 788 LINE SMOOTH",
"740 709 OFFCURVE",
"721 671 OFFCURVE",
"617 671 CURVE SMOOTH",
"383 671 LINE",
"493 1297 LINE",
"817 1290 LINE SMOOTH",
"898 1288 OFFCURVE",
"957 1267 OFFCURVE",
"992 1226 CURVE SMOOTH",
"1032 1180 OFFCURVE",
"1043 1111 OFFCURVE",
"1025 1008 CURVE",
"1090 1008 LINE",
"1152 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"320 1300 OFFCURVE",
"365 1265 OFFCURVE",
"353 1195 CURVE SMOOTH",
"172 163 LINE SMOOTH",
"160 93 OFFCURVE",
"81 58 OFFCURVE",
"-34 58 CURVE",
"-34 0 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"747 0 LINE",
"585 -99 OFFCURVE",
"509 -191 OFFCURVE",
"509 -288 CURVE SMOOTH",
"509 -337 OFFCURVE",
"521 -484 OFFCURVE",
"705 -484 CURVE SMOOTH",
"793 -484 OFFCURVE",
"860 -454 OFFCURVE",
"904 -394 CURVE",
"888 -369 LINE",
"846 -388 OFFCURVE",
"810 -398 OFFCURVE",
"779 -398 CURVE SMOOTH",
"653 -398 OFFCURVE",
"640 -298 OFFCURVE",
"640 -253 CURVE SMOOTH",
"641 -123 OFFCURVE",
"785 0 OFFCURVE",
"937 0 CURVE SMOOTH",
"979 0 LINE",
"1040 342 LINE",
"975 342 LINE",
"965 290 OFFCURVE",
"954 254 OFFCURVE",
"938 222 CURVE SMOOTH",
"887 120 OFFCURVE",
"799 65 OFFCURVE",
"666 61 CURVE SMOOTH",
"430 54 LINE SMOOTH",
"395 53 OFFCURVE",
"366 65 OFFCURVE",
"344 86 CURVE SMOOTH",
"307 121 OFFCURVE",
"296 179 OFFCURVE",
"309 254 CURVE SMOOTH",
"372 612 LINE",
"606 612 LINE SMOOTH",
"710 612 OFFCURVE",
"716 574 OFFCURVE",
"706 517 CURVE SMOOTH",
"690 425 LINE",
"749 425 LINE",
"828 872 LINE",
"769 872 LINE",
"754 788 LINE SMOOTH",
"740 709 OFFCURVE",
"721 671 OFFCURVE",
"617 671 CURVE SMOOTH",
"383 671 LINE",
"493 1297 LINE",
"817 1290 LINE SMOOTH",
"898 1288 OFFCURVE",
"957 1267 OFFCURVE",
"992 1226 CURVE SMOOTH",
"1032 1180 OFFCURVE",
"1043 1111 OFFCURVE",
"1025 1008 CURVE",
"1090 1008 LINE",
"1152 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"320 1300 OFFCURVE",
"366 1265 OFFCURVE",
"355 1205 CURVE SMOOTH",
"172 163 LINE SMOOTH",
"160 93 OFFCURVE",
"81 58 OFFCURVE",
"-34 58 CURVE",
"-34 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
34 1 3 4 50 22 2 6 3 99 1 10 1 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
34 1 3 4 50 22 2 6 3 99 1 10 9 3 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 6 0 7 2 6 7 103 0 10 0 0 10 0 101 5 1 3 3 4 95 0 4 4 92 77 8 1 2 2 1 97 9 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 6 0 7 2 6 7 103 8 1 2 9 1 1 10 2 1 105 0 10 0 0 10 0 101 5 1 3 3 4 95 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 8 1 2 9 1 1 10 2 1 105 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 2 7 1 7 2 1 128 9 1 1 10 7 1 10 126 0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 2 7 1 7 2 1 128 0 1 9 7 1 9 126 0 9 10 1 9 112 0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
96 94 91 89 83 80 75 72 53 75 99 22 35 69 33 11 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 1099;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1224 383 LINE",
"1228 399 OFFCURVE",
"1131 399 OFFCURVE",
"1129 383 QCURVE",
"1052 96 OFFCURVE",
"886 90 QCURVE SMOOTH",
"596 78 LINE SMOOTH",
"499 74 OFFCURVE",
"491 156 QCURVE SMOOTH",
"488 190 OFFCURVE",
"496 223 QCURVE SMOOTH",
"570 571 LINE SMOOTH",
"576 598 OFFCURVE",
"596 598 QCURVE SMOOTH",
"797 598 LINE SMOOTH",
"836 598 OFFCURVE",
"855 586 QCURVE",
"875 576 OFFCURVE",
"869 547 QCURVE SMOOTH",
"848 418 LINE",
"843 401 OFFCURVE",
"929 402 OFFCURVE",
"932 418 QCURVE SMOOTH",
"972 674 OFFCURVE",
"1028 885 QCURVE SMOOTH",
"1032 903 OFFCURVE",
"942 903 OFFCURVE",
"938 885 QCURVE SMOOTH",
"903 739 LINE SMOOTH",
"896 710 OFFCURVE",
"874 702 QCURVE",
"852 692 OFFCURVE",
"805 692 QCURVE SMOOTH",
"625 692 LINE",
"602 693 OFFCURVE",
"601 711 QCURVE SMOOTH",
"600 717 OFFCURVE",
"602 725 QCURVE",
"717 1233 LINE",
"723 1264 OFFCURVE",
"762 1264 QCURVE SMOOTH",
"886 1265 OFFCURVE",
"1032 1257 QCURVE SMOOTH",
"1117 1251 OFFCURVE",
"1208 1143 OFFCURVE",
"1217 1043 OFFCURVE",
"1214 1010 QCURVE",
"1211 993 OFFCURVE",
"1303 994 OFFCURVE",
"1308 1012 QCURVE",
"1366 1300 LINE SMOOTH",
"1369 1315 OFFCURVE",
"1368 1327 QCURVE",
"1364 1358 OFFCURVE",
"1301 1358 QCURVE SMOOTH",
"1201 1358 OFFCURVE",
"707 1354 OFFCURVE",
"430 1354 OFFCURVE",
"327 1358 QCURVE",
"314 1358 OFFCURVE",
"302 1292 OFFCURVE",
"305 1264 OFFCURVE",
"313 1264 QCURVE SMOOTH",
"459 1264 OFFCURVE",
"464 1196 QCURVE",
"466 1169 OFFCURVE",
"463 1157 QCURVE SMOOTH",
"263 217 LINE SMOOTH",
"245 137 OFFCURVE",
"174 86 OFFCURVE",
"76 86 QCURVE SMOOTH",
"62 86 OFFCURVE",
"51 18 OFFCURVE",
"56 -8 OFFCURVE",
"64 -8 QCURVE",
"239 0 OFFCURVE",
"462 0 OFFCURVE",
"730 -4 QCURVE SMOOTH",
"829 -6 OFFCURVE",
"905 -6 QCURVE",
"856 -37 OFFCURVE",
"809 -82 QCURVE SMOOTH",
"674 -213 OFFCURVE",
"684 -334 QCURVE SMOOTH",
"690 -403 OFFCURVE",
"790 -487 OFFCURVE",
"874 -487 QCURVE SMOOTH",
"1007 -487 OFFCURVE",
"1083 -381 QCURVE",
"1083 -373 LINE",
"1080 -348 OFFCURVE",
"1063 -342 QCURVE",
"1025 -373 OFFCURVE",
"966 -373 QCURVE SMOOTH",
"925 -373 OFFCURVE",
"859 -324 OFFCURVE",
"856 -283 QCURVE SMOOTH",
"848 -195 OFFCURVE",
"994 -8 OFFCURVE",
"1100 -8 QCURVE SMOOTH",
"1149 -9 OFFCURVE",
"1154 20 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"889 0 LINE",
"794 -54 OFFCURVE",
"653 -182 OFFCURVE",
"653 -315 CURVE SMOOTH",
"653 -363 OFFCURVE",
"676 -487 OFFCURVE",
"844 -487 CURVE SMOOTH",
"933 -487 OFFCURVE",
"1002 -452 OFFCURVE",
"1053 -381 CURVE",
"1033 -342 LINE",
"1008 -363 OFFCURVE",
"975 -373 OFFCURVE",
"936 -373 CURVE SMOOTH",
"868 -373 OFFCURVE",
"825 -328 OFFCURVE",
"825 -266 CURVE SMOOTH",
"825 -151 OFFCURVE",
"944 0 OFFCURVE",
"1078 0 CURVE SMOOTH",
"1105 0 LINE",
"1168 354 LINE",
"1065 354 LINE",
"1055 299 OFFCURVE",
"1042 260 OFFCURVE",
"1024 227 CURVE SMOOTH",
"976 137 OFFCURVE",
"900 92 OFFCURVE",
"795 90 CURVE SMOOTH",
"571 86 LINE SMOOTH",
"542 86 OFFCURVE",
"517 93 OFFCURVE",
"493 106 CURVE SMOOTH",
"448 131 OFFCURVE",
"430 169 OFFCURVE",
"439 221 CURVE SMOOTH",
"505 594 LINE",
"669 594 LINE SMOOTH",
"751 594 OFFCURVE",
"787 565 OFFCURVE",
"776 506 CURVE SMOOTH",
"761 417 LINE",
"862 417 LINE",
"944 881 LINE",
"843 881 LINE",
"824 778 LINE SMOOTH",
"814 717 OFFCURVE",
"767 686 OFFCURVE",
"685 686 CURVE SMOOTH",
"521 686 LINE",
"624 1266 LINE",
"946 1255 LINE SMOOTH",
"988 1254 OFFCURVE",
"1026 1237 OFFCURVE",
"1062 1206 CURVE SMOOTH",
"1118 1156 OFFCURVE",
"1139 1087 OFFCURVE",
"1122 991 CURVE",
"1222 991 LINE",
"1287 1358 LINE",
"200 1358 LINE",
"200 1272 LINE",
"335 1272 OFFCURVE",
"376 1238 OFFCURVE",
"363 1167 CURVE SMOOTH",
"191 191 LINE SMOOTH",
"178 120 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
49 1 5 6 37 1 7 5 64 1 9 10 10 1 1 0 4 76 12 1 1 1 75 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
49 1 5 6 37 1 7 8 64 1 9 10 10 1 1 0 4 76 12 1 1 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 9 0 12 11 9 12 103 0 1 0 2 1 2 101 8 1 5 5 6 95 0 6 6 31 77 13 1 4 4 0 97 3 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 9 0 12 11 9 12 103 13 1 4 3 1 0 1 4 0 105 0 1 0 2 1 2 101 8 1 5 5 6 95 0 6 6 31 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 13 1 4 3 1 0 1 4 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 0 3 1 3 0 114 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 13 1 4 0 3 0 4 3 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 4 3 12 4 3 126 0 3 0 12 3 0 126 0 0 1 3 0 112 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 5 6 8 8 5 114 0 7 8 10 8 7 10 128 0 10 9 8 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 4 3 12 4 3 126 0 3 0 12 3 0 126 0 0 1 3 0 112 0 6 0 8 7 6 8 103 0 9 0 12 11 9 12 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
100 99 97 94 89 86 81 80 76 75 70 67 53 21 99 22 35 86 37 36 33 15 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1240;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"1059 -397 OFFCURVE",
"1060 -394 OFFCURVE",
"1059 -390 CURVE SMOOTH",
"1058 -381 OFFCURVE",
"1053 -375 OFFCURVE",
"1043 -373 CURVE",
"1001 -392 OFFCURVE",
"965 -402 OFFCURVE",
"934 -402 CURVE SMOOTH",
"850 -402 OFFCURVE",
"803 -359 OFFCURVE",
"796 -272 CURVE SMOOTH",
"784 -136 OFFCURVE",
"934 -7 OFFCURVE",
"1092 -7 CURVE SMOOTH",
"1105 -7 OFFCURVE",
"1114 2 OFFCURVE",
"1117 19 CURVE SMOOTH",
"1183 344 LINE SMOOTH",
"1185 353 OFFCURVE",
"1172 358 OFFCURVE",
"1145 358 CURVE SMOOTH",
"1117 358 OFFCURVE",
"1102 353 OFFCURVE",
"1100 344 CURVE SMOOTH",
"1052 166 OFFCURVE",
"951 74 OFFCURVE",
"796 69 CURVE SMOOTH",
"557 61 LINE SMOOTH",
"481 61 OFFCURVE",
"440 94 OFFCURVE",
"434 160 CURVE SMOOTH",
"431 191 OFFCURVE",
"436 237 OFFCURVE",
"449 300 CURVE SMOOTH",
"505 581 LINE SMOOTH",
"508 598 OFFCURVE",
"521 607 OFFCURVE",
"543 607 CURVE SMOOTH",
"741 607 LINE SMOOTH",
"810 607 OFFCURVE",
"845 593 OFFCURVE",
"848 566 CURVE SMOOTH",
"848 557 OFFCURVE",
"847 544 OFFCURVE",
"844 527 CURVE SMOOTH",
"827 437 LINE SMOOTH",
"825 426 OFFCURVE",
"835 421 OFFCURVE",
"858 421 CURVE SMOOTH",
"880 421 OFFCURVE",
"892 426 OFFCURVE",
"894 436 CURVE",
"907 554 OFFCURVE",
"935 697 OFFCURVE",
"979 864 CURVE",
"981 874 OFFCURVE",
"969 879 OFFCURVE",
"945 879 CURVE SMOOTH",
"921 879 OFFCURVE",
"908 874 OFFCURVE",
"906 864 CURVE SMOOTH",
"888 764 LINE SMOOTH",
"881 725 OFFCURVE",
"866 700 OFFCURVE",
"844 688 CURVE SMOOTH",
"830 680 OFFCURVE",
"800 676 OFFCURVE",
"754 676 CURVE SMOOTH",
"562 676 LINE SMOOTH",
"543 676 OFFCURVE",
"532 683 OFFCURVE",
"531 698 CURVE SMOOTH",
"531 702 OFFCURVE",
"531 707 OFFCURVE",
"532 713 CURVE",
"643 1267 LINE SMOOTH",
"646 1282 OFFCURVE",
"657 1289 OFFCURVE",
"676 1289 CURVE SMOOTH",
"736 1289 OFFCURVE",
"838 1286 OFFCURVE",
"980 1280 CURVE SMOOTH",
"1064 1276 OFFCURVE",
"1177 1215 OFFCURVE",
"1188 1088 CURVE SMOOTH",
"1189 1073 OFFCURVE",
"1188 1047 OFFCURVE",
"1184 1010 CURVE SMOOTH",
"1183 1001 OFFCURVE",
"1195 996 OFFCURVE",
"1221 996 CURVE SMOOTH",
"1248 996 OFFCURVE",
"1262 1001 OFFCURVE",
"1264 1010 CURVE SMOOTH",
"1325 1320 LINE SMOOTH",
"1326 1327 OFFCURVE",
"1326 1333 OFFCURVE",
"1326 1336 CURVE SMOOTH",
"1325 1351 OFFCURVE",
"1304 1358 OFFCURVE",
"1262 1358 CURVE SMOOTH",
"1081 1358 OFFCURVE",
"787 1354 OFFCURVE",
"607 1354 CURVE",
"811 1355 OFFCURVE",
"702 1354 OFFCURVE",
"607 1354 CURVE SMOOTH",
"512 1354 OFFCURVE",
"420 1355 OFFCURVE",
"331 1358 CURVE SMOOTH",
"314 1358 OFFCURVE",
"297 1282 OFFCURVE",
"318 1282 CURVE SMOOTH",
"423 1282 OFFCURVE",
"477 1256 OFFCURVE",
"482 1205 CURVE SMOOTH",
"483 1192 OFFCURVE",
"482 1181 OFFCURVE",
"481 1172 CURVE SMOOTH",
"284 186 LINE SMOOTH",
"263 86 OFFCURVE",
"208 69 OFFCURVE",
"81 69 CURVE SMOOTH",
"64 69 OFFCURVE",
"47 -7 OFFCURVE",
"68 -7 CURVE",
"156 -2 OFFCURVE",
"260 0 OFFCURVE",
"379 0 CURVE SMOOTH",
"498 0 OFFCURVE",
"640 -1 OFFCURVE",
"802 -4 CURVE SMOOTH",
"865 -5 OFFCURVE",
"877 -18 OFFCURVE",
"839 -43 CURVE SMOOTH",
"727 -119 OFFCURVE",
"656 -210 OFFCURVE",
"665 -310 CURVE SMOOTH",
"676 -429 OFFCURVE",
"740 -488 OFFCURVE",
"860 -488 CURVE SMOOTH",
"948 -488 OFFCURVE",
"1015 -458 OFFCURVE",
"1059 -398 CURVE"
);
}
);
};
layerId = "F9ECB7B3-4A29-4E3B-A73B-F75EAE448241";
name = "Aug 15 18, 07:48";
paths = (
{
closed = 1;
nodes = (
"1043 -369 LINE",
"1001 -388 OFFCURVE",
"965 -398 OFFCURVE",
"934 -398 CURVE SMOOTH",
"808 -398 OFFCURVE",
"795 -298 OFFCURVE",
"795 -253 CURVE SMOOTH",
"796 -123 OFFCURVE",
"940 0 OFFCURVE",
"1092 0 CURVE",
"796 53 LINE",
"802 10 LINE",
"917 9 LINE",
"902 0 OFFCURVE",
"853 -30 OFFCURVE",
"839 -39 CURVE SMOOTH",
"733 -109 OFFCURVE",
"664 -195 OFFCURVE",
"664 -288 CURVE SMOOTH",
"664 -337 OFFCURVE",
"676 -484 OFFCURVE",
"860 -484 CURVE SMOOTH",
"948 -484 OFFCURVE",
"1015 -454 OFFCURVE",
"1059 -394 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
34 1 3 4 50 22 2 6 3 99 1 10 1 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
34 1 3 4 50 22 2 6 3 99 1 10 9 3 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 6 0 7 2 6 7 103 0 10 0 0 10 0 101 5 1 3 3 4 95 0 4 4 92 77 8 1 2 2 1 97 9 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 6 0 7 2 6 7 103 8 1 2 9 1 1 10 2 1 105 0 10 0 0 10 0 101 5 1 3 3 4 95 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 8 1 2 9 1 1 10 2 1 105 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 2 7 1 7 2 1 128 9 1 1 10 7 1 10 126 0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 2 7 1 7 2 1 128 0 1 9 7 1 9 126 0 9 10 1 9 112 0 4 5 1 3 6 4 3 105 0 6 0 7 2 6 7 103 0 10 0 0 10 89 0 10 10 0 97 0 0 10 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
96 94 91 89 83 80 75 72 53 75 99 22 35 69 33 11 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 1255;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"1185 383 LINE",
"1189 399 OFFCURVE",
"1092 399 OFFCURVE",
"1090 383 QCURVE",
"1013 96 OFFCURVE",
"847 90 QCURVE SMOOTH",
"557 78 LINE SMOOTH",
"460 74 OFFCURVE",
"452 156 QCURVE SMOOTH",
"449 190 OFFCURVE",
"457 223 QCURVE SMOOTH",
"531 571 LINE SMOOTH",
"537 598 OFFCURVE",
"557 598 QCURVE SMOOTH",
"758 598 LINE SMOOTH",
"797 598 OFFCURVE",
"816 586 QCURVE",
"836 576 OFFCURVE",
"830 547 QCURVE SMOOTH",
"809 418 LINE",
"804 401 OFFCURVE",
"890 402 OFFCURVE",
"893 418 QCURVE SMOOTH",
"933 674 OFFCURVE",
"989 885 QCURVE SMOOTH",
"993 903 OFFCURVE",
"903 903 OFFCURVE",
"899 885 QCURVE SMOOTH",
"864 739 LINE SMOOTH",
"857 710 OFFCURVE",
"835 702 QCURVE",
"813 692 OFFCURVE",
"766 692 QCURVE SMOOTH",
"586 692 LINE",
"563 693 OFFCURVE",
"562 711 QCURVE SMOOTH",
"561 717 OFFCURVE",
"563 725 QCURVE",
"678 1233 LINE",
"684 1264 OFFCURVE",
"723 1264 QCURVE SMOOTH",
"847 1265 OFFCURVE",
"993 1257 QCURVE SMOOTH",
"1078 1251 OFFCURVE",
"1169 1143 OFFCURVE",
"1178 1043 OFFCURVE",
"1175 1010 QCURVE",
"1172 993 OFFCURVE",
"1264 994 OFFCURVE",
"1269 1012 QCURVE",
"1327 1300 LINE SMOOTH",
"1330 1315 OFFCURVE",
"1329 1327 QCURVE",
"1325 1358 OFFCURVE",
"1262 1358 QCURVE SMOOTH",
"1162 1358 OFFCURVE",
"668 1354 OFFCURVE",
"391 1354 OFFCURVE",
"288 1358 QCURVE",
"275 1358 OFFCURVE",
"263 1292 OFFCURVE",
"266 1264 OFFCURVE",
"274 1264 QCURVE SMOOTH",
"420 1264 OFFCURVE",
"425 1196 QCURVE",
"427 1169 OFFCURVE",
"424 1157 QCURVE SMOOTH",
"224 217 LINE SMOOTH",
"206 137 OFFCURVE",
"135 86 OFFCURVE",
"37 86 QCURVE SMOOTH",
"23 86 OFFCURVE",
"12 18 OFFCURVE",
"17 -8 OFFCURVE",
"25 -8 QCURVE",
"200 0 OFFCURVE",
"423 0 OFFCURVE",
"691 -4 QCURVE SMOOTH",
"790 -6 OFFCURVE",
"866 -6 QCURVE",
"817 -37 OFFCURVE",
"770 -82 QCURVE SMOOTH",
"635 -213 OFFCURVE",
"645 -334 QCURVE SMOOTH",
"651 -403 OFFCURVE",
"751 -487 OFFCURVE",
"835 -487 QCURVE SMOOTH",
"968 -487 OFFCURVE",
"1044 -381 QCURVE",
"1044 -373 LINE",
"1041 -348 OFFCURVE",
"1024 -342 QCURVE",
"986 -373 OFFCURVE",
"927 -373 QCURVE SMOOTH",
"886 -373 OFFCURVE",
"820 -324 OFFCURVE",
"817 -283 QCURVE SMOOTH",
"809 -195 OFFCURVE",
"955 -8 OFFCURVE",
"1061 -8 QCURVE SMOOTH",
"1110 -9 OFFCURVE",
"1115 20 QCURVE SMOOTH"
);
}
);
};
layerId = "85383926-A687-4928-A538-9B36542ED362";
name = "Aug 15 18, 07:53";
paths = (
{
closed = 1;
nodes = (
"847 46 LINE",
"691 16 LINE",
"906 13 LINE",
"871 0 OFFCURVE",
"801 -52 OFFCURVE",
"770 -82 CURVE SMOOTH",
"687 -162 OFFCURVE",
"644 -240 OFFCURVE",
"644 -315 CURVE SMOOTH",
"644 -363 OFFCURVE",
"667 -487 OFFCURVE",
"835 -487 CURVE SMOOTH",
"924 -487 OFFCURVE",
"993 -452 OFFCURVE",
"1044 -381 CURVE",
"1024 -342 LINE",
"999 -363 OFFCURVE",
"966 -373 OFFCURVE",
"927 -373 CURVE SMOOTH",
"859 -373 OFFCURVE",
"816 -328 OFFCURVE",
"816 -266 CURVE SMOOTH",
"816 -151 OFFCURVE",
"935 0 OFFCURVE",
"1069 0 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
49 1 5 6 37 1 7 5 64 1 9 10 10 1 1 0 4 76 12 1 1 1 75 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
49 1 5 6 37 1 7 8 64 1 9 10 10 1 1 0 4 76 12 1 1 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 9 0 12 11 9 12 103 0 1 0 2 1 2 101 8 1 5 5 6 95 0 6 6 31 77 13 1 4 4 0 97 3 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 9 0 12 11 9 12 103 13 1 4 3 1 0 1 4 0 105 0 1 0 2 1 2 101 8 1 5 5 6 95 0 6 6 31 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 13 1 4 3 1 0 1 4 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 0 3 1 3 0 114 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 13 1 4 0 3 0 4 3 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 7 5 10 5 7 10 128 0 10 9 5 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 4 3 12 4 3 126 0 3 0 12 3 0 126 0 0 1 3 0 112 0 6 8 1 5 7 6 5 105 0 9 0 12 11 9 12 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 5 6 8 8 5 114 0 7 8 10 8 7 10 128 0 10 9 8 10 9 126 0 11 12 14 12 11 14 128 0 14 4 12 14 4 126 0 4 3 12 4 3 126 0 3 0 12 3 0 126 0 0 1 3 0 112 0 6 0 8 7 6 8 103 0 9 0 12 11 9 12 103 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
100 99 97 94 89 86 81 80 76 75 70 67 53 21 99 22 35 86 37 36 33 15 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1255;
}
);
leftMetricsKey = E;
note = Eogonek;
rightKerningGroup = AE;
rightMetricsKey = E;
unicode = 0118;
},
{
glyphname = Eth;
lastChange = "2018-08-18 12:19:19 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"720 0 LINE SMOOTH",
"1327 0 OFFCURVE",
"1518 586 OFFCURVE",
"1518 854 CURVE SMOOTH",
"1518 1172 OFFCURVE",
"1281 1358 OFFCURVE",
"892 1358 CURVE SMOOTH",
"321 1358 LINE",
"321 1300 LINE",
"456 1300 OFFCURVE",
"502 1265 OFFCURVE",
"489 1195 CURVE SMOOTH",
"307 163 LINE SMOOTH",
"294 93 OFFCURVE",
"226 58 OFFCURVE",
"101 58 CURVE",
"101 0 LINE"
);
},
{
closed = 1;
nodes = (
"454 53 OFFCURVE",
"424 131 OFFCURVE",
"453 298 CURVE SMOOTH",
"629 1297 LINE",
"819 1297 LINE SMOOTH",
"1154 1297 OFFCURVE",
"1369 1101 OFFCURVE",
"1369 820 CURVE SMOOTH",
"1369 584 OFFCURVE",
"1193 53 OFFCURVE",
"661 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"204 711 LINE",
"194 634 LINE",
"819 634 LINE",
"829 711 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"720 0 LINE SMOOTH",
"1327 0 OFFCURVE",
"1518 586 OFFCURVE",
"1518 854 CURVE SMOOTH",
"1518 1172 OFFCURVE",
"1281 1358 OFFCURVE",
"892 1358 CURVE SMOOTH",
"332 1358 LINE",
"332 1300 LINE",
"457 1300 OFFCURVE",
"501 1265 OFFCURVE",
"489 1195 CURVE SMOOTH",
"307 163 LINE SMOOTH",
"295 93 OFFCURVE",
"226 58 OFFCURVE",
"101 58 CURVE",
"101 0 LINE"
);
},
{
closed = 1;
nodes = (
"454 53 OFFCURVE",
"424 131 OFFCURVE",
"453 298 CURVE SMOOTH",
"629 1297 LINE",
"819 1297 LINE SMOOTH",
"1154 1297 OFFCURVE",
"1369 1101 OFFCURVE",
"1369 820 CURVE SMOOTH",
"1369 584 OFFCURVE",
"1193 53 OFFCURVE",
"661 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"204 711 LINE",
"194 634 LINE",
"819 634 LINE",
"829 711 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
7 1 3 8 1 2 1 3 2 103 6 1 4 4 5 95 0 5 5 92 77 9 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 6 1 4 4 5 95 0 5 5 92 77 0 9 9 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
7 1 3 8 1 2 1 3 2 103 6 1 4 4 5 95 0 5 5 92 77 9 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 6 1 4 4 5 95 0 5 5 92 77 0 9 9 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 0 6 6 5 95 0 5 5 92 77 0 9 9 0 96 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 0 9 0 0 9 0 100 0 6 6 5 95 0 5 5 92 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 0 5 0 6 4 5 6 105 7 1 3 8 1 2 1 3 2 103 0 9 0 0 9 89 0 9 9 0 96 0 0 9 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
65 63 51 36 36 99 21 51 36 35 82 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1484;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"216 719 LINE",
"202 625 LINE",
"865 625 LINE",
"878 719 LINE"
);
},
{
closed = 0;
nodes = (
"320 1355 LINE",
"81 4 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"811 0 LINE SMOOTH",
"1463 0 OFFCURVE",
"1670 569 OFFCURVE",
"1670 834 CURVE SMOOTH",
"1670 1162 OFFCURVE",
"1387 1358 OFFCURVE",
"1004 1358 CURVE SMOOTH",
"326 1358 LINE",
"326 1272 LINE",
"461 1272 OFFCURVE",
"502 1238 OFFCURVE",
"489 1167 CURVE SMOOTH",
"317 191 LINE SMOOTH",
"304 120 OFFCURVE",
"221 86 OFFCURVE",
"86 86 CURVE",
"86 0 LINE"
);
},
{
closed = 1;
nodes = (
"572 72 OFFCURVE",
"549 128 OFFCURVE",
"574 272 CURVE SMOOTH",
"752 1280 LINE",
"908 1280 LINE SMOOTH",
"1229 1280 OFFCURVE",
"1395 1062 OFFCURVE",
"1395 816 CURVE SMOOTH",
"1395 480 OFFCURVE",
"1138 72 OFFCURVE",
"756 72 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"216 719 LINE",
"202 625 LINE",
"865 625 LINE",
"878 719 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
7 1 3 8 1 2 1 3 2 103 6 1 4 4 5 95 0 5 5 31 77 9 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 0 6 6 5 95 0 5 5 31 77 0 9 9 0 96 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 7 1 3 8 1 2 1 3 2 103 0 9 0 0 9 0 100 0 6 6 5 95 0 5 5 31 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 4 6 3 6 4 114 0 1 2 9 9 1 114 0 5 0 6 4 5 6 105 7 1 3 8 1 2 1 3 2 103 0 9 0 0 9 89 0 9 9 0 96 0 0 9 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
62 60 50 37 36 98 20 50 37 34 84 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1638;
}
);
note = Eth;
rightKerningGroup = D;
rightMetricsKey = D;
unicode = 00D0;
},
{
glyphname = Euro;
lastChange = "2018-08-16 14:52:35 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1191.667 174.667 OFFCURVE",
"1196 183 OFFCURVE",
"1196 193 CURVE SMOOTH",
"1196 213 OFFCURVE",
"1187.667 223 OFFCURVE",
"1171 223 CURVE SMOOTH",
"1167 223 OFFCURVE",
"1163 222 OFFCURVE",
"1159 220 CURVE",
"980.333 121.333 OFFCURVE",
"881.333 88 OFFCURVE",
"728 88 CURVE SMOOTH",
"518.667 88 OFFCURVE",
"374 220 OFFCURVE",
"374 456 CURVE SMOOTH",
"374 481.333 OFFCURVE",
"377 512.667 OFFCURVE",
"383 550 CURVE",
"1042 550 LINE SMOOTH",
"1056 550 OFFCURVE",
"1063 567.5 OFFCURVE",
"1063 602.5 CURVE SMOOTH",
"1063 637.5 OFFCURVE",
"1056 655 OFFCURVE",
"1042 655 CURVE SMOOTH",
"406 655 LINE",
"419.333 711 OFFCURVE",
"428.667 745.333 OFFCURVE",
"434 758 CURVE",
"1103 758 LINE SMOOTH",
"1117.667 758 OFFCURVE",
"1125 775.5 OFFCURVE",
"1125 810.5 CURVE SMOOTH",
"1125 845.5 OFFCURVE",
"1117.667 863 OFFCURVE",
"1103 863 CURVE SMOOTH",
"477 863 LINE",
"605 1120.333 OFFCURVE",
"817.667 1314 OFFCURVE",
"1059 1314 CURVE SMOOTH",
"1175 1314 OFFCURVE",
"1223 1258.667 OFFCURVE",
"1307 1112 CURVE",
"1317 1092.667 OFFCURVE",
"1336 1083 OFFCURVE",
"1364 1083 CURVE SMOOTH",
"1420 1083 OFFCURVE",
"1480 1127.333 OFFCURVE",
"1480 1178 CURVE SMOOTH",
"1480 1208.667 OFFCURVE",
"1464.667 1240 OFFCURVE",
"1434 1272 CURVE SMOOTH",
"1371.333 1333.333 OFFCURVE",
"1217 1385 OFFCURVE",
"1085 1385 CURVE SMOOTH",
"782.333 1385 OFFCURVE",
"482.667 1155 OFFCURVE",
"328 863 CURVE",
"150 863 LINE SMOOTH",
"136 863 OFFCURVE",
"129 845.5 OFFCURVE",
"129 810.5 CURVE SMOOTH",
"129 775.5 OFFCURVE",
"136 758 OFFCURVE",
"150 758 CURVE SMOOTH",
"281 758 LINE",
"266.333 719.333 OFFCURVE",
"254.667 685 OFFCURVE",
"246 655 CURVE",
"89 655 LINE SMOOTH",
"74.333 655 OFFCURVE",
"67 637.5 OFFCURVE",
"67 602.5 CURVE SMOOTH",
"67 567.5 OFFCURVE",
"74.333 550 OFFCURVE",
"89 550 CURVE SMOOTH",
"222 550 LINE",
"215.333 509.333 OFFCURVE",
"212 469.333 OFFCURVE",
"212 430 CURVE SMOOTH",
"212 128.667 OFFCURVE",
"439.333 -29 OFFCURVE",
"658 -29 CURVE SMOOTH",
"855.333 -29 OFFCURVE",
"989.667 38.667 OFFCURVE",
"1183 168 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"812 -27 OFFCURVE",
"949 43 OFFCURVE",
"1122 168 CURVE",
"1095 210 LINE",
"911 106 OFFCURVE",
"846 70 OFFCURVE",
"673 70 CURVE SMOOTH",
"574 70 OFFCURVE",
"472 109 OFFCURVE",
"409 172 CURVE SMOOTH",
"333 248 OFFCURVE",
"280 379 OFFCURVE",
"280 521 CURVE",
"976 521 LINE",
"992 611 LINE",
"284 611 LINE",
"287 636 OFFCURVE",
"301 714 OFFCURVE",
"306 738 CURVE",
"1014 738 LINE",
"1030 828 LINE",
"331 828 LINE",
"369 950 OFFCURVE",
"400 1025 OFFCURVE",
"508 1146 CURVE SMOOTH",
"612 1263 OFFCURVE",
"724 1331 OFFCURVE",
"882 1331 CURVE SMOOTH",
"981 1331 OFFCURVE",
"1046 1288 OFFCURVE",
"1079 1236 CURVE SMOOTH",
"1130 1154 OFFCURVE",
"1141 1138 OFFCURVE",
"1180 1138 CURVE SMOOTH",
"1220 1138 OFFCURVE",
"1263 1169 OFFCURVE",
"1263 1214 CURVE SMOOTH",
"1263 1256 OFFCURVE",
"1217 1299 OFFCURVE",
"1171 1326 CURVE SMOOTH",
"1102 1366 OFFCURVE",
"1018 1385 OFFCURVE",
"895 1385 CURVE SMOOTH",
"703 1385 OFFCURVE",
"584 1325 OFFCURVE",
"444 1204 CURVE SMOOTH",
"329 1105 OFFCURVE",
"250 973 OFFCURVE",
"190 828 CURVE",
"56 828 LINE",
"40 738 LINE",
"159 738 LINE",
"155 717 OFFCURVE",
"140 634 OFFCURVE",
"137 611 CURVE",
"18 611 LINE",
"2 521 LINE",
"131 521 LINE",
"125 451 OFFCURVE",
"127 244 OFFCURVE",
"283 105 CURVE SMOOTH",
"382 17 OFFCURVE",
"493 -27 OFFCURVE",
"639 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
63 1 12 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 6 7 4 7 6 4 128 10 1 2 11 1 1 12 2 1 105 0 7 7 5 97 0 5 5 98 77 9 1 3 3 4 95 8 1 4 4 95 77 0 12 12 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 6 7 4 7 6 4 128 0 5 0 7 6 5 7 105 10 1 2 11 1 1 12 2 1 105 9 1 3 3 4 95 8 1 4 4 95 77 0 12 12 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 6 7 4 7 6 4 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 2 4 3 105 10 1 2 11 1 1 12 2 1 105 0 12 12 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
57 55 51 49 48 46 44 42 34 35 38 34 33 34 33 36 34 13 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1470;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1259 178 OFFCURVE",
"1260 193 QCURVE",
"1260 240 OFFCURVE",
"1231 240 QCURVE",
"1219 236 LINE",
"1079 162 OFFCURVE",
"872 88 OFFCURVE",
"743 88 QCURVE SMOOTH",
"627 88 OFFCURVE",
"498 188 OFFCURVE",
"418 346 OFFCURVE",
"418 457 QCURVE SMOOTH",
"418 489 OFFCURVE",
"420 524 QCURVE",
"1006 524 LINE",
"1022 525 OFFCURVE",
"1032 543 QCURVE SMOOTH",
"1055 584 OFFCURVE",
"1055 623 QCURVE",
"1054 655 OFFCURVE",
"1040 655 QCURVE SMOOTH",
"440 655 LINE",
"451 707 OFFCURVE",
"469 758 QCURVE",
"1075 758 LINE SMOOTH",
"1092 758 OFFCURVE",
"1102 776 QCURVE SMOOTH",
"1124 815 OFFCURVE",
"1124 856 QCURVE SMOOTH",
"1124 889 OFFCURVE",
"1110 889 QCURVE SMOOTH",
"522 889 LINE",
"608 1061 OFFCURVE",
"934 1298 OFFCURVE",
"1110 1298 QCURVE SMOOTH",
"1225 1298 OFFCURVE",
"1341 1202 OFFCURVE",
"1382 1112 QCURVE SMOOTH",
"1395 1083 OFFCURVE",
"1489 1083 OFFCURVE",
"1573 1143 OFFCURVE",
"1573 1186 QCURVE SMOOTH",
"1573 1227 OFFCURVE",
"1470 1317 OFFCURVE",
"1246 1384 OFFCURVE",
"1137 1384 QCURVE SMOOTH",
"848 1384 OFFCURVE",
"409 1059 OFFCURVE",
"303 889 QCURVE",
"150 889 LINE",
"137 888 OFFCURVE",
"125 874 QCURVE SMOOTH",
"98 842 OFFCURVE",
"98 795 QCURVE SMOOTH",
"99 758 OFFCURVE",
"117 758 QCURVE SMOOTH",
"236 758 LINE",
"215 706 OFFCURVE",
"201 655 QCURVE",
"80 655 LINE",
"65 653 OFFCURVE",
"53 639 QCURVE",
"29 606 OFFCURVE",
"29 559 QCURVE SMOOTH",
"29 524 OFFCURVE",
"47 524 QCURVE SMOOTH",
"178 524 LINE",
"176 498 OFFCURVE",
"176 471 QCURVE SMOOTH",
"176 221 OFFCURVE",
"506 -29 OFFCURVE",
"690 -29 QCURVE SMOOTH",
"842 -29 OFFCURVE",
"1100 76 OFFCURVE",
"1245 168 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"774 -27 OFFCURVE",
"898 17 OFFCURVE",
"1108 168 CURVE",
"1092 242 LINE",
"1056 221 OFFCURVE",
"853 106 OFFCURVE",
"681 106 CURVE SMOOTH",
"589 106 OFFCURVE",
"525 143 OFFCURVE",
"479 206 CURVE SMOOTH",
"429 275 OFFCURVE",
"400 373 OFFCURVE",
"386 485 CURVE",
"986 485 LINE",
"1009 616 LINE",
"372 616 LINE",
"376 647 OFFCURVE",
"387 705 OFFCURVE",
"393 733 CURVE",
"1030 733 LINE",
"1053 864 LINE",
"428 864 LINE",
"459 959 OFFCURVE",
"509 1051 OFFCURVE",
"568 1125 CURVE SMOOTH",
"650 1227 OFFCURVE",
"751 1296 OFFCURVE",
"854 1296 CURVE SMOOTH",
"937 1296 OFFCURVE",
"1006 1264 OFFCURVE",
"1049 1196 CURVE SMOOTH",
"1109 1102 OFFCURVE",
"1124 1081 OFFCURVE",
"1179 1081 CURVE SMOOTH",
"1236 1081 OFFCURVE",
"1291 1121 OFFCURVE",
"1291 1173 CURVE SMOOTH",
"1291 1217 OFFCURVE",
"1258 1263 OFFCURVE",
"1200 1300 CURVE SMOOTH",
"1112 1356 OFFCURVE",
"998 1384 OFFCURVE",
"875 1384 CURVE SMOOTH",
"718 1384 OFFCURVE",
"570 1324 OFFCURVE",
"446 1228 CURVE SMOOTH",
"323 1132 OFFCURVE",
"224 1003 OFFCURVE",
"166 864 CURVE",
"63 864 LINE",
"40 733 LINE",
"120 733 LINE",
"113 704 OFFCURVE",
"103 647 OFFCURVE",
"99 616 CURVE",
"19 616 LINE",
"-4 485 LINE",
"93 485 LINE",
"96 316 OFFCURVE",
"165 178 OFFCURVE",
"276 88 CURVE SMOOTH",
"367 14 OFFCURVE",
"487 -27 OFFCURVE",
"623 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
46 21 2 3 4 56 11 2 1 2 73 1 12 1 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 6 7 4 7 6 4 128 10 1 2 11 1 1 12 2 1 103 0 7 7 5 97 0 5 5 37 77 9 1 3 3 4 95 8 1 4 4 34 77 0 12 12 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 6 7 4 7 6 4 128 8 1 4 9 1 3 2 4 3 103 10 1 2 11 1 1 12 2 1 103 0 7 7 5 97 0 5 5 37 77 0 12 12 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 6 7 4 7 6 4 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 2 4 3 103 10 1 2 11 1 1 12 2 1 103 0 12 12 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
68 66 61 59 54 53 51 49 18 35 21 34 37 18 37 20 34 13 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1468;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = F;
lastChange = "2018-08-18 13:18:13 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{443, 0}";
},
{
name = top;
position = "{683, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"969 0 LINE",
"1030 342 LINE",
"965 342 LINE",
"955 290 OFFCURVE",
"944 254 OFFCURVE",
"928 222 CURVE SMOOTH",
"877 120 OFFCURVE",
"789 65 OFFCURVE",
"656 61 CURVE SMOOTH",
"420 54 LINE SMOOTH",
"385 53 OFFCURVE",
"356 65 OFFCURVE",
"334 86 CURVE SMOOTH",
"297 121 OFFCURVE",
"286 179 OFFCURVE",
"299 254 CURVE SMOOTH",
"362 612 LINE",
"596 612 LINE SMOOTH",
"700 612 OFFCURVE",
"706 574 OFFCURVE",
"696 517 CURVE SMOOTH",
"680 425 LINE",
"739 425 LINE",
"818 872 LINE",
"759 872 LINE",
"744 788 LINE SMOOTH",
"730 709 OFFCURVE",
"711 671 OFFCURVE",
"607 671 CURVE SMOOTH",
"373 671 LINE",
"483 1297 LINE",
"807 1290 LINE SMOOTH",
"888 1288 OFFCURVE",
"947 1267 OFFCURVE",
"982 1226 CURVE SMOOTH",
"1022 1180 OFFCURVE",
"1033 1111 OFFCURVE",
"1015 1008 CURVE",
"1080 1008 LINE",
"1142 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"310 1300 OFFCURVE",
"355 1265 OFFCURVE",
"343 1195 CURVE SMOOTH",
"162 163 LINE SMOOTH",
"150 93 OFFCURVE",
"91 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"472 0 LINE",
"472 58 LINE",
"337 58 OFFCURVE",
"273 95 OFFCURVE",
"285 166 CURVE SMOOTH",
"368 640 LINE",
"560 640 LINE SMOOTH",
"649 640 OFFCURVE",
"670 605 OFFCURVE",
"654 512 CURVE SMOOTH",
"632 387 LINE",
"690 387 LINE",
"793 971 LINE",
"735 971 LINE",
"713 846 LINE SMOOTH",
"697 753 OFFCURVE",
"673 716 OFFCURVE",
"573 716 CURVE SMOOTH",
"381 716 LINE",
"484 1299 LINE",
"824 1289 LINE SMOOTH",
"996 1284 OFFCURVE",
"1064 1180 OFFCURVE",
"1030 990 CURVE",
"1091 990 LINE",
"1156 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"310 1300 OFFCURVE",
"355 1265 OFFCURVE",
"343 1194 CURVE SMOOTH",
"163 166 LINE SMOOTH",
"151 95 OFFCURVE",
"82 58 OFFCURVE",
"-43 58 CURVE",
"-43 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
34 1 3 4 52 22 2 6 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 6 0 7 0 6 7 103 5 1 3 3 4 95 0 4 4 92 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 6 0 7 0 6 7 103 2 1 0 0 1 0 1 101 5 1 3 3 4 95 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 1 3 6 4 3 105 0 6 0 7 0 6 7 103 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
63 38 75 99 23 35 37 19 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1036;
},
{
anchors = (
{
name = bottom;
position = "{501, 0}";
},
{
name = top;
position = "{741, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"503 598 LINE",
"508 633 OFFCURVE",
"533 633 QCURVE SMOOTH",
"670 633 LINE SMOOTH",
"752 633 OFFCURVE",
"758 565 QCURVE SMOOTH",
"759 543 OFFCURVE",
"742 459 QCURVE SMOOTH",
"728 391 LINE",
"725 379 OFFCURVE",
"811 377 OFFCURVE",
"814 391 QCURVE",
"820 440 OFFCURVE",
"914 904 OFFCURVE",
"935 967 QCURVE",
"938 981 OFFCURVE",
"844 983 OFFCURVE",
"841 967 QCURVE SMOOTH",
"820 854 LINE SMOOTH",
"796 725 OFFCURVE",
"682 725 QCURVE SMOOTH",
"558 725 LINE SMOOTH",
"537 725 OFFCURVE",
"535 745 QCURVE SMOOTH",
"534 754 OFFCURVE",
"535 766 QCURVE",
"635 1231 LINE SMOOTH",
"642 1264 OFFCURVE",
"663 1264 QCURVE SMOOTH",
"756 1263 OFFCURVE",
"955 1257 QCURVE SMOOTH",
"1025 1255 OFFCURVE",
"1135 1143 OFFCURVE",
"1143 1049 OFFCURVE",
"1137 1012 QCURVE",
"1132 995 OFFCURVE",
"1220 996 OFFCURVE",
"1229 1012 QCURVE",
"1289 1298 LINE",
"1292 1317 OFFCURVE",
"1290 1333 QCURVE SMOOTH",
"1287 1358 OFFCURVE",
"1222 1358 QCURVE SMOOTH",
"1122 1358 OFFCURVE",
"627 1352 OFFCURVE",
"394 1352 OFFCURVE",
"250 1358 QCURVE",
"237 1358 OFFCURVE",
"227 1294 OFFCURVE",
"229 1264 OFFCURVE",
"237 1264 QCURVE SMOOTH",
"386 1264 OFFCURVE",
"391 1206 QCURVE",
"392 1182 OFFCURVE",
"386 1155 QCURVE SMOOTH",
"183 203 LINE SMOOTH",
"167 126 OFFCURVE",
"126 106 QCURVE SMOOTH",
"85 86 OFFCURVE",
"-1 86 QCURVE SMOOTH",
"-15 86 OFFCURVE",
"-27 18 OFFCURVE",
"-21 -8 OFFCURVE",
"-13 -8 QCURVE",
"61 0 OFFCURVE",
"477 0 OFFCURVE",
"554 -8 QCURVE",
"564 -8 OFFCURVE",
"577 57 OFFCURVE",
"574 86 OFFCURVE",
"566 86 QCURVE SMOOTH",
"420 86 OFFCURVE",
"413 147 QCURVE SMOOTH",
"410 174 OFFCURVE",
"416 203 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"567 0 LINE",
"567 86 LINE",
"422 86 OFFCURVE",
"407 123 OFFCURVE",
"419 194 CURVE SMOOTH",
"496 633 LINE",
"660 633 LINE SMOOTH",
"721 633 OFFCURVE",
"747 602 OFFCURVE",
"737 543 CURVE SMOOTH",
"709 389 LINE",
"811 389 LINE",
"913 962 LINE",
"811 962 LINE",
"785 815 LINE SMOOTH",
"774 755 OFFCURVE",
"738 725 OFFCURVE",
"677 725 CURVE SMOOTH",
"513 725 LINE",
"608 1266 LINE",
"930 1255 LINE SMOOTH",
"1036 1251 OFFCURVE",
"1133 1142 OFFCURVE",
"1107 991 CURVE",
"1207 991 LINE",
"1271 1358 LINE",
"184 1358 LINE",
"184 1272 LINE",
"319 1272 OFFCURVE",
"359 1238 OFFCURVE",
"347 1167 CURVE SMOOTH",
"176 194 LINE SMOOTH",
"164 123 OFFCURVE",
"132 86 OFFCURVE",
"-13 86 CURVE",
"-13 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
34 1 3 4 51 1 7 8 2 76 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 5 3 8 3 5 8 128 0 8 7 3 8 7 126 0 7 0 9 0 7 9 105 6 1 3 3 4 95 0 4 4 31 77 2 1 0 0 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 5 3 8 3 5 8 128 0 8 7 3 8 7 126 0 7 0 9 0 7 9 105 2 1 0 0 1 0 1 101 6 1 3 3 4 95 0 4 4 31 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 5 3 8 3 5 8 128 0 8 7 3 8 7 126 0 4 6 1 3 5 4 3 105 0 7 0 9 0 7 9 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
0 3 4 6 6 3 114 0 5 6 8 6 5 8 128 0 8 7 6 8 7 126 0 4 0 6 5 4 6 103 0 7 0 9 0 7 9 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
73 70 19 53 68 21 99 23 36 21 19 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1152;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"532 613 LINE SMOOTH",
"536 631 OFFCURVE",
"549 640 OFFCURVE",
"570 640 CURVE SMOOTH",
"731 640 LINE SMOOTH",
"789 640 OFFCURVE",
"820 613 OFFCURVE",
"825 559 CURVE SMOOTH",
"827 543 OFFCURVE",
"826 527 OFFCURVE",
"822 512 CURVE SMOOTH",
"798 395 LINE SMOOTH",
"796 385 OFFCURVE",
"807 380 OFFCURVE",
"830 380 CURVE SMOOTH",
"854 380 OFFCURVE",
"867 385 OFFCURVE",
"869 395 CURVE",
"880 491 OFFCURVE",
"952 866 OFFCURVE",
"981 963 CURVE",
"981 972 OFFCURVE",
"971 977 OFFCURVE",
"949 977 CURVE SMOOTH",
"927 977 OFFCURVE",
"915 972 OFFCURVE",
"913 963 CURVE SMOOTH",
"891 846 LINE SMOOTH",
"875 759 OFFCURVE",
"826 716 OFFCURVE",
"745 716 CURVE SMOOTH",
"590 716 LINE SMOOTH",
"571 716 OFFCURVE",
"561 722 OFFCURVE",
"560 734 CURVE SMOOTH",
"559 742 OFFCURVE",
"559 748 OFFCURVE",
"560 753 CURVE SMOOTH",
"664 1267 LINE SMOOTH",
"667 1282 OFFCURVE",
"678 1289 OFFCURVE",
"697 1289 CURVE SMOOTH",
"757 1289 OFFCURVE",
"859 1286 OFFCURVE",
"1001 1280 CURVE SMOOTH",
"1085 1276 OFFCURVE",
"1198 1211 OFFCURVE",
"1209 1088 CURVE SMOOTH",
"1210 1073 OFFCURVE",
"1209 1047 OFFCURVE",
"1205 1010 CURVE SMOOTH",
"1204 1001 OFFCURVE",
"1216 996 OFFCURVE",
"1242 996 CURVE SMOOTH",
"1269 996 OFFCURVE",
"1283 1001 OFFCURVE",
"1285 1010 CURVE SMOOTH",
"1346 1320 LINE SMOOTH",
"1347 1327 OFFCURVE",
"1348 1333 OFFCURVE",
"1347 1336 CURVE SMOOTH",
"1346 1351 OFFCURVE",
"1325 1358 OFFCURVE",
"1283 1358 CURVE SMOOTH",
"1066 1358 OFFCURVE",
"779 1354 OFFCURVE",
"575 1354 CURVE",
"755 1355 OFFCURVE",
"639 1354 OFFCURVE",
"575 1354 CURVE SMOOTH",
"511 1354 OFFCURVE",
"437 1355 OFFCURVE",
"352 1358 CURVE SMOOTH",
"335 1358 OFFCURVE",
"318 1282 OFFCURVE",
"339 1282 CURVE SMOOTH",
"444 1282 OFFCURVE",
"498 1256 OFFCURVE",
"503 1205 CURVE SMOOTH",
"504 1192 OFFCURVE",
"503 1181 OFFCURVE",
"502 1172 CURVE SMOOTH",
"305 186 LINE SMOOTH",
"295 136 OFFCURVE",
"271 103 OFFCURVE",
"235 87 CURVE SMOOTH",
"210 75 OFFCURVE",
"165 69 OFFCURVE",
"102 69 CURVE SMOOTH",
"85 69 OFFCURVE",
"68 -7 OFFCURVE",
"89 -7 CURVE",
"160 -2 OFFCURVE",
"250 0 OFFCURVE",
"357 0 CURVE SMOOTH",
"464 0 OFFCURVE",
"547 -2 OFFCURVE",
"605 -7 CURVE",
"623 -7 OFFCURVE",
"638 69 OFFCURVE",
"618 69 CURVE SMOOTH",
"509 69 OFFCURVE",
"452 95 OFFCURVE",
"447 148 CURVE SMOOTH",
"446 159 OFFCURVE",
"447 172 OFFCURVE",
"450 186 CURVE SMOOTH"
);
}
);
};
hints = (
{
origin = "{0, 22}";
scale = "{1, -1}";
type = Corner;
name = _corner.halfserif;
options = 1;
}
);
layerId = "79EFD3D7-E32D-40A0-8A31-DB7BC83C81D4";
name = "Aug 14 18, 13:02";
paths = (
{
closed = 1;
nodes = (
"284 186 LINE",
"364 640 LINE",
"556 640 LINE SMOOTH",
"645 640 OFFCURVE",
"667 605 OFFCURVE",
"650 512 CURVE SMOOTH",
"628 387 LINE",
"686 387 LINE",
"789 971 LINE",
"731 971 LINE",
"709 846 LINE SMOOTH",
"693 753 OFFCURVE",
"669 716 OFFCURVE",
"569 716 CURVE SMOOTH",
"377 716 LINE",
"480 1299 LINE",
"820 1289 LINE SMOOTH",
"992 1284 OFFCURVE",
"1060 1180 OFFCURVE",
"1026 990 CURVE",
"1087 990 LINE",
"1152 1358 LINE",
"368 1358 LINE",
"162 186 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
34 1 3 4 52 22 2 6 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 6 0 7 0 6 7 103 5 1 3 3 4 95 0 4 4 92 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 6 0 7 0 6 7 103 2 1 0 0 1 0 1 101 5 1 3 3 4 95 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 1 3 6 4 3 105 0 6 0 7 0 6 7 103 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
63 38 75 99 23 35 37 19 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1217;
}
);
leftMetricsKey = H;
note = F;
rightKerningGroup = F;
unicode = 0046;
},
{
glyphname = G;
lastChange = "2018-08-18 13:11:15 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{551, 0}";
},
{
name = top;
position = "{851, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1322 363 LINE SMOOTH",
"1340 459 OFFCURVE",
"1360 478 OFFCURVE",
"1486 478 CURVE SMOOTH",
"1505 478 OFFCURVE",
"1524 554 OFFCURVE",
"1502 554 CURVE",
"1462 551 OFFCURVE",
"1380 549 OFFCURVE",
"1256 549 CURVE SMOOTH",
"1133 549 OFFCURVE",
"1046 551 OFFCURVE",
"996 554 CURVE",
"976 554 OFFCURVE",
"959 478 OFFCURVE",
"980 478 CURVE SMOOTH",
"1058 478 OFFCURVE",
"1112 474 OFFCURVE",
"1142 466 CURVE SMOOTH",
"1171 458 OFFCURVE",
"1187 440 OFFCURVE",
"1189 412 CURVE SMOOTH",
"1190 401 OFFCURVE",
"1189 384 OFFCURVE",
"1185 363 CURVE SMOOTH",
"1148 173 LINE SMOOTH",
"1133 90 OFFCURVE",
"1023 48 OFFCURVE",
"819 48 CURVE SMOOTH",
"691 48 OFFCURVE",
"589 90 OFFCURVE",
"512 175 CURVE SMOOTH",
"435 260 OFFCURVE",
"392 360 OFFCURVE",
"382 475 CURVE SMOOTH",
"346 880 OFFCURVE",
"633 1314 OFFCURVE",
"1031 1314 CURVE SMOOTH",
"1253 1314 OFFCURVE",
"1384 1241 OFFCURVE",
"1398 1076 CURVE SMOOTH",
"1400 1055 OFFCURVE",
"1400 1035 OFFCURVE",
"1399 1014 CURVE SMOOTH",
"1398 1005 OFFCURVE",
"1409 1001 OFFCURVE",
"1431 1001 CURVE SMOOTH",
"1454 1001 OFFCURVE",
"1466 1007 OFFCURVE",
"1468 1019 CURVE SMOOTH",
"1496 1154 OFFCURVE",
"1506 1257 OFFCURVE",
"1500 1327 CURVE",
"1489 1327 OFFCURVE",
"1440 1337 OFFCURVE",
"1353 1356 CURVE SMOOTH",
"1266 1375 OFFCURVE",
"1166 1385 OFFCURVE",
"1052 1385 CURVE SMOOTH",
"599 1385 OFFCURVE",
"181 910 OFFCURVE",
"221 454 CURVE SMOOTH",
"246 161 OFFCURVE",
"472 -27 OFFCURVE",
"767 -27 CURVE SMOOTH",
"879 -27 OFFCURVE",
"933 -16 OFFCURVE",
"1117 11 CURVE SMOOTH",
"1210 24 OFFCURVE",
"1268 31 OFFCURVE",
"1293 31 CURVE SMOOTH",
"1307 31 OFFCURVE",
"1314 42 OFFCURVE",
"1312 63 CURVE SMOOTH",
"1309 91 OFFCURVE",
"1269 92 OFFCURVE",
"1277 133 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"709 -27 OFFCURVE",
"746 -22 OFFCURVE",
"893 3 CURVE SMOOTH",
"985 19 OFFCURVE",
"1043 32 OFFCURVE",
"1079 41 CURVE",
"1085 77 LINE",
"1053 77 OFFCURVE",
"1054 112 OFFCURVE",
"1060 144 CURVE SMOOTH",
"1100 371 LINE SMOOTH",
"1113 448 OFFCURVE",
"1167 486 OFFCURVE",
"1261 486 CURVE",
"1271 544 LINE",
"780 544 LINE",
"770 486 LINE",
"910 486 OFFCURVE",
"980 454 OFFCURVE",
"980 389 CURVE SMOOTH",
"980 383 OFFCURVE",
"979 377 OFFCURVE",
"978 371 CURVE SMOOTH",
"920 43 LINE",
"989 124 LINE",
"862 52 OFFCURVE",
"754 40 OFFCURVE",
"624 40 CURVE SMOOTH",
"359 40 OFFCURVE",
"211 231 OFFCURVE",
"211 533 CURVE SMOOTH",
"211 859 OFFCURVE",
"423 1322 OFFCURVE",
"851 1322 CURVE SMOOTH",
"1103 1322 OFFCURVE",
"1217 1191 OFFCURVE",
"1217 1056 CURVE SMOOTH",
"1217 1042 OFFCURVE",
"1215 1028 OFFCURVE",
"1213 1014 CURVE",
"1274 1014 LINE",
"1297 1180 OFFCURVE",
"1300 1303 OFFCURVE",
"1300 1327 CURVE",
"1281 1330 OFFCURVE",
"1233 1340 OFFCURVE",
"1158 1356 CURVE SMOOTH",
"1067 1376 OFFCURVE",
"966 1385 OFFCURVE",
"857 1385 CURVE SMOOTH",
"329 1385 OFFCURVE",
"59 838 OFFCURVE",
"59 511 CURVE SMOOTH",
"59 330 OFFCURVE",
"120 148 OFFCURVE",
"293 59 CURVE SMOOTH",
"404 2 OFFCURVE",
"509 -27 OFFCURVE",
"606 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
51 1 7 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 3 4 7 4 3 7 128 0 0 5 1 5 0 1 128 0 7 8 1 6 5 7 6 105 0 4 4 2 97 0 2 2 98 77 0 5 5 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 3 4 7 4 3 7 128 0 0 5 1 5 0 1 128 0 2 0 4 3 2 4 105 0 7 8 1 6 5 7 6 105 0 5 5 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 51 22 37 37 21 36 34 37 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1252;
},
{
anchors = (
{
name = bottom;
position = "{615, 0}";
},
{
name = top;
position = "{938, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1392 369 LINE SMOOTH",
"1404 424 OFFCURVE",
"1450 459 OFFCURVE",
"1526 459 QCURVE SMOOTH",
"1536 459 OFFCURVE",
"1549 522 OFFCURVE",
"1546 555 OFFCURVE",
"1538 555 QCURVE",
"1481 549 OFFCURVE",
"1065 549 OFFCURVE",
"1008 555 QCURVE",
"994 555 OFFCURVE",
"983 489 OFFCURVE",
"985 459 OFFCURVE",
"993 459 QCURVE SMOOTH",
"1139 459 OFFCURVE",
"1171 436 OFFCURVE",
"1173 418 QCURVE SMOOTH",
"1174 403 OFFCURVE",
"1170 385 QCURVE",
"1137 219 LINE SMOOTH",
"1107 63 OFFCURVE",
"828 63 QCURVE SMOOTH",
"680 63 OFFCURVE",
"477 282 OFFCURVE",
"459 487 QCURVE SMOOTH",
"433 778 OFFCURVE",
"806 1298 OFFCURVE",
"1072 1298 QCURVE SMOOTH",
"1209 1298 OFFCURVE",
"1410 1184 OFFCURVE",
"1421 1059 QCURVE",
"1420 1056 OFFCURVE",
"1421 999 QCURVE",
"1421 981 OFFCURVE",
"1514 979 OFFCURVE",
"1516 993 QCURVE",
"1560 1169 OFFCURVE",
"1546 1329 QCURVE",
"1485 1329 OFFCURVE",
"1207 1384 OFFCURVE",
"1088 1384 QCURVE SMOOTH",
"730 1384 OFFCURVE",
"189 801 OFFCURVE",
"220 449 QCURVE SMOOTH",
"238 244 OFFCURVE",
"559 -27 OFFCURVE",
"805 -27 QCURVE SMOOTH",
"852 -27 OFFCURVE",
"1026 -8 OFFCURVE",
"1290 29 OFFCURVE",
"1353 29 QCURVE SMOOTH",
"1379 29 OFFCURVE",
"1375 72 QCURVE SMOOTH",
"1374 84 OFFCURVE",
"1343 90 OFFCURVE",
"1341 119 OFFCURVE",
"1344 133 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"757 -27 OFFCURVE",
"864 -17 OFFCURVE",
"993 4 CURVE SMOOTH",
"1121 25 OFFCURVE",
"1201 35 OFFCURVE",
"1234 35 CURVE",
"1248 115 LINE",
"1212 115 OFFCURVE",
"1208 136 OFFCURVE",
"1213 160 CURVE SMOOTH",
"1255 401 LINE SMOOTH",
"1264 452 OFFCURVE",
"1304 477 OFFCURVE",
"1387 477 CURVE",
"1403 566 LINE",
"838 566 LINE",
"822 477 LINE",
"962 477 OFFCURVE",
"1013 473 OFFCURVE",
"1013 421 CURVE SMOOTH",
"1013 415 OFFCURVE",
"1012 408 OFFCURVE",
"1011 401 CURVE SMOOTH",
"947 40 LINE",
"1023 158 LINE",
"886 70 OFFCURVE",
"772 68 OFFCURVE",
"698 68 CURVE SMOOTH",
"521 68 OFFCURVE",
"339 218 OFFCURVE",
"339 533 CURVE SMOOTH",
"339 854 OFFCURVE",
"531 1296 OFFCURVE",
"919 1296 CURVE SMOOTH",
"1129 1296 OFFCURVE",
"1266 1220 OFFCURVE",
"1266 1033 CURVE SMOOTH",
"1266 1021 OFFCURVE",
"1265 1008 OFFCURVE",
"1264 995 CURVE",
"1358 995 LINE",
"1376 1134 OFFCURVE",
"1376 1273 OFFCURVE",
"1376 1329 CURVE",
"1338 1330 OFFCURVE",
"1297 1338 OFFCURVE",
"1252 1348 CURVE SMOOTH",
"1133 1374 OFFCURVE",
"1028 1384 OFFCURVE",
"941 1384 CURVE SMOOTH",
"305 1384 OFFCURVE",
"60 810 OFFCURVE",
"60 520 CURVE SMOOTH",
"60 364 OFFCURVE",
"117 233 OFFCURVE",
"232 127 CURVE SMOOTH",
"345 22 OFFCURVE",
"493 -27 OFFCURVE",
"668 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
50 24 2 7 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 0 5 1 5 0 1 128 0 7 8 1 6 5 7 6 105 0 3 3 31 77 0 4 4 2 97 0 2 2 37 77 0 5 5 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 3 2 4 2 3 4 128 0 0 5 1 5 0 1 128 0 7 8 1 6 5 7 6 105 0 4 4 2 97 0 2 2 37 77 0 5 5 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 3 2 4 2 3 4 128 0 0 5 1 5 0 1 128 0 2 0 4 7 2 4 105 0 7 8 1 6 5 7 6 105 0 5 5 1 97 0 1 1 32 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 21 22 36 41 17 36 34 37 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1380;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = G;
rightKerningGroup = G;
unicode = 0047;
},
{
glyphname = Gdotaccent;
lastChange = "2018-08-18 13:11:17 +0000";
layers = (
{
components = (
{
alignment = -1;
name = G;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 689, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1252;
},
{
components = (
{
name = G;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 780, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1380;
}
);
leftKerningGroup = C;
leftMetricsKey = G;
note = Gdotaccent;
rightKerningGroup = G;
rightMetricsKey = G;
unicode = 0120;
},
{
glyphname = H;
lastChange = "2018-08-18 13:18:28 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{579, 0}";
},
{
name = center;
position = "{699, 682}";
},
{
name = top;
position = "{819, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1079 666 LINE",
"1079 735 LINE",
"327 735 LINE",
"327 666 LINE"
);
},
{
closed = 1;
nodes = (
"1248 1263 OFFCURVE",
"1317 1300 OFFCURVE",
"1452 1300 CURVE",
"1452 1358 LINE",
"966 1358 LINE",
"966 1300 LINE",
"1101 1300 OFFCURVE",
"1126 1263 OFFCURVE",
"1113 1192 CURVE SMOOTH",
"923 166 LINE SMOOTH",
"910 95 OFFCURVE",
"871 58 OFFCURVE",
"716 58 CURVE",
"716 0 LINE",
"1202 0 LINE",
"1202 58 LINE",
"1067 58 OFFCURVE",
"1032 95 OFFCURVE",
"1045 166 CURVE SMOOTH",
"1235 1192 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"691 1300 CURVE",
"691 1358 LINE",
"202 1358 LINE",
"202 1300 LINE",
"317 1300 OFFCURVE",
"365 1263 OFFCURVE",
"352 1192 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"111 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"451 0 LINE",
"451 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1079 666 LINE",
"1079 735 LINE",
"327 735 LINE",
"327 666 LINE"
);
},
{
closed = 1;
nodes = (
"1249 1266 OFFCURVE",
"1318 1300 OFFCURVE",
"1442 1300 CURVE",
"1442 1358 LINE",
"966 1358 LINE",
"966 1300 LINE",
"1101 1300 OFFCURVE",
"1126 1263 OFFCURVE",
"1113 1192 CURVE SMOOTH",
"923 166 LINE SMOOTH",
"910 95 OFFCURVE",
"871 58 OFFCURVE",
"716 58 CURVE",
"716 0 LINE",
"1202 0 LINE",
"1202 58 LINE",
"1067 58 OFFCURVE",
"1031 92 OFFCURVE",
"1044 163 CURVE SMOOTH",
"1236 1195 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"691 1300 CURVE",
"691 1358 LINE",
"195 1358 LINE",
"195 1300 LINE",
"317 1300 OFFCURVE",
"365 1266 OFFCURVE",
"352 1195 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"111 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"451 0 LINE",
"451 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
56 1 8 74 37 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 10 0 3 0 10 3 103 13 11 9 3 7 7 8 97 12 1 8 8 92 77 6 4 2 3 0 0 1 97 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 10 0 3 0 10 3 103 6 4 2 3 0 5 1 1 0 1 101 13 11 9 3 7 7 8 97 12 1 8 8 92 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
12 1 8 13 11 9 3 7 10 8 7 105 0 10 0 3 0 10 3 103 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
12 1 8 13 11 9 3 7 10 8 7 105 0 10 0 3 0 10 3 103 6 4 2 3 0 0 5 1 0 5 105 6 4 2 3 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
87 85 82 78 75 74 69 66 61 59 21 22 36 21 21 53 35 37 19 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1308;
},
{
anchors = (
{
name = bottom;
position = "{629, 0}";
},
{
name = center;
position = "{749, 682}";
},
{
name = top;
position = "{869, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1341 1153 LINE SMOOTH",
"1353 1212 OFFCURVE",
"1419 1270 OFFCURVE",
"1534 1270 QCURVE SMOOTH",
"1548 1270 OFFCURVE",
"1563 1339 OFFCURVE",
"1560 1364 OFFCURVE",
"1552 1364 QCURVE",
"1496 1358 OFFCURVE",
"1039 1358 OFFCURVE",
"981 1364 QCURVE",
"971 1364 OFFCURVE",
"954 1296 OFFCURVE",
"956 1270 OFFCURVE",
"962 1270 QCURVE SMOOTH",
"1103 1270 OFFCURVE",
"1110 1208 QCURVE SMOOTH",
"1111 1180 OFFCURVE",
"1106 1153 QCURVE SMOOTH",
"1032 784 LINE",
"1027 750 OFFCURVE",
"990 750 QCURVE SMOOTH",
"513 750 LINE SMOOTH",
"484 750 OFFCURVE",
"482 770 OFFCURVE",
"485 784 QCURVE SMOOTH",
"559 1153 LINE",
"570 1217 OFFCURVE",
"646 1270 OFFCURVE",
"752 1270 QCURVE SMOOTH",
"764 1270 OFFCURVE",
"780 1337 OFFCURVE",
"778 1364 OFFCURVE",
"770 1364 QCURVE",
"714 1358 OFFCURVE",
"257 1358 OFFCURVE",
"199 1364 QCURVE",
"186 1364 OFFCURVE",
"172 1296 OFFCURVE",
"174 1270 OFFCURVE",
"180 1270 QCURVE SMOOTH",
"318 1270 OFFCURVE",
"325 1208 QCURVE SMOOTH",
"326 1180 OFFCURVE",
"321 1153 QCURVE SMOOTH",
"135 203 LINE SMOOTH",
"121 133 OFFCURVE",
"34 86 OFFCURVE",
"-54 86 QCURVE SMOOTH",
"-70 86 OFFCURVE",
"-81 18 OFFCURVE",
"-78 -8 OFFCURVE",
"-70 -8 QCURVE",
"4 0 OFFCURVE",
"426 0 OFFCURVE",
"505 -8 QCURVE",
"517 -8 OFFCURVE",
"530 57 OFFCURVE",
"528 86 OFFCURVE",
"522 86 QCURVE SMOOTH",
"372 86 OFFCURVE",
"366 154 QCURVE SMOOTH",
"364 178 OFFCURVE",
"368 203 QCURVE",
"452 621 LINE",
"457 653 OFFCURVE",
"492 653 QCURVE SMOOTH",
"971 653 LINE SMOOTH",
"998 653 OFFCURVE",
"1001 628 OFFCURVE",
"998 614 QCURVE SMOOTH",
"917 203 LINE SMOOTH",
"903 133 OFFCURVE",
"817 86 OFFCURVE",
"729 86 QCURVE SMOOTH",
"714 86 OFFCURVE",
"704 20 OFFCURVE",
"706 -8 OFFCURVE",
"712 -8 QCURVE",
"787 0 OFFCURVE",
"1210 0 OFFCURVE",
"1289 -8 QCURVE",
"1300 -8 OFFCURVE",
"1312 57 OFFCURVE",
"1310 86 OFFCURVE",
"1304 86 QCURVE SMOOTH",
"1155 86 OFFCURVE",
"1149 154 QCURVE",
"1149 178 OFFCURVE",
"1153 203 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1140 653 LINE",
"1140 748 LINE",
"363 748 LINE",
"363 653 LINE"
);
},
{
closed = 1;
nodes = (
"1362 1235 OFFCURVE",
"1412 1272 OFFCURVE",
"1547 1272 CURVE",
"1547 1358 LINE",
"979 1358 LINE",
"979 1272 LINE",
"1087 1272 OFFCURVE",
"1119 1235 OFFCURVE",
"1106 1164 CURVE SMOOTH",
"931 194 LINE SMOOTH",
"918 123 OFFCURVE",
"878 86 OFFCURVE",
"743 86 CURVE",
"743 0 LINE",
"1311 0 LINE",
"1311 86 LINE",
"1176 86 OFFCURVE",
"1161 123 OFFCURVE",
"1174 194 CURVE SMOOTH",
"1349 1164 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"579 1235 OFFCURVE",
"619 1272 OFFCURVE",
"754 1272 CURVE",
"754 1358 LINE",
"195 1358 LINE",
"195 1272 LINE",
"313 1272 OFFCURVE",
"336 1235 OFFCURVE",
"323 1164 CURVE SMOOTH",
"148 194 LINE SMOOTH",
"135 123 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE",
"528 0 LINE",
"528 86 LINE",
"393 86 OFFCURVE",
"378 123 OFFCURVE",
"391 194 CURVE SMOOTH",
"566 1164 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
2 1 0 3 1 76 82 56 2 8 74 37 11 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 10 0 3 0 10 3 103 13 11 9 3 7 7 8 97 12 1 8 8 31 77 6 4 2 3 0 0 1 97 5 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 10 0 3 0 10 3 103 6 4 2 3 0 5 1 1 0 1 101 13 11 9 3 7 7 8 97 12 1 8 8 31 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
12 1 8 13 11 9 3 7 10 8 7 105 0 10 0 3 0 10 3 103 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
87 85 81 80 75 74 69 66 61 59 21 22 36 21 21 53 36 21 19 14 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1408;
}
);
note = H;
rightKerningGroup = H;
unicode = 0048;
},
{
glyphname = I;
lastChange = "2018-08-18 12:36:51 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{198, 0}";
},
{
name = ogonek;
position = "{417, 10}";
},
{
name = top;
position = "{438, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"691 1300 CURVE",
"691 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"320 1300 OFFCURVE",
"365 1263 OFFCURVE",
"352 1192 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"111 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"451 0 LINE",
"451 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"680 1300 CURVE",
"680 1358 LINE",
"195 1358 LINE",
"195 1300 LINE",
"320 1300 OFFCURVE",
"365 1266 OFFCURVE",
"352 1195 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"111 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"441 0 LINE",
"441 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
30 1 4 74 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
5 1 3 3 4 97 0 4 4 92 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
2 1 0 0 1 0 1 101 5 1 3 3 4 97 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 4 5 1 3 0 4 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 21 22 36 21 19 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 546;
},
{
anchors = (
{
name = bottom;
position = "{243, 0}";
},
{
name = ogonek;
position = "{498, 10}";
},
{
name = top;
position = "{483, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"573 1153 LINE",
"582 1210 OFFCURVE",
"655 1270 OFFCURVE",
"766 1270 QCURVE SMOOTH",
"780 1270 OFFCURVE",
"794 1339 OFFCURVE",
"792 1364 OFFCURVE",
"784 1364 QCURVE",
"728 1358 OFFCURVE",
"271 1358 OFFCURVE",
"213 1364 QCURVE",
"200 1364 OFFCURVE",
"186 1296 OFFCURVE",
"188 1270 OFFCURVE",
"194 1270 QCURVE SMOOTH",
"334 1270 OFFCURVE",
"338 1217 QCURVE SMOOTH",
"340 1180 OFFCURVE",
"335 1153 QCURVE SMOOTH",
"149 203 LINE SMOOTH",
"135 133 OFFCURVE",
"48 86 OFFCURVE",
"-40 86 QCURVE SMOOTH",
"-56 86 OFFCURVE",
"-67 18 OFFCURVE",
"-64 -8 OFFCURVE",
"-56 -8 QCURVE",
"18 0 OFFCURVE",
"440 0 OFFCURVE",
"519 -8 QCURVE",
"531 -8 OFFCURVE",
"544 57 OFFCURVE",
"542 86 OFFCURVE",
"536 86 QCURVE SMOOTH",
"387 86 OFFCURVE",
"380 150 QCURVE SMOOTH",
"377 178 OFFCURVE",
"382 203 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"589 1235 OFFCURVE",
"639 1272 OFFCURVE",
"774 1272 CURVE",
"774 1358 LINE",
"196 1358 LINE",
"196 1272 LINE",
"314 1272 OFFCURVE",
"346 1235 OFFCURVE",
"333 1164 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"145 123 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE",
"548 0 LINE",
"548 86 LINE",
"413 86 OFFCURVE",
"388 123 OFFCURVE",
"401 194 CURVE SMOOTH",
"576 1164 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
30 1 4 74 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
5 1 3 3 4 97 0 4 4 31 77 2 1 0 0 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
2 1 0 0 1 0 1 101 5 1 3 3 4 97 0 4 4 31 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 4 5 1 3 0 4 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 21 22 36 21 19 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 635;
}
);
leftMetricsKey = H;
note = I;
rightKerningGroup = I;
rightMetricsKey = H;
unicode = 0049;
},
{
glyphname = IJ;
lastChange = "2018-08-18 12:30:45 +0000";
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = J;
transform = "{1, 0, 0, 1, 541, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1101;
},
{
components = (
{
name = I;
transform = "{1, 0, -0.08749, 1, 107, 0}";
},
{
name = J;
transform = "{1, 0, -0.08749, 1, 860, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1454;
}
);
leftMetricsKey = B;
note = IJ;
rightMetricsKey = J;
unicode = 0132;
},
{
glyphname = Iacute;
lastChange = "2018-08-18 12:39:38 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 270, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 318, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Iacute;
rightKerningGroup = I;
unicode = 00CD;
},
{
glyphname = Ibreve;
lastChange = "2018-08-18 12:39:46 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 361, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 404, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Ibreve;
rightKerningGroup = I;
unicode = 012C;
},
{
glyphname = Icircumflex;
lastChange = "2018-08-18 12:39:53 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 271, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 318, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Icircumflex;
rightKerningGroup = I;
unicode = 00CE;
},
{
glyphname = Idieresis;
lastChange = "2018-08-18 12:40:00 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 269, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 313, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Idieresis;
rightKerningGroup = I;
unicode = 00CF;
},
{
glyphname = Idotaccent;
lastChange = "2018-08-18 12:40:05 +0000";
layers = (
{
components = (
{
name = I;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, -130, 426}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = dotaccent;
transform = "{1, 0, 0, 1, 37, 446}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 631;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Idotaccent;
rightKerningGroup = I;
unicode = 0130;
},
{
glyphname = Igrave;
lastChange = "2018-08-18 12:40:14 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 273, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 325, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Igrave;
rightKerningGroup = I;
unicode = 00CC;
},
{
glyphname = Imacron;
lastChange = "2018-08-18 12:40:21 +0000";
layers = (
{
components = (
{
name = I;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 267, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 546;
},
{
components = (
{
name = I;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 312, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 635;
}
);
leftMetricsKey = I;
widthMetricsKey = I;
note = Imacron;
rightKerningGroup = I;
unicode = 012A;
},
{
glyphname = J;
lastChange = "2018-08-18 13:18:43 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{205, 0}";
},
{
name = top;
position = "{445, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"-91 -419 OFFCURVE",
"-43 -403 OFFCURVE",
"2 -376 CURVE SMOOTH",
"193 -260 OFFCURVE",
"263 -72 OFFCURVE",
"322 200 CURVE SMOOTH",
"345 308 OFFCURVE",
"373 449 OFFCURVE",
"406 634 CURVE SMOOTH",
"504 1192 LINE SMOOTH",
"516 1263 OFFCURVE",
"566 1300 OFFCURVE",
"701 1300 CURVE",
"701 1358 LINE",
"213 1358 LINE",
"213 1300 LINE",
"348 1300 OFFCURVE",
"395 1263 OFFCURVE",
"382 1192 CURVE SMOOTH",
"218 260 LINE SMOOTH",
"174 11 OFFCURVE",
"137 -143 OFFCURVE",
"105 -203 CURVE SMOOTH",
"73 -263 OFFCURVE",
"32 -313 OFFCURVE",
"-13 -328 CURVE",
"-17 -288 OFFCURVE",
"-61 -237 OFFCURVE",
"-132 -237 CURVE SMOOTH",
"-188 -237 OFFCURVE",
"-242 -272 OFFCURVE",
"-242 -333 CURVE SMOOTH",
"-242 -390 OFFCURVE",
"-200 -419 OFFCURVE",
"-143 -419 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-91 -419 OFFCURVE",
"-43 -403 OFFCURVE",
"2 -376 CURVE SMOOTH",
"193 -260 OFFCURVE",
"263 -72 OFFCURVE",
"322 200 CURVE SMOOTH",
"345 308 OFFCURVE",
"373 449 OFFCURVE",
"406 634 CURVE SMOOTH",
"504 1192 LINE SMOOTH",
"516 1263 OFFCURVE",
"565 1300 OFFCURVE",
"710 1300 CURVE",
"710 1358 LINE",
"226 1358 LINE",
"226 1300 LINE",
"348 1300 OFFCURVE",
"396 1266 OFFCURVE",
"383 1195 CURVE SMOOTH",
"218 260 LINE SMOOTH",
"174 11 OFFCURVE",
"137 -143 OFFCURVE",
"105 -203 CURVE SMOOTH",
"73 -263 OFFCURVE",
"32 -313 OFFCURVE",
"-13 -328 CURVE",
"-17 -288 OFFCURVE",
"-61 -237 OFFCURVE",
"-132 -237 CURVE SMOOTH",
"-188 -237 OFFCURVE",
"-242 -272 OFFCURVE",
"-242 -333 CURVE SMOOTH",
"-242 -390 OFFCURVE",
"-200 -419 OFFCURVE",
"-143 -419 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
11 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 1 0 101 4 1 2 2 3 97 0 3 3 92 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
0 3 4 1 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
35 37 25 35 34 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 560;
},
{
anchors = (
{
name = bottom;
position = "{278, 0}";
},
{
name = top;
position = "{518, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"644 1153 LINE SMOOTH",
"659 1229 OFFCURVE",
"740 1270 OFFCURVE",
"822 1270 QCURVE SMOOTH",
"836 1270 OFFCURVE",
"847 1337 OFFCURVE",
"844 1364 OFFCURVE",
"836 1364 QCURVE",
"780 1358 OFFCURVE",
"356 1358 OFFCURVE",
"298 1364 QCURVE",
"283 1364 OFFCURVE",
"271 1300 OFFCURVE",
"273 1270 OFFCURVE",
"281 1270 QCURVE SMOOTH",
"405 1270 OFFCURVE",
"413 1194 QCURVE SMOOTH",
"416 1176 OFFCURVE",
"411 1153 QCURVE SMOOTH",
"305 639 LINE SMOOTH",
"168 -26 OFFCURVE",
"109 -248 OFFCURVE",
"30 -303 QCURVE",
"21 -252 OFFCURVE",
"-65 -180 OFFCURVE",
"-122 -180 QCURVE SMOOTH",
"-178 -180 OFFCURVE",
"-270 -246 OFFCURVE",
"-260 -360 OFFCURVE",
"-167 -418 OFFCURVE",
"-95 -418 QCURVE SMOOTH",
"67 -418 OFFCURVE",
"230 -248 QCURVE SMOOTH",
"394 -76 OFFCURVE",
"465 272 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-37 -420 OFFCURVE",
"25 -403 OFFCURVE",
"86 -371 CURVE SMOOTH",
"272 -275 OFFCURVE",
"406 -109 OFFCURVE",
"470 195 CURVE SMOOTH",
"516 414 OFFCURVE",
"544 557 OFFCURVE",
"557 629 CURVE SMOOTH",
"651 1165 LINE SMOOTH",
"663 1236 OFFCURVE",
"711 1273 OFFCURVE",
"841 1273 CURVE",
"841 1359 LINE",
"279 1359 LINE",
"279 1273 LINE",
"384 1273 OFFCURVE",
"421 1236 OFFCURVE",
"408 1165 CURVE SMOOTH",
"247 254 LINE SMOOTH",
"204 13 OFFCURVE",
"171 -136 OFFCURVE",
"143 -195 CURVE SMOOTH",
"125 -234 OFFCURVE",
"97 -259 OFFCURVE",
"72 -276 CURVE",
"60 -209 OFFCURVE",
"4 -158 OFFCURVE",
"-73 -158 CURVE SMOOTH",
"-162 -158 OFFCURVE",
"-235 -213 OFFCURVE",
"-235 -297 CURVE SMOOTH",
"-235 -375 OFFCURVE",
"-157 -420 OFFCURVE",
"-94 -420 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
12 1 0 1 1 76 27 1 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 1 0 101 4 1 2 2 3 97 0 3 3 31 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
0 3 4 1 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
36 21 25 35 35 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 705;
}
);
leftKerningGroup = J;
note = J;
rightKerningGroup = J;
unicode = 004A;
},
{
glyphname = K;
lastChange = "2018-08-18 13:18:52 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{544, 0}";
},
{
name = top;
position = "{784, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1133 0 LINE",
"1133 56 LINE",
"1015 56 OFFCURVE",
"962 103 OFFCURVE",
"918 173 CURVE SMOOTH",
"556 742 LINE",
"1019 1201 LINE SMOOTH",
"1065 1246 OFFCURVE",
"1127 1300 OFFCURVE",
"1250 1300 CURVE",
"1250 1358 LINE",
"887 1358 LINE",
"887 1300 LINE",
"934 1300 OFFCURVE",
"961 1296 OFFCURVE",
"961 1269 CURVE SMOOTH",
"961 1241 OFFCURVE",
"928 1203 OFFCURVE",
"900 1175 CURVE SMOOTH",
"543 810 LINE SMOOTH",
"522 789 OFFCURVE",
"440 706 OFFCURVE",
"406 706 CURVE SMOOTH",
"373 706 LINE",
"363 651 LINE",
"400 651 LINE SMOOTH",
"450 651 OFFCURVE",
"501 595 OFFCURVE",
"534 539 CURVE SMOOTH",
"741 186 LINE SMOOTH",
"752 167 OFFCURVE",
"761 145 OFFCURVE",
"761 129 CURVE SMOOTH",
"761 71 OFFCURVE",
"702 56 OFFCURVE",
"637 56 CURVE",
"637 0 LINE"
);
},
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"691 1300 CURVE",
"691 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"320 1300 OFFCURVE",
"365 1263 OFFCURVE",
"352 1192 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"100 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"451 0 LINE",
"451 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1133 0 LINE",
"1133 56 LINE",
"1015 56 OFFCURVE",
"962 103 OFFCURVE",
"918 173 CURVE SMOOTH",
"556 742 LINE",
"1019 1201 LINE SMOOTH",
"1065 1246 OFFCURVE",
"1127 1300 OFFCURVE",
"1250 1300 CURVE",
"1250 1358 LINE",
"887 1358 LINE",
"887 1300 LINE",
"934 1300 OFFCURVE",
"961 1296 OFFCURVE",
"961 1269 CURVE SMOOTH",
"961 1241 OFFCURVE",
"928 1203 OFFCURVE",
"900 1175 CURVE SMOOTH",
"543 810 LINE SMOOTH",
"522 789 OFFCURVE",
"440 706 OFFCURVE",
"406 706 CURVE SMOOTH",
"373 706 LINE",
"363 651 LINE",
"400 651 LINE SMOOTH",
"450 651 OFFCURVE",
"501 595 OFFCURVE",
"534 539 CURVE SMOOTH",
"741 186 LINE SMOOTH",
"752 167 OFFCURVE",
"761 145 OFFCURVE",
"761 129 CURVE SMOOTH",
"761 71 OFFCURVE",
"702 56 OFFCURVE",
"637 56 CURVE",
"637 0 LINE"
);
},
{
closed = 1;
nodes = (
"487 1263 OFFCURVE",
"556 1300 OFFCURVE",
"691 1300 CURVE",
"691 1358 LINE",
"196 1358 LINE",
"196 1300 LINE",
"320 1300 OFFCURVE",
"366 1266 OFFCURVE",
"353 1195 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"149 95 OFFCURVE",
"100 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"451 0 LINE",
"451 58 LINE",
"316 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"474 1192 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
89 1 10 7 1 76 79 54 2 8 74 35 10 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 10 0 3 0 10 3 105 13 11 9 3 7 7 8 97 12 1 8 8 92 77 6 4 2 3 0 0 1 97 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 10 0 3 0 10 3 105 6 4 2 3 0 5 1 1 0 1 101 13 11 9 3 7 7 8 97 12 1 8 8 92 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
12 1 8 13 11 9 3 7 10 8 7 105 0 10 0 3 0 10 3 105 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
84 82 78 77 72 71 66 65 59 57 21 22 36 21 21 22 36 21 18 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1238;
},
{
anchors = (
{
name = bottom;
position = "{629, 0}";
},
{
name = top;
position = "{869, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"804 719 LINE SMOOTH",
"789 742 OFFCURVE",
"789 752 QCURVE",
"789 762 OFFCURVE",
"803 776 QCURVE SMOOTH",
"1166 1120 LINE SMOOTH",
"1260 1208 OFFCURVE",
"1318 1239 QCURVE SMOOTH",
"1374 1270 OFFCURVE",
"1468 1270 QCURVE SMOOTH",
"1483 1270 OFFCURVE",
"1497 1339 OFFCURVE",
"1493 1364 OFFCURVE",
"1485 1364 QCURVE",
"1431 1358 OFFCURVE",
"1142 1358 OFFCURVE",
"1071 1364 QCURVE",
"1059 1364 OFFCURVE",
"1040 1294 OFFCURVE",
"1043 1270 OFFCURVE",
"1051 1270 QCURVE SMOOTH",
"1102 1270 OFFCURVE",
"1105 1243 QCURVE SMOOTH",
"1106 1214 OFFCURVE",
"1048 1157 QCURVE SMOOTH",
"683 795 LINE SMOOTH",
"629 739 OFFCURVE",
"606 739 QCURVE SMOOTH",
"600 739 OFFCURVE",
"599 752 OFFCURVE",
"600 758 QCURVE",
"680 1153 LINE SMOOTH",
"694 1231 OFFCURVE",
"766 1270 OFFCURVE",
"850 1270 QCURVE SMOOTH",
"862 1270 OFFCURVE",
"879 1337 OFFCURVE",
"877 1364 OFFCURVE",
"869 1364 QCURVE",
"796 1358 OFFCURVE",
"393 1358 OFFCURVE",
"320 1364 QCURVE",
"307 1364 OFFCURVE",
"293 1298 OFFCURVE",
"295 1270 OFFCURVE",
"303 1270 QCURVE SMOOTH",
"442 1270 OFFCURVE",
"448 1204 QCURVE SMOOTH",
"450 1178 OFFCURVE",
"446 1153 QCURVE",
"254 203 LINE SMOOTH",
"239 133 OFFCURVE",
"159 86 OFFCURVE",
"67 86 QCURVE SMOOTH",
"51 86 OFFCURVE",
"40 14 OFFCURVE",
"45 -6 OFFCURVE",
"53 -6 QCURVE",
"170 0 OFFCURVE",
"492 0 OFFCURVE",
"606 -8 QCURVE",
"620 -8 OFFCURVE",
"631 55 OFFCURVE",
"628 86 OFFCURVE",
"622 86 QCURVE SMOOTH",
"491 87 OFFCURVE",
"485 150 QCURVE SMOOTH",
"483 178 OFFCURVE",
"487 203 QCURVE",
"569 602 LINE SMOOTH",
"574 627 OFFCURVE",
"599 627 OFFCURVE",
"635 600 OFFCURVE",
"654 563 QCURVE",
"859 205 LINE SMOOTH",
"889 155 OFFCURVE",
"891 135 QCURVE SMOOTH",
"895 86 OFFCURVE",
"811 86 QCURVE SMOOTH",
"798 86 OFFCURVE",
"785 25 OFFCURVE",
"786 -8 OFFCURVE",
"796 -8 QCURVE",
"887 0 OFFCURVE",
"1236 0 OFFCURVE",
"1329 -8 QCURVE",
"1341 -8 OFFCURVE",
"1348 45 OFFCURVE",
"1345 86 OFFCURVE",
"1335 86 QCURVE SMOOTH",
"1269 86 OFFCURVE",
"1171 124 OFFCURVE",
"1131 190 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1303 0 LINE",
"1303 86 LINE",
"1193 86 OFFCURVE",
"1133 104 OFFCURVE",
"1075 190 CURVE SMOOTH",
"687 759 LINE",
"1129 1186 LINE SMOOTH",
"1190 1244 OFFCURVE",
"1240 1270 OFFCURVE",
"1367 1270 CURVE",
"1367 1358 LINE",
"952 1358 LINE",
"952 1270 LINE",
"999 1270 OFFCURVE",
"1019 1262 OFFCURVE",
"1019 1248 CURVE SMOOTH",
"1019 1226 OFFCURVE",
"980 1184 OFFCURVE",
"950 1155 CURVE SMOOTH",
"615 825 LINE SMOOTH",
"578 788 OFFCURVE",
"549 770 OFFCURVE",
"530 770 CURVE SMOOTH",
"493 770 LINE",
"463 598 LINE",
"506 598 LINE SMOOTH",
"521 598 OFFCURVE",
"547 575 OFFCURVE",
"579 524 CURVE SMOOTH",
"780 203 LINE SMOOTH",
"798 174 OFFCURVE",
"808 150 OFFCURVE",
"808 132 CURVE SMOOTH",
"808 93 OFFCURVE",
"757 86 OFFCURVE",
"706 86 CURVE",
"706 0 LINE"
);
},
{
closed = 1;
nodes = (
"589 1235 OFFCURVE",
"639 1272 OFFCURVE",
"774 1272 CURVE",
"774 1358 LINE",
"196 1358 LINE",
"196 1272 LINE",
"314 1272 OFFCURVE",
"346 1235 OFFCURVE",
"333 1164 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"145 123 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE",
"548 0 LINE",
"548 86 LINE",
"413 86 OFFCURVE",
"388 123 OFFCURVE",
"401 194 CURVE SMOOTH",
"576 1164 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 9 values pushed */
79 54 2 8 74 10 1 1 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
79 54 2 8 74 10 1 5 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 13 11 9 3 7 7 8 97 12 1 8 8 31 77 6 4 2 3 0 0 1 97 5 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 6 4 2 3 0 5 1 1 0 1 101 13 11 9 3 7 7 8 97 12 1 8 8 31 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 12 1 8 13 11 9 3 7 10 8 7 105 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 97 5 1 1 0 1 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 12 1 8 13 11 9 3 7 10 8 7 105 6 4 2 3 0 0 1 5 0 1 105 6 4 2 3 0 0 5 95 0 5 0 5 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 0 8 12 7 8 89 0 12 13 11 9 3 7 10 12 7 105 6 4 2 3 0 0 1 5 0 1 105 6 4 2 3 0 0 5 95 0 5 0 5 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
84 82 78 77 72 71 66 64 59 57 51 22 35 67 21 22 36 21 18 14 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1408;
}
);
leftMetricsKey = H;
note = K;
rightKerningGroup = K;
unicode = 004B;
},
{
glyphname = L;
lastChange = "2018-08-18 13:19:02 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{504, 0}";
},
{
name = center;
position = "{624, 682}";
},
{
name = top;
position = "{744, 1363}";
},
{
name = topright;
position = "{1303, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1051 0 LINE",
"1118 381 LINE",
"1048 381 LINE",
"1017 202 OFFCURVE",
"897 75 OFFCURVE",
"729 67 CURVE SMOOTH",
"453 54 LINE",
"362 54 OFFCURVE",
"319 107 OFFCURVE",
"311 171 CURVE SMOOTH",
"308 202 OFFCURVE",
"307 235 OFFCURVE",
"313 269 CURVE SMOOTH",
"476 1192 LINE SMOOTH",
"489 1263 OFFCURVE",
"540 1300 OFFCURVE",
"707 1300 CURVE",
"707 1358 LINE",
"171 1358 LINE",
"171 1300 LINE",
"306 1300 OFFCURVE",
"366 1263 OFFCURVE",
"354 1192 CURVE SMOOTH",
"173 163 LINE SMOOTH",
"160 93 OFFCURVE",
"92 58 OFFCURVE",
"-33 58 CURVE",
"-33 0 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1051 0 LINE",
"1118 381 LINE",
"1048 381 LINE",
"1017 202 OFFCURVE",
"897 75 OFFCURVE",
"729 67 CURVE SMOOTH",
"453 54 LINE",
"362 54 OFFCURVE",
"319 107 OFFCURVE",
"311 171 CURVE SMOOTH",
"307 202 OFFCURVE",
"307 235 OFFCURVE",
"313 269 CURVE SMOOTH",
"476 1192 LINE SMOOTH",
"489 1263 OFFCURVE",
"540 1300 OFFCURVE",
"707 1300 CURVE",
"707 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"306 1300 OFFCURVE",
"368 1266 OFFCURVE",
"355 1195 CURVE SMOOTH",
"173 163 LINE SMOOTH",
"161 93 OFFCURVE",
"92 58 OFFCURVE",
"-33 58 CURVE",
"-33 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
26 1 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 1 2 2 3 97 0 3 3 92 77 5 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
5 1 1 0 0 1 0 99 4 1 2 2 3 97 0 3 3 92 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
90 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 4 1 2 1 3 2 105 5 1 1 0 0 1 89 5 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 0 2 1 0 128 0 0 0 132 0 3 2 2 3 89 0 3 3 2 97 4 1 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
54 36 21 22 35 82 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1158;
},
{
anchors = (
{
name = bottom;
position = "{578, 0}";
},
{
name = center;
position = "{698, 682}";
},
{
name = top;
position = "{818, 1363}";
},
{
name = topright;
position = "{1451, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1251 383 LINE",
"1255 399 OFFCURVE",
"1154 399 OFFCURVE",
"1152 383 QCURVE",
"1094 103 OFFCURVE",
"839 92 QCURVE SMOOTH",
"525 78 LINE SMOOTH",
"414 73 OFFCURVE",
"407 160 QCURVE SMOOTH",
"405 195 OFFCURVE",
"415 242 QCURVE SMOOTH",
"601 1153 LINE SMOOTH",
"614 1217 OFFCURVE",
"677 1270 OFFCURVE",
"800 1270 QCURVE SMOOTH",
"812 1270 OFFCURVE",
"827 1337 OFFCURVE",
"824 1364 OFFCURVE",
"818 1364 QCURVE",
"762 1358 OFFCURVE",
"293 1358 OFFCURVE",
"235 1364 QCURVE",
"222 1364 OFFCURVE",
"208 1298 OFFCURVE",
"210 1270 OFFCURVE",
"216 1270 QCURVE SMOOTH",
"360 1270 OFFCURVE",
"365 1206 QCURVE SMOOTH",
"366 1180 OFFCURVE",
"361 1153 QCURVE SMOOTH",
"171 197 LINE SMOOTH",
"162 152 OFFCURVE",
"109 86 OFFCURVE",
"-16 86 QCURVE SMOOTH",
"-30 86 OFFCURVE",
"-47 16 OFFCURVE",
"-44 -8 OFFCURVE",
"-36 -8 QCURVE",
"153 0 OFFCURVE",
"395 0 OFFCURVE",
"982 -8 OFFCURVE",
"1082 -8 QCURVE SMOOTH",
"1156 -8 OFFCURVE",
"1177 4 OFFCURVE",
"1183 47 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1199 0 LINE",
"1269 401 LINE",
"1169 401 LINE",
"1144 258 OFFCURVE",
"1015 95 OFFCURVE",
"888 90 CURVE SMOOTH",
"555 78 LINE",
"478 78 OFFCURVE",
"439 122 OFFCURVE",
"439 200 CURVE SMOOTH",
"439 216 OFFCURVE",
"441 232 OFFCURVE",
"444 250 CURVE SMOOTH",
"605 1164 LINE SMOOTH",
"617 1235 OFFCURVE",
"677 1272 OFFCURVE",
"812 1272 CURVE",
"812 1358 LINE",
"213 1358 LINE",
"213 1272 LINE",
"344 1272 OFFCURVE",
"374 1235 OFFCURVE",
"362 1164 CURVE SMOOTH",
"191 191 LINE SMOOTH",
"179 120 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
26 1 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 6 2 1 2 6 1 128 4 1 2 2 3 97 0 3 3 31 77 5 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 6 2 1 2 6 1 128 5 1 1 0 0 1 0 99 4 1 2 2 3 97 0 3 3 31 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
76 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 6 2 1 2 6 1 128 0 3 4 1 2 6 3 2 105 5 1 1 0 0 1 89 5 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 6 2 1 2 6 1 128 0 1 0 2 1 0 126 0 0 0 132 0 3 2 2 3 89 0 3 3 2 97 4 1 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
18 54 36 21 22 35 82 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 1306;
}
);
leftMetricsKey = H;
note = L;
rightKerningGroup = L;
unicode = 004C;
},
{
glyphname = Lslash;
lastChange = "2018-08-18 13:26:02 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{573.532, 0}";
},
{
name = center;
position = "{693.787, 682}";
},
{
name = top;
position = "{813.866, 1363}";
},
{
name = topright;
position = "{1372.866, 1363}";
}
);
annotations = (
{
position = "{785, 690}";
text = "Decomposed L to keep slash from getting misaligned. Is there a better way?";
type = Text;
width = 139;
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"893 916 LINE",
"848 986 LINE",
"109 536 LINE",
"155 468 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"790 856 LINE",
"745 926 LINE",
"6 476 LINE",
"52 408 LINE"
);
},
{
closed = 1;
nodes = (
"1121 0 LINE",
"1188 381 LINE",
"1118 381 LINE",
"1087 202 OFFCURVE",
"967 75 OFFCURVE",
"799 67 CURVE SMOOTH",
"523 54 LINE",
"432 54 OFFCURVE",
"389 107 OFFCURVE",
"381 171 CURVE SMOOTH",
"377 202 OFFCURVE",
"377 235 OFFCURVE",
"383 269 CURVE SMOOTH",
"546 1192 LINE SMOOTH",
"559 1263 OFFCURVE",
"610 1300 OFFCURVE",
"777 1300 CURVE",
"777 1358 LINE",
"255 1358 LINE",
"255 1300 LINE",
"376 1300 OFFCURVE",
"438 1266 OFFCURVE",
"425 1195 CURVE SMOOTH",
"243 163 LINE SMOOTH",
"231 93 OFFCURVE",
"162 58 OFFCURVE",
"37 58 CURVE",
"37 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
39 14 2 1 2 1 76 31 1 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 1 2 2 3 97 0 3 3 92 77 5 1 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
5 1 1 0 0 1 0 99 4 1 2 2 3 97 0 3 3 92 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
90 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 4 1 2 1 3 2 105 5 1 1 0 0 1 89 5 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 0 2 1 0 128 0 0 0 132 0 3 2 2 3 89 0 3 3 2 97 4 1 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
60 36 21 28 35 66 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1228;
},
{
anchors = (
{
name = bottom;
position = "{647.532, 0}";
},
{
name = center;
position = "{767.787, 682}";
},
{
name = top;
position = "{887.866, 1363}";
},
{
name = topright;
position = "{1520.866, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"964 828 LINE",
"912 926 LINE",
"138 473 LINE",
"190 379 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"884 828 LINE",
"832 926 LINE",
"58 473 LINE",
"110 379 LINE"
);
},
{
closed = 1;
nodes = (
"1269 0 LINE",
"1339 401 LINE",
"1239 401 LINE",
"1214 258 OFFCURVE",
"1085 95 OFFCURVE",
"958 90 CURVE SMOOTH",
"625 78 LINE",
"548 78 OFFCURVE",
"509 122 OFFCURVE",
"509 200 CURVE SMOOTH",
"509 216 OFFCURVE",
"511 232 OFFCURVE",
"514 250 CURVE SMOOTH",
"675 1164 LINE SMOOTH",
"687 1235 OFFCURVE",
"747 1272 OFFCURVE",
"882 1272 CURVE",
"882 1358 LINE",
"283 1358 LINE",
"283 1272 LINE",
"414 1272 OFFCURVE",
"444 1235 OFFCURVE",
"432 1164 CURVE SMOOTH",
"261 191 LINE SMOOTH",
"249 120 OFFCURVE",
"165 86 OFFCURVE",
"30 86 CURVE",
"30 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
90 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
48 40 2 2 3 64 59 58 21 4 6 2 22 1 1 6 3 76 46 42 2 3 74 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
48 40 2 2 3 64 59 58 21 4 6 2 22 1 1 6 73 1 0 1 4 76 46 42 2 3 74 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 6 2 1 2 6 1 128 4 1 2 2 3 97 0 3 3 31 77 5 1 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 6 2 1 2 6 1 128 5 1 1 0 0 1 0 99 4 1 2 2 3 97 0 3 3 31 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
90 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 6 2 1 2 6 1 128 0 3 4 1 2 6 3 2 105 5 1 1 0 0 1 89 5 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 6 2 1 2 6 1 128 0 1 0 2 1 0 126 0 0 0 132 0 3 2 2 3 89 0 3 3 2 97 4 1 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
82 80 76 73 53 51 45 43 37 36 37 100 7 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1376;
}
);
note = Lslash;
rightMetricsKey = L;
unicode = 0141;
},
{
glyphname = M;
lastChange = "2018-08-18 13:19:13 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{754, 0}";
},
{
name = top;
position = "{994, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1797 1106 LINE SMOOTH",
"1827 1250 OFFCURVE",
"1866 1287 OFFCURVE",
"1994 1287 CURVE",
"2012 1292 OFFCURVE",
"2028 1363 OFFCURVE",
"2008 1363 CURVE",
"1977 1360 OFFCURVE",
"1934 1358 OFFCURVE",
"1878 1358 CURVE SMOOTH",
"1823 1358 OFFCURVE",
"1789 1356 OFFCURVE",
"1776 1353 CURVE SMOOTH",
"1745 1346 OFFCURVE",
"1718 1325 OFFCURVE",
"1695 1291 CURVE SMOOTH",
"1004 275 LINE SMOOTH",
"994 259 OFFCURVE",
"984 251 OFFCURVE",
"974 251 CURVE SMOOTH",
"965 251 OFFCURVE",
"958 260 OFFCURVE",
"953 277 CURVE SMOOTH",
"673 1285 LINE SMOOTH",
"664 1322 OFFCURVE",
"644 1344 OFFCURVE",
"615 1352 CURVE",
"603 1356 OFFCURVE",
"566 1358 OFFCURVE",
"505 1358 CURVE SMOOTH",
"444 1358 OFFCURVE",
"398 1360 OFFCURVE",
"367 1363 CURVE",
"347 1363 OFFCURVE",
"331 1287 OFFCURVE",
"353 1287 CURVE SMOOTH",
"456 1287 OFFCURVE",
"510 1256 OFFCURVE",
"516 1193 CURVE SMOOTH",
"518 1169 OFFCURVE",
"515 1141 OFFCURVE",
"506 1110 CURVE SMOOTH",
"263 186 LINE SMOOTH",
"241 103 OFFCURVE",
"177 69 OFFCURVE",
"83 69 CURVE SMOOTH",
"64 69 OFFCURVE",
"48 -7 OFFCURVE",
"68 -7 CURVE",
"125 -2 OFFCURVE",
"192 0 OFFCURVE",
"266 0 CURVE SMOOTH",
"341 0 OFFCURVE",
"407 -2 OFFCURVE",
"466 -7 CURVE",
"484 -7 OFFCURVE",
"501 69 OFFCURVE",
"480 69 CURVE SMOOTH",
"387 69 OFFCURVE",
"338 95 OFFCURVE",
"333 147 CURVE SMOOTH",
"332 158 OFFCURVE",
"334 171 OFFCURVE",
"338 186 CURVE SMOOTH",
"559 1041 LINE SMOOTH",
"565 1061 OFFCURVE",
"573 1071 OFFCURVE",
"583 1071 CURVE SMOOTH",
"593 1071 OFFCURVE",
"601 1061 OFFCURVE",
"606 1041 CURVE SMOOTH",
"867 6 LINE",
"870 -3 OFFCURVE",
"875 -8 OFFCURVE",
"882 -8 CURVE SMOOTH",
"890 -8 OFFCURVE",
"897 -4 OFFCURVE",
"902 4 CURVE SMOOTH",
"1609 1045 LINE",
"1615 1054 OFFCURVE",
"1622 1058 OFFCURVE",
"1628 1058 CURVE SMOOTH",
"1635 1058 OFFCURVE",
"1638 1054 OFFCURVE",
"1639 1046 CURVE SMOOTH",
"1639 1043 OFFCURVE",
"1639 1041 OFFCURVE",
"1638 1039 CURVE",
"1471 186 LINE SMOOTH",
"1455 111 OFFCURVE",
"1404 69 OFFCURVE",
"1309 69 CURVE SMOOTH",
"1290 69 OFFCURVE",
"1274 -7 OFFCURVE",
"1295 -7 CURVE",
"1352 -2 OFFCURVE",
"1426 0 OFFCURVE",
"1517 0 CURVE SMOOTH",
"1609 0 OFFCURVE",
"1683 -2 OFFCURVE",
"1741 -7 CURVE",
"1759 -7 OFFCURVE",
"1777 69 OFFCURVE",
"1756 69 CURVE SMOOTH",
"1664 69 OFFCURVE",
"1616 96 OFFCURVE",
"1611 150 CURVE SMOOTH",
"1610 159 OFFCURVE",
"1611 171 OFFCURVE",
"1613 186 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"759 -23 LINE",
"1415 1052 LINE",
"1441 1052 LINE",
"1292 186 LINE SMOOTH",
"1278 108 OFFCURVE",
"1221 69 OFFCURVE",
"1112 69 CURVE",
"1112 0 LINE",
"1565 0 LINE",
"1565 69 LINE",
"1450 69 OFFCURVE",
"1404 108 OFFCURVE",
"1417 186 CURVE SMOOTH",
"1572 1106 LINE SMOOTH",
"1595 1245 OFFCURVE",
"1665 1287 OFFCURVE",
"1808 1287 CURVE",
"1808 1358 LINE",
"1617 1358 LINE SMOOTH",
"1555 1358 OFFCURVE",
"1513 1339 OFFCURVE",
"1484 1291 CURVE SMOOTH",
"827 219 LINE",
"796 219 LINE",
"517 1285 LINE SMOOTH",
"503 1340 OFFCURVE",
"470 1358 OFFCURVE",
"404 1358 CURVE SMOOTH",
"196 1358 LINE",
"196 1287 LINE",
"362 1287 OFFCURVE",
"369 1216 OFFCURVE",
"369 1175 CURVE SMOOTH",
"369 1156 OFFCURVE",
"366 1142 OFFCURVE",
"363 1130 CURVE SMOOTH",
"137 186 LINE SMOOTH",
"118 108 OFFCURVE",
"49 69 OFFCURVE",
"-51 69 CURVE",
"-51 0 LINE",
"366 0 LINE",
"366 69 LINE",
"273 69 OFFCURVE",
"216 133 OFFCURVE",
"216 164 CURVE SMOOTH",
"216 170 OFFCURVE",
"217 178 OFFCURVE",
"219 186 CURVE SMOOTH",
"425 1058 LINE",
"443 1058 LINE",
"732 -23 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
19 1 10 4 1 76 76 1 9 74 44 11 2 1 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
19 1 10 4 44 11 2 3 1 2 76 76 1 9 74 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 8 10 8 4 10 128 0 10 0 8 10 0 126 12 1 8 8 9 97 11 1 9 9 92 77 7 5 2 3 0 0 1 97 6 3 2 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 4 8 10 8 4 10 128 0 10 0 8 10 0 126 7 5 2 3 0 6 3 2 1 0 1 101 12 1 8 8 9 97 11 1 9 9 92 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 4 8 10 8 4 10 128 0 10 0 8 10 0 126 11 1 9 12 1 8 4 9 8 105 7 5 2 3 0 1 1 0 89 7 5 2 3 0 0 1 97 6 3 2 1 0 1 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 4 8 10 8 4 10 128 0 10 0 8 10 0 126 0 3 1 3 134 11 1 9 12 1 8 4 9 8 105 7 5 2 3 0 1 1 0 89 7 5 2 3 0 0 1 97 6 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
81 79 75 74 69 67 62 61 22 36 21 21 19 26 36 21 19 13 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1658;
},
{
anchors = (
{
name = bottom;
position = "{813, 0}";
},
{
name = top;
position = "{1053, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1863 1077 LINE SMOOTH",
"1891 1204 OFFCURVE",
"1946 1270 OFFCURVE",
"2057 1270 QCURVE SMOOTH",
"2069 1270 OFFCURVE",
"2084 1339 OFFCURVE",
"2081 1364 OFFCURVE",
"2075 1364 QCURVE",
"1969 1358 OFFCURVE",
"1803 1357 OFFCURVE",
"1770 1341 QCURVE SMOOTH",
"1739 1325 OFFCURVE",
"1708 1282 QCURVE SMOOTH",
"1039 354 LINE",
"1024 336 OFFCURVE",
"1012 336 QCURVE",
"998 333 OFFCURVE",
"991 360 QCURVE",
"732 1264 LINE",
"716 1314 OFFCURVE",
"691 1337 QCURVE",
"673 1358 OFFCURVE",
"502 1358 OFFCURVE",
"408 1364 QCURVE",
"398 1364 OFFCURVE",
"380 1296 OFFCURVE",
"382 1270 OFFCURVE",
"388 1270 QCURVE SMOOTH",
"523 1270 OFFCURVE",
"530 1184 QCURVE SMOOTH",
"533 1147 OFFCURVE",
"519 1100 QCURVE SMOOTH",
"273 219 LINE SMOOTH",
"247 135 OFFCURVE",
"165 86 OFFCURVE",
"79 86 QCURVE SMOOTH",
"65 86 OFFCURVE",
"53 16 OFFCURVE",
"58 -8 OFFCURVE",
"64 -8 QCURVE",
"138 0 OFFCURVE",
"400 0 OFFCURVE",
"477 -8 QCURVE",
"490 -8 OFFCURVE",
"504 55 OFFCURVE",
"501 86 OFFCURVE",
"493 86 QCURVE SMOOTH",
"374 86 OFFCURVE",
"369 147 QCURVE SMOOTH",
"367 172 OFFCURVE",
"375 199 QCURVE SMOOTH",
"569 899 LINE",
"575 926 OFFCURVE",
"598 926 OFFCURVE",
"604 897 QCURVE",
"849 25 LINE SMOOTH",
"860 -16 OFFCURVE",
"909 -16 OFFCURVE",
"937 23 QCURVE SMOOTH",
"1546 862 LINE SMOOTH",
"1568 891 OFFCURVE",
"1586 891 OFFCURVE",
"1587 879 QCURVE SMOOTH",
"1588 870 OFFCURVE",
"1587 860 QCURVE",
"1448 217 LINE SMOOTH",
"1434 147 OFFCURVE",
"1359 86 OFFCURVE",
"1281 86 QCURVE SMOOTH",
"1269 86 OFFCURVE",
"1252 18 OFFCURVE",
"1256 -8 OFFCURVE",
"1264 -8 QCURVE",
"1340 0 OFFCURVE",
"1734 0 OFFCURVE",
"1813 -8 QCURVE",
"1825 -8 OFFCURVE",
"1837 57 OFFCURVE",
"1834 86 OFFCURVE",
"1826 86 QCURVE SMOOTH",
"1679 87 OFFCURVE",
"1674 150 QCURVE SMOOTH",
"1672 174 OFFCURVE",
"1678 199 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"787 -18 LINE",
"1418 897 LINE",
"1432 897 LINE",
"1317 209 LINE SMOOTH",
"1303 127 OFFCURVE",
"1244 86 OFFCURVE",
"1132 86 CURVE",
"1132 0 LINE",
"1700 0 LINE",
"1700 86 LINE",
"1584 86 OFFCURVE",
"1537 127 OFFCURVE",
"1551 209 CURVE SMOOTH",
"1701 1124 LINE SMOOTH",
"1718 1234 OFFCURVE",
"1789 1270 OFFCURVE",
"1903 1270 CURVE",
"1903 1358 LINE",
"1683 1358 LINE SMOOTH",
"1638 1358 OFFCURVE",
"1596 1331 OFFCURVE",
"1558 1276 CURVE SMOOTH",
"912 336 LINE",
"882 336 LINE",
"599 1270 LINE SMOOTH",
"580 1332 OFFCURVE",
"539 1358 OFFCURVE",
"495 1358 CURVE SMOOTH",
"208 1358 LINE",
"208 1270 LINE",
"338 1270 OFFCURVE",
"366 1226 OFFCURVE",
"366 1183 CURVE SMOOTH",
"366 1164 OFFCURVE",
"361 1140 OFFCURVE",
"356 1116 CURVE SMOOTH",
"136 211 LINE SMOOTH",
"115 128 OFFCURVE",
"60 86 OFFCURVE",
"-48 86 CURVE",
"-48 0 LINE",
"400 0 LINE",
"400 86 LINE",
"287 86 OFFCURVE",
"235 110 OFFCURVE",
"235 160 CURVE SMOOTH",
"235 171 OFFCURVE",
"237 190 OFFCURVE",
"241 207 CURVE SMOOTH",
"429 989 LINE",
"445 989 LINE",
"747 -18 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 5 values pushed */
44 11 2 1 73 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 7 values pushed */
44 11 2 3 1 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 8 0 8 4 0 128 11 1 8 8 9 97 10 1 9 9 31 77 7 5 2 3 0 0 1 97 6 3 2 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 4 8 0 8 4 0 128 11 1 8 8 9 97 10 1 9 9 31 77 7 5 2 3 0 0 1 97 6 1 1 1 32 77 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 4 8 0 8 4 0 128 7 5 2 3 0 6 1 1 3 0 1 105 11 1 8 8 9 97 10 1 9 9 31 77 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 8 0 8 4 0 128 10 1 9 11 1 8 4 9 8 105 7 5 2 3 0 6 1 1 3 0 1 105 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 4 8 0 8 4 0 128 0 3 1 3 134 10 1 9 11 1 8 4 9 8 105 7 5 2 3 0 1 1 0 89 7 5 2 3 0 0 1 97 6 1 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
81 79 76 74 62 59 22 36 21 21 19 26 36 21 19 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1776;
}
);
leftKerningGroup = M;
note = M;
rightKerningGroup = M;
unicode = 004D;
},
{
glyphname = N;
lastChange = "2018-08-18 12:36:00 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{599, 0}";
},
{
name = top;
position = "{839, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1535 1172 LINE SMOOTH",
"1555 1273 OFFCURVE",
"1599 1287 OFFCURVE",
"1703 1287 CURVE SMOOTH",
"1721 1287 OFFCURVE",
"1737 1363 OFFCURVE",
"1717 1363 CURVE",
"1686 1360 OFFCURVE",
"1622 1358 OFFCURVE",
"1525 1358 CURVE SMOOTH",
"1427 1358 OFFCURVE",
"1363 1360 OFFCURVE",
"1331 1363 CURVE",
"1313 1363 OFFCURVE",
"1295 1287 OFFCURVE",
"1315 1287 CURVE SMOOTH",
"1414 1287 OFFCURVE",
"1466 1263 OFFCURVE",
"1470 1216 CURVE SMOOTH",
"1471 1203 OFFCURVE",
"1470 1188 OFFCURVE",
"1467 1172 CURVE SMOOTH",
"1287 290 LINE",
"1284 270 OFFCURVE",
"1277 260 OFFCURVE",
"1267 260 CURVE SMOOTH",
"1256 260 OFFCURVE",
"1245 269 OFFCURVE",
"1234 288 CURVE SMOOTH",
"655 1312 LINE SMOOTH",
"607 1395 OFFCURVE",
"471 1352 OFFCURVE",
"362 1363 CURVE",
"344 1363 OFFCURVE",
"328 1287 OFFCURVE",
"349 1287 CURVE SMOOTH",
"393 1287 OFFCURVE",
"425 1284 OFFCURVE",
"446 1277 CURVE SMOOTH",
"479 1266 OFFCURVE",
"497 1244 OFFCURVE",
"499 1212 CURVE SMOOTH",
"502 1180 OFFCURVE",
"500 1147 OFFCURVE",
"494 1114 CURVE SMOOTH",
"311 186 LINE SMOOTH",
"292 86 OFFCURVE",
"234 69 OFFCURVE",
"114 69 CURVE SMOOTH",
"96 69 OFFCURVE",
"80 -7 OFFCURVE",
"101 -7 CURVE",
"158 -2 OFFCURVE",
"225 0 OFFCURVE",
"301 0 CURVE SMOOTH",
"377 0 OFFCURVE",
"444 -2 OFFCURVE",
"502 -7 CURVE",
"520 -7 OFFCURVE",
"536 69 OFFCURVE",
"515 69 CURVE SMOOTH",
"427 69 OFFCURVE",
"380 93 OFFCURVE",
"376 141 CURVE SMOOTH",
"375 153 OFFCURVE",
"376 168 OFFCURVE",
"380 186 CURVE SMOOTH",
"562 1106 LINE",
"565 1127 OFFCURVE",
"571 1137 OFFCURVE",
"582 1137 CURVE SMOOTH",
"593 1137 OFFCURVE",
"603 1130 OFFCURVE",
"610 1117 CURVE SMOOTH",
"1246 0 LINE SMOOTH",
"1258 -19 OFFCURVE",
"1269 -29 OFFCURVE",
"1280 -29 CURVE SMOOTH",
"1291 -29 OFFCURVE",
"1299 -18 OFFCURVE",
"1303 4 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1102 -21 LINE",
"1313 1171 LINE SMOOTH",
"1326 1248 OFFCURVE",
"1378 1287 OFFCURVE",
"1479 1287 CURVE",
"1479 1358 LINE",
"1089 1358 LINE",
"1089 1287 LINE",
"1213 1287 OFFCURVE",
"1264 1248 OFFCURVE",
"1250 1171 CURVE SMOOTH",
"1096 299 LINE",
"1071 299 LINE",
"489 1309 LINE SMOOTH",
"465 1351 OFFCURVE",
"418 1358 OFFCURVE",
"360 1358 CURVE SMOOTH",
"185 1358 LINE",
"185 1287 LINE",
"304 1287 OFFCURVE",
"369 1245 OFFCURVE",
"345 1110 CURVE SMOOTH",
"182 186 LINE SMOOTH",
"168 108 OFFCURVE",
"105 69 OFFCURVE",
"-16 69 CURVE",
"-16 0 LINE",
"393 0 LINE",
"393 69 LINE",
"277 69 OFFCURVE",
"231 108 OFFCURVE",
"245 186 CURVE SMOOTH",
"409 1117 LINE",
"432 1117 LINE",
"1082 -21 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
19 1 0 3 1 76 57 1 6 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
10 8 2 5 5 6 97 9 1 6 6 92 77 0 1 1 6 97 9 1 6 6 92 77 4 1 2 2 3 97 0 3 3 93 77 0 7 7 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
4 1 2 0 3 0 2 3 105 10 8 2 5 5 6 97 9 1 6 6 92 77 0 1 1 6 97 9 1 6 6 92 77 0 7 7 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
10 8 2 5 1 6 5 89 9 1 6 0 1 7 6 1 105 4 1 2 0 3 0 2 3 105 0 7 7 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
62 60 56 55 21 36 21 23 36 21 21 19 17 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1348;
},
{
anchors = (
{
name = bottom;
position = "{633, 0}";
},
{
name = top;
position = "{873, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1508 1169 LINE SMOOTH",
"1516 1214 OFFCURVE",
"1577 1270 OFFCURVE",
"1681 1270 QCURVE SMOOTH",
"1695 1270 OFFCURVE",
"1710 1339 OFFCURVE",
"1708 1364 OFFCURVE",
"1700 1364 QCURVE",
"1643 1358 OFFCURVE",
"1350 1358 OFFCURVE",
"1292 1364 QCURVE",
"1278 1364 OFFCURVE",
"1261 1296 OFFCURVE",
"1263 1270 OFFCURVE",
"1269 1270 QCURVE SMOOTH",
"1398 1270 OFFCURVE",
"1405 1198 QCURVE SMOOTH",
"1406 1180 OFFCURVE",
"1401 1153 QCURVE SMOOTH",
"1246 399 LINE SMOOTH",
"1239 365 OFFCURVE",
"1206 364 OFFCURVE",
"1189 395 QCURVE SMOOTH",
"665 1296 LINE SMOOTH",
"646 1329 OFFCURVE",
"593 1360 OFFCURVE",
"413 1360 OFFCURVE",
"336 1364 QCURVE",
"321 1364 OFFCURVE",
"307 1296 OFFCURVE",
"309 1270 OFFCURVE",
"315 1270 QCURVE SMOOTH",
"368 1270 OFFCURVE",
"402 1262 QCURVE",
"448 1247 OFFCURVE",
"457 1151 OFFCURVE",
"446 1096 QCURVE SMOOTH",
"270 203 LINE SMOOTH",
"257 137 OFFCURVE",
"181 86 OFFCURVE",
"85 86 QCURVE SMOOTH",
"71 86 OFFCURVE",
"58 16 OFFCURVE",
"63 -8 OFFCURVE",
"69 -8 QCURVE",
"144 0 OFFCURVE",
"406 0 OFFCURVE",
"482 -8 QCURVE",
"495 -8 OFFCURVE",
"510 57 OFFCURVE",
"507 86 OFFCURVE",
"499 86 QCURVE SMOOTH",
"376 86 OFFCURVE",
"371 145 QCURVE SMOOTH",
"369 170 OFFCURVE",
"374 203 QCURVE",
"532 1008 LINE",
"539 1030 OFFCURVE",
"559 1031 OFFCURVE",
"573 1008 QCURVE SMOOTH",
"1165 2 LINE SMOOTH",
"1183 -27 OFFCURVE",
"1267 -26 OFFCURVE",
"1278 27 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1181 -20 LINE",
"1387 1151 LINE SMOOTH",
"1401 1230 OFFCURVE",
"1453 1270 OFFCURVE",
"1553 1270 CURVE",
"1553 1358 LINE",
"1142 1358 LINE",
"1142 1270 LINE",
"1255 1270 OFFCURVE",
"1299 1230 OFFCURVE",
"1285 1151 CURVE SMOOTH",
"1156 418 LINE",
"1134 418 LINE",
"567 1298 LINE SMOOTH",
"546 1331 OFFCURVE",
"518 1358 OFFCURVE",
"437 1358 CURVE",
"184 1358 LINE",
"184 1270 LINE",
"312 1270 OFFCURVE",
"352 1232 OFFCURVE",
"339 1155 CURVE SMOOTH",
"171 203 LINE SMOOTH",
"157 124 OFFCURVE",
"100 86 OFFCURVE",
"-17 86 CURVE",
"-17 0 LINE",
"416 0 LINE",
"416 86 LINE",
"305 86 OFFCURVE",
"262 125 OFFCURVE",
"276 203 CURVE SMOOTH",
"422 1030 LINE",
"441 1030 LINE",
"1141 -20 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
19 1 0 3 1 76 56 1 6 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 1 5 7 5 1 7 128 10 8 2 5 5 6 97 9 1 6 6 31 77 4 1 2 2 3 97 0 3 3 32 77 0 7 7 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 1 5 7 5 1 7 128 4 1 2 0 3 0 2 3 105 10 8 2 5 5 6 97 9 1 6 6 31 77 0 7 7 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 5 7 5 1 7 128 9 1 6 10 8 2 5 1 6 5 105 4 1 2 0 3 0 2 3 105 0 7 7 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 7 5 1 7 128 0 6 9 5 6 89 0 9 10 8 2 5 1 9 5 105 4 1 2 0 3 0 2 3 105 0 7 7 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
61 59 55 54 21 20 51 23 36 21 21 19 17 11 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1415;
}
);
leftKerningGroup = Eng;
leftMetricsKey = H;
note = N;
rightKerningGroup = N;
rightMetricsKey = H;
unicode = 004E;
},
{
glyphname = Ntilde;
lastChange = "2018-08-18 12:36:25 +0000";
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
name = tildecomb.case;
transform = "{1, 0, 0, 1, 671, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1348;
},
{
components = (
{
name = N;
},
{
name = tildecomb.case;
transform = "{1, 0, 0, 1, 703, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1415;
}
);
leftKerningGroup = Eng;
leftMetricsKey = N;
note = Ntilde;
rightKerningGroup = N;
rightMetricsKey = N;
unicode = 00D1;
},
{
glyphname = O;
lastChange = "2018-08-18 12:41:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{581, 0}";
},
{
name = center;
position = "{701, 682}";
},
{
name = ogonek;
position = "{1106, 10}";
},
{
name = top;
position = "{821, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
},
{
name = topright;
position = "{1456, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1360 1166 OFFCURVE",
"1197 1385 OFFCURVE",
"905 1385 CURVE SMOOTH",
"493 1385 OFFCURVE",
"43 922 OFFCURVE",
"43 441 CURVE SMOOTH",
"43 116 OFFCURVE",
"262 -27 OFFCURVE",
"498 -27 CURVE SMOOTH",
"914 -27 OFFCURVE",
"1360 419 OFFCURVE",
"1360 886 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1197 677 OFFCURVE",
"1095 391 OFFCURVE",
"895 194 CURVE SMOOTH",
"794 95 OFFCURVE",
"674 46 OFFCURVE",
"533 46 CURVE SMOOTH",
"365 46 OFFCURVE",
"206 216 OFFCURVE",
"206 456 CURVE SMOOTH",
"206 589 OFFCURVE",
"236 721 OFFCURVE",
"296 852 CURVE SMOOTH",
"415 1113 OFFCURVE",
"648 1314 OFFCURVE",
"857 1314 CURVE SMOOTH",
"1053 1314 OFFCURVE",
"1197 1135 OFFCURVE",
"1197 906 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1078 -27 OFFCURVE",
"1334 479 OFFCURVE",
"1334 819 CURVE SMOOTH",
"1334 1148 OFFCURVE",
"1135 1385 OFFCURVE",
"827 1385 CURVE SMOOTH",
"329 1385 OFFCURVE",
"61 853 OFFCURVE",
"61 515 CURVE SMOOTH",
"61 207 OFFCURVE",
"240 -27 OFFCURVE",
"574 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"398 38 OFFCURVE",
"217 242 OFFCURVE",
"217 562 CURVE SMOOTH",
"217 852 OFFCURVE",
"412 1324 OFFCURVE",
"804 1324 CURVE SMOOTH",
"1013 1324 OFFCURVE",
"1184 1096 OFFCURVE",
"1184 794 CURVE SMOOTH",
"1184 493 OFFCURVE",
"992 38 OFFCURVE",
"599 38 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 98 77 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
38 36 36 34 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1311;
},
{
anchors = (
{
name = bottom;
position = "{645, 0}";
},
{
name = center;
position = "{765, 682}";
},
{
name = ogonek;
position = "{1222, 10}";
},
{
name = top;
position = "{885, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
},
{
name = topright;
position = "{1585, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1591 1087 OFFCURVE",
"1343 1384 OFFCURVE",
"1101 1384 QCURVE SMOOTH",
"727 1384 OFFCURVE",
"200 795 OFFCURVE",
"200 451 QCURVE SMOOTH",
"200 240 OFFCURVE",
"487 -27 OFFCURVE",
"694 -27 QCURVE SMOOTH",
"1069 -27 OFFCURVE",
"1591 532 OFFCURVE",
"1591 874 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1353 679 OFFCURVE",
"1181 297 OFFCURVE",
"915 63 OFFCURVE",
"737 63 QCURVE SMOOTH",
"614 63 OFFCURVE",
"444 285 OFFCURVE",
"444 473 QCURVE SMOOTH",
"444 702 OFFCURVE",
"645 1087 OFFCURVE",
"917 1300 OFFCURVE",
"1064 1300 QCURVE SMOOTH",
"1183 1301 OFFCURVE",
"1267 1176 QCURVE SMOOTH",
"1353 1050 OFFCURVE",
"1353 874 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1123 -27 OFFCURVE",
"1461 422 OFFCURVE",
"1461 801 CURVE SMOOTH",
"1461 1130 OFFCURVE",
"1239 1384 OFFCURVE",
"891 1384 CURVE SMOOTH",
"400 1384 OFFCURVE",
"62 911 OFFCURVE",
"62 528 CURVE SMOOTH",
"62 197 OFFCURVE",
"286 -27 OFFCURVE",
"639 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"455 68 OFFCURVE",
"344 310 OFFCURVE",
"344 569 CURVE SMOOTH",
"344 831 OFFCURVE",
"514 1296 OFFCURVE",
"870 1296 CURVE SMOOTH",
"1071 1296 OFFCURVE",
"1185 1036 OFFCURVE",
"1185 784 CURVE SMOOTH",
"1185 538 OFFCURVE",
"1052 68 OFFCURVE",
"670 68 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 37 77 0 3 3 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
37 37 36 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1440;
}
);
leftKerningGroup = C;
note = O;
rightKerningGroup = O;
unicode = 004F;
},
{
glyphname = OE;
lastChange = "2018-08-18 13:19:26 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{814, 0}";
},
{
name = top;
position = "{1054, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1997 344 LINE",
"1996 353 OFFCURVE",
"1983 358 OFFCURVE",
"1957 358 CURVE SMOOTH",
"1932 358 OFFCURVE",
"1918 353 OFFCURVE",
"1915 344 CURVE",
"1880 167 OFFCURVE",
"1779 75 OFFCURVE",
"1611 69 CURVE SMOOTH",
"1370 62 LINE SMOOTH",
"1294 62 OFFCURVE",
"1254 95 OFFCURVE",
"1248 161 CURVE SMOOTH",
"1245 192 OFFCURVE",
"1250 238 OFFCURVE",
"1263 300 CURVE SMOOTH",
"1318 581 LINE SMOOTH",
"1321 598 OFFCURVE",
"1334 607 OFFCURVE",
"1356 607 CURVE SMOOTH",
"1555 607 LINE SMOOTH",
"1624 607 OFFCURVE",
"1660 593 OFFCURVE",
"1663 565 CURVE SMOOTH",
"1663 558 OFFCURVE",
"1662 545 OFFCURVE",
"1658 527 CURVE SMOOTH",
"1641 437 LINE SMOOTH",
"1639 426 OFFCURVE",
"1649 421 OFFCURVE",
"1671 421 CURVE SMOOTH",
"1693 421 OFFCURVE",
"1705 426 OFFCURVE",
"1708 436 CURVE",
"1720 544 OFFCURVE",
"1748 687 OFFCURVE",
"1793 864 CURVE",
"1792 874 OFFCURVE",
"1780 879 OFFCURVE",
"1757 879 CURVE SMOOTH",
"1735 879 OFFCURVE",
"1722 874 OFFCURVE",
"1721 864 CURVE SMOOTH",
"1702 764 LINE SMOOTH",
"1691 707 OFFCURVE",
"1680 676 OFFCURVE",
"1569 676 CURVE SMOOTH",
"1376 676 LINE SMOOTH",
"1351 676 OFFCURVE",
"1341 688 OFFCURVE",
"1346 713 CURVE SMOOTH",
"1456 1259 LINE SMOOTH",
"1460 1279 OFFCURVE",
"1471 1289 OFFCURVE",
"1488 1289 CURVE SMOOTH",
"1549 1289 OFFCURVE",
"1651 1286 OFFCURVE",
"1793 1280 CURVE SMOOTH",
"1836 1278 OFFCURVE",
"1875 1265 OFFCURVE",
"1910 1242 CURVE SMOOTH",
"1966 1205 OFFCURVE",
"1997 1154 OFFCURVE",
"2003 1089 CURVE SMOOTH",
"2005 1064 OFFCURVE",
"2003 1038 OFFCURVE",
"1998 1010 CURVE",
"1999 1001 OFFCURVE",
"2011 996 OFFCURVE",
"2036 996 CURVE SMOOTH",
"2061 996 OFFCURVE",
"2075 1001 OFFCURVE",
"2078 1010 CURVE",
"2139 1320 LINE",
"2140 1326 OFFCURVE",
"2141 1331 OFFCURVE",
"2140 1336 CURVE SMOOTH",
"2139 1351 OFFCURVE",
"2118 1358 OFFCURVE",
"2076 1358 CURVE SMOOTH",
"1715 1355 OFFCURVE",
"1483 1354 OFFCURVE",
"1382 1354 CURVE SMOOTH",
"1281 1354 OFFCURVE",
"1150 1357 OFFCURVE",
"988 1364 CURVE",
"681 1364 OFFCURVE",
"452 1170 OFFCURVE",
"309 890 CURVE SMOOTH",
"237 749 OFFCURVE",
"208 603 OFFCURVE",
"222 450 CURVE SMOOTH",
"246 177 OFFCURVE",
"425 -13 OFFCURVE",
"718 -13 CURVE",
"863 -4 OFFCURVE",
"1010 0 OFFCURVE",
"1159 0 CURVE SMOOTH",
"1308 0 OFFCURVE",
"1461 -2 OFFCURVE",
"1620 -5 CURVE SMOOTH",
"1907 -8 LINE SMOOTH",
"1919 -8 OFFCURVE",
"1928 1 OFFCURVE",
"1931 19 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1085 123 OFFCURVE",
"1039 84 OFFCURVE",
"958 69 CURVE SMOOTH",
"932 64 OFFCURVE",
"857 61 OFFCURVE",
"735 61 CURVE SMOOTH",
"571 61 OFFCURVE",
"404 229 OFFCURVE",
"383 466 CURVE SMOOTH",
"361 725 OFFCURVE",
"457 996 OFFCURVE",
"646 1169 CURVE SMOOTH",
"741 1255 OFFCURVE",
"849 1298 OFFCURVE",
"970 1298 CURVE SMOOTH",
"1027 1298 OFFCURVE",
"1073 1297 OFFCURVE",
"1108 1294 CURVE SMOOTH",
"1228 1285 OFFCURVE",
"1290 1253 OFFCURVE",
"1295 1199 CURVE SMOOTH",
"1296 1190 OFFCURVE",
"1295 1181 OFFCURVE",
"1294 1172 CURVE SMOOTH",
"1098 186 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1658 0 LINE",
"1719 342 LINE",
"1654 342 LINE",
"1644 290 OFFCURVE",
"1633 254 OFFCURVE",
"1617 222 CURVE SMOOTH",
"1567 119 OFFCURVE",
"1478 65 OFFCURVE",
"1345 61 CURVE SMOOTH",
"1109 54 LINE",
"1029 54 OFFCURVE",
"983 111 OFFCURVE",
"983 199 CURVE SMOOTH",
"983 216 OFFCURVE",
"985 234 OFFCURVE",
"988 254 CURVE SMOOTH",
"1051 612 LINE",
"1285 612 LINE SMOOTH",
"1368 612 OFFCURVE",
"1388 588 OFFCURVE",
"1388 549 CURVE SMOOTH",
"1388 540 OFFCURVE",
"1387 529 OFFCURVE",
"1385 517 CURVE SMOOTH",
"1369 421 LINE",
"1428 421 LINE",
"1508 876 LINE",
"1449 876 LINE",
"1433 788 LINE SMOOTH",
"1419 709 OFFCURVE",
"1400 671 OFFCURVE",
"1296 671 CURVE SMOOTH",
"1062 671 LINE",
"1172 1297 LINE",
"1496 1290 LINE SMOOTH",
"1635 1287 OFFCURVE",
"1713 1226 OFFCURVE",
"1713 1096 CURVE SMOOTH",
"1713 1070 OFFCURVE",
"1710 1041 OFFCURVE",
"1704 1008 CURVE",
"1769 1008 LINE",
"1831 1358 LINE",
"802 1358 LINE SMOOTH",
"324 1358 OFFCURVE",
"61 851 OFFCURVE",
"61 523 CURVE SMOOTH",
"61 226 OFFCURVE",
"235 0 OFFCURVE",
"557 0 CURVE"
);
},
{
closed = 1;
nodes = (
"397 68 OFFCURVE",
"217 262 OFFCURVE",
"217 571 CURVE SMOOTH",
"217 852 OFFCURVE",
"410 1289 OFFCURVE",
"778 1289 CURVE SMOOTH",
"902 1289 OFFCURVE",
"985 1283 OFFCURVE",
"1034 1208 CURVE",
"843 122 LINE",
"774 73 OFFCURVE",
"725 68 OFFCURVE",
"583 68 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 10 values pushed */
18 1 2 1 73 1 3 2 2 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
18 1 7 1 73 1 3 2 2 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 4 5 6 5 4 6 128 0 3 0 5 4 3 5 103 7 1 2 2 1 95 0 1 1 92 77 8 1 6 6 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 7 1 2 2 7 114 0 4 5 6 5 4 6 128 0 3 0 5 4 3 5 103 0 2 2 1 96 0 1 1 92 77 8 1 6 6 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 7 1 2 2 7 114 0 4 5 6 5 4 6 128 0 3 0 5 4 3 5 103 8 1 6 0 0 6 0 99 0 2 2 1 96 0 1 1 92 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 7 1 2 2 7 114 0 4 5 6 5 4 6 128 0 8 6 0 6 8 114 0 3 0 5 4 3 5 103 0 6 0 0 6 0 99 0 2 2 1 96 0 1 1 92 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 7 1 2 2 7 114 0 4 5 6 5 4 6 128 0 8 6 0 6 8 114 0 1 0 2 3 1 2 103 0 3 0 5 4 3 5 103 0 6 8 0 6 87 0 6 6 0 95 0 0 6 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 7 1 2 2 7 114 0 4 5 8 5 4 8 128 0 8 0 5 8 0 126 0 0 0 132 0 1 0 2 3 1 2 103 0 3 5 5 3 87 0 3 3 5 95 0 5 3 5 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
37 43 53 53 25 51 76 85 97 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1778;
},
{
anchors = (
{
name = bottom;
position = "{909, 0}";
},
{
name = top;
position = "{1149, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"2212 1323 LINE",
"2211 1339 LINE",
"2200 1358 OFFCURVE",
"2145 1358 QCURVE SMOOTH",
"2143 1358 LINE",
"1442 1354 LINE",
"1438 1354 LINE",
"1019 1364 LINE SMOOTH",
"968 1364 OFFCURVE",
"925 1360 QCURVE SMOOTH",
"677 1338 OFFCURVE",
"481 1141 QCURVE SMOOTH",
"347 1006 OFFCURVE",
"279 850 QCURVE SMOOTH",
"201 670 OFFCURVE",
"219 455 QCURVE SMOOTH",
"224 403 OFFCURVE",
"236 358 QCURVE SMOOTH",
"291 149 OFFCURVE",
"493 49 QCURVE SMOOTH",
"616 -12 OFFCURVE",
"741 -12 QCURVE SMOOTH",
"794 -12 OFFCURVE",
"866 -10 QCURVE SMOOTH",
"1138 0 OFFCURVE",
"1201 0 QCURVE SMOOTH",
"1355 0 LINE",
"1894 -8 LINE",
"1944 -8 LINE SMOOTH",
"1997 -7 OFFCURVE",
"2000 20 QCURVE",
"2069 383 LINE",
"2068 391 OFFCURVE",
"2042 399 OFFCURVE",
"2024 399 QCURVE SMOOTH",
"1977 399 OFFCURVE",
"1973 383 QCURVE SMOOTH",
"1950 293 OFFCURVE",
"1911 223 QCURVE SMOOTH",
"1836 94 OFFCURVE",
"1732 90 QCURVE SMOOTH",
"1442 78 LINE",
"1428 78 LINE",
"1344 82 OFFCURVE",
"1337 160 QCURVE SMOOTH",
"1335 186 OFFCURVE",
"1342 223 QCURVE SMOOTH",
"1415 571 LINE",
"1420 598 OFFCURVE",
"1440 598 QCURVE SMOOTH",
"1643 598 LINE",
"1655 598 LINE",
"1688 592 LINE",
"1711 583 OFFCURVE",
"1715 565 QCURVE",
"1714 547 LINE",
"1692 418 LINE",
"1699 401 OFFCURVE",
"1773 402 OFFCURVE",
"1776 418 QCURVE SMOOTH",
"1784 483 OFFCURVE",
"1815 639 QCURVE SMOOTH",
"1864 856 OFFCURVE",
"1874 885 QCURVE",
"1872 893 OFFCURVE",
"1856 897 QCURVE",
"1827 901 LINE",
"1788 901 OFFCURVE",
"1784 885 QCURVE",
"1747 739 LINE",
"1744 727 OFFCURVE",
"1738 719 QCURVE",
"1721 690 OFFCURVE",
"1649 690 QCURVE SMOOTH",
"1471 690 LINE",
"1450 693 OFFCURVE",
"1446 705 QCURVE",
"1448 723 LINE",
"1560 1231 LINE",
"1565 1245 LINE",
"1574 1264 OFFCURVE",
"1607 1264 QCURVE SMOOTH",
"1876 1255 LINE SMOOTH",
"1888 1255 OFFCURVE",
"1901 1253 QCURVE",
"1936 1245 LINE",
"1968 1231 LINE",
"2049 1180 OFFCURVE",
"2058 1071 QCURVE",
"2060 1043 OFFCURVE",
"2057 1010 QCURVE",
"2061 999 OFFCURVE",
"2075 995 QCURVE",
"2103 993 LINE",
"2147 994 OFFCURVE",
"2152 1012 QCURVE",
"2210 1300 LINE"
);
},
{
closed = 1;
nodes = (
"1109 217 LINE",
"1102 192 OFFCURVE",
"1092 172 QCURVE SMOOTH",
"1052 88 OFFCURVE",
"920 78 QCURVE SMOOTH",
"897 76 OFFCURVE",
"766 76 QCURVE SMOOTH",
"670 76 OFFCURVE",
"585 160 QCURVE SMOOTH",
"471 274 OFFCURVE",
"453 477 QCURVE SMOOTH",
"443 620 OFFCURVE",
"482 776 QCURVE SMOOTH",
"547 1037 OFFCURVE",
"723 1180 QCURVE SMOOTH",
"810 1247 OFFCURVE",
"890 1270 QCURVE SMOOTH",
"927 1280 OFFCURVE",
"1001 1280 QCURVE SMOOTH",
"1003 1280 LINE",
"1022 1280 LINE SMOOTH",
"1217 1282 OFFCURVE",
"1278 1237 QCURVE SMOOTH",
"1289 1229 OFFCURVE",
"1295 1221 QCURVE SMOOTH",
"1309 1204 OFFCURVE",
"1311 1184 QCURVE",
"1310 1171 OFFCURVE",
"1307 1157 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1847 0 LINE",
"1910 354 LINE",
"1807 354 LINE",
"1797 299 OFFCURVE",
"1784 260 OFFCURVE",
"1766 227 CURVE SMOOTH",
"1719 138 OFFCURVE",
"1642 92 OFFCURVE",
"1537 90 CURVE SMOOTH",
"1313 86 LINE",
"1252 86 OFFCURVE",
"1179 122 OFFCURVE",
"1179 196 CURVE SMOOTH",
"1179 204 OFFCURVE",
"1179 212 OFFCURVE",
"1181 221 CURVE SMOOTH",
"1247 594 LINE",
"1411 594 LINE SMOOTH",
"1483 594 OFFCURVE",
"1520 571 OFFCURVE",
"1520 526 CURVE SMOOTH",
"1520 519 OFFCURVE",
"1519 513 OFFCURVE",
"1518 506 CURVE SMOOTH",
"1503 417 LINE",
"1604 417 LINE",
"1686 881 LINE",
"1585 881 LINE",
"1566 778 LINE SMOOTH",
"1556 717 OFFCURVE",
"1509 686 OFFCURVE",
"1427 686 CURVE SMOOTH",
"1263 686 LINE",
"1366 1266 LINE",
"1688 1255 LINE SMOOTH",
"1782 1253 OFFCURVE",
"1870 1170 OFFCURVE",
"1870 1053 CURVE SMOOTH",
"1870 1034 OFFCURVE",
"1868 1013 OFFCURVE",
"1864 991 CURVE",
"1964 991 LINE",
"2029 1358 LINE",
"861 1358 LINE SMOOTH",
"387 1358 OFFCURVE",
"63 902 OFFCURVE",
"63 532 CURVE SMOOTH",
"63 215 OFFCURVE",
"278 0 OFFCURVE",
"617 0 CURVE"
);
},
{
closed = 1;
nodes = (
"439 80 OFFCURVE",
"335 319 OFFCURVE",
"335 569 CURVE SMOOTH",
"335 825 OFFCURVE",
"495 1272 OFFCURVE",
"840 1272 CURVE SMOOTH",
"972 1272 OFFCURVE",
"1060 1265 OFFCURVE",
"1106 1172 CURVE",
"931 178 LINE",
"850 96 OFFCURVE",
"800 80 OFFCURVE",
"645 80 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
99 6 2 0 1 20 1 2 3 42 40 2 4 5 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 2 0 5 4 2 5 103 0 1 1 9 96 0 9 9 31 77 0 3 3 34 77 11 1 6 6 8 96 0 8 8 32 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 2 0 5 4 2 5 103 0 1 1 9 96 0 9 9 31 77 11 1 6 6 8 96 0 8 8 32 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 2 0 5 4 2 5 103 11 1 6 0 8 6 8 100 0 1 1 9 96 0 9 9 31 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 11 6 8 6 11 114 0 2 0 5 4 2 5 103 0 6 0 8 6 8 100 0 1 1 9 96 0 9 9 31 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
115 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 11 6 8 6 11 114 0 9 0 1 0 9 1 103 0 2 0 5 4 2 5 103 0 6 11 8 6 87 0 6 6 8 96 0 8 6 8 80 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
116 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
0 10 9 1 9 10 1 128 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 11 6 8 6 11 114 0 9 0 1 0 9 1 103 0 2 0 5 4 2 5 103 0 6 11 8 6 87 0 6 6 8 96 0 8 6 8 80 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
117 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 10 9 1 1 10 114 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 11 6 8 6 11 114 0 9 0 1 0 9 1 103 0 2 0 5 4 2 5 103 0 6 11 8 6 87 0 6 6 8 96 0 8 6 8 80 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
0 10 9 1 9 10 1 128 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 6 5 7 6 126 0 11 6 8 6 11 114 0 9 0 1 0 9 1 103 0 2 0 5 4 2 5 103 0 6 11 8 6 87 0 6 6 8 96 0 8 6 8 80 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 73 values pushed */
0 10 9 1 9 10 1 128 0 0 1 3 1 0 3 128 0 3 2 1 3 2 126 0 4 5 7 5 4 7 128 0 7 11 5 7 11 126 0 11 8 5 11 8 126 0 8 8 132 0 9 0 1 0 9 1 103 0 2 5 5 2 87 0 2 2 5 95 0 5 2 5 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
120 118 108 104 94 88 149 20 69 54 24 21 38 43 18 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1967;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = OE;
rightMetricsKey = E;
unicode = 0152;
},
{
glyphname = Oacute;
lastChange = "2018-08-18 12:42:07 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 653, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 720, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Oacute;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D3;
},
{
glyphname = Obreve;
lastChange = "2018-08-18 12:42:30 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 744, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 806, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Obreve;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 014E;
},
{
glyphname = Ocircumflex;
lastChange = "2018-08-18 12:42:45 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 654, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 720, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Ocircumflex;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D4;
},
{
glyphname = Odieresis;
lastChange = "2018-08-18 12:43:01 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 652, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 715, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Odieresis;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D6;
},
{
glyphname = Ograve;
lastChange = "2018-08-18 12:43:18 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 656, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 727, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Ograve;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D2;
},
{
glyphname = Omacron;
lastChange = "2018-08-18 12:43:36 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 650, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 714, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Omacron;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 014C;
},
{
glyphname = Oslash;
lastChange = "2018-08-18 12:59:40 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{581, 0}";
},
{
name = top;
position = "{821, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1382 1376 LINE",
"1322 1427 LINE",
"92 -32 LINE",
"152 -84 LINE"
);
},
{
closed = 1;
nodes = (
"1078 -27 OFFCURVE",
"1334 479 OFFCURVE",
"1334 819 CURVE SMOOTH",
"1334 1148 OFFCURVE",
"1135 1385 OFFCURVE",
"827 1385 CURVE SMOOTH",
"329 1385 OFFCURVE",
"61 853 OFFCURVE",
"61 515 CURVE SMOOTH",
"61 207 OFFCURVE",
"240 -27 OFFCURVE",
"574 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"398 38 OFFCURVE",
"217 242 OFFCURVE",
"217 562 CURVE SMOOTH",
"217 852 OFFCURVE",
"412 1324 OFFCURVE",
"804 1324 CURVE SMOOTH",
"1013 1324 OFFCURVE",
"1184 1096 OFFCURVE",
"1184 794 CURVE SMOOTH",
"1184 493 OFFCURVE",
"992 38 OFFCURVE",
"599 38 CURVE SMOOTH"
);
}
);
};
components = (
{
name = O;
},
{
name = uni0338;
transform = "{1, 0, 0, 1, 658, 10}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
51 50 47 28 20 10 1 7 3 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 98 77 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
56 54 40 38 27 25 39 4 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 1311;
},
{
anchors = (
{
name = bottom;
position = "{645, 0}";
},
{
name = top;
position = "{885, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1335 1350 LINE",
"1249 1423 LINE",
"75 39 LINE",
"157 -39 LINE"
);
},
{
closed = 1;
nodes = (
"1123 -27 OFFCURVE",
"1461 422 OFFCURVE",
"1461 801 CURVE SMOOTH",
"1461 1130 OFFCURVE",
"1239 1384 OFFCURVE",
"891 1384 CURVE SMOOTH",
"400 1384 OFFCURVE",
"62 911 OFFCURVE",
"62 528 CURVE SMOOTH",
"62 197 OFFCURVE",
"286 -27 OFFCURVE",
"639 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"455 68 OFFCURVE",
"344 310 OFFCURVE",
"344 569 CURVE SMOOTH",
"344 831 OFFCURVE",
"514 1296 OFFCURVE",
"870 1296 CURVE SMOOTH",
"1071 1296 OFFCURVE",
"1185 1036 OFFCURVE",
"1185 784 CURVE SMOOTH",
"1185 538 OFFCURVE",
"1052 68 OFFCURVE",
"670 68 CURVE SMOOTH"
);
}
);
};
components = (
{
name = O;
},
{
name = uni0338;
transform = "{1, 0, 0, 1, 715, -10}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 1 2 1 48 47 44 26 12 5 3 2 7 1 0 3 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 37 77 0 3 3 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
46 60 44 36 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1440;
}
);
leftMetricsKey = "=O";
note = Oslash;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D8;
},
{
glyphname = Oslashacute;
lastChange = "2018-08-18 13:00:22 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Oslash;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 653, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = Oslash;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 720, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1440;
}
);
leftMetricsKey = "=O";
note = Oslashacute;
rightMetricsKey = O;
unicode = 01FE;
},
{
glyphname = Otilde;
lastChange = "2018-08-17 18:03:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 350, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = O;
},
{
name = tilde.case;
transform = "{1, 0, 0, 1, 338, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1396;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Otilde;
rightKerningGroup = O;
rightMetricsKey = O;
unicode = 00D5;
},
{
glyphname = P;
lastChange = "2018-08-18 13:19:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{425, 0}";
},
{
name = top;
position = "{665, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1103 1250 OFFCURVE",
"946 1358 OFFCURVE",
"734 1358 CURVE SMOOTH",
"683 1358 OFFCURVE",
"637 1358 OFFCURVE",
"596 1357 CURVE SMOOTH",
"555 1356 OFFCURVE",
"492 1355 OFFCURVE",
"406 1355 CURVE",
"495 1354 OFFCURVE",
"313 1350 OFFCURVE",
"177 1358 CURVE SMOOTH",
"159 1359 OFFCURVE",
"143 1282 OFFCURVE",
"164 1282 CURVE SMOOTH",
"270 1282 OFFCURVE",
"325 1255 OFFCURVE",
"330 1201 CURVE SMOOTH",
"331 1191 OFFCURVE",
"331 1181 OFFCURVE",
"329 1172 CURVE SMOOTH",
"132 186 LINE SMOOTH",
"114 94 OFFCURVE",
"49 69 OFFCURVE",
"-71 69 CURVE SMOOTH",
"-89 69 OFFCURVE",
"-105 -7 OFFCURVE",
"-84 -7 CURVE",
"-27 -2 OFFCURVE",
"57 0 OFFCURVE",
"169 0 CURVE SMOOTH",
"281 0 OFFCURVE",
"366 -2 OFFCURVE",
"424 -7 CURVE",
"442 -7 OFFCURVE",
"458 69 OFFCURVE",
"438 69 CURVE SMOOTH",
"333 69 OFFCURVE",
"279 95 OFFCURVE",
"274 148 CURVE SMOOTH",
"273 159 OFFCURVE",
"274 172 OFFCURVE",
"277 186 CURVE SMOOTH",
"354 583 LINE SMOOTH",
"357 598 OFFCURVE",
"367 604 OFFCURVE",
"383 602 CURVE SMOOTH",
"456 593 OFFCURVE",
"516 589 OFFCURVE",
"564 589 CURVE SMOOTH",
"864 589 OFFCURVE",
"1141 797 OFFCURVE",
"1117 1081 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"977 825 OFFCURVE",
"787 658 OFFCURVE",
"514 658 CURVE SMOOTH",
"476 658 OFFCURVE",
"436 661 OFFCURVE",
"392 671 CURVE SMOOTH",
"379 674 OFFCURVE",
"374 683 OFFCURVE",
"377 698 CURVE SMOOTH",
"489 1265 LINE SMOOTH",
"493 1286 OFFCURVE",
"544 1296 OFFCURVE",
"640 1296 CURVE SMOOTH",
"832 1296 OFFCURVE",
"944 1205 OFFCURVE",
"956 1068 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"185 1358 LINE",
"185 1300 LINE",
"303 1300 OFFCURVE",
"355 1265 OFFCURVE",
"343 1195 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"150 95 OFFCURVE",
"101 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"461 0 LINE",
"461 58 LINE",
"346 58 OFFCURVE",
"271 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"362 607 LINE",
"418 597 OFFCURVE",
"482 596 OFFCURVE",
"567 596 CURVE SMOOTH",
"987 596 OFFCURVE",
"1099 885 OFFCURVE",
"1099 1055 CURVE SMOOTH",
"1099 1248 OFFCURVE",
"947 1358 OFFCURVE",
"707 1358 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"459 650 OFFCURVE",
"410 656 OFFCURVE",
"372 666 CURVE",
"485 1304 LINE",
"621 1304 LINE SMOOTH",
"829 1304 OFFCURVE",
"965 1181 OFFCURVE",
"965 1029 CURVE SMOOTH",
"965 915 OFFCURVE",
"887 650 OFFCURVE",
"514 650 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
29 1 7 4 1 76 19 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 7 0 0 1 7 0 105 6 1 4 4 5 95 0 5 5 92 77 3 1 1 1 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 6 7 6 4 114 0 7 0 0 1 7 0 105 0 6 6 5 95 0 5 5 92 77 3 1 1 1 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 6 7 6 4 114 0 7 0 0 1 7 0 105 3 1 1 0 2 1 2 101 0 6 6 5 95 0 5 5 92 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 4 6 7 6 4 114 0 5 0 6 4 5 6 105 0 7 0 0 1 7 0 105 3 1 1 2 2 1 89 3 1 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
37 36 99 22 36 21 23 34 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 999;
},
{
anchors = (
{
name = bottom;
position = "{499, 0}";
},
{
name = top;
position = "{739, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1216 1202 OFFCURVE",
"968 1358 OFFCURVE",
"784 1358 QCURVE SMOOTH",
"735 1358 OFFCURVE",
"535 1352 OFFCURVE",
"349 1352 OFFCURVE",
"205 1358 QCURVE",
"190 1358 OFFCURVE",
"178 1294 OFFCURVE",
"180 1264 OFFCURVE",
"188 1264 QCURVE SMOOTH",
"337 1264 OFFCURVE",
"342 1202 QCURVE",
"344 1180 OFFCURVE",
"339 1157 QCURVE SMOOTH",
"138 203 LINE SMOOTH",
"123 133 OFFCURVE",
"50 86 OFFCURVE",
"-46 86 QCURVE SMOOTH",
"-62 86 OFFCURVE",
"-73 16 OFFCURVE",
"-70 -8 OFFCURVE",
"-62 -8 QCURVE",
"12 0 OFFCURVE",
"440 0 OFFCURVE",
"517 -8 QCURVE",
"529 -8 OFFCURVE",
"546 55 OFFCURVE",
"542 86 OFFCURVE",
"534 86 QCURVE SMOOTH",
"376 86 OFFCURVE",
"369 160 QCURVE SMOOTH",
"367 180 OFFCURVE",
"371 203 QCURVE",
"448 567 LINE",
"453 602 OFFCURVE",
"485 598 QCURVE SMOOTH",
"557 589 OFFCURVE",
"629 588 QCURVE SMOOTH",
"893 584 OFFCURVE",
"1245 866 OFFCURVE",
"1228 1063 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"980 901 OFFCURVE",
"762 674 OFFCURVE",
"578 674 QCURVE SMOOTH",
"528 674 OFFCURVE",
"512 678 QCURVE SMOOTH",
"475 687 OFFCURVE",
"483 727 QCURVE SMOOTH",
"595 1260 LINE",
"596 1278 OFFCURVE",
"711 1278 QCURVE SMOOTH",
"824 1278 OFFCURVE",
"959 1138 OFFCURVE",
"968 1038 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"186 1358 LINE",
"186 1272 LINE",
"301 1272 OFFCURVE",
"344 1238 OFFCURVE",
"331 1167 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"145 123 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE",
"567 0 LINE",
"567 86 LINE",
"462 86 OFFCURVE",
"388 123 OFFCURVE",
"401 194 CURVE SMOOTH",
"475 605 LINE",
"523 596 OFFCURVE",
"582 596 OFFCURVE",
"645 596 CURVE SMOOTH",
"1086 596 OFFCURVE",
"1244 843 OFFCURVE",
"1244 1031 CURVE SMOOTH",
"1244 1240 OFFCURVE",
"1041 1358 OFFCURVE",
"786 1358 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"560 676 OFFCURVE",
"523 677 OFFCURVE",
"490 687 CURVE",
"593 1278 LINE",
"689 1278 LINE SMOOTH",
"891 1278 OFFCURVE",
"987 1162 OFFCURVE",
"987 1024 CURVE SMOOTH",
"987 899 OFFCURVE",
"916 676 OFFCURVE",
"598 676 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
19 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 7 0 0 1 7 0 105 6 1 4 4 5 95 0 5 5 31 77 3 1 1 1 2 97 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 6 7 6 4 114 0 7 0 0 1 7 0 105 0 6 6 5 95 0 5 5 31 77 3 1 1 1 2 97 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 6 7 6 4 114 0 7 0 0 1 7 0 105 3 1 1 0 2 1 2 101 0 6 6 5 95 0 5 5 31 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 4 6 7 6 4 114 0 5 0 6 4 5 6 105 0 7 0 0 1 7 0 105 3 1 1 2 2 1 89 3 1 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
37 36 99 22 36 21 23 34 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1147;
}
);
leftMetricsKey = H;
note = P;
rightKerningGroup = P;
unicode = 0050;
},
{
glyphname = Q;
lastChange = "2018-08-18 13:19:46 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{554, 0}";
},
{
name = top;
position = "{794, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1490 1173 OFFCURVE",
"1323 1385 OFFCURVE",
"1035 1385 CURVE SMOOTH",
"620 1385 OFFCURVE",
"173 914 OFFCURVE",
"173 443 CURVE SMOOTH",
"173 208 OFFCURVE",
"246 95 OFFCURVE",
"474 -17 CURVE SMOOTH",
"701 -128 OFFCURVE",
"1075 -283 OFFCURVE",
"1438 -359 CURVE SMOOTH",
"1463 -364 OFFCURVE",
"1499 -293 OFFCURVE",
"1473 -284 CURVE",
"1203 -211 OFFCURVE",
"966 -75 OFFCURVE",
"896 9 CURVE SMOOTH",
"893 12 OFFCURVE",
"892 16 OFFCURVE",
"892 20 CURVE SMOOTH",
"892 24 OFFCURVE",
"894 27 OFFCURVE",
"900 29 CURVE SMOOTH",
"1109 113 OFFCURVE",
"1327 334 OFFCURVE",
"1420 561 CURVE SMOOTH",
"1467 674 OFFCURVE",
"1490 783 OFFCURVE",
"1490 886 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1327 481 OFFCURVE",
"1027 47 OFFCURVE",
"663 47 CURVE SMOOTH",
"484 47 OFFCURVE",
"336 232 OFFCURVE",
"336 448 CURVE SMOOTH",
"336 717 OFFCURVE",
"468 1011 OFFCURVE",
"677 1184 CURVE SMOOTH",
"781 1271 OFFCURVE",
"886 1314 OFFCURVE",
"991 1314 CURVE SMOOTH",
"1188 1313 OFFCURVE",
"1327 1145 OFFCURVE",
"1327 886 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1446 -300 LINE",
"1163 -221 OFFCURVE",
"874 -67 OFFCURVE",
"789 35 CURVE",
"786 -4 LINE",
"1187 154 OFFCURVE",
"1339 540 OFFCURVE",
"1339 819 CURVE SMOOTH",
"1339 1139 OFFCURVE",
"1151 1385 OFFCURVE",
"830 1385 CURVE SMOOTH",
"334 1385 OFFCURVE",
"60 859 OFFCURVE",
"60 511 CURVE SMOOTH",
"60 270 OFFCURVE",
"169 93 OFFCURVE",
"348 9 CURVE SMOOTH",
"694 -153 OFFCURVE",
"1051 -276 OFFCURVE",
"1419 -359 CURVE"
);
},
{
closed = 1;
nodes = (
"405 39 OFFCURVE",
"219 256 OFFCURVE",
"219 566 CURVE SMOOTH",
"219 898 OFFCURVE",
"443 1322 OFFCURVE",
"812 1322 CURVE SMOOTH",
"1020 1322 OFFCURVE",
"1187 1088 OFFCURVE",
"1187 798 CURVE SMOOTH",
"1187 509 OFFCURVE",
"996 39 OFFCURVE",
"601 39 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 2 1 2 134 0 1 1 0 97 0 0 0 98 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 2 1 2 134 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 34 29 27 23 21 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
},
{
anchors = (
{
name = bottom;
position = "{610, 0}";
},
{
name = top;
position = "{850, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1562 1087 OFFCURVE",
"1314 1384 OFFCURVE",
"1066 1384 QCURVE SMOOTH",
"718 1384 OFFCURVE",
"171 813 OFFCURVE",
"171 451 QCURVE SMOOTH",
"171 283 OFFCURVE",
"335 45 OFFCURVE",
"794 -162 OFFCURVE",
"1263 -315 OFFCURVE",
"1470 -358 QCURVE SMOOTH",
"1488 -362 OFFCURVE",
"1517 -305 OFFCURVE",
"1517 -278 OFFCURVE",
"1509 -276 QCURVE SMOOTH",
"1339 -229 OFFCURVE",
"1089 -78 OFFCURVE",
"1005 4 QCURVE",
"992 14 OFFCURVE",
"994 37 OFFCURVE",
"1017 47 QCURVE SMOOTH",
"1144 104 OFFCURVE",
"1425 377 OFFCURVE",
"1562 718 OFFCURVE",
"1562 874 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1324 593 OFFCURVE",
"970 63 OFFCURVE",
"708 63 QCURVE SMOOTH",
"585 63 OFFCURVE",
"415 286 OFFCURVE",
"415 481 QCURVE SMOOTH",
"415 698 OFFCURVE",
"624 1102 OFFCURVE",
"906 1300 OFFCURVE",
"1035 1300 QCURVE SMOOTH",
"1154 1301 OFFCURVE",
"1238 1176 QCURVE SMOOTH",
"1324 1048 OFFCURVE",
"1324 874 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1526 -258 LINE",
"1312 -193 OFFCURVE",
"1055 -70 OFFCURVE",
"893 74 CURVE",
"888 -20 LINE",
"1323 226 OFFCURVE",
"1461 526 OFFCURVE",
"1461 797 CURVE SMOOTH",
"1461 1128 OFFCURVE",
"1242 1384 OFFCURVE",
"892 1384 CURVE SMOOTH",
"408 1384 OFFCURVE",
"62 906 OFFCURVE",
"62 531 CURVE SMOOTH",
"62 289 OFFCURVE",
"188 92 OFFCURVE",
"403 0 CURVE SMOOTH",
"879 -203 OFFCURVE",
"1176 -298 OFFCURVE",
"1479 -358 CURVE"
);
},
{
closed = 1;
nodes = (
"452 66 OFFCURVE",
"343 298 OFFCURVE",
"343 555 CURVE SMOOTH",
"343 817 OFFCURVE",
"503 1296 OFFCURVE",
"870 1296 CURVE SMOOTH",
"1077 1296 OFFCURVE",
"1186 1047 OFFCURVE",
"1186 792 CURVE SMOOTH",
"1186 534 OFFCURVE",
"1048 66 OFFCURVE",
"670 66 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 2 1 2 134 0 1 1 0 97 0 0 0 37 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 2 1 2 134 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
37 35 30 28 23 21 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1370;
}
);
leftKerningGroup = C;
leftMetricsKey = O;
note = Q;
rightKerningGroup = Q;
unicode = 0051;
},
{
glyphname = R;
lastChange = "2018-08-18 13:19:55 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{584, 0}";
},
{
name = top;
position = "{824, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1135 1256 OFFCURVE",
"966 1358 OFFCURVE",
"749 1358 CURVE SMOOTH",
"697 1358 OFFCURVE",
"652 1358 OFFCURVE",
"616 1357 CURVE SMOOTH",
"579 1356 OFFCURVE",
"513 1355 OFFCURVE",
"418 1355 CURVE",
"509 1354 OFFCURVE",
"322 1350 OFFCURVE",
"175 1358 CURVE SMOOTH",
"156 1359 OFFCURVE",
"140 1282 OFFCURVE",
"161 1282 CURVE SMOOTH",
"269 1282 OFFCURVE",
"324 1260 OFFCURVE",
"329 1215 CURVE SMOOTH",
"331 1198 OFFCURVE",
"330 1183 OFFCURVE",
"328 1172 CURVE SMOOTH",
"131 186 LINE SMOOTH",
"113 97 OFFCURVE",
"64 69 OFFCURVE",
"-74 69 CURVE SMOOTH",
"-92 69 OFFCURVE",
"-108 -7 OFFCURVE",
"-87 -7 CURVE",
"-30 -2 OFFCURVE",
"55 0 OFFCURVE",
"169 0 CURVE SMOOTH",
"283 0 OFFCURVE",
"369 -2 OFFCURVE",
"427 -7 CURVE",
"445 -7 OFFCURVE",
"460 69 OFFCURVE",
"440 69 CURVE SMOOTH",
"333 69 OFFCURVE",
"277 94 OFFCURVE",
"273 143 CURVE SMOOTH",
"272 155 OFFCURVE",
"273 169 OFFCURVE",
"276 186 CURVE SMOOTH",
"353 583 LINE",
"354 589 OFFCURVE",
"357 594 OFFCURVE",
"362 598 CURVE",
"366 602 OFFCURVE",
"379 603 OFFCURVE",
"399 600 CURVE SMOOTH",
"419 597 OFFCURVE",
"446 596 OFFCURVE",
"478 596 CURVE SMOOTH",
"511 596 OFFCURVE",
"534 589 OFFCURVE",
"547 574 CURVE SMOOTH",
"568 549 OFFCURVE",
"589 521 OFFCURVE",
"605 487 CURVE SMOOTH",
"718 245 LINE SMOOTH",
"759 156 OFFCURVE",
"869 31 OFFCURVE",
"958 -1 CURVE SMOOTH",
"1002 -17 OFFCURVE",
"1062 -24 OFFCURVE",
"1137 -24 CURVE SMOOTH",
"1163 -24 OFFCURVE",
"1189 -23 OFFCURVE",
"1216 -21 CURVE SMOOTH",
"1230 -20 OFFCURVE",
"1235 -11 OFFCURVE",
"1235 5 CURVE SMOOTH",
"1235 12 OFFCURVE",
"1231 15 OFFCURVE",
"1225 15 CURVE SMOOTH",
"1151 15 OFFCURVE",
"1082 50 OFFCURVE",
"1019 120 CURVE SMOOTH",
"913 237 OFFCURVE",
"818 386 OFFCURVE",
"750 573 CURVE SMOOTH",
"746 584 OFFCURVE",
"743 594 OFFCURVE",
"742 605 CURVE SMOOTH",
"741 615 OFFCURVE",
"747 622 OFFCURVE",
"759 625 CURVE SMOOTH",
"1065 701 OFFCURVE",
"1165 910 OFFCURVE",
"1150 1083 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1011 813 OFFCURVE",
"793 658 OFFCURVE",
"513 658 CURVE SMOOTH",
"481 658 OFFCURVE",
"441 662 OFFCURVE",
"395 671 CURVE",
"383 674 OFFCURVE",
"377 678 OFFCURVE",
"376 685 CURVE SMOOTH",
"375 691 OFFCURVE",
"375 695 OFFCURVE",
"376 698 CURVE SMOOTH",
"489 1265 LINE SMOOTH",
"491 1276 OFFCURVE",
"500 1284 OFFCURVE",
"515 1289 CURVE SMOOTH",
"530 1294 OFFCURVE",
"569 1296 OFFCURVE",
"632 1296 CURVE SMOOTH",
"856 1296 OFFCURVE",
"977 1202 OFFCURVE",
"989 1066 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"933 255 OFFCURVE",
"800 483 OFFCURVE",
"758 629 CURVE",
"1007 692 OFFCURVE",
"1121 865 OFFCURVE",
"1121 1068 CURVE SMOOTH",
"1121 1262 OFFCURVE",
"978 1358 OFFCURVE",
"707 1358 CURVE SMOOTH",
"186 1358 LINE",
"186 1300 LINE",
"297 1300 OFFCURVE",
"356 1265 OFFCURVE",
"343 1195 CURVE SMOOTH",
"162 166 LINE SMOOTH",
"150 95 OFFCURVE",
"111 58 OFFCURVE",
"-44 58 CURVE",
"-44 0 LINE",
"461 0 LINE",
"461 58 LINE",
"346 58 OFFCURVE",
"272 95 OFFCURVE",
"284 166 CURVE SMOOTH",
"360 601 LINE",
"501 601 LINE SMOOTH",
"538 601 OFFCURVE",
"574 590 OFFCURVE",
"590 577 CURVE SMOOTH",
"607 564 OFFCURVE",
"630 515 OFFCURVE",
"670 428 CURVE SMOOTH",
"710 341 OFFCURVE",
"759 258 OFFCURVE",
"799 204 CURVE SMOOTH",
"845 144 OFFCURVE",
"1011 -25 OFFCURVE",
"1166 -25 CURVE SMOOTH",
"1188 -25 OFFCURVE",
"1211 -24 OFFCURVE",
"1234 -22 CURVE",
"1240 15 LINE",
"1187 15 OFFCURVE",
"1102 65 OFFCURVE",
"1038 136 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"482 650 OFFCURVE",
"422 650 OFFCURVE",
"373 669 CURVE",
"484 1304 LINE",
"620 1304 LINE SMOOTH",
"845 1304 OFFCURVE",
"985 1193 OFFCURVE",
"985 1035 CURVE SMOOTH",
"985 910 OFFCURVE",
"911 650 OFFCURVE",
"514 650 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
72 1 9 6 42 1 1 4 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 9 0 2 3 9 2 105 8 1 6 6 7 95 0 7 7 92 77 5 1 3 3 4 97 0 4 4 93 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 6 8 9 8 6 114 0 9 0 2 3 9 2 105 0 8 8 7 95 0 7 7 92 77 5 1 3 3 4 97 0 4 4 93 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 6 8 9 8 6 114 0 9 0 2 3 9 2 105 5 1 3 0 4 1 3 4 105 0 8 8 7 95 0 7 7 92 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 6 8 9 8 6 114 0 7 0 8 6 7 8 105 0 9 0 2 3 9 2 105 5 1 3 0 4 1 3 4 105 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
78 76 36 99 22 36 21 25 23 37 25 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1318;
},
{
anchors = (
{
name = bottom;
position = "{627, 0}";
},
{
name = top;
position = "{867, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1248 1202 OFFCURVE",
"993 1358 OFFCURVE",
"862 1358 QCURVE SMOOTH",
"731 1358 OFFCURVE",
"522 1352 OFFCURVE",
"348 1352 OFFCURVE",
"205 1358 QCURVE",
"190 1358 OFFCURVE",
"177 1292 OFFCURVE",
"182 1264 OFFCURVE",
"188 1264 QCURVE SMOOTH",
"338 1264 OFFCURVE",
"343 1200 QCURVE",
"344 1184 OFFCURVE",
"338 1157 QCURVE SMOOTH",
"136 203 LINE SMOOTH",
"120 127 OFFCURVE",
"39 86 OFFCURVE",
"-47 86 QCURVE SMOOTH",
"-63 86 OFFCURVE",
"-74 18 OFFCURVE",
"-71 -8 OFFCURVE",
"-63 -8 QCURVE",
"11 0 OFFCURVE",
"431 0 OFFCURVE",
"510 -8 QCURVE",
"524 -8 OFFCURVE",
"537 57 OFFCURVE",
"535 86 OFFCURVE",
"529 86 QCURVE SMOOTH",
"370 86 OFFCURVE",
"365 152 QCURVE SMOOTH",
"364 178 OFFCURVE",
"369 203 QCURVE SMOOTH",
"448 565 LINE",
"449 580 OFFCURVE",
"456 586 QCURVE",
"466 592 OFFCURVE",
"503 586 OFFCURVE",
"561 585 OFFCURVE",
"578 571 QCURVE",
"605 547 OFFCURVE",
"637 481 QCURVE SMOOTH",
"757 233 LINE SMOOTH",
"787 170 OFFCURVE",
"900 49 OFFCURVE",
"1050 -25 OFFCURVE",
"1185 -25 QCURVE SMOOTH",
"1228 -25 OFFCURVE",
"1279 -20 QCURVE",
"1300 -21 OFFCURVE",
"1298 6 QCURVE",
"1296 33 OFFCURVE",
"1280 33 QCURVE SMOOTH",
"1179 33 OFFCURVE",
"1077 184 QCURVE SMOOTH",
"912 428 OFFCURVE",
"869 573 QCURVE",
"869 580 OFFCURVE",
"859 621 OFFCURVE",
"878 627 QCURVE SMOOTH",
"1067 687 OFFCURVE",
"1274 912 OFFCURVE",
"1261 1057 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1010 893 OFFCURVE",
"754 664 OFFCURVE",
"574 664 QCURVE SMOOTH",
"494 664 OFFCURVE",
"479 682 QCURVE SMOOTH",
"475 687 OFFCURVE",
"474 696 OFFCURVE",
"475 702 QCURVE SMOOTH",
"595 1255 LINE SMOOTH",
"596 1262 OFFCURVE",
"609 1278 OFFCURVE",
"644 1278 QCURVE SMOOTH",
"830 1278 OFFCURVE",
"989 1149 OFFCURVE",
"996 1063 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1064 294 OFFCURVE",
"977 440 OFFCURVE",
"897 623 CURVE",
"1229 716 OFFCURVE",
"1279 904 OFFCURVE",
"1279 1039 CURVE SMOOTH",
"1279 1259 OFFCURVE",
"1069 1358 OFFCURVE",
"789 1358 CURVE SMOOTH",
"184 1358 LINE",
"184 1272 LINE",
"319 1272 OFFCURVE",
"347 1238 OFFCURVE",
"334 1167 CURVE SMOOTH",
"161 194 LINE SMOOTH",
"148 123 OFFCURVE",
"108 86 OFFCURVE",
"-32 86 CURVE",
"-32 0 LINE",
"560 0 LINE",
"560 86 LINE",
"465 86 OFFCURVE",
"391 123 OFFCURVE",
"404 194 CURVE SMOOTH",
"475 588 LINE",
"561 588 LINE SMOOTH",
"587 588 OFFCURVE",
"608 580 OFFCURVE",
"621 565 CURVE",
"636 549 OFFCURVE",
"681 484 OFFCURVE",
"707 427 CURVE SMOOTH",
"736 363 OFFCURVE",
"799 246 OFFCURVE",
"839 198 CURVE SMOOTH",
"949 66 OFFCURVE",
"1070 -25 OFFCURVE",
"1225 -25 CURVE SMOOTH",
"1256 -25 OFFCURVE",
"1287 -23 OFFCURVE",
"1319 -20 CURVE",
"1330 45 LINE",
"1272 56 OFFCURVE",
"1220 95 OFFCURVE",
"1168 162 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"581 666 OFFCURVE",
"529 669 OFFCURVE",
"491 677 CURVE",
"597 1278 LINE",
"679 1278 LINE SMOOTH",
"874 1278 OFFCURVE",
"1024 1185 OFFCURVE",
"1024 1021 CURVE SMOOTH",
"1024 890 OFFCURVE",
"948 666 OFFCURVE",
"600 666 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 7 values pushed */
41 12 2 1 0 1 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
12 1 5 0 41 1 1 5 2 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 10 0 3 4 10 3 105 9 1 7 7 8 95 0 8 8 31 77 6 1 4 4 1 97 5 2 2 1 1 32 77 0 0 0 1 97 5 2 2 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 10 0 3 4 10 3 105 9 1 7 7 8 95 0 8 8 31 77 6 1 4 4 5 97 0 5 5 32 77 0 0 0 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 7 9 10 9 7 114 0 10 0 3 4 10 3 105 0 9 9 8 95 0 8 8 31 77 6 1 4 4 5 97 0 5 5 32 77 0 0 0 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 7 9 10 9 7 114 0 10 0 3 4 10 3 105 6 1 4 0 5 1 4 5 105 0 9 9 8 95 0 8 8 31 77 0 0 0 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 7 9 10 9 7 114 0 8 0 9 7 8 9 105 0 10 0 3 4 10 3 105 6 1 4 0 5 1 4 5 105 0 0 0 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 7 9 10 9 7 114 0 8 0 9 7 8 9 105 0 10 0 3 4 10 3 105 6 1 4 0 5 1 4 5 105 0 1 1 32 77 0 0 0 2 97 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
77 75 68 66 99 22 36 21 24 23 33 19 25 11 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1403;
}
);
leftMetricsKey = H;
note = R;
rightKerningGroup = R;
unicode = 0052;
},
{
glyphname = S;
lastChange = "2018-08-18 13:20:04 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{361, 0}";
},
{
name = top;
position = "{601, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"849 617 OFFCURVE",
"799 693 OFFCURVE",
"709 730 CURVE SMOOTH",
"458 833 LINE SMOOTH",
"368 870 OFFCURVE",
"319 925 OFFCURVE",
"313 996 CURVE SMOOTH",
"298 1172 OFFCURVE",
"423 1318 OFFCURVE",
"598 1318 CURVE SMOOTH",
"735 1318 OFFCURVE",
"815 1257 OFFCURVE",
"838 1135 CURVE",
"844 1079 LINE",
"846 1068 OFFCURVE",
"858 1062 OFFCURVE",
"880 1062 CURVE SMOOTH",
"902 1062 OFFCURVE",
"914 1068 OFFCURVE",
"916 1081 CURVE",
"928 1192 OFFCURVE",
"932 1280 OFFCURVE",
"928 1345 CURVE",
"912 1345 OFFCURVE",
"877 1352 OFFCURVE",
"821 1365 CURVE SMOOTH",
"765 1378 OFFCURVE",
"702 1385 OFFCURVE",
"630 1385 CURVE SMOOTH",
"373 1385 OFFCURVE",
"147 1182 OFFCURVE",
"169 934 CURVE SMOOTH",
"180 810 OFFCURVE",
"238 726 OFFCURVE",
"343 683 CURVE SMOOTH",
"527 607 LINE SMOOTH",
"633 563 OFFCURVE",
"691 489 OFFCURVE",
"700 385 CURVE SMOOTH",
"714 220 OFFCURVE",
"582 48 OFFCURVE",
"430 48 CURVE SMOOTH",
"246 48 OFFCURVE",
"118 135 OFFCURVE",
"100 307 CURVE SMOOTH",
"98 326 OFFCURVE",
"98 349 OFFCURVE",
"101 374 CURVE",
"100 379 OFFCURVE",
"89 381 OFFCURVE",
"69 381 CURVE SMOOTH",
"48 381 OFFCURVE",
"36 376 OFFCURVE",
"31 365 CURVE SMOOTH",
"17 334 OFFCURVE",
"13 260 OFFCURVE",
"16 145 CURVE",
"22 73 LINE",
"170 -7 OFFCURVE",
"225 -27 OFFCURVE",
"379 -27 CURVE SMOOTH",
"651 -27 OFFCURVE",
"883 236 OFFCURVE",
"859 504 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"699 -27 OFFCURVE",
"855 249 OFFCURVE",
"855 485 CURVE SMOOTH",
"855 647 OFFCURVE",
"760 734 OFFCURVE",
"558 777 CURVE SMOOTH",
"390 812 OFFCURVE",
"298 913 OFFCURVE",
"298 1043 CURVE SMOOTH",
"298 1171 OFFCURVE",
"414 1326 OFFCURVE",
"584 1326 CURVE SMOOTH",
"761 1326 OFFCURVE",
"842 1224 OFFCURVE",
"844 1077 CURVE",
"903 1077 LINE",
"914 1169 OFFCURVE",
"920 1281 OFFCURVE",
"912 1345 CURVE",
"907 1343 OFFCURVE",
"900 1342 OFFCURVE",
"892 1342 CURVE SMOOTH",
"835 1342 OFFCURVE",
"727 1385 OFFCURVE",
"618 1385 CURVE SMOOTH",
"331 1385 OFFCURVE",
"178 1174 OFFCURVE",
"178 953 CURVE SMOOTH",
"178 777 OFFCURVE",
"281 678 OFFCURVE",
"502 626 CURVE SMOOTH",
"649 591 OFFCURVE",
"730 492 OFFCURVE",
"730 363 CURVE SMOOTH",
"730 213 OFFCURVE",
"606 40 OFFCURVE",
"439 40 CURVE SMOOTH",
"225 40 OFFCURVE",
"105 182 OFFCURVE",
"105 341 CURVE SMOOTH",
"105 352 OFFCURVE",
"106 363 OFFCURVE",
"107 374 CURVE",
"47 374 LINE",
"30 272 OFFCURVE",
"24 170 OFFCURVE",
"43 73 CURVE",
"182 -4 OFFCURVE",
"239 -27 OFFCURVE",
"399 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
38 1 5 6 6 1 2 1 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 5 6 1 6 5 1 128 0 1 2 6 1 2 126 0 4 4 92 77 0 6 6 3 97 0 3 3 98 77 0 2 2 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 4 3 6 3 4 6 128 0 5 6 1 6 5 1 128 0 1 2 6 1 2 126 0 3 0 6 5 3 6 105 0 2 2 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 19 17 41 37 38 34 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 872;
},
{
anchors = (
{
name = bottom;
position = "{401, 0}";
},
{
name = top;
position = "{641, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1029 729 OFFCURVE",
"785 807 QCURVE SMOOTH",
"675 840 LINE SMOOTH",
"504 895 OFFCURVE",
"495 1001 QCURVE SMOOTH",
"485 1110 OFFCURVE",
"637 1300 OFFCURVE",
"746 1300 QCURVE SMOOTH",
"954 1303 OFFCURVE",
"977 1094 QCURVE SMOOTH",
"979 1067 LINE SMOOTH",
"980 1051 OFFCURVE",
"1075 1049 OFFCURVE",
"1077 1069 QCURVE SMOOTH",
"1096 1227 OFFCURVE",
"1083 1354 QCURVE",
"1032 1354 OFFCURVE",
"892 1384 OFFCURVE",
"775 1384 QCURVE SMOOTH",
"551 1384 OFFCURVE",
"258 1090 OFFCURVE",
"276 885 QCURVE SMOOTH",
"290 700 OFFCURVE",
"525 608 QCURVE SMOOTH",
"620 571 LINE SMOOTH",
"803 502 OFFCURVE",
"814 379 QCURVE SMOOTH",
"824 266 OFFCURVE",
"667 63 OFFCURVE",
"563 63 QCURVE SMOOTH",
"411 63 OFFCURVE",
"270 226 OFFCURVE",
"261 324 QCURVE",
"261 354 OFFCURVE",
"265 387 QCURVE SMOOTH",
"267 408 OFFCURVE",
"167 410 OFFCURVE",
"164 385 QCURVE",
"137 262 OFFCURVE",
"150 117 QCURVE SMOOTH",
"154 72 LINE",
"270 10 OFFCURVE",
"407 -27 OFFCURVE",
"528 -27 QCURVE SMOOTH",
"749 -27 OFFCURVE",
"1066 305 OFFCURVE",
"1046 532 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"744 -27 OFFCURVE",
"936 239 OFFCURVE",
"936 483 CURVE SMOOTH",
"936 658 OFFCURVE",
"819 775 OFFCURVE",
"583 834 CURVE SMOOTH",
"444 868 OFFCURVE",
"374 936 OFFCURVE",
"374 1034 CURVE SMOOTH",
"374 1148 OFFCURVE",
"466 1300 OFFCURVE",
"633 1300 CURVE SMOOTH",
"772 1300 OFFCURVE",
"842 1219 OFFCURVE",
"856 1063 CURVE",
"954 1063 LINE",
"966 1157 OFFCURVE",
"966 1272 OFFCURVE",
"954 1354 CURVE",
"943 1352 OFFCURVE",
"936 1352 OFFCURVE",
"928 1352 CURVE SMOOTH",
"873 1352 OFFCURVE",
"762 1384 OFFCURVE",
"645 1384 CURVE SMOOTH",
"352 1384 OFFCURVE",
"154 1181 OFFCURVE",
"154 940 CURVE SMOOTH",
"154 760 OFFCURVE",
"264 642 OFFCURVE",
"482 584 CURVE SMOOTH",
"631 545 OFFCURVE",
"706 468 OFFCURVE",
"706 358 CURVE SMOOTH",
"706 240 OFFCURVE",
"612 68 OFFCURVE",
"440 68 CURVE SMOOTH",
"276 68 OFFCURVE",
"154 187 OFFCURVE",
"154 359 CURVE SMOOTH",
"154 370 OFFCURVE",
"154 380 OFFCURVE",
"155 391 CURVE",
"57 391 LINE",
"38 284 OFFCURVE",
"38 176 OFFCURVE",
"54 72 CURVE",
"178 0 OFFCURVE",
"252 -27 OFFCURVE",
"428 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
14 6 2 2 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 5 2 5 1 2 128 0 6 6 3 97 0 3 3 37 77 0 5 5 4 97 0 4 4 31 77 0 2 2 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 5 2 5 1 2 128 0 3 0 6 5 3 6 105 0 4 0 5 1 4 5 105 0 2 2 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 19 17 41 37 22 34 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 952;
}
);
leftKerningGroup = S;
note = S;
rightKerningGroup = S;
unicode = 0053;
},
{
glyphname = T;
lastChange = "2018-08-18 13:20:13 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{574, 0}";
},
{
name = center;
position = "{694, 682}";
},
{
name = top;
position = "{814, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"901 1245 LINE SMOOTH",
"906 1270 OFFCURVE",
"923 1282 OFFCURVE",
"950 1282 CURVE SMOOTH",
"1084 1282 LINE SMOOTH",
"1215 1282 OFFCURVE",
"1283 1223 OFFCURVE",
"1296 1104 CURVE SMOOTH",
"1298 1085 OFFCURVE",
"1294 1053 OFFCURVE",
"1289 1006 CURVE SMOOTH",
"1288 997 OFFCURVE",
"1300 992 OFFCURVE",
"1327 992 CURVE SMOOTH",
"1353 992 OFFCURVE",
"1367 997 OFFCURVE",
"1369 1006 CURVE SMOOTH",
"1437 1338 LINE",
"1436 1351 OFFCURVE",
"1411 1358 OFFCURVE",
"1363 1358 CURVE SMOOTH",
"1263 1358 OFFCURVE",
"1168 1357 OFFCURVE",
"1078 1356 CURVE SMOOTH",
"988 1355 OFFCURVE",
"904 1354 OFFCURVE",
"826 1354 CURVE SMOOTH",
"689 1354 OFFCURVE",
"465 1358 OFFCURVE",
"334 1358 CURVE SMOOTH",
"288 1358 OFFCURVE",
"263 1348 OFFCURVE",
"259 1327 CURVE SMOOTH",
"195 1006 LINE",
"197 997 OFFCURVE",
"210 992 OFFCURVE",
"234 992 CURVE SMOOTH",
"258 992 OFFCURVE",
"271 997 OFFCURVE",
"273 1006 CURVE SMOOTH",
"314 1189 OFFCURVE",
"413 1282 OFFCURVE",
"583 1282 CURVE SMOOTH",
"721 1282 LINE SMOOTH",
"746 1282 OFFCURVE",
"760 1276 OFFCURVE",
"760 1263 CURVE SMOOTH",
"760 1260 OFFCURVE",
"759 1252 OFFCURVE",
"757 1240 CURVE SMOOTH",
"548 186 LINE SMOOTH",
"532 105 OFFCURVE",
"481 69 OFFCURVE",
"326 69 CURVE SMOOTH",
"308 69 OFFCURVE",
"292 -7 OFFCURVE",
"313 -7 CURVE",
"370 -2 OFFCURVE",
"457 0 OFFCURVE",
"575 0 CURVE SMOOTH",
"692 0 OFFCURVE",
"781 -2 OFFCURVE",
"840 -7 CURVE",
"858 -7 OFFCURVE",
"873 69 OFFCURVE",
"853 69 CURVE SMOOTH",
"748 69 OFFCURVE",
"693 96 OFFCURVE",
"689 149 CURVE SMOOTH",
"688 162 OFFCURVE",
"689 175 OFFCURVE",
"691 186 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"877 0 LINE",
"877 58 LINE",
"722 58 OFFCURVE",
"668 95 OFFCURVE",
"680 166 CURVE SMOOTH",
"878 1292 LINE",
"1110 1292 LINE SMOOTH",
"1285 1292 OFFCURVE",
"1356 1200 OFFCURVE",
"1324 1016 CURVE",
"1389 1016 LINE",
"1443 1325 LINE",
"1412 1358 LINE",
"241 1358 LINE",
"213 1325 LINE",
"159 1016 LINE",
"224 1016 LINE",
"256 1200 OFFCURVE",
"360 1292 OFFCURVE",
"537 1292 CURVE SMOOTH",
"756 1292 LINE",
"558 166 LINE SMOOTH",
"546 95 OFFCURVE",
"497 58 OFFCURVE",
"352 58 CURVE",
"352 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
39 1 3 4 1 76 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
5 1 3 3 4 95 0 4 4 92 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
2 1 0 0 1 0 1 101 5 1 3 3 4 95 0 4 4 92 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 4 5 1 3 0 4 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
56 118 54 36 21 19 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1297;
},
{
anchors = (
{
name = bottom;
position = "{576, 0}";
},
{
name = center;
position = "{696, 682}";
},
{
name = top;
position = "{816, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"495 127 OFFCURVE",
"410 86 OFFCURVE",
"318 86 QCURVE SMOOTH",
"311 86 OFFCURVE",
"291 37 OFFCURVE",
"295 -6 OFFCURVE",
"301 -6 QCURVE",
"402 0 OFFCURVE",
"784 0 OFFCURVE",
"881 -6 QCURVE",
"897 -6 OFFCURVE",
"907 55 OFFCURVE",
"903 86 OFFCURVE",
"897 86 QCURVE SMOOTH",
"799 86 OFFCURVE",
"745 135 OFFCURVE",
"741 183 OFFCURVE",
"745 203 QCURVE SMOOTH",
"958 1235 LINE",
"966 1264 OFFCURVE",
"991 1264 QCURVE SMOOTH",
"1099 1264 LINE SMOOTH",
"1210 1264 OFFCURVE",
"1297 1153 OFFCURVE",
"1302 1100 QCURVE SMOOTH",
"1306 1061 OFFCURVE",
"1293 1008 QCURVE",
"1290 991 OFFCURVE",
"1391 992 OFFCURVE",
"1394 1008 QCURVE",
"1459 1319 LINE SMOOTH",
"1467 1358 OFFCURVE",
"1387 1358 QCURVE",
"1239 1352 OFFCURVE",
"539 1354 OFFCURVE",
"418 1356 QCURVE SMOOTH",
"299 1358 OFFCURVE",
"269 1346 OFFCURVE",
"263 1319 QCURVE SMOOTH",
"196 1008 LINE",
"194 989 OFFCURVE",
"295 992 OFFCURVE",
"298 1008 QCURVE",
"354 1264 OFFCURVE",
"602 1264 QCURVE SMOOTH",
"698 1264 LINE SMOOTH",
"739 1264 OFFCURVE",
"726 1229 QCURVE",
"511 203 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"897 0 LINE",
"897 86 LINE",
"812 86 OFFCURVE",
"739 123 OFFCURVE",
"751 194 CURVE SMOOTH",
"940 1266 LINE",
"1102 1266 LINE SMOOTH",
"1203 1266 OFFCURVE",
"1318 1180 OFFCURVE",
"1288 1008 CURVE",
"1391 1008 LINE",
"1445 1317 LINE",
"1407 1358 LINE",
"251 1358 LINE",
"212 1317 LINE",
"158 1008 LINE",
"258 1008 LINE",
"284 1157 OFFCURVE",
"411 1266 OFFCURVE",
"526 1266 CURVE SMOOTH",
"697 1266 LINE",
"508 194 LINE SMOOTH",
"496 123 OFFCURVE",
"445 86 OFFCURVE",
"310 86 CURVE",
"310 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
3 1 1 0 5 0 1 5 128 4 1 0 0 2 95 0 2 2 31 77 7 1 5 5 6 95 0 6 6 32 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
3 1 1 0 5 0 1 5 128 7 1 5 0 6 5 6 99 4 1 0 0 2 95 0 2 2 31 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
3 1 1 0 5 0 1 5 128 0 2 4 1 0 1 2 0 105 7 1 5 6 6 5 89 7 1 5 5 6 95 0 6 5 6 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
35 67 21 53 19 84 18 50 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1301;
}
);
leftKerningGroup = T;
note = T;
rightKerningGroup = T;
unicode = 0054;
},
{
glyphname = Thorn;
lastChange = "2018-08-17 18:08:45 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1190 1160 OFFCURVE",
"1123 1328 OFFCURVE",
"1015 1328 CURVE SMOOTH",
"944 1328 OFFCURVE",
"909 1305 OFFCURVE",
"791 1221 CURVE SMOOTH",
"732 1179 OFFCURVE",
"687 1149 OFFCURVE",
"657 1132 CURVE SMOOTH",
"606 1102 OFFCURVE",
"588 1092 OFFCURVE",
"598 1135 CURVE SMOOTH",
"645 1328 LINE SMOOTH",
"649 1348 OFFCURVE",
"652 1360 OFFCURVE",
"651 1365 CURVE SMOOTH",
"650 1378 OFFCURVE",
"644 1384 OFFCURVE",
"632 1384 CURVE SMOOTH",
"621 1384 OFFCURVE",
"606 1381 OFFCURVE",
"589 1375 CURVE SMOOTH",
"475 1335 OFFCURVE",
"382 1315 OFFCURVE",
"312 1315 CURVE SMOOTH",
"293 1315 OFFCURVE",
"277 1239 OFFCURVE",
"298 1239 CURVE SMOOTH",
"394 1239 OFFCURVE",
"444 1210 OFFCURVE",
"449 1152 CURVE SMOOTH",
"450 1137 OFFCURVE",
"449 1121 OFFCURVE",
"445 1103 CURVE SMOOTH",
"179 -233 LINE SMOOTH",
"172 -268 OFFCURVE",
"149 -302 OFFCURVE",
"108 -335 CURVE",
"-20 -424 LINE",
"-31 -432 OFFCURVE",
"-36 -442 OFFCURVE",
"-34 -455 CURVE SMOOTH",
"-33 -468 OFFCURVE",
"-31 -478 OFFCURVE",
"-28 -486 CURVE SMOOTH",
"-18 -509 OFFCURVE",
"-4 -521 OFFCURVE",
"12 -521 CURVE SMOOTH",
"19 -521 OFFCURVE",
"24 -519 OFFCURVE",
"28 -516 CURVE",
"205 -399 LINE SMOOTH",
"274 -350 OFFCURVE",
"312 -308 OFFCURVE",
"319 -275 CURVE SMOOTH",
"360 -53 LINE",
"364 -36 OFFCURVE",
"376 -28 OFFCURVE",
"394 -27 CURVE",
"635 -10 OFFCURVE",
"939 199 OFFCURVE",
"1104 503 CURVE SMOOTH",
"1187 654 OFFCURVE",
"1220 821 OFFCURVE",
"1204 1003 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1066 719 OFFCURVE",
"985 405 OFFCURVE",
"747 205 CURVE SMOOTH",
"628 105 OFFCURVE",
"513 53 OFFCURVE",
"405 48 CURVE",
"392 48 OFFCURVE",
"385 51 OFFCURVE",
"385 57 CURVE SMOOTH",
"384 63 OFFCURVE",
"384 68 OFFCURVE",
"385 73 CURVE SMOOTH",
"562 957 LINE SMOOTH",
"569 994 OFFCURVE",
"586 1019 OFFCURVE",
"612 1033 CURVE",
"734 1108 OFFCURVE",
"816 1163 OFFCURVE",
"857 1196 CURVE",
"872 1206 OFFCURVE",
"886 1211 OFFCURVE",
"899 1211 CURVE SMOOTH",
"968 1211 OFFCURVE",
"1039 1031 OFFCURVE",
"1049 906 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1096 647 OFFCURVE",
"1096 961 CURVE SMOOTH",
"1096 1044 OFFCURVE",
"1086 1117 OFFCURVE",
"1062 1164 CURVE SMOOTH",
"1018 1251 OFFCURVE",
"971 1327 OFFCURVE",
"875 1327 CURVE SMOOTH",
"822 1327 OFFCURVE",
"764 1291 OFFCURVE",
"714 1253 CURVE SMOOTH",
"627 1187 OFFCURVE",
"547 1134 OFFCURVE",
"443 1074 CURVE",
"463 1057 LINE",
"486 1188 LINE SMOOTH",
"497 1253 OFFCURVE",
"509 1316 OFFCURVE",
"520 1352 CURVE",
"498 1385 LINE",
"386 1342 OFFCURVE",
"312 1317 OFFCURVE",
"196 1317 CURVE",
"196 1259 LINE",
"303 1259 OFFCURVE",
"356 1224 OFFCURVE",
"356 1154 CURVE SMOOTH",
"356 1145 OFFCURVE",
"355 1135 OFFCURVE",
"353 1124 CURVE SMOOTH",
"96 -333 LINE",
"131 -271 LINE",
"-94 -433 LINE",
"-38 -507 LINE",
"201 -343 LINE",
"222 -310 LINE",
"277 5 LINE",
"221 -27 LINE",
"402 -12 OFFCURVE",
"515 33 OFFCURVE",
"607 85 CURVE SMOOTH",
"963 288 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"869 374 OFFCURVE",
"599 160 CURVE SMOOTH",
"501 82 OFFCURVE",
"386 53 OFFCURVE",
"242 50 CURVE",
"282 30 LINE",
"461 1043 LINE",
"391 976 LINE",
"566 1074 OFFCURVE",
"650 1138 OFFCURVE",
"736 1204 CURVE SMOOTH",
"754 1218 OFFCURVE",
"774 1223 OFFCURVE",
"786 1223 CURVE SMOOTH",
"893 1223 OFFCURVE",
"941 1064 OFFCURVE",
"941 895 CURVE SMOOTH",
"941 663 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 6 2 7 2 6 7 128 0 7 0 2 7 0 126 0 4 4 98 77 0 2 2 3 97 5 1 3 3 92 77 0 0 0 93 77 0 1 1 97 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 6 2 7 2 6 7 128 0 7 0 2 7 0 126 5 1 3 0 2 6 3 2 105 0 4 4 98 77 0 0 0 93 77 0 1 1 97 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 6 2 7 2 6 7 128 0 7 0 2 7 0 126 0 1 0 1 134 5 1 3 0 2 6 3 2 105 0 4 4 98 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 5 4 3 4 5 3 128 0 6 2 7 2 6 7 128 0 7 0 2 7 0 126 0 1 0 1 134 0 3 0 2 6 3 2 105 0 4 4 98 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 4 5 4 133 0 5 3 5 133 0 6 2 7 2 6 7 128 0 7 0 2 7 0 126 0 1 0 1 134 0 3 0 2 6 3 2 105 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
41 20 42 18 35 27 23 20 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1032;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"120 -269 OFFCURVE",
"38 -357 OFFCURVE",
"-47 -414 QCURVE SMOOTH",
"-55 -420 OFFCURVE",
"-53 -449 OFFCURVE",
"1 -520 OFFCURVE",
"19 -520 QCURVE SMOOTH",
"27 -520 LINE",
"132 -469 OFFCURVE",
"345 -315 OFFCURVE",
"357 -260 QCURVE SMOOTH",
"398 -66 LINE SMOOTH",
"406 -25 OFFCURVE",
"443 -23 QCURVE SMOOTH",
"639 -10 OFFCURVE",
"1108 371 OFFCURVE",
"1266 793 OFFCURVE",
"1250 975 QCURVE",
"1231 1188 OFFCURVE",
"1116 1294 QCURVE SMOOTH",
"1076 1329 OFFCURVE",
"1023 1329 QCURVE SMOOTH",
"941 1329 OFFCURVE",
"744 1184 OFFCURVE",
"650 1135 QCURVE",
"671 1227 OFFCURVE",
"702 1329 OFFCURVE",
"700 1352 QCURVE SMOOTH",
"697 1384 OFFCURVE",
"660 1384 QCURVE",
"631 1382 OFFCURVE",
"585 1368 QCURVE SMOOTH",
"429 1319 OFFCURVE",
"284 1319 QCURVE SMOOTH",
"272 1319 OFFCURVE",
"254 1225 OFFCURVE",
"266 1225 QCURVE SMOOTH",
"404 1225 OFFCURVE",
"410 1149 QCURVE",
"412 1123 OFFCURVE",
"404 1090 QCURVE SMOOTH",
"134 -201 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"615 981 LINE SMOOTH",
"625 1024 OFFCURVE",
"660 1044 QCURVE",
"769 1113 OFFCURVE",
"854 1176 QCURVE",
"863 1180 OFFCURVE",
"879 1180 QCURVE",
"893 1179 OFFCURVE",
"908 1163 QCURVE SMOOTH",
"1003 1061 OFFCURVE",
"1017 901 QCURVE SMOOTH",
"1033 735 OFFCURVE",
"913 387 OFFCURVE",
"636 117 OFFCURVE",
"479 76 QCURVE",
"469 74 OFFCURVE",
"461 74 QCURVE SMOOTH",
"436 74 OFFCURVE",
"435 90 QCURVE SMOOTH",
"434 103 OFFCURVE",
"436 121 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1219 564 OFFCURVE",
"1219 865 CURVE SMOOTH",
"1219 979 OFFCURVE",
"1193 1090 OFFCURVE",
"1141 1183 CURVE SMOOTH",
"1097 1262 OFFCURVE",
"1043 1329 OFFCURVE",
"966 1329 CURVE SMOOTH",
"910 1329 OFFCURVE",
"842 1302 OFFCURVE",
"765 1245 CURVE SMOOTH",
"675 1178 OFFCURVE",
"609 1133 OFFCURVE",
"528 1086 CURVE",
"564 1077 LINE",
"589 1220 LINE SMOOTH",
"597 1265 OFFCURVE",
"605 1309 OFFCURVE",
"619 1354 CURVE",
"582 1389 LINE",
"461 1348 OFFCURVE",
"329 1321 OFFCURVE",
"196 1321 CURVE",
"181 1235 LINE",
"274 1234 OFFCURVE",
"326 1198 OFFCURVE",
"326 1128 CURVE SMOOTH",
"326 1119 OFFCURVE",
"325 1109 OFFCURVE",
"323 1098 CURVE SMOOTH",
"74 -319 LINE",
"102 -265 LINE",
"-89 -414 LINE",
"-18 -525 LINE",
"275 -350 LINE",
"324 -294 LINE",
"379 19 LINE",
"316 -26 LINE",
"463 -10 OFFCURVE",
"586 29 OFFCURVE",
"665 67 CURVE SMOOTH",
"1012 233 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"852 350 OFFCURVE",
"619 174 CURVE SMOOTH",
"568 135 OFFCURVE",
"480 75 OFFCURVE",
"336 75 CURVE",
"381 39 LINE",
"558 1043 LINE",
"495 976 LINE",
"602 1036 OFFCURVE",
"685 1091 OFFCURVE",
"781 1165 CURVE SMOOTH",
"804 1183 OFFCURVE",
"817 1192 OFFCURVE",
"834 1192 CURVE SMOOTH",
"911 1192 OFFCURVE",
"944 1014 OFFCURVE",
"944 860 CURVE SMOOTH",
"944 655 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
17 1 6 7 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 7 0 6 0 7 6 128 0 2 2 37 77 0 0 0 1 97 3 1 1 1 31 77 0 6 6 4 97 0 4 4 32 77 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 7 0 6 0 7 6 128 0 5 4 5 134 3 1 1 0 0 7 1 0 105 0 2 2 37 77 0 6 6 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 3 2 1 2 3 1 128 0 7 0 6 0 7 6 128 0 5 4 5 134 0 1 0 0 7 1 0 105 0 2 2 37 77 0 6 6 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 2 3 2 133 0 3 1 3 133 0 7 0 6 0 7 6 128 0 5 4 5 134 0 1 0 0 7 1 0 105 0 6 6 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 2 3 2 133 0 3 1 3 133 0 7 0 6 0 7 6 128 0 5 4 5 134 0 1 0 0 7 1 0 105 0 6 4 4 6 89 0 6 6 4 97 0 4 6 4 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
41 25 37 38 38 34 34 20 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1165;
}
);
note = Thorn;
unicode = 00DE;
},
{
glyphname = Thorn.nordic;
lastChange = "2018-08-18 12:35:17 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1066 978 OFFCURVE",
"921 1087 OFFCURVE",
"685 1087 CURVE SMOOTH",
"621 1087 OFFCURVE",
"561 1082 OFFCURVE",
"506 1071 CURVE SMOOTH",
"481 1066 OFFCURVE",
"471 1074 OFFCURVE",
"475 1094 CURVE SMOOTH",
"490 1172 LINE SMOOTH",
"507 1261 OFFCURVE",
"556 1287 OFFCURVE",
"695 1287 CURVE SMOOTH",
"713 1287 OFFCURVE",
"729 1363 OFFCURVE",
"708 1363 CURVE",
"678 1360 OFFCURVE",
"593 1358 OFFCURVE",
"454 1358 CURVE SMOOTH",
"314 1358 OFFCURVE",
"229 1360 OFFCURVE",
"198 1363 CURVE",
"180 1363 OFFCURVE",
"164 1287 OFFCURVE",
"185 1287 CURVE SMOOTH",
"289 1287 OFFCURVE",
"344 1260 OFFCURVE",
"348 1207 CURVE SMOOTH",
"349 1195 OFFCURVE",
"348 1183 OFFCURVE",
"346 1172 CURVE SMOOTH",
"149 186 LINE SMOOTH",
"131 94 OFFCURVE",
"78 69 OFFCURVE",
"-54 69 CURVE SMOOTH",
"-72 69 OFFCURVE",
"-88 -7 OFFCURVE",
"-67 -7 CURVE",
"-10 -2 OFFCURVE",
"74 0 OFFCURVE",
"186 0 CURVE SMOOTH",
"297 0 OFFCURVE",
"382 -2 OFFCURVE",
"440 -7 CURVE",
"459 -7 OFFCURVE",
"476 69 OFFCURVE",
"455 69 CURVE SMOOTH",
"351 69 OFFCURVE",
"297 97 OFFCURVE",
"291 152 CURVE SMOOTH",
"290 161 OFFCURVE",
"291 172 OFFCURVE",
"294 186 CURVE SMOOTH",
"319 312 LINE SMOOTH",
"322 327 OFFCURVE",
"332 333 OFFCURVE",
"348 331 CURVE SMOOTH",
"421 322 OFFCURVE",
"481 318 OFFCURVE",
"528 318 CURVE SMOOTH",
"828 318 OFFCURVE",
"1106 529 OFFCURVE",
"1081 810 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"942 552 OFFCURVE",
"754 387 OFFCURVE",
"478 387 CURVE SMOOTH",
"441 387 OFFCURVE",
"401 390 OFFCURVE",
"357 400 CURVE SMOOTH",
"344 403 OFFCURVE",
"339 412 OFFCURVE",
"342 427 CURVE SMOOTH",
"454 994 LINE SMOOTH",
"464 1046 OFFCURVE",
"737 1036 OFFCURVE",
"830 963 CURVE SMOOTH",
"884 921 OFFCURVE",
"915 866 OFFCURVE",
"921 797 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"479 3 LINE",
"479 61 LINE",
"344 61 OFFCURVE",
"290 98 OFFCURVE",
"302 169 CURVE SMOOTH",
"333 346 LINE",
"408 338 OFFCURVE",
"463 336 OFFCURVE",
"538 336 CURVE SMOOTH",
"970 336 OFFCURVE",
"1072 623 OFFCURVE",
"1072 803 CURVE SMOOTH",
"1072 993 OFFCURVE",
"933 1098 OFFCURVE",
"679 1098 CURVE SMOOTH",
"466 1098 LINE",
"482 1192 LINE SMOOTH",
"494 1263 OFFCURVE",
"553 1300 OFFCURVE",
"688 1300 CURVE",
"688 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"320 1300 OFFCURVE",
"372 1263 OFFCURVE",
"360 1192 CURVE SMOOTH",
"180 169 LINE SMOOTH",
"168 98 OFFCURVE",
"109 61 OFFCURVE",
"-26 61 CURVE",
"-26 3 LINE"
);
},
{
closed = 1;
nodes = (
"455 390 OFFCURVE",
"423 393 OFFCURVE",
"343 404 CURVE",
"456 1044 LINE",
"592 1044 LINE SMOOTH",
"797 1044 OFFCURVE",
"938 937 OFFCURVE",
"938 776 CURVE SMOOTH",
"938 665 OFFCURVE",
"879 390 OFFCURVE",
"486 390 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
38 1 2 74 19 1 5 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
56 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 0 0 9 8 0 9 109 0 8 0 7 4 8 7 109 6 1 4 0 5 4 5 101 3 1 1 1 2 97 0 2 2 37 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 2 3 1 1 0 2 1 109 0 0 0 9 8 0 9 109 0 8 0 7 4 8 7 109 6 1 4 5 5 4 93 6 1 4 4 5 97 0 5 4 5 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
63 61 20 38 36 21 22 36 21 23 34 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 999;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"922 592 OFFCURVE",
"786 475 QCURVE SMOOTH",
"684 387 OFFCURVE",
"518 387 QCURVE SMOOTH",
"477 387 OFFCURVE",
"458 391 QCURVE SMOOTH",
"426 398 OFFCURVE",
"424 422 QCURVE SMOOTH",
"423 434 OFFCURVE",
"425 440 QCURVE",
"530 971 LINE",
"534 981 OFFCURVE",
"561 989 OFFCURVE",
"639 989 QCURVE SMOOTH",
"760 989 OFFCURVE",
"820 932 QCURVE",
"897 877 OFFCURVE",
"907 762 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1158 889 OFFCURVE",
"1062 971 QCURVE SMOOTH",
"947 1069 OFFCURVE",
"726 1069 QCURVE SMOOTH",
"622 1069 OFFCURVE",
"548 1067 QCURVE",
"568 1153 LINE SMOOTH",
"584 1221 OFFCURVE",
"628 1249 QCURVE SMOOTH",
"662 1271 OFFCURVE",
"757 1270 QCURVE",
"770 1274 OFFCURVE",
"773 1282 QCURVE",
"782 1295 OFFCURVE",
"785 1313 QCURVE SMOOTH",
"788 1330 OFFCURVE",
"785 1350 QCURVE",
"782 1364 OFFCURVE",
"776 1364 QCURVE SMOOTH",
"718 1364 OFFCURVE",
"486 1358 QCURVE SMOOTH",
"448 1364 OFFCURVE",
"207 1364 QCURVE SMOOTH",
"190 1364 OFFCURVE",
"178 1270 OFFCURVE",
"188 1270 QCURVE SMOOTH",
"266 1270 OFFCURVE",
"331 1241 OFFCURVE",
"333 1204 QCURVE SMOOTH",
"334 1186 OFFCURVE",
"330 1153 QCURVE",
"143 203 LINE SMOOTH",
"132 146 OFFCURVE",
"99 119 QCURVE SMOOTH",
"58 86 OFFCURVE",
"-48 86 QCURVE SMOOTH",
"-66 86 OFFCURVE",
"-68 39 QCURVE",
"-72 6 LINE",
"-70 -6 OFFCURVE",
"-62 -6 QCURVE SMOOTH",
"-52 -5 OFFCURVE",
"240 0 QCURVE SMOOTH",
"356 2 OFFCURVE",
"513 -6 QCURVE",
"519 -6 OFFCURVE",
"524 4 QCURVE SMOOTH",
"540 37 OFFCURVE",
"537 70 QCURVE",
"534 86 OFFCURVE",
"528 86 QCURVE SMOOTH",
"507 86 LINE SMOOTH",
"407 86 OFFCURVE",
"380 133 QCURVE",
"375 143 OFFCURVE",
"372 178 OFFCURVE",
"376 203 QCURVE",
"392 281 LINE SMOOTH",
"395 295 OFFCURVE",
"404 303 QCURVE",
"411 307 OFFCURVE",
"420 309 QCURVE",
"428 311 OFFCURVE",
"438 309 QCURVE",
"476 304 OFFCURVE",
"568 301 QCURVE SMOOTH",
"623 299 OFFCURVE",
"708 313 QCURVE SMOOTH",
"929 349 OFFCURVE",
"1054 479 QCURVE SMOOTH",
"1182 612 OFFCURVE",
"1168 774 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"551 0 LINE",
"551 86 LINE",
"402 86 OFFCURVE",
"388 123 OFFCURVE",
"401 194 CURVE SMOOTH",
"422 312 LINE",
"511 306 OFFCURVE",
"552 305 OFFCURVE",
"593 305 CURVE SMOOTH",
"1035 305 OFFCURVE",
"1192 552 OFFCURVE",
"1192 742 CURVE SMOOTH",
"1192 954 OFFCURVE",
"992 1065 OFFCURVE",
"733 1065 CURVE SMOOTH",
"555 1065 LINE",
"573 1165 LINE SMOOTH",
"586 1236 OFFCURVE",
"642 1273 OFFCURVE",
"777 1273 CURVE",
"777 1359 LINE",
"193 1359 LINE",
"193 1273 LINE",
"328 1273 OFFCURVE",
"343 1236 OFFCURVE",
"330 1165 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"146 123 OFFCURVE",
"95 86 OFFCURVE",
"-40 86 CURVE",
"-40 0 LINE"
);
},
{
closed = 1;
nodes = (
"522 385 OFFCURVE",
"499 386 OFFCURVE",
"437 393 CURVE",
"541 987 LINE",
"606 987 LINE SMOOTH",
"791 987 OFFCURVE",
"935 902 OFFCURVE",
"935 735 CURVE SMOOTH",
"935 607 OFFCURVE",
"859 385 OFFCURVE",
"546 385 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
73 51 41 10 4 7 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
56 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 2 0 1 0 2 1 109 0 0 0 9 6 0 9 107 8 1 6 0 7 6 7 99 5 1 3 3 4 95 0 4 4 24 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 4 5 1 3 2 4 3 109 0 2 0 1 0 2 1 109 0 0 0 9 6 0 9 107 8 1 6 7 7 6 93 8 1 6 6 7 95 0 7 6 7 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
87 84 24 82 24 37 54 44 40 40 35 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1127;
}
);
leftMetricsKey = H;
note = Thorn.nordic;
},
{
glyphname = U;
lastChange = "2018-08-18 13:01:13 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{663, 0}";
},
{
name = ogonek;
position = "{1254, 10}";
},
{
name = top;
position = "{903, 1363}";
},
{
name = topright;
position = "{1621, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1381 1172 LINE SMOOTH",
"1400 1267 OFFCURVE",
"1451 1287 OFFCURVE",
"1568 1287 CURVE SMOOTH",
"1586 1287 OFFCURVE",
"1602 1363 OFFCURVE",
"1581 1363 CURVE",
"1551 1360 OFFCURVE",
"1483 1358 OFFCURVE",
"1377 1358 CURVE SMOOTH",
"1271 1358 OFFCURVE",
"1195 1360 OFFCURVE",
"1148 1363 CURVE",
"1130 1363 OFFCURVE",
"1114 1287 OFFCURVE",
"1134 1287 CURVE SMOOTH",
"1226 1287 OFFCURVE",
"1274 1262 OFFCURVE",
"1278 1213 CURVE SMOOTH",
"1279 1200 OFFCURVE",
"1279 1187 OFFCURVE",
"1276 1172 CURVE SMOOTH",
"1139 487 LINE SMOOTH",
"1078 180 OFFCURVE",
"920 49 OFFCURVE",
"653 49 CURVE SMOOTH",
"569 49 OFFCURVE",
"501 68 OFFCURVE",
"450 107 CURVE SMOOTH",
"400 146 OFFCURVE",
"372 199 OFFCURVE",
"366 268 CURVE SMOOTH",
"360 337 OFFCURVE",
"375 476 OFFCURVE",
"418 687 CURVE SMOOTH",
"516 1172 LINE SMOOTH",
"530 1243 OFFCURVE",
"543 1287 OFFCURVE",
"712 1287 CURVE SMOOTH",
"730 1287 OFFCURVE",
"746 1363 OFFCURVE",
"726 1363 CURVE",
"696 1360 OFFCURVE",
"615 1358 OFFCURVE",
"484 1358 CURVE SMOOTH",
"352 1358 OFFCURVE",
"270 1360 OFFCURVE",
"238 1363 CURVE",
"218 1363 OFFCURVE",
"206 1287 OFFCURVE",
"227 1287 CURVE SMOOTH",
"320 1287 OFFCURVE",
"369 1277 OFFCURVE",
"374 1218 CURVE SMOOTH",
"375 1207 OFFCURVE",
"374 1191 OFFCURVE",
"370 1172 CURVE SMOOTH",
"244 539 LINE SMOOTH",
"221 423 OFFCURVE",
"213 331 OFFCURVE",
"219 263 CURVE SMOOTH",
"237 62 OFFCURVE",
"371 -27 OFFCURVE",
"615 -27 CURVE SMOOTH",
"920 -27 OFFCURVE",
"1110 137 OFFCURVE",
"1190 346 CURVE SMOOTH",
"1230 451 OFFCURVE",
"1276 632 OFFCURVE",
"1326 890 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"888 -27 OFFCURVE",
"1075 73 OFFCURVE",
"1181 254 CURVE SMOOTH",
"1231 339 OFFCURVE",
"1263 494 OFFCURVE",
"1304 729 CURVE SMOOTH",
"1382 1172 LINE SMOOTH",
"1396 1249 OFFCURVE",
"1457 1289 OFFCURVE",
"1593 1289 CURVE",
"1593 1358 LINE",
"1124 1358 LINE",
"1124 1289 LINE",
"1237 1289 OFFCURVE",
"1315 1263 OFFCURVE",
"1299 1172 CURVE SMOOTH",
"1179 487 LINE SMOOTH",
"1123 170 OFFCURVE",
"946 38 OFFCURVE",
"689 38 CURVE SMOOTH",
"516 38 OFFCURVE",
"375 109 OFFCURVE",
"375 367 CURVE SMOOTH",
"375 418 OFFCURVE",
"380 475 OFFCURVE",
"392 541 CURVE SMOOTH",
"507 1192 LINE SMOOTH",
"520 1263 OFFCURVE",
"568 1300 OFFCURVE",
"727 1300 CURVE",
"727 1358 LINE",
"224 1358 LINE",
"224 1300 LINE",
"385 1300 OFFCURVE",
"397 1263 OFFCURVE",
"385 1192 CURVE SMOOTH",
"270 539 LINE SMOOTH",
"256 458 OFFCURVE",
"248 387 OFFCURVE",
"248 325 CURVE SMOOTH",
"248 193 OFFCURVE",
"283 102 OFFCURVE",
"366 46 CURVE SMOOTH",
"430 3 OFFCURVE",
"526 -27 OFFCURVE",
"653 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
50 22 2 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
7 5 3 3 1 1 2 97 6 1 2 2 92 77 0 4 4 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
6 1 2 7 5 3 3 1 4 2 1 105 0 4 4 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 51 22 39 36 21 25 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1476;
},
{
anchors = (
{
name = bottom;
position = "{689, 0}";
},
{
name = ogonek;
position = "{1300, 10}";
},
{
name = top;
position = "{929, 1363}";
},
{
name = topright;
position = "{1672, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1445 1153 LINE SMOOTH",
"1456 1204 OFFCURVE",
"1519 1270 OFFCURVE",
"1625 1270 QCURVE SMOOTH",
"1637 1270 OFFCURVE",
"1652 1339 OFFCURVE",
"1649 1364 OFFCURVE",
"1641 1364 QCURVE",
"1583 1358 OFFCURVE",
"1230 1358 OFFCURVE",
"1172 1364 QCURVE",
"1160 1364 OFFCURVE",
"1146 1296 OFFCURVE",
"1148 1270 OFFCURVE",
"1154 1270 QCURVE SMOOTH",
"1297 1270 OFFCURVE",
"1306 1196 QCURVE SMOOTH",
"1308 1180 OFFCURVE",
"1302 1153 QCURVE SMOOTH",
"1164 506 LINE SMOOTH",
"1110 254 OFFCURVE",
"881 63 OFFCURVE",
"705 63 QCURVE SMOOTH",
"617 63 OFFCURVE",
"447 152 OFFCURVE",
"428 371 OFFCURVE",
"495 678 QCURVE SMOOTH",
"598 1153 LINE SMOOTH",
"612 1217 OFFCURVE",
"662 1270 OFFCURVE",
"777 1270 QCURVE SMOOTH",
"791 1270 OFFCURVE",
"805 1337 OFFCURVE",
"802 1364 OFFCURVE",
"796 1364 QCURVE",
"737 1358 OFFCURVE",
"301 1358 OFFCURVE",
"243 1364 QCURVE",
"228 1364 OFFCURVE",
"216 1298 OFFCURVE",
"218 1270 OFFCURVE",
"226 1270 QCURVE SMOOTH",
"302 1270 OFFCURVE",
"364 1239 OFFCURVE",
"366 1212 QCURVE SMOOTH",
"368 1188 OFFCURVE",
"361 1155 QCURVE SMOOTH",
"234 555 LINE SMOOTH",
"199 391 OFFCURVE",
"211 262 QCURVE SMOOTH",
"224 127 OFFCURVE",
"437 -27 OFFCURVE",
"658 -27 QCURVE SMOOTH",
"899 -27 OFFCURVE",
"1165 162 OFFCURVE",
"1281 405 OFFCURVE",
"1383 870 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"931 -27 OFFCURVE",
"1115 41 OFFCURVE",
"1238 247 CURVE SMOOTH",
"1306 361 OFFCURVE",
"1351 544 OFFCURVE",
"1385 739 CURVE SMOOTH",
"1458 1153 LINE SMOOTH",
"1472 1231 OFFCURVE",
"1530 1272 OFFCURVE",
"1641 1272 CURVE",
"1641 1358 LINE",
"1168 1358 LINE",
"1168 1272 LINE",
"1311 1272 OFFCURVE",
"1322 1202 OFFCURVE",
"1313 1153 CURVE SMOOTH",
"1197 496 LINE SMOOTH",
"1149 225 OFFCURVE",
"1021 68 OFFCURVE",
"755 68 CURVE SMOOTH",
"549 68 OFFCURVE",
"471 157 OFFCURVE",
"471 341 CURVE SMOOTH",
"471 396 OFFCURVE",
"478 460 OFFCURVE",
"491 532 CURVE SMOOTH",
"603 1164 LINE SMOOTH",
"616 1235 OFFCURVE",
"629 1272 OFFCURVE",
"794 1272 CURVE",
"794 1358 LINE",
"224 1358 LINE",
"224 1272 LINE",
"359 1272 OFFCURVE",
"372 1235 OFFCURVE",
"360 1164 CURVE SMOOTH",
"251 545 LINE SMOOTH",
"239 477 OFFCURVE",
"232 414 OFFCURVE",
"232 357 CURVE SMOOTH",
"232 214 OFFCURVE",
"276 105 OFFCURVE",
"391 38 CURVE SMOOTH",
"467 -6 OFFCURVE",
"589 -27 OFFCURVE",
"699 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
49 22 2 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
7 5 3 3 1 1 2 97 6 1 2 2 31 77 0 4 4 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
6 1 2 7 5 3 3 1 4 2 1 105 0 4 4 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 21 22 38 36 21 25 35 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1527;
}
);
leftKerningGroup = U;
note = U;
rightKerningGroup = U;
unicode = 0055;
},
{
glyphname = Uacute;
lastChange = "2018-08-18 13:01:33 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 735, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1476;
},
{
components = (
{
name = U;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 764, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
leftMetricsKey = U;
note = Uacute;
rightKerningGroup = U;
rightMetricsKey = U;
unicode = 00DA;
},
{
glyphname = Ubreve;
lastChange = "2018-08-18 13:01:59 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 826, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1476;
},
{
components = (
{
name = U;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 850, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
leftMetricsKey = U;
note = Ubreve;
rightKerningGroup = U;
rightMetricsKey = U;
unicode = 016C;
},
{
glyphname = Ucircumflex;
lastChange = "2018-08-18 13:02:15 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 736, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1482;
},
{
components = (
{
name = U;
},
{
name = uni0302.case;
transform = "{1, 0, 0, 1, 764, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
note = Ucircumflex;
rightKerningGroup = U;
unicode = 00DB;
},
{
glyphname = Udieresis;
lastChange = "2018-08-18 13:02:32 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 827, 507}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1482;
},
{
components = (
{
name = U;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 852, 507}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
note = Udieresis;
rightKerningGroup = U;
unicode = 00DC;
},
{
glyphname = Ugrave;
lastChange = "2018-08-18 13:03:31 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 738, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1476;
},
{
components = (
{
name = U;
},
{
name = gravecomb.case;
transform = "{1, 0, 0, 1, 771, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
leftMetricsKey = U;
note = Ugrave;
rightKerningGroup = U;
rightMetricsKey = U;
unicode = 00D9;
},
{
glyphname = Umacron;
lastChange = "2018-08-18 13:02:53 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 732, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1476;
},
{
components = (
{
name = U;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 758, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
leftMetricsKey = U;
note = Umacron;
rightKerningGroup = U;
rightMetricsKey = U;
unicode = 016A;
},
{
glyphname = Utilde;
lastChange = "2018-08-18 13:03:14 +0000";
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
name = tildecomb.case;
transform = "{1, 0, 0, 1, 735, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1476;
},
{
components = (
{
name = U;
},
{
name = tildecomb.case;
transform = "{1, 0, 0, 1, 759, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1527;
}
);
leftKerningGroup = U;
leftMetricsKey = U;
note = Utilde;
rightKerningGroup = U;
rightMetricsKey = U;
unicode = 0168;
},
{
glyphname = V;
lastChange = "2018-08-18 13:20:28 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{579, 0}";
},
{
name = top;
position = "{819, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1150 892 OFFCURVE",
"1259 1067 OFFCURVE",
"1349 1201 CURVE SMOOTH",
"1387 1257 OFFCURVE",
"1455 1286 OFFCURVE",
"1554 1287 CURVE SMOOTH",
"1572 1287 OFFCURVE",
"1589 1363 OFFCURVE",
"1569 1363 CURVE",
"1532 1360 OFFCURVE",
"1459 1358 OFFCURVE",
"1349 1358 CURVE SMOOTH",
"1238 1358 OFFCURVE",
"1169 1360 OFFCURVE",
"1140 1363 CURVE",
"1122 1363 OFFCURVE",
"1105 1287 OFFCURVE",
"1126 1287 CURVE SMOOTH",
"1196 1287 OFFCURVE",
"1232 1272 OFFCURVE",
"1234 1242 CURVE SMOOTH",
"1236 1223 OFFCURVE",
"1228 1196 OFFCURVE",
"1210 1163 CURVE SMOOTH",
"1100 956 OFFCURVE",
"1030 827 OFFCURVE",
"999 775 CURVE SMOOTH",
"708 277 LINE SMOOTH",
"698 261 OFFCURVE",
"690 253 OFFCURVE",
"683 253 CURVE SMOOTH",
"675 253 OFFCURVE",
"670 262 OFFCURVE",
"667 281 CURVE SMOOTH",
"538 1159 LINE SMOOTH",
"534 1179 OFFCURVE",
"533 1190 OFFCURVE",
"533 1193 CURVE SMOOTH",
"530 1219 OFFCURVE",
"538 1241 OFFCURVE",
"556 1258 CURVE SMOOTH",
"576 1277 OFFCURVE",
"621 1287 OFFCURVE",
"692 1287 CURVE SMOOTH",
"711 1287 OFFCURVE",
"728 1363 OFFCURVE",
"708 1363 CURVE",
"656 1360 OFFCURVE",
"576 1358 OFFCURVE",
"467 1358 CURVE SMOOTH",
"358 1358 OFFCURVE",
"284 1360 OFFCURVE",
"247 1363 CURVE",
"227 1363 OFFCURVE",
"211 1287 OFFCURVE",
"231 1287 CURVE SMOOTH",
"339 1287 OFFCURVE",
"376 1265 OFFCURVE",
"389 1172 CURVE SMOOTH",
"565 6 LINE SMOOTH",
"570 -23 OFFCURVE",
"577 -38 OFFCURVE",
"587 -38 CURVE SMOOTH",
"597 -38 OFFCURVE",
"607 -30 OFFCURVE",
"617 -13 CURVE SMOOTH",
"1023 676 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"586 -38 LINE",
"1237 1214 LINE SMOOTH",
"1267 1271 OFFCURVE",
"1336 1300 OFFCURVE",
"1449 1300 CURVE",
"1449 1358 LINE",
"1061 1358 LINE",
"1061 1300 LINE",
"1130 1300 OFFCURVE",
"1161 1280 OFFCURVE",
"1161 1239 CURVE SMOOTH",
"1161 1225 OFFCURVE",
"1155 1204 OFFCURVE",
"1141 1176 CURVE SMOOTH",
"656 223 LINE",
"638 223 LINE",
"476 1185 LINE SMOOTH",
"475 1192 OFFCURVE",
"474 1199 OFFCURVE",
"474 1205 CURVE SMOOTH",
"474 1249 OFFCURVE",
"494 1300 OFFCURVE",
"642 1300 CURVE",
"642 1358 LINE",
"204 1358 LINE",
"204 1300 LINE",
"285 1300 OFFCURVE",
"328 1262 OFFCURVE",
"341 1185 CURVE SMOOTH",
"553 -38 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
26 1 4 1 1 76 43 1 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 4 1 0 1 4 0 128 7 5 3 3 1 1 2 97 6 1 2 2 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 1 0 1 4 0 128 6 1 2 7 5 3 3 1 4 2 1 105 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 1 0 1 4 0 128 0 0 0 132 6 1 2 1 1 2 89 6 1 2 2 1 97 7 5 3 3 1 2 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 21 23 23 35 37 20 18 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1308;
},
{
anchors = (
{
name = bottom;
position = "{636, 0}";
},
{
name = top;
position = "{876, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1279 972 OFFCURVE",
"1435 1202 QCURVE SMOOTH",
"1480 1270 OFFCURVE",
"1636 1270 QCURVE SMOOTH",
"1648 1270 OFFCURVE",
"1665 1339 OFFCURVE",
"1660 1364 OFFCURVE",
"1654 1364 QCURVE",
"1597 1358 OFFCURVE",
"1259 1358 OFFCURVE",
"1202 1364 QCURVE",
"1190 1364 OFFCURVE",
"1172 1298 OFFCURVE",
"1175 1270 OFFCURVE",
"1183 1270 QCURVE SMOOTH",
"1271 1272 OFFCURVE",
"1274 1231 QCURVE SMOOTH",
"1276 1206 OFFCURVE",
"1243 1147 QCURVE SMOOTH",
"1151 978 OFFCURVE",
"1037 788 QCURVE SMOOTH",
"784 375 LINE",
"776 358 OFFCURVE",
"768 358 QCURVE",
"756 360 OFFCURVE",
"754 383 QCURVE",
"636 1153 LINE SMOOTH",
"626 1217 OFFCURVE",
"686 1270 OFFCURVE",
"782 1270 QCURVE SMOOTH",
"794 1270 OFFCURVE",
"803 1331 OFFCURVE",
"798 1364 OFFCURVE",
"790 1364 QCURVE",
"735 1358 OFFCURVE",
"335 1358 OFFCURVE",
"278 1364 QCURVE",
"266 1364 OFFCURVE",
"259 1298 OFFCURVE",
"262 1270 OFFCURVE",
"270 1270 QCURVE SMOOTH",
"339 1270 OFFCURVE",
"396 1231 OFFCURVE",
"407 1153 QCURVE SMOOTH",
"579 35 LINE SMOOTH",
"591 -39 OFFCURVE",
"634 -39 QCURVE",
"663 -37 OFFCURVE",
"677 -14 QCURVE SMOOTH",
"1087 657 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"631 -39 LINE",
"1350 1186 LINE SMOOTH",
"1383 1242 OFFCURVE",
"1449 1270 OFFCURVE",
"1557 1270 CURVE",
"1557 1358 LINE",
"1117 1358 LINE",
"1117 1270 LINE",
"1183 1270 OFFCURVE",
"1213 1250 OFFCURVE",
"1213 1211 CURVE SMOOTH",
"1213 1198 OFFCURVE",
"1208 1173 OFFCURVE",
"1193 1147 CURVE SMOOTH",
"744 348 LINE",
"717 348 LINE",
"568 1153 LINE SMOOTH",
"565 1168 OFFCURVE",
"563 1182 OFFCURVE",
"563 1193 CURVE SMOOTH",
"563 1245 OFFCURVE",
"609 1270 OFFCURVE",
"711 1270 CURVE",
"711 1358 LINE",
"204 1358 LINE",
"204 1270 LINE",
"281 1270 OFFCURVE",
"320 1230 OFFCURVE",
"334 1153 CURVE SMOOTH",
"565 -39 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
5 1 0 1 1 76 42 16 2 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
6 4 3 3 1 1 2 97 5 1 2 2 31 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
5 1 2 6 4 3 3 1 0 2 1 105 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 0 1 0 134 5 1 2 1 1 2 89 5 1 2 2 1 97 6 4 3 3 1 2 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
36 21 29 36 21 20 34 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 1422;
}
);
leftKerningGroup = V;
note = V;
rightKerningGroup = V;
unicode = 0056;
},
{
glyphname = W;
lastChange = "2018-08-18 13:20:35 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{925, 0}";
},
{
name = top;
position = "{1165, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1899 895 OFFCURVE",
"2009 1067 OFFCURVE",
"2101 1201 CURVE SMOOTH",
"2139 1258 OFFCURVE",
"2208 1287 OFFCURVE",
"2306 1287 CURVE SMOOTH",
"2325 1287 OFFCURVE",
"2341 1363 OFFCURVE",
"2320 1363 CURVE",
"2287 1360 OFFCURVE",
"2216 1358 OFFCURVE",
"2105 1358 CURVE SMOOTH",
"1995 1358 OFFCURVE",
"1923 1360 OFFCURVE",
"1892 1363 CURVE",
"1874 1363 OFFCURVE",
"1857 1287 OFFCURVE",
"1878 1287 CURVE SMOOTH",
"1948 1287 OFFCURVE",
"1985 1273 OFFCURVE",
"1987 1246 CURVE SMOOTH",
"1989 1227 OFFCURVE",
"1980 1199 OFFCURVE",
"1961 1163 CURVE SMOOTH",
"1713 717 OFFCURVE",
"1534 413 OFFCURVE",
"1424 250 CURVE SMOOTH",
"1413 233 OFFCURVE",
"1403 225 OFFCURVE",
"1393 225 CURVE SMOOTH",
"1384 225 OFFCURVE",
"1377 234 OFFCURVE",
"1371 252 CURVE SMOOTH",
"1251 647 LINE SMOOTH",
"1249 657 OFFCURVE",
"1246 672 OFFCURVE",
"1245 692 CURVE SMOOTH",
"1243 712 OFFCURVE",
"1251 736 OFFCURVE",
"1268 763 CURVE SMOOTH",
"1547 1201 LINE SMOOTH",
"1583 1258 OFFCURVE",
"1652 1287 OFFCURVE",
"1752 1287 CURVE",
"1772 1293 OFFCURVE",
"1787 1363 OFFCURVE",
"1766 1363 CURVE",
"1723 1360 OFFCURVE",
"1649 1358 OFFCURVE",
"1544 1358 CURVE SMOOTH",
"1438 1358 OFFCURVE",
"1369 1360 OFFCURVE",
"1338 1363 CURVE",
"1320 1363 OFFCURVE",
"1303 1287 OFFCURVE",
"1324 1287 CURVE SMOOTH",
"1394 1287 OFFCURVE",
"1431 1273 OFFCURVE",
"1433 1246 CURVE SMOOTH",
"1435 1223 OFFCURVE",
"1426 1196 OFFCURVE",
"1407 1163 CURVE SMOOTH",
"1229 847 LINE",
"1218 826 OFFCURVE",
"1210 815 OFFCURVE",
"1206 815 CURVE SMOOTH",
"1201 815 OFFCURVE",
"1196 826 OFFCURVE",
"1190 847 CURVE SMOOTH",
"1092 1172 LINE SMOOTH",
"1088 1185 OFFCURVE",
"1085 1197 OFFCURVE",
"1084 1209 CURVE SMOOTH",
"1080 1261 OFFCURVE",
"1131 1287 OFFCURVE",
"1238 1287 CURVE",
"1258 1293 OFFCURVE",
"1273 1363 OFFCURVE",
"1252 1363 CURVE",
"1211 1360 OFFCURVE",
"1137 1358 OFFCURVE",
"1031 1358 CURVE SMOOTH",
"925 1358 OFFCURVE",
"857 1360 OFFCURVE",
"826 1363 CURVE",
"808 1363 OFFCURVE",
"791 1287 OFFCURVE",
"812 1287 CURVE SMOOTH",
"899 1287 OFFCURVE",
"919 1275 OFFCURVE",
"950 1172 CURVE SMOOTH",
"1091 700 LINE SMOOTH",
"1095 687 OFFCURVE",
"1097 671 OFFCURVE",
"1099 652 CURVE SMOOTH",
"1101 633 OFFCURVE",
"1094 613 OFFCURVE",
"1080 590 CURVE SMOOTH",
"870 250 LINE SMOOTH",
"860 234 OFFCURVE",
"850 226 OFFCURVE",
"840 226 CURVE SMOOTH",
"831 226 OFFCURVE",
"823 235 OFFCURVE",
"817 252 CURVE",
"538 1172 LINE SMOOTH",
"534 1184 OFFCURVE",
"531 1196 OFFCURVE",
"530 1209 CURVE SMOOTH",
"526 1261 OFFCURVE",
"577 1287 OFFCURVE",
"684 1287 CURVE SMOOTH",
"702 1287 OFFCURVE",
"719 1363 OFFCURVE",
"698 1363 CURVE",
"649 1360 OFFCURVE",
"571 1358 OFFCURVE",
"463 1358 CURVE SMOOTH",
"354 1358 OFFCURVE",
"285 1360 OFFCURVE",
"254 1363 CURVE",
"237 1363 OFFCURVE",
"220 1287 OFFCURVE",
"239 1287 CURVE SMOOTH",
"333 1287 OFFCURVE",
"367 1269 OFFCURVE",
"396 1172 CURVE SMOOTH",
"745 6 LINE",
"752 -22 OFFCURVE",
"760 -36 OFFCURVE",
"769 -36 CURVE SMOOTH",
"779 -36 OFFCURVE",
"788 -28 OFFCURVE",
"796 -13 CURVE SMOOTH",
"1112 511 LINE SMOOTH",
"1122 528 OFFCURVE",
"1129 536 OFFCURVE",
"1134 536 CURVE SMOOTH",
"1139 536 OFFCURVE",
"1143 528 OFFCURVE",
"1147 511 CURVE",
"1299 6 LINE SMOOTH",
"1307 -22 OFFCURVE",
"1316 -36 OFFCURVE",
"1324 -36 CURVE SMOOTH",
"1332 -36 OFFCURVE",
"1341 -28 OFFCURVE",
"1350 -13 CURVE SMOOTH",
"1773 686 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"684 -29 LINE",
"1088 636 LINE",
"1039 599 LINE",
"1211 -29 LINE",
"1235 -29 LINE",
"1952 1214 LINE SMOOTH",
"1985 1271 OFFCURVE",
"2044 1300 OFFCURVE",
"2141 1300 CURVE",
"2141 1358 LINE",
"1773 1358 LINE",
"1773 1300 LINE",
"1843 1300 OFFCURVE",
"1877 1282 OFFCURVE",
"1877 1248 CURVE SMOOTH",
"1877 1229 OFFCURVE",
"1865 1206 OFFCURVE",
"1848 1176 CURVE SMOOTH",
"1305 236 LINE",
"1277 236 LINE",
"1131 767 LINE",
"1135 698 LINE",
"1459 1214 LINE SMOOTH",
"1495 1271 OFFCURVE",
"1546 1300 OFFCURVE",
"1655 1300 CURVE",
"1655 1358 LINE",
"1258 1358 LINE",
"1258 1300 LINE",
"1329 1300 OFFCURVE",
"1369 1283 OFFCURVE",
"1369 1249 CURVE SMOOTH",
"1369 1230 OFFCURVE",
"1359 1206 OFFCURVE",
"1340 1176 CURVE SMOOTH",
"1106 797 LINE",
"1125 791 LINE",
"1019 1185 LINE SMOOTH",
"1015 1201 OFFCURVE",
"1013 1215 OFFCURVE",
"1013 1227 CURVE SMOOTH",
"1013 1267 OFFCURVE",
"1042 1300 OFFCURVE",
"1174 1300 CURVE",
"1174 1358 LINE",
"736 1358 LINE",
"736 1300 LINE",
"803 1300 OFFCURVE",
"860 1263 OFFCURVE",
"881 1185 CURVE SMOOTH",
"1035 615 LINE",
"1060 721 LINE",
"761 236 LINE",
"732 236 LINE",
"474 1185 LINE SMOOTH",
"470 1201 OFFCURVE",
"468 1215 OFFCURVE",
"468 1227 CURVE SMOOTH",
"468 1260 OFFCURVE",
"481 1300 OFFCURVE",
"607 1300 CURVE",
"607 1358 LINE",
"204 1358 LINE",
"204 1300 LINE",
"278 1300 OFFCURVE",
"315 1262 OFFCURVE",
"336 1185 CURVE SMOOTH",
"666 -29 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
61 32 2 5 2 1 76 109 80 55 3 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
12 1 5 2 0 2 5 0 128 15 13 11 9 8 6 4 7 2 2 3 97 14 10 7 3 3 3 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
12 1 5 2 0 2 5 0 128 14 10 7 3 3 15 13 11 9 8 6 4 7 2 5 3 2 105 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
12 1 5 2 0 2 5 0 128 1 1 0 0 132 14 10 7 3 3 2 2 3 89 14 10 7 3 3 3 2 97 15 13 11 9 8 6 4 7 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
114 112 108 107 102 101 95 93 85 83 79 78 73 72 36 21 25 37 35 37 20 40 34 16 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 2000;
},
{
anchors = (
{
name = bottom;
position = "{988, 0}";
},
{
name = top;
position = "{1228, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1913 889 OFFCURVE",
"2130 1198 QCURVE SMOOTH",
"2179 1270 OFFCURVE",
"2320 1270 QCURVE SMOOTH",
"2335 1270 OFFCURVE",
"2349 1339 OFFCURVE",
"2347 1364 OFFCURVE",
"2339 1364 QCURVE",
"2282 1358 OFFCURVE",
"1980 1358 OFFCURVE",
"1923 1364 QCURVE",
"1913 1364 OFFCURVE",
"1896 1294 OFFCURVE",
"1899 1270 OFFCURVE",
"1905 1270 QCURVE SMOOTH",
"1991 1270 OFFCURVE",
"1994 1237 QCURVE",
"1993 1210 OFFCURVE",
"1956 1147 QCURVE SMOOTH",
"1559 512 OFFCURVE",
"1444 350 QCURVE",
"1427 328 OFFCURVE",
"1409 328 QCURVE",
"1395 327 OFFCURVE",
"1391 350 QCURVE",
"1311 678 LINE SMOOTH",
"1304 707 OFFCURVE",
"1298 776 OFFCURVE",
"1325 819 QCURVE SMOOTH",
"1580 1210 LINE SMOOTH",
"1618 1270 OFFCURVE",
"1776 1270 QCURVE SMOOTH",
"1788 1270 OFFCURVE",
"1802 1339 OFFCURVE",
"1800 1364 OFFCURVE",
"1794 1364 QCURVE",
"1737 1358 OFFCURVE",
"1444 1358 OFFCURVE",
"1387 1364 QCURVE",
"1372 1364 OFFCURVE",
"1357 1298 OFFCURVE",
"1362 1270 OFFCURVE",
"1370 1270 QCURVE SMOOTH",
"1446 1270 OFFCURVE",
"1450 1221 OFFCURVE",
"1404 1147 QCURVE SMOOTH",
"1284 963 LINE SMOOTH",
"1266 936 OFFCURVE",
"1258 936 QCURVE",
"1249 934 OFFCURVE",
"1243 963 QCURVE SMOOTH",
"1198 1153 LINE SMOOTH",
"1189 1190 OFFCURVE",
"1186 1221 QCURVE SMOOTH",
"1182 1270 OFFCURVE",
"1284 1270 QCURVE SMOOTH",
"1294 1270 OFFCURVE",
"1304 1331 OFFCURVE",
"1300 1364 OFFCURVE",
"1292 1364 QCURVE",
"1235 1358 OFFCURVE",
"911 1358 OFFCURVE",
"854 1364 QCURVE",
"844 1364 OFFCURVE",
"832 1305 OFFCURVE",
"838 1270 OFFCURVE",
"846 1270 QCURVE SMOOTH",
"901 1270 OFFCURVE",
"950 1227 OFFCURVE",
"966 1153 QCURVE SMOOTH",
"1066 748 LINE SMOOTH",
"1072 717 OFFCURVE",
"1076 670 QCURVE SMOOTH",
"1079 643 OFFCURVE",
"1043 588 QCURVE SMOOTH",
"889 350 LINE SMOOTH",
"874 328 OFFCURVE",
"858 328 QCURVE",
"840 327 OFFCURVE",
"836 350 QCURVE",
"643 1153 LINE SMOOTH",
"634 1192 OFFCURVE",
"631 1223 QCURVE SMOOTH",
"627 1270 OFFCURVE",
"721 1270 QCURVE SMOOTH",
"731 1270 OFFCURVE",
"742 1327 OFFCURVE",
"739 1364 OFFCURVE",
"729 1364 QCURVE",
"674 1358 OFFCURVE",
"342 1358 OFFCURVE",
"285 1364 QCURVE",
"272 1364 OFFCURVE",
"263 1298 OFFCURVE",
"268 1270 OFFCURVE",
"276 1270 QCURVE SMOOTH",
"346 1270 OFFCURVE",
"392 1231 OFFCURVE",
"411 1153 QCURVE SMOOTH",
"679 35 LINE SMOOTH",
"698 -39 OFFCURVE",
"739 -39 QCURVE SMOOTH",
"765 -39 OFFCURVE",
"789 -2 QCURVE SMOOTH",
"1094 467 LINE SMOOTH",
"1110 492 OFFCURVE",
"1116 492 QCURVE SMOOTH",
"1125 492 OFFCURVE",
"1131 467 QCURVE SMOOTH",
"1234 35 LINE SMOOTH",
"1250 -39 OFFCURVE",
"1291 -39 QCURVE SMOOTH",
"1318 -39 OFFCURVE",
"1342 -2 QCURVE SMOOTH",
"1762 651 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"716 -39 LINE",
"1093 552 LINE",
"1059 552 LINE",
"1220 -39 LINE",
"1279 -39 LINE",
"2053 1186 LINE SMOOTH",
"2089 1243 OFFCURVE",
"2155 1270 OFFCURVE",
"2260 1270 CURVE",
"2260 1358 LINE",
"1863 1358 LINE",
"1863 1270 LINE",
"1911 1270 OFFCURVE",
"1931 1258 OFFCURVE",
"1931 1232 CURVE SMOOTH",
"1931 1211 OFFCURVE",
"1919 1184 OFFCURVE",
"1896 1147 CURVE SMOOTH",
"1397 358 LINE",
"1373 358 LINE",
"1226 878 LINE",
"1197 719 LINE",
"1491 1186 LINE SMOOTH",
"1527 1243 OFFCURVE",
"1594 1270 OFFCURVE",
"1701 1270 CURVE",
"1701 1358 LINE",
"1320 1358 LINE",
"1320 1270 LINE",
"1361 1270 OFFCURVE",
"1378 1260 OFFCURVE",
"1378 1239 CURVE SMOOTH",
"1378 1220 OFFCURVE",
"1364 1188 OFFCURVE",
"1337 1147 CURVE SMOOTH",
"1179 902 LINE",
"1221 902 LINE",
"1152 1153 LINE SMOOTH",
"1146 1175 OFFCURVE",
"1143 1194 OFFCURVE",
"1143 1212 CURVE SMOOTH",
"1143 1249 OFFCURVE",
"1158 1270 OFFCURVE",
"1232 1270 CURVE",
"1232 1358 LINE",
"800 1358 LINE",
"800 1270 LINE",
"844 1269 OFFCURVE",
"870 1249 OFFCURVE",
"881 1208 CURVE SMOOTH",
"1054 583 LINE",
"1082 742 LINE",
"836 356 LINE",
"811 356 LINE",
"592 1153 LINE SMOOTH",
"588 1169 OFFCURVE",
"583 1191 OFFCURVE",
"583 1210 CURVE SMOOTH",
"583 1252 OFFCURVE",
"604 1270 OFFCURVE",
"675 1270 CURVE",
"675 1358 LINE",
"204 1358 LINE",
"204 1270 LINE",
"276 1270 OFFCURVE",
"316 1230 OFFCURVE",
"337 1153 CURVE SMOOTH",
"661 -39 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
98 1 5 2 1 76 107 79 55 26 4 3 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
12 1 5 2 0 2 5 0 128 15 13 11 9 8 6 4 7 2 2 3 97 14 10 7 3 3 3 31 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
12 1 5 2 0 2 5 0 128 14 10 7 3 3 15 13 11 9 8 6 4 7 2 5 3 2 105 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
12 1 5 2 0 2 5 0 128 1 1 0 0 132 14 10 7 3 3 2 2 3 89 14 10 7 3 3 3 2 97 15 13 11 9 8 6 4 7 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
112 110 106 105 100 99 93 91 84 82 78 77 72 71 36 21 25 37 36 21 20 40 34 16 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 2125;
}
);
leftKerningGroup = W;
leftMetricsKey = V;
note = W;
rightKerningGroup = V;
rightMetricsKey = V;
unicode = 0057;
},
{
glyphname = X;
lastChange = "2018-08-18 13:20:44 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{623, 0}";
},
{
name = top;
position = "{863, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1473 1247 OFFCURVE",
"1547 1287 OFFCURVE",
"1674 1287 CURVE",
"1693 1293 OFFCURVE",
"1709 1363 OFFCURVE",
"1687 1363 CURVE",
"1639 1360 OFFCURVE",
"1571 1358 OFFCURVE",
"1481 1358 CURVE SMOOTH",
"1391 1358 OFFCURVE",
"1327 1360 OFFCURVE",
"1288 1363 CURVE",
"1271 1363 OFFCURVE",
"1254 1287 OFFCURVE",
"1275 1287 CURVE SMOOTH",
"1325 1287 OFFCURVE",
"1352 1277 OFFCURVE",
"1353 1256 CURVE SMOOTH",
"1355 1235 OFFCURVE",
"1336 1204 OFFCURVE",
"1297 1163 CURVE SMOOTH",
"971 822 LINE SMOOTH",
"961 811 OFFCURVE",
"952 806 OFFCURVE",
"945 806 CURVE SMOOTH",
"937 806 OFFCURVE",
"931 812 OFFCURVE",
"925 824 CURVE SMOOTH",
"771 1171 LINE SMOOTH",
"764 1186 OFFCURVE",
"759 1200 OFFCURVE",
"758 1213 CURVE SMOOTH",
"754 1262 OFFCURVE",
"806 1287 OFFCURVE",
"914 1287 CURVE SMOOTH",
"932 1287 OFFCURVE",
"947 1363 OFFCURVE",
"927 1363 CURVE",
"835 1360 OFFCURVE",
"742 1358 OFFCURVE",
"648 1358 CURVE SMOOTH",
"553 1358 OFFCURVE",
"479 1360 OFFCURVE",
"427 1363 CURVE",
"408 1363 OFFCURVE",
"391 1287 OFFCURVE",
"413 1287 CURVE SMOOTH",
"526 1287 OFFCURVE",
"573 1267 OFFCURVE",
"615 1179 CURVE SMOOTH",
"832 722 LINE SMOOTH",
"837 712 OFFCURVE",
"840 701 OFFCURVE",
"841 690 CURVE SMOOTH",
"842 679 OFFCURVE",
"837 668 OFFCURVE",
"827 658 CURVE SMOOTH",
"338 155 LINE SMOOTH",
"282 98 OFFCURVE",
"202 69 OFFCURVE",
"96 69 CURVE SMOOTH",
"79 69 OFFCURVE",
"62 -7 OFFCURVE",
"83 -7 CURVE",
"147 -2 OFFCURVE",
"224 0 OFFCURVE",
"315 0 CURVE SMOOTH",
"407 0 OFFCURVE",
"480 -2 OFFCURVE",
"535 -7 CURVE",
"554 -7 OFFCURVE",
"571 69 OFFCURVE",
"550 69 CURVE SMOOTH",
"488 69 OFFCURVE",
"456 84 OFFCURVE",
"453 115 CURVE SMOOTH",
"450 152 OFFCURVE",
"490 215 OFFCURVE",
"574 302 CURVE SMOOTH",
"851 592 LINE",
"862 603 OFFCURVE",
"870 608 OFFCURVE",
"877 608 CURVE SMOOTH",
"884 608 OFFCURVE",
"890 602 OFFCURVE",
"896 589 CURVE SMOOTH",
"1084 191 LINE SMOOTH",
"1094 168 OFFCURVE",
"1100 149 OFFCURVE",
"1102 133 CURVE SMOOTH",
"1105 90 OFFCURVE",
"1062 69 OFFCURVE",
"971 69 CURVE SMOOTH",
"954 69 OFFCURVE",
"937 -7 OFFCURVE",
"958 -7 CURVE",
"1027 -2 OFFCURVE",
"1105 0 OFFCURVE",
"1194 0 CURVE SMOOTH",
"1282 0 OFFCURVE",
"1356 -2 OFFCURVE",
"1416 -7 CURVE",
"1437 -7 OFFCURVE",
"1450 69 OFFCURVE",
"1430 69 CURVE SMOOTH",
"1321 69 OFFCURVE",
"1249 108 OFFCURVE",
"1214 186 CURVE SMOOTH",
"986 689 LINE SMOOTH",
"983 696 OFFCURVE",
"981 706 OFFCURVE",
"980 717 CURVE SMOOTH",
"979 728 OFFCURVE",
"983 739 OFFCURVE",
"993 749 CURVE SMOOTH",
"1324 1092 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"396 0 LINE",
"396 56 LINE",
"321 56 OFFCURVE",
"275 71 OFFCURVE",
"275 101 CURVE SMOOTH",
"275 134 OFFCURVE",
"321 197 OFFCURVE",
"403 289 CURVE SMOOTH",
"733 656 LINE",
"706 648 LINE",
"938 178 LINE SMOOTH",
"949 155 OFFCURVE",
"955 134 OFFCURVE",
"955 119 CURVE SMOOTH",
"955 92 OFFCURVE",
"935 56 OFFCURVE",
"823 56 CURVE",
"823 0 LINE",
"1292 0 LINE",
"1292 56 LINE",
"1183 56 OFFCURVE",
"1118 95 OFFCURVE",
"1081 173 CURVE SMOOTH",
"799 771 LINE",
"792 714 LINE",
"1160 1105 LINE SMOOTH",
"1301 1254 OFFCURVE",
"1345 1300 OFFCURVE",
"1496 1300 CURVE",
"1496 1358 LINE",
"1107 1358 LINE",
"1107 1300 LINE",
"1161 1300 OFFCURVE",
"1197 1287 OFFCURVE",
"1197 1260 CURVE SMOOTH",
"1197 1241 OFFCURVE",
"1179 1213 OFFCURVE",
"1145 1176 CURVE SMOOTH",
"771 776 LINE",
"794 778 LINE",
"604 1184 LINE SMOOTH",
"595 1203 OFFCURVE",
"591 1218 OFFCURVE",
"591 1232 CURVE SMOOTH",
"591 1261 OFFCURVE",
"612 1300 OFFCURVE",
"750 1300 CURVE",
"750 1358 LINE",
"237 1358 LINE",
"237 1300 LINE",
"348 1299 OFFCURVE",
"389 1280 OFFCURVE",
"433 1192 CURVE SMOOTH",
"701 658 LINE",
"722 720 LINE",
"185 142 LINE SMOOTH",
"132 85 OFFCURVE",
"60 56 OFFCURVE",
"-47 56 CURVE",
"-47 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
68 1 10 7 1 76 40 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 3 10 0 10 3 0 128 13 11 9 3 7 7 8 97 12 1 8 8 92 77 0 10 10 95 77 6 4 2 3 0 0 1 98 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 13 11 9 3 7 7 8 97 12 1 8 8 92 77 6 4 2 3 0 0 1 98 5 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 6 4 2 3 0 5 1 1 0 1 102 13 11 9 3 7 7 8 97 12 1 8 8 92 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 12 1 8 13 11 9 3 7 10 8 7 105 6 4 2 3 0 1 1 0 89 6 4 2 3 0 0 1 98 5 1 1 0 1 82 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 10 7 3 7 10 3 128 0 3 0 7 3 0 126 12 1 8 13 11 9 3 7 10 8 7 105 6 4 2 3 0 0 5 1 0 5 106 6 4 2 3 0 0 1 98 0 1 0 1 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
91 89 86 84 79 78 74 72 67 65 67 25 36 21 21 37 35 37 23 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1396;
},
{
anchors = (
{
name = bottom;
position = "{657, 0}";
},
{
name = top;
position = "{897, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"258 125 OFFCURVE",
"155 86 OFFCURVE",
"53 86 QCURVE SMOOTH",
"38 86 OFFCURVE",
"28 18 OFFCURVE",
"30 -8 OFFCURVE",
"38 -8 QCURVE",
"113 0 OFFCURVE",
"447 0 OFFCURVE",
"526 -8 QCURVE",
"540 -8 OFFCURVE",
"552 86 OFFCURVE",
"538 86 QCURVE SMOOTH",
"448 86 OFFCURVE",
"445 123 QCURVE SMOOTH",
"440 170 OFFCURVE",
"562 297 QCURVE SMOOTH",
"792 535 LINE SMOOTH",
"811 555 OFFCURVE",
"823 555 QCURVE SMOOTH",
"837 555 OFFCURVE",
"847 535 QCURVE SMOOTH",
"1011 203 LINE SMOOTH",
"1034 157 OFFCURVE",
"1035 137 QCURVE SMOOTH",
"1040 86 OFFCURVE",
"915 86 QCURVE SMOOTH",
"903 86 OFFCURVE",
"888 -8 OFFCURVE",
"902 -8 QCURVE",
"977 0 OFFCURVE",
"1358 0 OFFCURVE",
"1437 -8 QCURVE",
"1451 -8 OFFCURVE",
"1461 86 OFFCURVE",
"1449 86 QCURVE SMOOTH",
"1349 86 OFFCURVE",
"1272 133 OFFCURVE",
"1231 219 QCURVE SMOOTH",
"1003 711 LINE",
"996 723 OFFCURVE",
"995 737 QCURVE",
"994 754 OFFCURVE",
"1013 774 QCURVE SMOOTH",
"1311 1079 LINE SMOOTH",
"1435 1204 OFFCURVE",
"1552 1270 OFFCURVE",
"1661 1270 QCURVE SMOOTH",
"1675 1270 OFFCURVE",
"1688 1339 OFFCURVE",
"1683 1364 OFFCURVE",
"1677 1364 QCURVE",
"1621 1358 OFFCURVE",
"1301 1358 OFFCURVE",
"1243 1364 QCURVE",
"1229 1364 OFFCURVE",
"1215 1270 OFFCURVE",
"1227 1270 QCURVE SMOOTH",
"1294 1270 OFFCURVE",
"1296 1245 QCURVE",
"1300 1217 OFFCURVE",
"1236 1151 QCURVE SMOOTH",
"965 870 LINE SMOOTH",
"951 856 OFFCURVE",
"941 856 QCURVE SMOOTH",
"929 856 OFFCURVE",
"922 872 QCURVE SMOOTH",
"795 1151 LINE",
"780 1179 OFFCURVE",
"778 1204 QCURVE SMOOTH",
"772 1270 OFFCURVE",
"917 1270 QCURVE SMOOTH",
"932 1270 OFFCURVE",
"946 1364 OFFCURVE",
"932 1364 QCURVE",
"876 1358 OFFCURVE",
"410 1358 OFFCURVE",
"352 1364 QCURVE",
"338 1364 OFFCURVE",
"330 1270 OFFCURVE",
"342 1270 QCURVE SMOOTH",
"428 1270 OFFCURVE",
"516 1204 OFFCURVE",
"553 1130 QCURVE SMOOTH",
"767 696 LINE",
"774 684 OFFCURVE",
"775 674 QCURVE SMOOTH",
"777 655 OFFCURVE",
"764 643 QCURVE",
"313 180 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"461 0 LINE",
"461 86 LINE",
"401 86 OFFCURVE",
"372 104 OFFCURVE",
"372 140 CURVE SMOOTH",
"372 179 OFFCURVE",
"404 231 OFFCURVE",
"466 299 CURVE SMOOTH",
"741 597 LINE",
"684 595 LINE",
"911 209 LINE SMOOTH",
"927 181 OFFCURVE",
"936 158 OFFCURVE",
"936 141 CURVE SMOOTH",
"936 105 OFFCURVE",
"896 86 OFFCURVE",
"817 86 CURVE",
"817 0 LINE",
"1360 0 LINE",
"1360 86 LINE",
"1270 86 OFFCURVE",
"1203 124 OFFCURVE",
"1164 203 CURVE SMOOTH",
"871 788 LINE",
"858 713 LINE",
"1233 1092 LINE SMOOTH",
"1342 1203 OFFCURVE",
"1427 1270 OFFCURVE",
"1557 1270 CURVE",
"1557 1358 LINE",
"1114 1358 LINE",
"1114 1270 LINE",
"1164 1270 OFFCURVE",
"1188 1255 OFFCURVE",
"1188 1227 CURVE SMOOTH",
"1188 1208 OFFCURVE",
"1175 1182 OFFCURVE",
"1141 1147 CURVE SMOOTH",
"819 819 LINE",
"867 819 LINE",
"687 1153 LINE SMOOTH",
"674 1176 OFFCURVE",
"668 1194 OFFCURVE",
"668 1208 CURVE SMOOTH",
"668 1224 OFFCURVE",
"676 1270 OFFCURVE",
"803 1270 CURVE",
"803 1358 LINE",
"221 1358 LINE",
"221 1270 LINE",
"305 1270 OFFCURVE",
"361 1243 OFFCURVE",
"387 1194 CURVE SMOOTH",
"689 629 LINE",
"728 717 LINE",
"196 172 LINE SMOOTH",
"141 115 OFFCURVE",
"60 86 OFFCURVE",
"-41 86 CURVE",
"-41 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
38 15 2 1 74 83 60 2 8 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 10 3 7 3 10 7 128 6 4 2 3 0 0 1 97 5 1 1 1 31 77 0 3 3 34 77 13 11 9 3 7 7 8 98 12 1 8 8 32 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 10 3 7 3 10 7 128 13 11 9 3 7 12 1 8 7 8 102 6 4 2 3 0 0 1 97 5 1 1 1 31 77 0 3 3 34 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 10 3 7 3 10 7 128 5 1 1 6 4 2 3 0 3 1 0 105 13 11 9 3 7 12 1 8 7 8 102 0 3 3 34 3 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
88 86 82 81 77 76 71 69 64 62 20 26 36 20 21 37 35 20 24 14 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
leftKerningGroup = X;
note = X;
rightKerningGroup = X;
unicode = 0058;
},
{
glyphname = Y;
lastChange = "2018-08-18 13:03:58 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{581, 0}";
},
{
name = top;
position = "{821, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"744 487 LINE SMOOTH",
"758 557 OFFCURVE",
"781 612 OFFCURVE",
"816 653 CURVE SMOOTH",
"1162 1059 LINE SMOOTH",
"1259 1172 OFFCURVE",
"1323 1240 OFFCURVE",
"1356 1259 CURVE SMOOTH",
"1388 1278 OFFCURVE",
"1435 1287 OFFCURVE",
"1497 1287 CURVE SMOOTH",
"1516 1287 OFFCURVE",
"1532 1363 OFFCURVE",
"1512 1363 CURVE",
"1462 1360 OFFCURVE",
"1395 1358 OFFCURVE",
"1311 1358 CURVE SMOOTH",
"1227 1358 OFFCURVE",
"1162 1360 OFFCURVE",
"1118 1363 CURVE",
"1099 1363 OFFCURVE",
"1082 1287 OFFCURVE",
"1103 1287 CURVE SMOOTH",
"1169 1287 OFFCURVE",
"1205 1274 OFFCURVE",
"1206 1247 CURVE SMOOTH",
"1207 1227 OFFCURVE",
"1194 1199 OFFCURVE",
"1164 1163 CURVE SMOOTH",
"760 686 LINE SMOOTH",
"752 676 OFFCURVE",
"744 671 OFFCURVE",
"738 671 CURVE SMOOTH",
"731 671 OFFCURVE",
"725 677 OFFCURVE",
"720 689 CURVE SMOOTH",
"527 1172 LINE SMOOTH",
"519 1191 OFFCURVE",
"515 1207 OFFCURVE",
"513 1222 CURVE SMOOTH",
"511 1238 OFFCURVE",
"518 1253 OFFCURVE",
"532 1267 CURVE SMOOTH",
"546 1281 OFFCURVE",
"586 1287 OFFCURVE",
"651 1287 CURVE SMOOTH",
"669 1287 OFFCURVE",
"685 1363 OFFCURVE",
"665 1363 CURVE",
"633 1360 OFFCURVE",
"561 1358 OFFCURVE",
"448 1358 CURVE SMOOTH",
"334 1358 OFFCURVE",
"262 1360 OFFCURVE",
"231 1363 CURVE",
"213 1363 OFFCURVE",
"197 1287 OFFCURVE",
"217 1287 CURVE SMOOTH",
"286 1287 OFFCURVE",
"343 1276 OFFCURVE",
"384 1172 CURVE SMOOTH",
"577 689 LINE SMOOTH",
"597 640 OFFCURVE",
"608 604 OFFCURVE",
"610 581 CURVE SMOOTH",
"612 558 OFFCURVE",
"607 515 OFFCURVE",
"594 452 CURVE SMOOTH",
"541 186 LINE SMOOTH",
"520 83 OFFCURVE",
"476 69 OFFCURVE",
"350 69 CURVE SMOOTH",
"332 69 OFFCURVE",
"316 -7 OFFCURVE",
"336 -7 CURVE",
"393 -2 OFFCURVE",
"472 0 OFFCURVE",
"573 0 CURVE SMOOTH",
"674 0 OFFCURVE",
"754 -2 OFFCURVE",
"812 -7 CURVE",
"830 -7 OFFCURVE",
"846 69 OFFCURVE",
"825 69 CURVE SMOOTH",
"720 69 OFFCURVE",
"673 131 OFFCURVE",
"684 186 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"847 0 LINE",
"847 58 LINE",
"709 58 OFFCURVE",
"669 90 OFFCURVE",
"669 151 CURVE SMOOTH",
"669 156 OFFCURVE",
"669 161 OFFCURVE",
"670 166 CURVE SMOOTH",
"744 588 LINE",
"1230 1178 LINE SMOOTH",
"1291 1252 OFFCURVE",
"1368 1287 OFFCURVE",
"1461 1287 CURVE",
"1461 1358 LINE",
"1074 1358 LINE",
"1074 1287 LINE",
"1142 1287 OFFCURVE",
"1176 1272 OFFCURVE",
"1176 1242 CURVE SMOOTH",
"1176 1222 OFFCURVE",
"1162 1195 OFFCURVE",
"1136 1163 CURVE SMOOTH",
"725 662 LINE",
"713 662 LINE",
"500 1172 LINE SMOOTH",
"493 1190 OFFCURVE",
"489 1206 OFFCURVE",
"489 1219 CURVE SMOOTH",
"489 1245 OFFCURVE",
"502 1287 OFFCURVE",
"621 1287 CURVE",
"621 1358 LINE",
"190 1358 LINE",
"190 1287 LINE",
"269 1287 OFFCURVE",
"325 1248 OFFCURVE",
"357 1172 CURVE SMOOTH",
"616 550 LINE",
"548 166 LINE SMOOTH",
"535 95 OFFCURVE",
"487 58 OFFCURVE",
"342 58 CURVE",
"342 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
33 1 4 74 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 6 3 0 3 6 0 128 9 7 5 3 3 3 4 97 8 1 4 4 92 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 6 3 0 3 6 0 128 2 1 0 0 1 0 1 101 9 7 5 3 3 3 4 97 8 1 4 4 92 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 6 3 0 3 6 0 128 8 1 4 9 7 5 3 3 6 4 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
65 63 67 21 39 36 21 25 36 21 19 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1311;
},
{
anchors = (
{
name = bottom;
position = "{632, 0}";
},
{
name = top;
position = "{872, 1363}";
},
{
name = topleft;
position = "{185, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"570 133 OFFCURVE",
"505 86 OFFCURVE",
"421 86 QCURVE SMOOTH",
"407 86 OFFCURVE",
"392 -8 OFFCURVE",
"404 -8 QCURVE",
"479 0 OFFCURVE",
"854 0 OFFCURVE",
"931 -8 QCURVE",
"945 -8 OFFCURVE",
"961 86 OFFCURVE",
"947 86 QCURVE SMOOTH",
"822 87 OFFCURVE",
"816 150 QCURVE",
"815 174 OFFCURVE",
"821 201 QCURVE SMOOTH",
"882 508 LINE SMOOTH",
"900 600 OFFCURVE",
"935 641 QCURVE SMOOTH",
"1279 1044 LINE SMOOTH",
"1410 1200 OFFCURVE",
"1513 1270 OFFCURVE",
"1615 1270 QCURVE SMOOTH",
"1632 1270 OFFCURVE",
"1640 1337 OFFCURVE",
"1640 1364 OFFCURVE",
"1632 1364 QCURVE",
"1574 1358 OFFCURVE",
"1262 1358 OFFCURVE",
"1204 1364 QCURVE",
"1192 1364 OFFCURVE",
"1173 1270 OFFCURVE",
"1187 1270 QCURVE SMOOTH",
"1282 1270 OFFCURVE",
"1285 1235 QCURVE SMOOTH",
"1288 1208 OFFCURVE",
"1245 1157 QCURVE SMOOTH",
"893 752 LINE",
"876 731 OFFCURVE",
"849 731 OFFCURVE",
"839 754 QCURVE SMOOTH",
"673 1157 LINE SMOOTH",
"660 1191 OFFCURVE",
"658 1214 QCURVE SMOOTH",
"653 1270 OFFCURVE",
"774 1270 QCURVE SMOOTH",
"786 1270 OFFCURVE",
"802 1364 OFFCURVE",
"786 1364 QCURVE",
"730 1358 OFFCURVE",
"338 1358 OFFCURVE",
"280 1364 QCURVE",
"266 1364 OFFCURVE",
"258 1296 OFFCURVE",
"260 1270 OFFCURVE",
"268 1270 QCURVE SMOOTH",
"337 1270 OFFCURVE",
"403 1221 OFFCURVE",
"438 1139 QCURVE SMOOTH",
"629 678 LINE",
"655 621 OFFCURVE",
"661 557 OFFCURVE",
"643 473 QCURVE SMOOTH",
"587 217 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"965 0 LINE",
"965 86 LINE",
"840 86 OFFCURVE",
"768 118 OFFCURVE",
"768 179 CURVE SMOOTH",
"768 184 OFFCURVE",
"768 189 OFFCURVE",
"769 194 CURVE SMOOTH",
"842 610 LINE",
"1322 1155 LINE SMOOTH",
"1402 1246 OFFCURVE",
"1488 1270 OFFCURVE",
"1561 1270 CURVE",
"1561 1358 LINE",
"1106 1358 LINE",
"1106 1270 LINE",
"1171 1269 OFFCURVE",
"1203 1252 OFFCURVE",
"1203 1217 CURVE SMOOTH",
"1203 1196 OFFCURVE",
"1190 1176 OFFCURVE",
"1166 1147 CURVE SMOOTH",
"813 731 LINE",
"796 731 LINE",
"604 1153 LINE SMOOTH",
"596 1170 OFFCURVE",
"593 1186 OFFCURVE",
"593 1202 CURVE SMOOTH",
"593 1230 OFFCURVE",
"604 1270 OFFCURVE",
"715 1270 CURVE",
"715 1358 LINE",
"190 1358 LINE",
"190 1270 LINE",
"263 1266 OFFCURVE",
"299 1227 OFFCURVE",
"333 1153 CURVE SMOOTH",
"594 581 LINE",
"526 194 LINE SMOOTH",
"514 123 OFFCURVE",
"463 86 OFFCURVE",
"328 86 CURVE",
"328 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
37 15 2 1 74 58 1 8 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 3 0 7 0 3 7 128 6 4 2 3 0 0 1 97 5 1 1 1 31 77 9 1 7 7 8 97 0 8 8 32 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 0 7 0 3 7 128 9 1 7 0 8 7 8 101 6 4 2 3 0 0 1 97 5 1 1 1 31 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 3 0 7 0 3 7 128 5 1 1 6 4 2 3 0 3 1 0 105 9 1 7 8 8 7 89 9 1 7 7 8 97 0 8 7 8 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
62 60 20 25 36 20 21 21 35 21 23 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1414;
}
);
leftKerningGroup = Y;
note = Y;
rightKerningGroup = Y;
unicode = 0059;
},
{
glyphname = Yacute;
lastChange = "2018-08-18 13:04:19 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 653, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = Y;
},
{
name = acutecomb.case;
transform = "{1, 0, 0, 1, 707, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1414;
}
);
leftKerningGroup = Y;
leftMetricsKey = Y;
note = Yacute;
rightKerningGroup = Y;
rightMetricsKey = Y;
unicode = 00DD;
},
{
glyphname = Ydieresis;
lastChange = "2018-08-18 13:04:41 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 652, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = Y;
},
{
name = uni0308.case;
transform = "{1, 0, 0, 1, 702, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1414;
}
);
leftKerningGroup = Y;
leftMetricsKey = Y;
note = Ydieresis;
rightMetricsKey = Y;
unicode = 0178;
},
{
glyphname = Z;
lastChange = "2018-08-18 13:21:00 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{505, 0}";
},
{
name = top;
position = "{745, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1117 114 OFFCURVE",
"1155 229 OFFCURVE",
"1202 336 CURVE SMOOTH",
"1205 343 OFFCURVE",
"1199 348 OFFCURVE",
"1183 353 CURVE SMOOTH",
"1168 358 OFFCURVE",
"1159 357 OFFCURVE",
"1157 352 CURVE SMOOTH",
"1060 177 OFFCURVE",
"972 87 OFFCURVE",
"892 82 CURVE SMOOTH",
"749 73 OFFCURVE",
"534 69 OFFCURVE",
"248 69 CURVE SMOOTH",
"234 69 OFFCURVE",
"226 75 OFFCURVE",
"225 86 CURVE SMOOTH",
"224 97 OFFCURVE",
"226 106 OFFCURVE",
"231 111 CURVE SMOOTH",
"1342 1316 LINE SMOOTH",
"1352 1327 OFFCURVE",
"1356 1337 OFFCURVE",
"1355 1347 CURVE SMOOTH",
"1355 1357 OFFCURVE",
"1349 1362 OFFCURVE",
"1337 1362 CURVE SMOOTH",
"964 1354 LINE SMOOTH",
"857 1351 OFFCURVE",
"747 1350 OFFCURVE",
"631 1350 CURVE SMOOTH",
"517 1350 OFFCURVE",
"432 1354 OFFCURVE",
"376 1362 CURVE SMOOTH",
"348 1366 LINE",
"345 1367 OFFCURVE",
"342 1367 OFFCURVE",
"340 1367 CURVE SMOOTH",
"326 1367 OFFCURVE",
"317 1360 OFFCURVE",
"314 1345 CURVE SMOOTH",
"284 1220 OFFCURVE",
"250 1101 OFFCURVE",
"212 988 CURVE SMOOTH",
"209 980 OFFCURVE",
"215 974 OFFCURVE",
"230 969 CURVE SMOOTH",
"244 964 OFFCURVE",
"253 966 OFFCURVE",
"256 974 CURVE SMOOTH",
"275 1017 OFFCURVE",
"303 1067 OFFCURVE",
"341 1125 CURVE SMOOTH",
"381 1187 OFFCURVE",
"416 1230 OFFCURVE",
"447 1254 CURVE SMOOTH",
"477 1277 OFFCURVE",
"507 1289 OFFCURVE",
"536 1289 CURVE SMOOTH",
"1108 1289 LINE SMOOTH",
"1121 1289 OFFCURVE",
"1128 1287 OFFCURVE",
"1128 1282 CURVE SMOOTH",
"1129 1278 OFFCURVE",
"1126 1273 OFFCURVE",
"1120 1267 CURVE SMOOTH",
"-9 51 LINE SMOOTH",
"-16 44 OFFCURVE",
"-19 33 OFFCURVE",
"-17 20 CURVE SMOOTH",
"-16 7 OFFCURVE",
"-9 0 OFFCURVE",
"4 0 CURVE SMOOTH",
"356 0 LINE SMOOTH",
"732 0 OFFCURVE",
"951 -7 OFFCURVE",
"1013 -21 CURVE SMOOTH",
"1066 -33 LINE SMOOTH",
"1076 -35 OFFCURVE",
"1084 -26 OFFCURVE",
"1088 -7 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1044 -17 LINE",
"1057 56 OFFCURVE",
"1094 174 OFFCURVE",
"1154 331 CURVE",
"1111 342 LINE",
"1092 298 OFFCURVE",
"962 84 OFFCURVE",
"854 77 CURVE SMOOTH",
"715 68 OFFCURVE",
"455 64 OFFCURVE",
"165 64 CURVE",
"169 86 LINE",
"1287 1337 LINE",
"1291 1358 LINE",
"457 1358 LINE",
"424 1358 OFFCURVE",
"356 1361 OFFCURVE",
"292 1367 CURVE",
"271 1349 LINE",
"255 1254 OFFCURVE",
"222 1131 OFFCURVE",
"175 989 CURVE",
"218 982 LINE",
"258 1071 OFFCURVE",
"299 1154 OFFCURVE",
"377 1235 CURVE SMOOTH",
"416 1275 OFFCURVE",
"453 1296 OFFCURVE",
"490 1296 CURVE SMOOTH",
"1088 1296 LINE",
"1084 1274 LINE",
"-50 22 LINE",
"-54 0 LINE",
"727 0 LINE SMOOTH",
"829 0 OFFCURVE",
"964 -8 OFFCURVE",
"1027 -33 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
107 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 6 values pushed */
47 1 0 5 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 5 1 4 1 5 4 128 0 1 1 2 97 3 1 2 2 92 77 0 4 4 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 5 1 4 1 5 4 128 0 4 0 0 4 0 99 0 1 1 2 97 3 1 2 2 92 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 5 1 4 1 5 4 128 0 4 0 0 4 0 99 0 2 2 92 77 0 1 1 3 95 0 3 3 92 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
107 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 2 3 2 133 0 5 1 4 1 5 4 128 0 3 0 1 5 3 1 103 0 4 0 0 4 87 0 4 4 0 95 0 0 4 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 2 3 2 133 0 5 1 0 1 5 0 128 0 0 0 132 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
33 57 68 28 40 52 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
},
{
anchors = (
{
name = bottom;
position = "{559, 0}";
},
{
name = top;
position = "{799, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"28 82 OFFCURVE",
"29 57 QCURVE",
"35 0 OFFCURVE",
"88 0 QCURVE SMOOTH",
"479 0 LINE SMOOTH",
"896 0 OFFCURVE",
"1073 -13 OFFCURVE",
"1190 -33 QCURVE",
"1213 -35 OFFCURVE",
"1222 4 QCURVE",
"1237 61 OFFCURVE",
"1258 147 QCURVE SMOOTH",
"1280 232 OFFCURVE",
"1330 334 QCURVE",
"1338 346 OFFCURVE",
"1276 366 OFFCURVE",
"1270 352 QCURVE SMOOTH",
"1240 293 OFFCURVE",
"1188 213 QCURVE SMOOTH",
"1110 102 OFFCURVE",
"1009 98 QCURVE SMOOTH",
"746 86 OFFCURVE",
"414 86 QCURVE SMOOTH",
"388 86 OFFCURVE",
"377 115 OFFCURVE",
"392 129 QCURVE",
"1491 1262 LINE SMOOTH",
"1516 1286 OFFCURVE",
"1513 1317 QCURVE",
"1508 1360 OFFCURVE",
"1459 1360 QCURVE SMOOTH",
"1057 1352 LINE SMOOTH",
"516 1352 OFFCURVE",
"423 1366 OFFCURVE",
"407 1366 QCURVE SMOOTH",
"357 1366 OFFCURVE",
"348 1327 QCURVE SMOOTH",
"311 1167 OFFCURVE",
"253 989 QCURVE SMOOTH",
"246 971 OFFCURVE",
"309 961 OFFCURVE",
"314 977 QCURVE",
"330 1024 OFFCURVE",
"462 1204 OFFCURVE",
"554 1272 OFFCURVE",
"603 1272 QCURVE SMOOTH",
"1134 1272 LINE SMOOTH",
"1160 1272 OFFCURVE",
"1167 1243 OFFCURVE",
"1150 1229 QCURVE",
"46 102 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1157 -7 LINE",
"1174 86 OFFCURVE",
"1211 215 OFFCURVE",
"1262 330 CURVE",
"1186 354 LINE",
"1153 285 OFFCURVE",
"1033 103 OFFCURVE",
"950 98 CURVE SMOOTH",
"829 91 OFFCURVE",
"592 86 OFFCURVE",
"317 86 CURVE",
"320 107 LINE",
"1408 1307 LINE",
"1417 1358 LINE",
"458 1358 LINE",
"418 1358 OFFCURVE",
"355 1367 OFFCURVE",
"322 1374 CURVE",
"295 1352 LINE",
"283 1287 OFFCURVE",
"248 1144 OFFCURVE",
"199 987 CURVE",
"279 975 LINE",
"295 1020 OFFCURVE",
"366 1144 OFFCURVE",
"425 1215 CURVE SMOOTH",
"455 1252 OFFCURVE",
"488 1274 OFFCURVE",
"535 1274 CURVE SMOOTH",
"1089 1274 LINE",
"1085 1251 LINE",
"-45 51 LINE",
"-54 0 LINE",
"772 0 LINE SMOOTH",
"907 0 OFFCURVE",
"1069 -11 OFFCURVE",
"1136 -29 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
0 0 0 1 97 2 1 1 1 31 77 0 3 3 4 95 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 3 0 4 3 4 99 0 0 0 1 97 2 1 1 1 31 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 3 0 4 3 4 99 0 1 1 31 77 0 0 0 2 95 0 2 2 31 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
136 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 1 133 0 2 0 0 3 2 0 103 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 1 2 1 133 0 4 0 4 134 0 2 0 0 2 87 0 2 2 0 95 0 0 2 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
62 70 50 25 51 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 1268;
}
);
leftKerningGroup = Z;
note = Z;
rightKerningGroup = Z;
unicode = 005A;
},
{
glyphname = a;
lastChange = "2018-08-20 10:12:24 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{352, 0}";
},
{
name = ogonek;
position = "{694, 10}";
},
{
name = top;
position = "{479, 856}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"731 878 LINE",
"629 878 LINE",
"613 788 LINE",
"568 825 OFFCURVE",
"523 844 OFFCURVE",
"475 844 CURVE SMOOTH",
"229 844 OFFCURVE",
"7 462 OFFCURVE",
"6 183 CURVE SMOOTH",
"6 71 OFFCURVE",
"50 -27 OFFCURVE",
"146 -27 CURVE SMOOTH",
"257 -27 OFFCURVE",
"394 92 OFFCURVE",
"558 340 CURVE",
"528 322 LINE",
"502 172 LINE SMOOTH",
"485 77 OFFCURVE",
"471 -27 OFFCURVE",
"556 -27 CURVE SMOOTH",
"636 -27 OFFCURVE",
"725 48 OFFCURVE",
"804 156 CURVE",
"761 197 LINE",
"703 133 OFFCURVE",
"662 103 OFFCURVE",
"640 103 CURVE SMOOTH",
"599 103 OFFCURVE",
"600 153 OFFCURVE",
"609 203 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"543 410 OFFCURVE",
"479 317 OFFCURVE",
"361 183 CURVE SMOOTH",
"301 115 OFFCURVE",
"233 72 OFFCURVE",
"196 72 CURVE SMOOTH",
"144 72 OFFCURVE",
"126 144 OFFCURVE",
"126 213 CURVE SMOOTH",
"127 433 OFFCURVE",
"283 783 OFFCURVE",
"454 783 CURVE SMOOTH",
"513 783 OFFCURVE",
"564 750 OFFCURVE",
"596 694 CURVE",
"562 516 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
31 1 5 3 39 20 6 3 0 5 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 0 5 6 5 0 6 128 0 4 4 95 77 0 5 5 3 97 0 3 3 95 77 0 6 6 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 3 4 133 0 0 5 6 5 0 6 128 0 5 5 3 97 0 3 3 95 77 0 6 6 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 4 133 0 0 5 6 5 0 6 128 0 3 0 5 0 3 5 105 0 6 6 1 97 2 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 19 36 38 41 35 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 853;
},
{
anchors = (
{
name = bottom;
position = "{398, 0}";
},
{
name = ogonek;
position = "{777, 10}";
},
{
name = top;
position = "{548, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"770 957 LINE",
"964 957 LINE",
"688 -72 LINE",
"494 -72 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"864 878 LINE",
"670 878 LINE",
"658 813 LINE",
"625 834 OFFCURVE",
"589 844 OFFCURVE",
"548 844 CURVE SMOOTH",
"284 844 OFFCURVE",
"28 478 OFFCURVE",
"27 202 CURVE SMOOTH",
"27 77 OFFCURVE",
"92 -27 OFFCURVE",
"206 -27 CURVE SMOOTH",
"298 -27 OFFCURVE",
"452 90 OFFCURVE",
"590 276 CURVE",
"563 284 LINE",
"539 156 LINE SMOOTH",
"520 56 OFFCURVE",
"530 -27 OFFCURVE",
"634 -27 CURVE SMOOTH",
"707 -27 OFFCURVE",
"804 38 OFFCURVE",
"917 158 CURVE",
"857 207 LINE",
"816 163 OFFCURVE",
"785 141 OFFCURVE",
"760 141 CURVE SMOOTH",
"736 141 OFFCURVE",
"733 157 OFFCURVE",
"737 180 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"578 374 OFFCURVE",
"514 299 OFFCURVE",
"422 192 CURVE SMOOTH",
"376 138 OFFCURVE",
"337 111 OFFCURVE",
"303 111 CURVE SMOOTH",
"259 111 OFFCURVE",
"245 190 OFFCURVE",
"245 262 CURVE SMOOTH",
"245 469 OFFCURVE",
"391 760 OFFCURVE",
"528 760 CURVE SMOOTH",
"573 760 OFFCURVE",
"615 738 OFFCURVE",
"640 707 CURVE",
"604 517 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
35 1 3 4 31 1 5 3 39 20 2 3 0 5 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 0 5 6 5 0 6 128 0 4 4 34 77 0 5 5 3 97 0 3 3 34 77 0 6 6 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 3 4 133 0 0 5 6 5 0 6 128 0 5 5 3 97 0 3 3 34 77 0 6 6 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 4 133 0 0 5 6 5 0 6 128 0 3 0 5 0 3 5 105 0 6 6 1 97 2 1 1 1 32 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 19 36 38 41 35 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 946;
}
);
leftKerningGroup = a;
note = a;
unicode = 0061;
},
{
glyphname = aacute;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"867 1354 LINE",
"867 33 LINE"
);
}
);
};
components = (
{
alignment = -1;
name = a;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 334, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
name = a;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 388, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = aacute;
rightKerningGroup = a;
unicode = 00E1;
},
{
glyphname = abreve;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 402, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 469, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = abreve;
rightKerningGroup = a;
unicode = 0103;
},
{
glyphname = acircumflex;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 425, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 504, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = acircumflex;
rightKerningGroup = a;
unicode = 00E2;
},
{
glyphname = acute;
lastChange = "2018-08-14 09:53:47 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"645 1301 LINE",
"552 1367 LINE",
"303 987 LINE",
"362 952 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
PUSHB[ ]\011/* 8 values pushed */
0 0 0 118 18 1 12 23 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 918;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"661 1286 LINE",
"528 1382 LINE",
"298 991 LINE",
"369 943 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 14 values pushed */
0 1 0 1 133 0 0 0 118 36 19 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 915;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = acutecomb;
lastChange = "2018-08-17 12:04:18 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{145, 856}";
},
{
name = top;
position = "{236, 1367}";
}
);
components = (
{
name = acute;
transform = "{1, 0, 0, 1, -275, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
PUSHB[ ]\011/* 8 values pushed */
0 0 0 118 18 1 12 23 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{160, 856}";
},
{
name = top;
position = "{253, 1382}";
}
);
components = (
{
name = acute;
transform = "{1, 0, 0, 1, -265, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = acutecomb;
unicode = 0301;
},
{
glyphname = adieresis;
lastChange = "2018-08-20 10:12:37 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 403, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
name = a;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 471, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = adieresis;
rightKerningGroup = a;
unicode = 00E4;
},
{
glyphname = ae;
lastChange = "2018-08-17 12:31:27 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{403, 0}";
},
{
name = top;
position = "{693, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1024 814 OFFCURVE",
"979 852 OFFCURVE",
"889 852 CURVE SMOOTH",
"528 852 OFFCURVE",
"37 481 OFFCURVE",
"37 141 CURVE SMOOTH",
"37 44 OFFCURVE",
"71 -27 OFFCURVE",
"148 -27 CURVE SMOOTH",
"244 -27 OFFCURVE",
"335 7 OFFCURVE",
"422 76 CURVE",
"453 7 OFFCURVE",
"512 -27 OFFCURVE",
"600 -27 CURVE SMOOTH",
"696 -27 OFFCURVE",
"794 37 OFFCURVE",
"893 164 CURVE",
"895 166 OFFCURVE",
"896 169 OFFCURVE",
"896 172 CURVE SMOOTH",
"896 191 OFFCURVE",
"887 200 OFFCURVE",
"870 200 CURVE SMOOTH",
"867 200 OFFCURVE",
"865 199 OFFCURVE",
"862 197 CURVE",
"787 135 OFFCURVE",
"737 99 OFFCURVE",
"712 88 CURVE SMOOTH",
"687 77 OFFCURVE",
"663 72 OFFCURVE",
"639 72 CURVE SMOOTH",
"566 72 OFFCURVE",
"529 127 OFFCURVE",
"529 238 CURVE SMOOTH",
"529 268 OFFCURVE",
"534 307 OFFCURVE",
"543 356 CURVE",
"746 393 OFFCURVE",
"1024 554 OFFCURVE",
"1024 737 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"881 563 OFFCURVE",
"720 453 OFFCURVE",
"561 420 CURVE",
"618 609 OFFCURVE",
"731 772 OFFCURVE",
"828 772 CURVE SMOOTH",
"863 772 OFFCURVE",
"881 752 OFFCURVE",
"881 711 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"397 211 OFFCURVE",
"398 188 OFFCURVE",
"402 147 CURVE",
"343 100 OFFCURVE",
"296 70 OFFCURVE",
"242 70 CURVE SMOOTH",
"195 70 OFFCURVE",
"160 113 OFFCURVE",
"160 176 CURVE SMOOTH",
"160 365 OFFCURVE",
"388 621 OFFCURVE",
"641 733 CURVE",
"647 727 LINE",
"504 588 OFFCURVE",
"397 370 OFFCURVE",
"397 215 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"232 -27 OFFCURVE",
"319 7 OFFCURVE",
"400 76 CURVE",
"437 7 OFFCURVE",
"492 -27 OFFCURVE",
"580 -27 CURVE SMOOTH",
"676 -27 OFFCURVE",
"768 37 OFFCURVE",
"856 164 CURVE",
"822 197 LINE",
"739 121 OFFCURVE",
"685 72 OFFCURVE",
"610 72 CURVE SMOOTH",
"513 72 OFFCURVE",
"477 169 OFFCURVE",
"477 280 CURVE SMOOTH",
"477 305 OFFCURVE",
"479 334 OFFCURVE",
"482 364 CURVE",
"676 400 OFFCURVE",
"928 546 OFFCURVE",
"928 722 CURVE SMOOTH",
"928 812 OFFCURVE",
"880 852 OFFCURVE",
"792 852 CURVE SMOOTH",
"442 852 OFFCURVE",
"1 504 OFFCURVE",
"1 173 CURVE SMOOTH",
"1 64 OFFCURVE",
"45 -27 OFFCURVE",
"136 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"157 70 OFFCURVE",
"121 128 OFFCURVE",
"121 197 CURVE SMOOTH",
"121 384 OFFCURVE",
"323 637 OFFCURVE",
"569 747 CURVE",
"575 739 LINE",
"444 600 OFFCURVE",
"362 402 OFFCURVE",
"362 251 CURVE SMOOTH",
"362 228 OFFCURVE",
"366 187 OFFCURVE",
"374 147 CURVE",
"319 100 OFFCURVE",
"268 70 OFFCURVE",
"214 70 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"533 602 OFFCURVE",
"640 782 OFFCURVE",
"737 782 CURVE SMOOTH",
"777 782 OFFCURVE",
"807 746 OFFCURVE",
"807 696 CURVE SMOOTH",
"807 554 OFFCURVE",
"645 434 OFFCURVE",
"493 413 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 9 values pushed */
41 35 20 14 4 0 4 1 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
41 35 14 3 5 4 20 1 0 5 2 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 4 4 3 97 0 3 3 95 77 5 1 0 0 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 4 3 97 0 3 3 95 77 0 5 5 1 97 2 1 1 1 93 77 0 0 0 1 97 2 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
45 34 36 34 41 38 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
anchors = (
{
name = bottom;
position = "{445, 0}";
},
{
name = top;
position = "{755, 856}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"296 -27 OFFCURVE",
"384 7 OFFCURVE",
"467 74 CURVE",
"512 6 OFFCURVE",
"558 -27 OFFCURVE",
"654 -27 CURVE SMOOTH",
"758 -27 OFFCURVE",
"857 39 OFFCURVE",
"953 172 CURVE",
"897 215 LINE",
"856 166 OFFCURVE",
"777 104 OFFCURVE",
"717 104 CURVE SMOOTH",
"637 104 OFFCURVE",
"594 184 OFFCURVE",
"594 282 CURVE SMOOTH",
"594 302 OFFCURVE",
"594 326 OFFCURVE",
"596 356 CURVE",
"819 418 OFFCURVE",
"1051 521 OFFCURVE",
"1051 694 CURVE SMOOTH",
"1051 799 OFFCURVE",
"985 852 OFFCURVE",
"868 852 CURVE SMOOTH",
"511 852 OFFCURVE",
"24 525 OFFCURVE",
"24 191 CURVE SMOOTH",
"24 70 OFFCURVE",
"94 -27 OFFCURVE",
"202 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"268 104 OFFCURVE",
"243 158 OFFCURVE",
"243 220 CURVE SMOOTH",
"243 391 OFFCURVE",
"398 608 OFFCURVE",
"602 715 CURVE",
"611 707 LINE",
"491 592 OFFCURVE",
"391 398 OFFCURVE",
"391 255 CURVE SMOOTH",
"391 222 OFFCURVE",
"399 182 OFFCURVE",
"410 143 CURVE",
"371 117 OFFCURVE",
"338 104 OFFCURVE",
"311 104 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"628 594 OFFCURVE",
"712 758 OFFCURVE",
"788 758 CURVE SMOOTH",
"824 758 OFFCURVE",
"848 717 OFFCURVE",
"848 675 CURVE SMOOTH",
"848 564 OFFCURVE",
"718 473 OFFCURVE",
"605 438 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 44 values pushed */
52 47 35 3 1 4 27 1 2 1 2 76 0 4 4 0 97 0 0 0 34 77 5 1 1 1 2 97 3 1 2 2 32 2 78 36 40 35 38 42 35 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1040;
}
);
leftKerningGroup = ae;
note = ae;
rightKerningGroup = e;
rightMetricsKey = "=e";
unicode = 00E6;
},
{
glyphname = ae.square;
lastChange = "2018-08-17 12:30:33 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{460, 0}";
},
{
name = top;
position = "{610, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"39 71 OFFCURVE",
"55 40 OFFCURVE",
"86 20 CURVE SMOOTH",
"117 0 OFFCURVE",
"163 -10 OFFCURVE",
"223 -10 CURVE SMOOTH",
"299 -10 OFFCURVE",
"382 34 OFFCURVE",
"472 121 CURVE SMOOTH",
"483 132 OFFCURVE",
"490 137 OFFCURVE",
"493 137 CURVE SMOOTH",
"497 137 OFFCURVE",
"502 131 OFFCURVE",
"507 119 CURVE SMOOTH",
"547 24 OFFCURVE",
"606 -23 OFFCURVE",
"683 -23 CURVE SMOOTH",
"814 -23 OFFCURVE",
"924 29 OFFCURVE",
"1013 133 CURVE",
"1016 138 OFFCURVE",
"1019 143 OFFCURVE",
"1020 150 CURVE SMOOTH",
"1021 156 OFFCURVE",
"1018 163 OFFCURVE",
"1010 170 CURVE",
"1003 177 OFFCURVE",
"995 177 OFFCURVE",
"987 170 CURVE SMOOTH",
"931 119 OFFCURVE",
"863 94 OFFCURVE",
"783 94 CURVE SMOOTH",
"723 94 OFFCURVE",
"677 128 OFFCURVE",
"646 196 CURVE SMOOTH",
"624 243 OFFCURVE",
"613 289 OFFCURVE",
"613 336 CURVE SMOOTH",
"613 366 OFFCURVE",
"618 400 OFFCURVE",
"629 438 CURVE SMOOTH",
"640 475 OFFCURVE",
"654 498 OFFCURVE",
"673 506 CURVE SMOOTH",
"1086 678 LINE SMOOTH",
"1115 690 OFFCURVE",
"1130 713 OFFCURVE",
"1130 748 CURVE SMOOTH",
"1130 778 OFFCURVE",
"1114 805 OFFCURVE",
"1082 828 CURVE SMOOTH",
"1044 856 OFFCURVE",
"1003 870 OFFCURVE",
"959 870 CURVE SMOOTH",
"867 870 OFFCURVE",
"786 844 OFFCURVE",
"715 791 CURVE SMOOTH",
"706 784 OFFCURVE",
"697 777 OFFCURVE",
"689 768 CURVE",
"684 768 OFFCURVE",
"679 774 OFFCURVE",
"673 786 CURVE SMOOTH",
"645 842 OFFCURVE",
"600 870 OFFCURVE",
"539 870 CURVE SMOOTH",
"464 870 OFFCURVE",
"381 843 OFFCURVE",
"289 790 CURVE SMOOTH",
"234 757 OFFCURVE",
"192 722 OFFCURVE",
"164 684 CURVE SMOOTH",
"138 649 OFFCURVE",
"125 617 OFFCURVE",
"125 589 CURVE SMOOTH",
"126 565 OFFCURVE",
"143 553 OFFCURVE",
"176 553 CURVE SMOOTH",
"205 553 OFFCURVE",
"228 567 OFFCURVE",
"245 595 CURVE SMOOTH",
"264 628 OFFCURVE",
"285 676 OFFCURVE",
"308 741 CURVE",
"337 776 OFFCURVE",
"386 793 OFFCURVE",
"457 793 CURVE SMOOTH",
"529 793 OFFCURVE",
"565 762 OFFCURVE",
"565 700 CURVE SMOOTH",
"565 685 OFFCURVE",
"563 668 OFFCURVE",
"559 649 CURVE SMOOTH",
"533 537 LINE SMOOTH",
"527 511 OFFCURVE",
"481 482 OFFCURVE",
"396 449 CURVE SMOOTH",
"227 384 OFFCURVE",
"122 333 OFFCURVE",
"75 242 CURVE SMOOTH",
"51 197 OFFCURVE",
"39 153 OFFCURVE",
"39 112 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"675 596 OFFCURVE",
"681 611 OFFCURVE",
"692 633 CURVE SMOOTH",
"715 678 OFFCURVE",
"747 719 OFFCURVE",
"786 756 CURVE SMOOTH",
"824 791 OFFCURVE",
"863 809 OFFCURVE",
"904 809 CURVE SMOOTH",
"924 809 OFFCURVE",
"947 801 OFFCURVE",
"972 784 CURVE SMOOTH",
"994 770 OFFCURVE",
"1005 755 OFFCURVE",
"1005 739 CURVE SMOOTH",
"1005 716 OFFCURVE",
"992 700 OFFCURVE",
"967 690 CURVE SMOOTH",
"711 582 LINE SMOOTH",
"701 578 OFFCURVE",
"693 576 OFFCURVE",
"687 576 CURVE SMOOTH",
"679 576 OFFCURVE",
"675 580 OFFCURVE",
"675 587 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"199 253 OFFCURVE",
"294 351 OFFCURVE",
"461 418 CURVE SMOOTH",
"471 422 OFFCURVE",
"479 424 OFFCURVE",
"484 424 CURVE SMOOTH",
"493 424 OFFCURVE",
"497 412 OFFCURVE",
"497 389 CURVE",
"490 298 OFFCURVE",
"486 241 OFFCURVE",
"485 219 CURVE",
"481 201 OFFCURVE",
"456 172 OFFCURVE",
"410 133 CURVE SMOOTH",
"365 94 OFFCURVE",
"326 74 OFFCURVE",
"293 74 CURVE SMOOTH",
"230 74 OFFCURVE",
"199 98 OFFCURVE",
"199 146 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"794 -23 OFFCURVE",
"899 29 OFFCURVE",
"979 133 CURVE",
"950 170 LINE",
"899 119 OFFCURVE",
"824 84 OFFCURVE",
"744 84 CURVE SMOOTH",
"631 84 OFFCURVE",
"556 238 OFFCURVE",
"556 375 CURVE SMOOTH",
"556 410 OFFCURVE",
"560 447 OFFCURVE",
"567 488 CURVE",
"1005 678 LINE SMOOTH",
"1030 689 OFFCURVE",
"1043 709 OFFCURVE",
"1043 739 CURVE SMOOTH",
"1043 820 OFFCURVE",
"932 870 OFFCURVE",
"841 870 CURVE SMOOTH",
"774 870 OFFCURVE",
"669 845 OFFCURVE",
"595 763 CURVE",
"551 849 OFFCURVE",
"496 870 OFFCURVE",
"441 870 CURVE SMOOTH",
"316 870 OFFCURVE",
"137 771 OFFCURVE",
"82 684 CURVE SMOOTH",
"62 653 OFFCURVE",
"51 622 OFFCURVE",
"51 595 CURVE SMOOTH",
"51 567 OFFCURVE",
"68 553 OFFCURVE",
"98 553 CURVE SMOOTH",
"123 553 OFFCURVE",
"137 567 OFFCURVE",
"153 595 CURVE SMOOTH",
"170 626 OFFCURVE",
"183 672 OFFCURVE",
"197 737 CURVE",
"218 772 OFFCURVE",
"294 803 OFFCURVE",
"365 803 CURVE SMOOTH",
"445 803 OFFCURVE",
"487 753 OFFCURVE",
"487 681 CURVE SMOOTH",
"487 671 OFFCURVE",
"486 660 OFFCURVE",
"484 649 CURVE SMOOTH",
"463 505 LINE",
"260 417 LINE SMOOTH",
"91 344 OFFCURVE",
"19 242 OFFCURVE",
"19 147 CURVE SMOOTH",
"19 44 OFFCURVE",
"108 -10 OFFCURVE",
"212 -10 CURVE SMOOTH",
"282 -10 OFFCURVE",
"378 42 OFFCURVE",
"463 142 CURVE",
"518 13 OFFCURVE",
"591 -23 OFFCURVE",
"663 -23 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"177 74 OFFCURVE",
"147 124 OFFCURVE",
"147 175 CURVE SMOOTH",
"147 258 OFFCURVE",
"243 363 OFFCURVE",
"455 442 CURVE",
"449 382 OFFCURVE",
"446 327 OFFCURVE",
"446 278 CURVE SMOOTH",
"446 257 OFFCURVE",
"447 238 OFFCURVE",
"448 219 CURVE",
"436 170 OFFCURVE",
"344 74 OFFCURVE",
"265 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"596 659 OFFCURVE",
"699 809 OFFCURVE",
"811 809 CURVE SMOOTH",
"869 809 OFFCURVE",
"936 767 OFFCURVE",
"936 730 CURVE SMOOTH",
"936 710 OFFCURVE",
"920 699 OFFCURVE",
"897 689 CURVE SMOOTH",
"576 546 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
95 93 2 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 10 4 1 4 10 1 131 0 1 7 4 1 7 129 0 7 0 4 7 0 129 0 0 8 2 0 93 0 8 3 1 2 8 2 101 0 9 9 6 97 0 6 6 37 77 0 4 4 5 97 0 5 5 37 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
0 10 4 1 4 10 1 131 0 1 7 4 1 7 129 0 7 0 4 7 0 129 0 6 0 9 4 6 9 109 0 0 8 2 0 93 0 8 3 1 2 8 2 101 0 4 4 5 97 0 5 5 37 4 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
98 96 90 88 39 36 38 40 45 38 38 36 42 11 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1070;
},
{
anchors = (
{
name = bottom;
position = "{514, 0}";
},
{
name = top;
position = "{664, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"856 -23 OFFCURVE",
"997 40 OFFCURVE",
"1127 158 CURVE",
"1087 208 LINE",
"1043 175 OFFCURVE",
"935 133 OFFCURVE",
"874 133 CURVE SMOOTH",
"759 133 OFFCURVE",
"691 231 OFFCURVE",
"691 364 CURVE SMOOTH",
"691 413 OFFCURVE",
"702 464 OFFCURVE",
"707 481 CURVE",
"1284 699 LINE",
"1278 837 OFFCURVE",
"1134 870 OFFCURVE",
"994 870 CURVE SMOOTH",
"926 870 OFFCURVE",
"851 856 OFFCURVE",
"757 780 CURVE",
"698 848 OFFCURVE",
"656 870 OFFCURVE",
"564 870 CURVE SMOOTH",
"489 870 OFFCURVE",
"395 850 OFFCURVE",
"292 788 CURVE SMOOTH",
"226 749 OFFCURVE",
"140 660 OFFCURVE",
"121 588 CURVE SMOOTH",
"107 535 OFFCURVE",
"129 508 OFFCURVE",
"188 508 CURVE SMOOTH",
"225 508 OFFCURVE",
"270 537 OFFCURVE",
"294 568 CURVE SMOOTH",
"320 603 OFFCURVE",
"343 674 OFFCURVE",
"359 727 CURVE",
"400 768 OFFCURVE",
"443 788 OFFCURVE",
"487 788 CURVE SMOOTH",
"552 788 OFFCURVE",
"575 752 OFFCURVE",
"555 678 CURVE SMOOTH",
"504 486 LINE",
"234 381 LINE SMOOTH",
"116 335 OFFCURVE",
"44 265 OFFCURVE",
"16 162 CURVE SMOOTH",
"12 148 OFFCURVE",
"10 134 OFFCURVE",
"10 121 CURVE SMOOTH",
"7 35 OFFCURVE",
"83 -10 OFFCURVE",
"199 -10 CURVE SMOOTH",
"289 -10 OFFCURVE",
"361 15 OFFCURVE",
"483 127 CURVE",
"519 31 OFFCURVE",
"600 -23 OFFCURVE",
"713 -23 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"261 92 OFFCURVE",
"237 132 OFFCURVE",
"252 190 CURVE SMOOTH",
"273 267 OFFCURVE",
"343 341 OFFCURVE",
"476 399 CURVE",
"468 341 OFFCURVE",
"458 247 OFFCURVE",
"457 205 CURVE",
"436 159 OFFCURVE",
"355 92 OFFCURVE",
"310 92 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"779 660 OFFCURVE",
"905 788 OFFCURVE",
"982 788 CURVE SMOOTH",
"1024 788 OFFCURVE",
"1080 766 OFFCURVE",
"1076 698 CURVE",
"744 578 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"856 -23 OFFCURVE",
"991 40 OFFCURVE",
"1111 158 CURVE",
"1067 208 LINE",
"1026 175 OFFCURVE",
"921 133 OFFCURVE",
"860 133 CURVE SMOOTH",
"733 133 OFFCURVE",
"656 252 OFFCURVE",
"656 398 CURVE SMOOTH",
"656 435 OFFCURVE",
"660 468 OFFCURVE",
"663 481 CURVE",
"1182 684 LINE SMOOTH",
"1204 693 OFFCURVE",
"1210 707 OFFCURVE",
"1210 728 CURVE SMOOTH",
"1210 829 OFFCURVE",
"1050 870 OFFCURVE",
"916 870 CURVE SMOOTH",
"848 870 OFFCURVE",
"774 856 OFFCURVE",
"687 780 CURVE",
"622 848 OFFCURVE",
"578 870 OFFCURVE",
"486 870 CURVE SMOOTH",
"342 870 OFFCURVE",
"189 797 OFFCURVE",
"108 676 CURVE SMOOTH",
"82 638 OFFCURVE",
"66 600 OFFCURVE",
"66 567 CURVE SMOOTH",
"66 528 OFFCURVE",
"91 508 OFFCURVE",
"142 508 CURVE SMOOTH",
"179 508 OFFCURVE",
"221 537 OFFCURVE",
"242 568 CURVE SMOOTH",
"265 603 OFFCURVE",
"282 674 OFFCURVE",
"293 727 CURVE",
"331 768 OFFCURVE",
"372 788 OFFCURVE",
"416 788 CURVE SMOOTH",
"470 788 OFFCURVE",
"497 763 OFFCURVE",
"497 712 CURVE SMOOTH",
"497 702 OFFCURVE",
"496 690 OFFCURVE",
"494 678 CURVE SMOOTH",
"459 486 LINE",
"199 381 LINE SMOOTH",
"87 336 OFFCURVE",
"-4 245 OFFCURVE",
"-4 138 CURVE SMOOTH",
"-4 31 OFFCURVE",
"84 -10 OFFCURVE",
"198 -10 CURVE SMOOTH",
"288 -10 OFFCURVE",
"358 15 OFFCURVE",
"470 127 CURVE",
"514 31 OFFCURVE",
"600 -23 OFFCURVE",
"713 -23 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"257 92 OFFCURVE",
"232 122 OFFCURVE",
"232 171 CURVE SMOOTH",
"232 264 OFFCURVE",
"328 349 OFFCURVE",
"439 399 CURVE",
"437 361 OFFCURVE",
"436 308 OFFCURVE",
"436 264 CURVE SMOOTH",
"436 241 OFFCURVE",
"436 220 OFFCURVE",
"437 205 CURVE",
"420 159 OFFCURVE",
"345 92 OFFCURVE",
"300 92 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"719 660 OFFCURVE",
"834 788 OFFCURVE",
"911 788 CURVE SMOOTH",
"961 788 OFFCURVE",
"1011 758 OFFCURVE",
"1011 711 CURVE SMOOTH",
"1011 700 OFFCURVE",
"1006 695 OFFCURVE",
"995 691 CURVE SMOOTH",
"691 578 LINE"
);
}
);
width = 1178;
}
);
note = ae.square;
rightKerningGroup = e;
},
{
glyphname = aeacute;
lastChange = "2018-08-17 12:31:32 +0000";
layers = (
{
components = (
{
alignment = -1;
name = ae;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 548, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 956;
},
{
components = (
{
alignment = -1;
name = ae;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 595, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1040;
}
);
leftKerningGroup = ae;
leftMetricsKey = ae;
widthMetricsKey = "=ae";
note = aeacute;
rightKerningGroup = e;
unicode = 01FD;
},
{
glyphname = aeacute.square;
lastChange = "2018-08-17 12:31:54 +0000";
layers = (
{
components = (
{
alignment = -1;
name = ae.square;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 465, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1070;
},
{
components = (
{
alignment = -1;
name = ae.square;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 504, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1178;
}
);
leftMetricsKey = "=ae.square";
note = aeacute.square;
rightMetricsKey = "=ae.square";
},
{
glyphname = afii57929;
lastChange = "2018-08-16 21:48:24 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"568 1432 OFFCURVE",
"510 1481 OFFCURVE",
"446 1481 CURVE SMOOTH",
"414 1481 OFFCURVE",
"384 1469 OFFCURVE",
"357 1446 CURVE SMOOTH",
"330 1423 OFFCURVE",
"317 1395 OFFCURVE",
"317 1360 CURVE SMOOTH",
"317 1339 OFFCURVE",
"325 1321 OFFCURVE",
"340 1308 CURVE SMOOTH",
"355 1295 OFFCURVE",
"371 1285 OFFCURVE",
"387 1278 CURVE SMOOTH",
"403 1271 OFFCURVE",
"411 1256 OFFCURVE",
"411 1235 CURVE SMOOTH",
"411 1172 OFFCURVE",
"336 1082 OFFCURVE",
"187 967 CURVE",
"178 958 OFFCURVE",
"200 932 OFFCURVE",
"208 940 CURVE",
"321 1000 OFFCURVE",
"435 1077 OFFCURVE",
"511 1200 CURVE SMOOTH",
"549 1261 OFFCURVE",
"568 1313 OFFCURVE",
"568 1356 CURVE SMOOTH"
);
}
);
};
components = (
{
name = quoteright;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 9 values pushed */
0 0 0 118 21 19 1 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 430;
},
{
components = (
{
name = quoteright;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 13 values pushed */
4 1 0 73 0 0 0 118 21 20 1 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 579;
}
);
leftKerningGroup = afii57929;
note = afii57929;
unicode = 02BC;
},
{
glyphname = afii61664;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = afii61664;
unicode = 200C;
},
{
glyphname = afii64937;
lastChange = "2018-08-16 21:49:38 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"562 1460 OFFCURVE",
"532.667 1481 OFFCURVE",
"474 1481 CURVE SMOOTH",
"415.333 1481 OFFCURVE",
"364.667 1452.667 OFFCURVE",
"322 1396 CURVE SMOOTH",
"278.667 1338.667 OFFCURVE",
"257 1277.333 OFFCURVE",
"257 1212 CURVE SMOOTH",
"257 1100 OFFCURVE",
"308.333 1008 OFFCURVE",
"411 936 CURVE",
"422.042 924.958 OFFCURVE",
"463.803 959.197 OFFCURVE",
"454 969 CURVE SMOOTH",
"394.667 1025.667 OFFCURVE",
"365 1085.333 OFFCURVE",
"365 1148 CURVE SMOOTH",
"365 1216 OFFCURVE",
"382 1257.333 OFFCURVE",
"416 1272 CURVE SMOOTH",
"484 1300 OFFCURVE",
"562 1334 OFFCURVE",
"562 1418 CURVE SMOOTH"
);
}
);
};
components = (
{
name = quotereversed;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 13 values pushed */
7 1 0 73 0 0 0 118 19 17 1 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 389;
},
{
components = (
{
name = quotereversed;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 15 values pushed */
24 14 9 3 0 73 0 0 0 118 22 21 1 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 600;
}
);
note = afii64937;
unicode = 02BD;
},
{
glyphname = agrave;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 401, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 466, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = agrave;
rightKerningGroup = a;
unicode = 00E0;
},
{
glyphname = amacron;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 406, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 468, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = amacron;
rightKerningGroup = a;
unicode = 0101;
},
{
glyphname = ampersand;
lastChange = "2018-08-16 14:48:53 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"876 -24 OFFCURVE",
"1110 170 OFFCURVE",
"1207 386 CURVE SMOOTH",
"1306 608 OFFCURVE",
"1294 712 OFFCURVE",
"1295 833 CURVE",
"1353 790 OFFCURVE",
"1405 738 OFFCURVE",
"1450 675 CURVE",
"1458 665 OFFCURVE",
"1463 660 OFFCURVE",
"1466 660 CURVE SMOOTH",
"1471 660 OFFCURVE",
"1474 661 OFFCURVE",
"1477 661 CURVE",
"1549 693 OFFCURVE",
"1647 722 OFFCURVE",
"1683 730 CURVE",
"1714 739 OFFCURVE",
"1731 773 OFFCURVE",
"1731 829 CURVE SMOOTH",
"1731 904 OFFCURVE",
"1708 941 OFFCURVE",
"1663 941 CURVE SMOOTH",
"1632 941 OFFCURVE",
"1606 920 OFFCURVE",
"1606 892 CURVE",
"1617 852 OFFCURVE",
"1622 824 OFFCURVE",
"1622 811 CURVE SMOOTH",
"1622 766 OFFCURVE",
"1607 743 OFFCURVE",
"1576 743 CURVE SMOOTH",
"1536 743 OFFCURVE",
"1477 797 OFFCURVE",
"1421 847 CURVE SMOOTH",
"1381 882 OFFCURVE",
"1343 917 OFFCURVE",
"1315 932 CURVE SMOOTH",
"1279 950 OFFCURVE",
"1245 958 OFFCURVE",
"1211 958 CURVE SMOOTH",
"1066 958 OFFCURVE",
"877 782 OFFCURVE",
"877 645 CURVE SMOOTH",
"877 593 OFFCURVE",
"903 568 OFFCURVE",
"957 568 CURVE SMOOTH",
"998 568 OFFCURVE",
"1016 585 OFFCURVE",
"1016 621 CURVE SMOOTH",
"1016 637 OFFCURVE",
"1010 657 OFFCURVE",
"1003 679 CURVE SMOOTH",
"995 705 OFFCURVE",
"986 734 OFFCURVE",
"986 760 CURVE SMOOTH",
"986 803 OFFCURVE",
"1056 884 OFFCURVE",
"1146 884 CURVE SMOOTH",
"1192 884 OFFCURVE",
"1230 871 OFFCURVE",
"1258 845 CURVE",
"1247 557 OFFCURVE",
"1122 305 OFFCURVE",
"928 181 CURVE SMOOTH",
"828 116 OFFCURVE",
"729 83 OFFCURVE",
"634 83 CURVE SMOOTH",
"539 83 OFFCURVE",
"453 114 OFFCURVE",
"381 174 CURVE SMOOTH",
"307 236 OFFCURVE",
"271 325 OFFCURVE",
"271 442 CURVE SMOOTH",
"271 461 LINE",
"929 916 OFFCURVE",
"1256 1249 OFFCURVE",
"1256 1462 CURVE SMOOTH",
"1256 1533 OFFCURVE",
"1228 1568 OFFCURVE",
"1170 1568 CURVE SMOOTH",
"1128 1568 OFFCURVE",
"1096 1533 OFFCURVE",
"1096 1487 CURVE SMOOTH",
"1096 1475 OFFCURVE",
"1103 1460 OFFCURVE",
"1118 1443 CURVE",
"1135 1422 OFFCURVE",
"1143 1402 OFFCURVE",
"1143 1380 CURVE SMOOTH",
"1143 1252 OFFCURVE",
"932 1028 OFFCURVE",
"769 899 CURVE",
"728 972 OFFCURVE",
"710 986 OFFCURVE",
"643 986 CURVE SMOOTH",
"470 986 OFFCURVE",
"259 776 OFFCURVE",
"196 609 CURVE SMOOTH",
"166 527 OFFCURVE",
"150 451 OFFCURVE",
"150 385 CURVE SMOOTH",
"150 135 OFFCURVE",
"318 -24 OFFCURVE",
"584 -24 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"285 619 OFFCURVE",
"344 774 OFFCURVE",
"441 853 CURVE SMOOTH",
"486 889 OFFCURVE",
"523 908 OFFCURVE",
"551 908 CURVE SMOOTH",
"601 908 OFFCURVE",
"627 885 OFFCURVE",
"627 840 CURVE SMOOTH",
"627 823 OFFCURVE",
"626 806 OFFCURVE",
"625 790 CURVE",
"547 720 OFFCURVE",
"428 631 OFFCURVE",
"273 525 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"876 -24 OFFCURVE",
"1108 169 OFFCURVE",
"1202 386 CURVE SMOOTH",
"1277 560 OFFCURVE",
"1297 666 OFFCURVE",
"1297 764 CURVE SMOOTH",
"1297 787 OFFCURVE",
"1297 810 OFFCURVE",
"1295 833 CURVE",
"1353 790 OFFCURVE",
"1405 739 OFFCURVE",
"1450 675 CURVE SMOOTH",
"1459 662 OFFCURVE",
"1470 658 OFFCURVE",
"1477 661 CURVE SMOOTH",
"1550 693 OFFCURVE",
"1647 722 OFFCURVE",
"1683 730 CURVE SMOOTH",
"1714 737 OFFCURVE",
"1731 773 OFFCURVE",
"1731 829 CURVE SMOOTH",
"1731 904 OFFCURVE",
"1708 941 OFFCURVE",
"1663 941 CURVE SMOOTH",
"1632 941 OFFCURVE",
"1606 920 OFFCURVE",
"1606 892 CURVE",
"1617 852 OFFCURVE",
"1622 824 OFFCURVE",
"1622 811 CURVE SMOOTH",
"1622 766 OFFCURVE",
"1607 743 OFFCURVE",
"1576 743 CURVE SMOOTH",
"1536 743 OFFCURVE",
"1476 796 OFFCURVE",
"1421 847 CURVE SMOOTH",
"1353 910 OFFCURVE",
"1300 958 OFFCURVE",
"1211 958 CURVE SMOOTH",
"1066 958 OFFCURVE",
"877 782 OFFCURVE",
"877 645 CURVE SMOOTH",
"877 593 OFFCURVE",
"903 568 OFFCURVE",
"957 568 CURVE SMOOTH",
"998 568 OFFCURVE",
"1016 585 OFFCURVE",
"1016 621 CURVE SMOOTH",
"1016 637 OFFCURVE",
"1011 657 OFFCURVE",
"1003 679 CURVE SMOOTH",
"994 705 OFFCURVE",
"986 734 OFFCURVE",
"986 760 CURVE SMOOTH",
"986 803 OFFCURVE",
"1056 884 OFFCURVE",
"1146 884 CURVE SMOOTH",
"1192 884 OFFCURVE",
"1230 871 OFFCURVE",
"1258 845 CURVE",
"1238 411 OFFCURVE",
"957 83 OFFCURVE",
"634 83 CURVE SMOOTH",
"414 83 OFFCURVE",
"271 224 OFFCURVE",
"271 461 CURVE",
"543 649 OFFCURVE",
"759 816 OFFCURVE",
"918 963 CURVE SMOOTH",
"1144 1171 OFFCURVE",
"1256 1337 OFFCURVE",
"1256 1462 CURVE SMOOTH",
"1256 1533 OFFCURVE",
"1228 1568 OFFCURVE",
"1170 1568 CURVE SMOOTH",
"1128 1568 OFFCURVE",
"1096 1533 OFFCURVE",
"1096 1497 CURVE SMOOTH",
"1096 1475 OFFCURVE",
"1103 1460 OFFCURVE",
"1118 1443 CURVE SMOOTH",
"1136 1422 OFFCURVE",
"1143 1402 OFFCURVE",
"1143 1380 CURVE SMOOTH",
"1143 1252 OFFCURVE",
"932 1028 OFFCURVE",
"769 899 CURVE",
"728 972 OFFCURVE",
"710 986 OFFCURVE",
"643 986 CURVE SMOOTH",
"470 986 OFFCURVE",
"259 776 OFFCURVE",
"196 609 CURVE SMOOTH",
"165 527 OFFCURVE",
"150 451 OFFCURVE",
"150 385 CURVE SMOOTH",
"150 135 OFFCURVE",
"318 -24 OFFCURVE",
"584 -24 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"285 619 OFFCURVE",
"344 774 OFFCURVE",
"441 853 CURVE SMOOTH",
"486 889 OFFCURVE",
"523 908 OFFCURVE",
"551 908 CURVE SMOOTH",
"601 908 OFFCURVE",
"627 885 OFFCURVE",
"627 840 CURVE SMOOTH",
"627 823 OFFCURVE",
"626 806 OFFCURVE",
"625 790 CURVE",
"547 720 OFFCURVE",
"428 631 OFFCURVE",
"273 525 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 90 values pushed */
25 1 9 8 69 1 4 9 67 47 10 3 7 4 80 38 2 3 5 4 76 0 2 1 2 133 0 8 6 9 6 8 9 128 0 7 4 5 4 7 5 128 0 5 3 4 5 3 126 0 1 0 9 4 1 9 105 0 6 0 4 7 6 4 106 0 3 3 0 97 0 0 0 93 0 78 77 75 37 34 35 37 36 39 42 37 46 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1577;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"900 -29 OFFCURVE",
"1136 161 OFFCURVE",
"1243 370 CURVE SMOOTH",
"1296 474 OFFCURVE",
"1323 577 OFFCURVE",
"1323 678 CURVE SMOOTH",
"1323 708 OFFCURVE",
"1320 742 OFFCURVE",
"1313 780 CURVE",
"1369 728 OFFCURVE",
"1409 686 OFFCURVE",
"1434 655 CURVE SMOOTH",
"1460 622 OFFCURVE",
"1481 614 OFFCURVE",
"1514 627 CURVE SMOOTH",
"1566 648 OFFCURVE",
"1662 686 OFFCURVE",
"1706 692 CURVE SMOOTH",
"1754 699 OFFCURVE",
"1796 746 OFFCURVE",
"1796 834 CURVE SMOOTH",
"1796 898 OFFCURVE",
"1754 973 OFFCURVE",
"1694 973 CURVE SMOOTH",
"1634 973 OFFCURVE",
"1581 942 OFFCURVE",
"1581 887 CURVE",
"1599 852 OFFCURVE",
"1631 804 OFFCURVE",
"1631 772 CURVE SMOOTH",
"1631 751 OFFCURVE",
"1624 737 OFFCURVE",
"1601 737 CURVE SMOOTH",
"1570 737 OFFCURVE",
"1486 855 OFFCURVE",
"1451 891 CURVE SMOOTH",
"1389 954 OFFCURVE",
"1330 985 OFFCURVE",
"1253 985 CURVE SMOOTH",
"1070 985 OFFCURVE",
"872 810 OFFCURVE",
"872 651 CURVE SMOOTH",
"872 583 OFFCURVE",
"931 537 OFFCURVE",
"991 537 CURVE SMOOTH",
"1054 537 OFFCURVE",
"1102 571 OFFCURVE",
"1102 623 CURVE SMOOTH",
"1102 664 OFFCURVE",
"1076 683 OFFCURVE",
"1052 700 CURVE SMOOTH",
"1031 715 OFFCURVE",
"1012 730 OFFCURVE",
"1012 758 CURVE SMOOTH",
"1012 790 OFFCURVE",
"1090 842 OFFCURVE",
"1163 842 CURVE SMOOTH",
"1201 842 OFFCURVE",
"1229 834 OFFCURVE",
"1247 819 CURVE",
"1236 486 OFFCURVE",
"976 154 OFFCURVE",
"651 154 CURVE SMOOTH",
"447 154 OFFCURVE",
"315 272 OFFCURVE",
"315 455 CURVE",
"678 705 OFFCURVE",
"852 834 OFFCURVE",
"1032 1006 CURVE SMOOTH",
"1175 1142 OFFCURVE",
"1300 1315 OFFCURVE",
"1300 1432 CURVE SMOOTH",
"1300 1505 OFFCURVE",
"1254 1573 OFFCURVE",
"1178 1573 CURVE SMOOTH",
"1098 1573 OFFCURVE",
"1051 1516 OFFCURVE",
"1051 1464 CURVE SMOOTH",
"1051 1438 OFFCURVE",
"1059 1416 OFFCURVE",
"1075 1399 CURVE SMOOTH",
"1090 1381 OFFCURVE",
"1098 1366 OFFCURVE",
"1098 1354 CURVE SMOOTH",
"1098 1242 OFFCURVE",
"923 1026 OFFCURVE",
"778 911 CURVE",
"765 966 OFFCURVE",
"711 1016 OFFCURVE",
"643 1016 CURVE SMOOTH",
"444 1016 OFFCURVE",
"220 801 OFFCURVE",
"154 631 CURVE SMOOTH",
"121 546 OFFCURVE",
"104 469 OFFCURVE",
"104 401 CURVE SMOOTH",
"104 125 OFFCURVE",
"308 -29 OFFCURVE",
"608 -29 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"318 618 OFFCURVE",
"365 752 OFFCURVE",
"428 830 CURVE SMOOTH",
"458 867 OFFCURVE",
"492 891 OFFCURVE",
"526 891 CURVE SMOOTH",
"554 891 OFFCURVE",
"590 864 OFFCURVE",
"590 817 CURVE SMOOTH",
"589 795 OFFCURVE",
"583 768 OFFCURVE",
"571 737 CURVE",
"444 630 OFFCURVE",
"359 562 OFFCURVE",
"315 532 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
10 1 0 1 7 1 10 5 75 31 2 6 3 92 25 2 2 4 4 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 20 values pushed */
10 1 0 1 7 1 10 7 75 31 2 6 3 92 25 2 2 4 4 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 1 0 1 133 0 6 3 8 3 6 8 128 0 8 4 3 8 4 126 0 4 2 3 4 2 126 0 0 0 10 3 0 10 105 7 1 5 0 3 6 5 3 106 0 2 2 9 97 0 9 9 32 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
0 1 0 1 133 0 7 5 10 5 7 10 128 0 6 3 8 3 6 8 128 0 8 4 3 8 4 126 0 4 2 3 4 2 126 0 0 0 10 3 0 10 105 0 5 0 3 6 5 3 106 0 2 2 9 97 0 9 9 32 9 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
90 88 82 80 41 37 34 36 40 35 42 42 35 11 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1656;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = aring;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni030A;
transform = "{1, 0, 0, 1, 410, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = uni030A;
transform = "{1, 0, 0, 1, 476, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = aring;
rightKerningGroup = a;
unicode = 00E5;
},
{
glyphname = asciicircum;
lastChange = "2018-08-16 10:53:27 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"351 535 LINE",
"671 1257 LINE",
"635 1257 LINE",
"955 535 LINE",
"1091 535 LINE",
"706 1372 LINE",
"600 1372 LINE",
"213 535 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1227;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"250 549 LINE",
"545 1165 LINE",
"557 1165 LINE",
"850 549 LINE",
"1014 549 LINE",
"588 1403 LINE",
"520 1403 LINE",
"94 549 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"250 549 LINE",
"573 1224 LINE",
"529 1224 LINE",
"850 549 LINE",
"1014 549 LINE",
"588 1403 LINE",
"520 1403 LINE",
"94 549 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 19 16 3 8 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1024;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = asciitilde;
lastChange = "2018-08-16 14:58:05 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"544 346 OFFCURVE",
"606 372 OFFCURVE",
"638 402 CURVE SMOOTH",
"676 437 OFFCURVE",
"713 486 OFFCURVE",
"735 508 CURVE",
"710 531 LINE",
"668 497 OFFCURVE",
"631 453 OFFCURVE",
"571 453 CURVE SMOOTH",
"545 453 OFFCURVE",
"501 468 OFFCURVE",
"438 498 CURVE SMOOTH",
"375 528 OFFCURVE",
"325 543 OFFCURVE",
"290 543 CURVE SMOOTH",
"206 543 OFFCURVE",
"161 525 OFFCURVE",
"107 476 CURVE SMOOTH",
"96 466 OFFCURVE",
"73 439 OFFCURVE",
"36 396 CURVE",
"59 367 LINE",
"114 414 OFFCURVE",
"157 438 OFFCURVE",
"188 438 CURVE SMOOTH",
"218 438 OFFCURVE",
"266 423 OFFCURVE",
"332 392 CURVE SMOOTH",
"397 361 OFFCURVE",
"447 346 OFFCURVE",
"481 346 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
PUSHB[ ]\011/* 6 values pushed */
6 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 3 1 0 3 89 4 1 2 0 1 0 2 1 105 0 3 3 0 97 0 0 3 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 4 2 4 133 0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
49 17 24 17 18 5 12 27 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 741;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"544 346 OFFCURVE",
"606 382 OFFCURVE",
"638 412 CURVE SMOOTH",
"676 447 OFFCURVE",
"713 496 OFFCURVE",
"735 518 CURVE",
"680 561 LINE",
"638 527 OFFCURVE",
"601 483 OFFCURVE",
"541 483 CURVE SMOOTH",
"515 483 OFFCURVE",
"471 498 OFFCURVE",
"408 528 CURVE SMOOTH",
"345 558 OFFCURVE",
"295 573 OFFCURVE",
"260 573 CURVE SMOOTH",
"176 573 OFFCURVE",
"131 545 OFFCURVE",
"77 496 CURVE SMOOTH",
"66 486 OFFCURVE",
"43 459 OFFCURVE",
"6 416 CURVE",
"59 367 LINE",
"114 414 OFFCURVE",
"157 438 OFFCURVE",
"188 438 CURVE SMOOTH",
"218 438 OFFCURVE",
"266 423 OFFCURVE",
"332 392 CURVE SMOOTH",
"397 361 OFFCURVE",
"447 346 OFFCURVE",
"481 346 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 0 0 3 0 81 33 41 33 36 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 741;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = asterisk;
lastChange = "2018-08-15 12:25:44 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"365 694 LINE",
"426 982 LINE",
"642 841 LINE",
"691 903 LINE",
"476 1044 LINE",
"754 1187 LINE",
"731 1249 LINE",
"452 1105 LINE",
"512 1384 LINE",
"440 1384 LINE",
"381 1107 LINE",
"166 1248 LINE",
"117 1186 LINE",
"333 1044 LINE",
"60 904 LINE",
"83 842 LINE",
"354 981 LINE",
"293 694 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 13 12 11 10 9 8 7 4 3 2 1 13 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 92 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 21 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 807;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"387 641 LINE",
"446 915 LINE",
"657 776 LINE",
"733 872 LINE",
"522 1012 LINE",
"793 1151 LINE",
"758 1247 LINE",
"487 1108 LINE",
"547 1384 LINE",
"436 1384 LINE",
"377 1108 LINE",
"170 1243 LINE",
"94 1147 LINE",
"301 1012 LINE",
"35 874 LINE",
"70 778 LINE",
"336 915 LINE",
"276 641 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 15 14 11 10 9 8 7 6 5 2 1 13 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 31 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 827;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = at;
lastChange = "2018-08-16 14:54:53 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"968 -33 OFFCURVE",
"1100 2 OFFCURVE",
"1211 72 CURVE",
"1194 103 LINE",
"1079 55 OFFCURVE",
"973 19 OFFCURVE",
"877 19 CURVE SMOOTH",
"450 19 OFFCURVE",
"246 311 OFFCURVE",
"246 602 CURVE SMOOTH",
"246 994 OFFCURVE",
"513 1335 OFFCURVE",
"936 1335 CURVE SMOOTH",
"1229 1335 OFFCURVE",
"1470 1119 OFFCURVE",
"1470 844 CURVE SMOOTH",
"1470 589 OFFCURVE",
"1277 416 OFFCURVE",
"1018 416 CURVE SMOOTH",
"990 416 OFFCURVE",
"976 436 OFFCURVE",
"976 467 CURVE SMOOTH",
"976 483 OFFCURVE",
"979 508 OFFCURVE",
"986 532 CURVE SMOOTH",
"1127 1024 LINE",
"1053 1024 LINE",
"1037 973 LINE",
"1004 1000 OFFCURVE",
"971 1014 OFFCURVE",
"936 1014 CURVE SMOOTH",
"743 1014 OFFCURVE",
"541 691 OFFCURVE",
"541 487 CURVE SMOOTH",
"541 402 OFFCURVE",
"562 360 OFFCURVE",
"623 360 CURVE SMOOTH",
"704 360 OFFCURVE",
"805 440 OFFCURVE",
"926 600 CURVE",
"934 596 LINE",
"900 492 OFFCURVE",
"885 441 OFFCURVE",
"885 422 CURVE SMOOTH",
"885 366 OFFCURVE",
"930 358 OFFCURVE",
"1008 358 CURVE SMOOTH",
"1329 358 OFFCURVE",
"1538 584 OFFCURVE",
"1538 852 CURVE SMOOTH",
"1538 1144 OFFCURVE",
"1307 1384 OFFCURVE",
"934 1384 CURVE SMOOTH",
"498 1384 OFFCURVE",
"125 1061 OFFCURVE",
"125 600 CURVE SMOOTH",
"125 193 OFFCURVE",
"442 -33 OFFCURVE",
"815 -33 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"646 432 OFFCURVE",
"631 461 OFFCURVE",
"631 512 CURVE SMOOTH",
"631 667 OFFCURVE",
"769 975 OFFCURVE",
"916 975 CURVE SMOOTH",
"981 975 OFFCURVE",
"1014 944 OFFCURVE",
"1014 901 CURVE",
"992 824 LINE SMOOTH",
"962 716 OFFCURVE",
"927 657 OFFCURVE",
"855 574 CURVE SMOOTH",
"778 486 OFFCURVE",
"721 432 OFFCURVE",
"686 432 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
17 1 9 2 58 7 2 10 9 42 1 6 0 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 5 2 5 3 2 128 0 2 0 9 10 2 9 105 0 10 4 0 10 89 0 4 1 1 0 6 4 0 106 0 5 5 8 97 0 8 8 98 77 0 6 6 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 3 5 2 5 3 2 128 0 8 0 5 3 8 5 105 0 2 0 9 10 2 9 105 0 10 4 0 10 89 0 4 1 1 0 6 4 0 106 0 6 6 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 3 5 2 5 3 2 128 0 8 0 5 3 8 5 105 0 2 0 9 10 2 9 105 0 10 0 1 0 10 1 105 0 4 0 0 6 4 0 106 0 6 6 7 97 0 7 7 93 7 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
66 64 61 59 36 38 36 37 37 35 35 37 34 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1531;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1004 1014 OFFCURVE",
"943 1014 QCURVE SMOOTH",
"835 1014 OFFCURVE",
"632 829 OFFCURVE",
"521 590 OFFCURVE",
"521 494 QCURVE SMOOTH",
"521 440 OFFCURVE",
"575 358 OFFCURVE",
"634 358 QCURVE SMOOTH",
"737 358 OFFCURVE",
"884 524 QCURVE",
"894 518 LINE",
"875 467 OFFCURVE",
"875 436 QCURVE SMOOTH",
"876 352 OFFCURVE",
"1019 352 QCURVE SMOOTH",
"1267 352 OFFCURVE",
"1570 647 OFFCURVE",
"1570 848 QCURVE SMOOTH",
"1570 1067 OFFCURVE",
"1232 1384 OFFCURVE",
"945 1384 QCURVE SMOOTH",
"726 1384 OFFCURVE",
"351 1198 OFFCURVE",
"116 835 OFFCURVE",
"116 602 QCURVE SMOOTH",
"116 446 OFFCURVE",
"241 197 OFFCURVE",
"445 45 OFFCURVE",
"693 -33 OFFCURVE",
"826 -33 QCURVE SMOOTH",
"1062 -33 OFFCURVE",
"1238 76 QCURVE",
"1254 84 OFFCURVE",
"1227 135 OFFCURVE",
"1211 127 QCURVE",
"1023 55 OFFCURVE",
"888 55 QCURVE SMOOTH",
"757 55 OFFCURVE",
"548 127 OFFCURVE",
"419 240 OFFCURVE",
"333 387 OFFCURVE",
"298 530 OFFCURVE",
"298 604 QCURVE SMOOTH",
"298 786 OFFCURVE",
"445 1100 OFFCURVE",
"739 1298 OFFCURVE",
"927 1298 QCURVE SMOOTH",
"1148 1298 OFFCURVE",
"1441 1039 OFFCURVE",
"1441 840 QCURVE SMOOTH",
"1441 662 OFFCURVE",
"1211 430 OFFCURVE",
"1045 430 QCURVE SMOOTH",
"1002 430 OFFCURVE",
"1031 532 QCURVE SMOOTH",
"1172 1010 LINE",
"1179 1026 OFFCURVE",
"1125 1053 OFFCURVE",
"1109 1053 QCURVE SMOOTH",
"1062 1052 OFFCURVE",
"1056 1034 QCURVE",
"1035 983 LINE"
);
},
{
closed = 1;
nodes = (
"993 967 OFFCURVE",
"1011 920 QCURVE",
"968 772 LINE SMOOTH",
"930 650 OFFCURVE",
"869 580 QCURVE SMOOTH",
"754 449 OFFCURVE",
"703 449 QCURVE SMOOTH",
"673 448 OFFCURVE",
"673 518 QCURVE SMOOTH",
"673 584 OFFCURVE",
"742 793 OFFCURVE",
"866 967 OFFCURVE",
"927 967 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"983 -33 OFFCURVE",
"1121 3 OFFCURVE",
"1238 76 CURVE",
"1211 127 LINE",
"1101 79 OFFCURVE",
"993 55 OFFCURVE",
"888 55 CURVE SMOOTH",
"539 55 OFFCURVE",
"298 267 OFFCURVE",
"298 604 CURVE SMOOTH",
"298 989 OFFCURVE",
"557 1298 OFFCURVE",
"927 1298 CURVE SMOOTH",
"1216 1298 OFFCURVE",
"1441 1116 OFFCURVE",
"1441 840 CURVE SMOOTH",
"1441 614 OFFCURVE",
"1277 430 OFFCURVE",
"1045 430 CURVE SMOOTH",
"1030 430 OFFCURVE",
"1023 444 OFFCURVE",
"1023 471 CURVE SMOOTH",
"1023 491 OFFCURVE",
"1025 511 OFFCURVE",
"1031 532 CURVE SMOOTH",
"1179 1034 LINE",
"1056 1034 LINE",
"1035 983 LINE",
"1014 1004 OFFCURVE",
"984 1014 OFFCURVE",
"943 1014 CURVE SMOOTH",
"732 1014 OFFCURVE",
"521 712 OFFCURVE",
"521 494 CURVE SMOOTH",
"521 403 OFFCURVE",
"559 358 OFFCURVE",
"634 358 CURVE SMOOTH",
"699 358 OFFCURVE",
"783 413 OFFCURVE",
"884 524 CURVE",
"894 518 LINE",
"881 481 OFFCURVE",
"875 454 OFFCURVE",
"875 436 CURVE SMOOTH",
"875 368 OFFCURVE",
"932 352 OFFCURVE",
"1019 352 CURVE SMOOTH",
"1325 352 OFFCURVE",
"1570 556 OFFCURVE",
"1570 848 CURVE SMOOTH",
"1570 1175 OFFCURVE",
"1297 1384 OFFCURVE",
"945 1384 CURVE SMOOTH",
"476 1384 OFFCURVE",
"116 1058 OFFCURVE",
"116 602 CURVE SMOOTH",
"116 211 OFFCURVE",
"425 -33 OFFCURVE",
"826 -33 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"683 449 OFFCURVE",
"673 471 OFFCURVE",
"673 518 CURVE SMOOTH",
"673 665 OFFCURVE",
"807 967 OFFCURVE",
"927 967 CURVE SMOOTH",
"970 967 OFFCURVE",
"998 951 OFFCURVE",
"1011 920 CURVE",
"968 772 LINE SMOOTH",
"943 692 OFFCURVE",
"910 628 OFFCURVE",
"869 580 CURVE SMOOTH",
"794 493 OFFCURVE",
"738 449 OFFCURVE",
"703 449 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
51 1 1 9 1 76 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 6 values pushed */
51 1 10 9 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 0 2 8 2 0 8 128 0 8 11 1 9 1 8 9 105 10 1 1 7 1 6 3 1 6 106 0 2 2 5 97 0 5 5 37 77 0 3 3 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
0 0 2 8 2 0 8 128 0 8 11 1 9 10 8 9 105 0 10 1 6 10 89 0 1 7 1 6 3 1 6 106 0 2 2 5 97 0 5 5 37 77 0 3 3 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 0 2 8 2 0 8 128 0 5 0 2 0 5 2 105 0 8 11 1 9 10 8 9 105 0 10 1 6 10 89 0 1 7 1 6 3 1 6 106 0 3 3 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
0 0 2 8 2 0 8 128 0 5 0 2 0 5 2 105 0 8 11 1 9 10 8 9 105 0 10 0 7 6 10 7 105 0 1 0 6 3 1 6 106 0 3 3 4 97 0 4 4 32 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
64 63 70 68 63 75 64 75 37 37 36 39 37 40 36 37 18 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1573;
}
);
note = at;
unicode = 0040;
},
{
glyphname = atilde;
lastChange = "2018-08-20 10:12:26 +0000";
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 400, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 853;
},
{
components = (
{
alignment = -1;
name = a;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 470, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftKerningGroup = a;
leftMetricsKey = "=a";
widthMetricsKey = "=a";
note = atilde;
rightKerningGroup = a;
unicode = 00E3;
},
{
glyphname = b;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1 26 LINE",
"124 26 LINE",
"470 1319 LINE",
"359 1361 LINE"
);
},
{
closed = 0;
nodes = (
"160 938 LINE",
"444 938 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"464 -27 OFFCURVE",
"690 284 OFFCURVE",
"690 603 CURVE SMOOTH",
"690 752 OFFCURVE",
"652 852 OFFCURVE",
"515 852 CURVE SMOOTH",
"416 852 OFFCURVE",
"282 767 OFFCURVE",
"125 535 CURVE",
"184 553 LINE",
"348 1468 LINE",
"334 1485 LINE",
"258 1454 OFFCURVE",
"180 1430 OFFCURVE",
"117 1430 CURVE",
"121 1378 LINE",
"179 1378 OFFCURVE",
"207 1345 OFFCURVE",
"207 1278 CURVE SMOOTH",
"207 1259 OFFCURVE",
"205 1232 OFFCURVE",
"199 1200 CURVE SMOOTH",
"23 225 LINE SMOOTH",
"20 205 OFFCURVE",
"18 183 OFFCURVE",
"18 164 CURVE SMOOTH",
"18 46 OFFCURVE",
"56 -27 OFFCURVE",
"170 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"149 45 OFFCURVE",
"106 115 OFFCURVE",
"119 190 CURVE SMOOTH",
"155 391 LINE SMOOTH",
"166 451 OFFCURVE",
"185 515 OFFCURVE",
"240 594 CURVE SMOOTH",
"291 667 OFFCURVE",
"375 754 OFFCURVE",
"463 754 CURVE SMOOTH",
"538 754 OFFCURVE",
"571 665 OFFCURVE",
"571 570 CURVE SMOOTH",
"571 354 OFFCURVE",
"398 45 OFFCURVE",
"228 45 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 1 6 5 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 3 3 94 77 0 1 1 2 97 0 2 2 98 77 0 5 5 4 97 0 4 4 95 77 0 6 6 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 1 4 2 1 105 0 3 3 94 77 0 5 5 4 97 0 4 4 95 77 0 6 6 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
36 34 38 33 34 23 34 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 752;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-16 -39 LINE",
"177 -39 LINE",
"575 1445 LINE",
"381 1445 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"557 -27 OFFCURVE",
"803 246 OFFCURVE",
"803 557 CURVE SMOOTH",
"803 730 OFFCURVE",
"741 852 OFFCURVE",
"576 852 CURVE SMOOTH",
"486 852 OFFCURVE",
"379 777 OFFCURVE",
"263 611 CURVE",
"294 599 LINE",
"449 1461 LINE",
"425 1487 LINE",
"345 1455 OFFCURVE",
"215 1432 OFFCURVE",
"137 1432 CURVE",
"144 1360 LINE",
"192 1360 OFFCURVE",
"215 1328 OFFCURVE",
"215 1263 CURVE SMOOTH",
"215 1249 OFFCURVE",
"213 1232 OFFCURVE",
"210 1214 CURVE SMOOTH",
"40 262 LINE SMOOTH",
"36 241 OFFCURVE",
"34 221 OFFCURVE",
"34 200 CURVE SMOOTH",
"34 58 OFFCURVE",
"85 -27 OFFCURVE",
"212 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"240 63 OFFCURVE",
"205 109 OFFCURVE",
"216 172 CURVE SMOOTH",
"267 459 LINE SMOOTH",
"275 501 OFFCURVE",
"303 580 OFFCURVE",
"335 625 CURVE SMOOTH",
"388 700 OFFCURVE",
"443 731 OFFCURVE",
"507 731 CURVE SMOOTH",
"573 731 OFFCURVE",
"584 646 OFFCURVE",
"584 560 CURVE SMOOTH",
"584 323 OFFCURVE",
"463 63 OFFCURVE",
"294 63 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
20 1 2 3 10 1 4 1 24 1 6 5 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 3 3 33 77 0 1 1 2 97 0 2 2 37 77 0 5 5 4 97 0 4 4 34 77 0 6 6 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 1 4 2 1 105 0 3 3 33 77 0 5 5 4 97 0 4 4 34 77 0 6 6 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
36 34 38 33 33 39 34 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 851;
}
);
leftKerningGroup = b;
note = b;
rightKerningGroup = b;
unicode = 0062;
},
{
glyphname = backslash;
lastChange = "2018-08-16 15:21:26 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"713 25 LINE",
"106 1475 LINE",
"4 1432 LINE",
"612 -12 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
8 0 2 0 1 1 76 0 1 1 94 77 0 0 0 93 0 78 23 21 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 717;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"748 55 LINE",
"119 1464 LINE",
"-12 1405 LINE",
"614 -4 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 3 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 714;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = bar;
lastChange = "2018-08-16 14:58:57 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"315 -313 LINE",
"315 1434 LINE",
"233 1434 LINE",
"233 -313 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 537;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"391 -334 LINE",
"391 1434 LINE",
"197 1434 LINE",
"197 -334 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 534;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = braceleft;
lastChange = "2018-08-16 15:19:58 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"576 -286 LINE",
"386 -286 OFFCURVE",
"308 -240 OFFCURVE",
"308 -99 CURVE SMOOTH",
"308 -69 OFFCURVE",
"311 -34 OFFCURVE",
"318 5 CURVE SMOOTH",
"368 287 LINE SMOOTH",
"383 373 OFFCURVE",
"391 434 OFFCURVE",
"391 471 CURVE SMOOTH",
"391 559 OFFCURVE",
"345 612 OFFCURVE",
"243 616 CURVE",
"245 624 LINE",
"333 634 OFFCURVE",
"404 678 OFFCURVE",
"440 753 CURVE SMOOTH",
"450 774 OFFCURVE",
"467 847 OFFCURVE",
"489 973 CURVE SMOOTH",
"533 1220 LINE SMOOTH",
"565 1402 OFFCURVE",
"679 1461 OFFCURVE",
"885 1461 CURVE",
"891 1493 LINE",
"565 1493 OFFCURVE",
"481 1488 OFFCURVE",
"422 1157 CURVE SMOOTH",
"361 812 LINE SMOOTH",
"340 691 OFFCURVE",
"244 629 OFFCURVE",
"88 629 CURVE",
"85 607 LINE",
"225 607 OFFCURVE",
"296 556 OFFCURVE",
"296 461 CURVE SMOOTH",
"296 448 OFFCURVE",
"295 436 OFFCURVE",
"292 421 CURVE SMOOTH",
"212 -30 LINE SMOOTH",
"205 -70 OFFCURVE",
"201 -104 OFFCURVE",
"201 -134 CURVE SMOOTH",
"201 -308 OFFCURVE",
"322 -319 OFFCURVE",
"570 -319 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
30 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
21 20 34 2 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 573;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"569 -244 LINE",
"407 -242 OFFCURVE",
"349 -210 OFFCURVE",
"349 -93 CURVE SMOOTH",
"349 -57 OFFCURVE",
"355 -14 OFFCURVE",
"364 39 CURVE SMOOTH",
"411 305 LINE SMOOTH",
"421 363 OFFCURVE",
"428 410 OFFCURVE",
"428 445 CURVE SMOOTH",
"428 517 OFFCURVE",
"394 571 OFFCURVE",
"338 611 CURVE",
"339 616 LINE",
"402 649 OFFCURVE",
"446 694 OFFCURVE",
"473 750 CURVE SMOOTH",
"491 788 OFFCURVE",
"508 855 OFFCURVE",
"525 950 CURVE SMOOTH",
"566 1184 LINE SMOOTH",
"598 1369 OFFCURVE",
"676 1417 OFFCURVE",
"862 1417 CURVE",
"873 1493 LINE",
"521 1493 OFFCURVE",
"403 1458 OFFCURVE",
"344 1122 CURVE SMOOTH",
"287 797 LINE SMOOTH",
"269 695 OFFCURVE",
"217 647 OFFCURVE",
"107 647 CURVE",
"96 586 LINE",
"183 584 OFFCURVE",
"227 553 OFFCURVE",
"227 478 CURVE SMOOTH",
"227 464 OFFCURVE",
"225 448 OFFCURVE",
"222 430 CURVE SMOOTH",
"148 6 LINE SMOOTH",
"141 -35 OFFCURVE",
"137 -71 OFFCURVE",
"137 -103 CURVE SMOOTH",
"137 -297 OFFCURVE",
"275 -319 OFFCURVE",
"556 -319 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
12 1 3 4 1 76 0 4 0 3 1 4 3 105 0 1 0 2 1 2 101 0 0 0 5 97 6 1 5 5 33 0 78 0 0 0 50 0 48 34 25 66 30 34 7 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 782;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
lastChange = "2018-08-16 15:18:20 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"197 -319 OFFCURVE",
"318 -304 OFFCURVE",
"367 -30 CURVE SMOOTH",
"447 421 LINE SMOOTH",
"468 542 OFFCURVE",
"561 607 OFFCURVE",
"720 607 CURVE",
"723 629 LINE",
"585 629 OFFCURVE",
"512 677 OFFCURVE",
"512 772 CURVE SMOOTH",
"512 785 OFFCURVE",
"513 797 OFFCURVE",
"516 812 CURVE SMOOTH",
"577 1157 LINE SMOOTH",
"588 1221 OFFCURVE",
"594 1273 OFFCURVE",
"594 1314 CURVE SMOOTH",
"594 1490 OFFCURVE",
"489 1493 OFFCURVE",
"226 1493 CURVE",
"220 1461 LINE",
"400 1461 OFFCURVE",
"494 1416 OFFCURVE",
"494 1284 CURVE SMOOTH",
"494 1265 OFFCURVE",
"492 1243 OFFCURVE",
"488 1220 CURVE SMOOTH",
"444 973 LINE SMOOTH",
"424 859 OFFCURVE",
"415 789 OFFCURVE",
"415 761 CURVE SMOOTH",
"415 732 OFFCURVE",
"430 640 OFFCURVE",
"566 624 CURVE",
"564 616 LINE",
"468 612 OFFCURVE",
"407 567 OFFCURVE",
"373 492 CURVE SMOOTH",
"359 460 OFFCURVE",
"342 392 OFFCURVE",
"323 287 CURVE SMOOTH",
"273 5 LINE SMOOTH",
"233 -218 OFFCURVE",
"143 -286 OFFCURVE",
"-87 -286 CURVE",
"-93 -319 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
17 1 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 0 1 1 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 1 2 1 133 0 2 0 2 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
35 34 29 27 22 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 598;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"233 -319 OFFCURVE",
"378 -289 OFFCURVE",
"430 6 CURVE SMOOTH",
"504 430 LINE SMOOTH",
"523 540 OFFCURVE",
"580 584 OFFCURVE",
"686 586 CURVE",
"697 647 LINE",
"605 647 OFFCURVE",
"565 681 OFFCURVE",
"565 752 CURVE SMOOTH",
"565 765 OFFCURVE",
"566 780 OFFCURVE",
"569 797 CURVE SMOOTH",
"626 1122 LINE SMOOTH",
"636 1181 OFFCURVE",
"642 1230 OFFCURVE",
"642 1272 CURVE SMOOTH",
"642 1469 OFFCURVE",
"520 1493 OFFCURVE",
"229 1493 CURVE",
"212 1417 LINE",
"366 1417 OFFCURVE",
"435 1384 OFFCURVE",
"435 1267 CURVE SMOOTH",
"435 1243 OFFCURVE",
"432 1216 OFFCURVE",
"426 1184 CURVE SMOOTH",
"385 950 LINE SMOOTH",
"372 877 OFFCURVE",
"365 820 OFFCURVE",
"365 780 CURVE SMOOTH",
"365 723 OFFCURVE",
"384 661 OFFCURVE",
"453 616 CURVE",
"452 611 LINE",
"389 574 OFFCURVE",
"338 526 OFFCURVE",
"311 463 CURVE SMOOTH",
"296 427 OFFCURVE",
"283 374 OFFCURVE",
"271 305 CURVE SMOOTH",
"224 39 LINE SMOOTH",
"184 -188 OFFCURVE",
"132 -242 OFFCURVE",
"-81 -244 CURVE",
"-94 -319 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
27 1 0 5 1 76 6 1 5 0 0 2 5 0 105 0 2 0 1 2 1 101 0 3 3 4 97 0 4 4 33 3 78 0 0 0 49 0 49 50 28 34 73 34 7 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 782;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
lastChange = "2018-08-16 15:14:55 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"552.717 -354 OFFCURVE",
"577.424 -276 OFFCURVE",
"555 -276 CURVE SMOOTH",
"254 -276 LINE SMOOTH",
"244.667 -276 OFFCURVE",
"242.667 -266.667 OFFCURVE",
"248 -248 CURVE SMOOTH",
"727 1430 LINE SMOOTH",
"731 1444.667 OFFCURVE",
"740.667 1452 OFFCURVE",
"756 1452 CURVE SMOOTH",
"1032 1452 LINE SMOOTH",
"1052.515 1452 OFFCURVE",
"1079.953 1530 OFFCURVE",
"1059 1530 CURVE SMOOTH",
"639 1530 LINE SMOOTH",
"623.667 1530 OFFCURVE",
"614.667 1523.667 OFFCURVE",
"612 1511 CURVE",
"84 -332 LINE",
"83.333 -335.333 OFFCURVE",
"83 -338.333 OFFCURVE",
"83 -341 CURVE SMOOTH",
"83 -349.667 OFFCURVE",
"88.667 -354 OFFCURVE",
"100 -354 CURVE SMOOTH",
"532 -354 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"614 -354 LINE",
"631 -276 LINE",
"306 -276 LINE",
"648 1452 LINE",
"956 1452 LINE",
"977 1530 LINE",
"535 1530 LINE",
"160 -354 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 3 4 1 0 3 0 99 0 2 2 1 95 0 1 1 94 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
0 1 0 2 3 1 2 103 0 3 0 0 3 87 0 3 3 0 95 4 1 0 3 0 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
1 0 20 18 15 12 9 7 0 23 1 23 5 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 725;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"660 -354 LINE",
"678 -258 LINE",
"363 -258 LINE",
"701 1434 LINE",
"997 1434 LINE",
"1022 1530 LINE",
"507 1530 LINE",
"129 -354 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 1 2 99 0 0 0 3 95 4 1 3 3 33 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 19 0 18 50 36 34 5 8 25 
CALL[ ]\011/* CallFunction */";
};
width = 722;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
lastChange = "2018-08-16 15:15:07 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"305 -354 LINE",
"681 1530 LINE",
"242 1530 LINE",
"229 1452 LINE",
"537 1452 LINE",
"192 -276 LINE",
"-137 -276 LINE",
"-149 -354 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 1 0 0 1 0 99 0 2 2 3 95 0 3 3 94 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
35 36 35 33 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 725;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"379 -354 LINE",
"754 1530 LINE",
"242 1530 LINE",
"225 1434 LINE",
"523 1434 LINE",
"186 -258 LINE",
"-133 -258 LINE",
"-149 -354 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 1 0 0 1 0 99 0 2 2 3 95 0 3 3 33 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
50 36 34 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 722;
}
);
leftKerningGroup = bracketright;
note = bracketright;
unicode = 005D;
},
{
glyphname = breve;
lastChange = "2018-08-14 11:31:08 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"776 1020 OFFCURVE",
"868 1112 OFFCURVE",
"883 1295 CURVE",
"838 1295 LINE",
"805 1184 OFFCURVE",
"724 1129 OFFCURVE",
"596 1129 CURVE SMOOTH",
"468 1129 OFFCURVE",
"398 1184 OFFCURVE",
"385 1295 CURVE",
"342 1295 LINE",
"339 1276 OFFCURVE",
"338 1256 OFFCURVE",
"338 1237 CURVE SMOOTH",
"338 1092 OFFCURVE",
"428 1020 OFFCURVE",
"608 1020 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 27 values pushed */
0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 18 20 17 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"928 1020 OFFCURVE",
"928 1223 OFFCURVE",
"928 1327 CURVE",
"866 1327 LINE",
"817 1212 OFFCURVE",
"732 1155 OFFCURVE",
"610 1155 CURVE SMOOTH",
"478 1155 OFFCURVE",
"422 1207 OFFCURVE",
"412 1327 CURVE",
"350 1327 LINE",
"343 1292 OFFCURVE",
"339 1260 OFFCURVE",
"339 1230 CURVE SMOOTH",
"339 1155 OFFCURVE",
"360 1020 OFFCURVE",
"577 1020 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 10 9 0 15 1 15 3 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = brokenbar;
lastChange = "2018-08-15 14:36:58 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"432 -33 LINE",
"432 590 LINE",
"312 590 LINE",
"312 -33 LINE"
);
},
{
closed = 1;
nodes = (
"432 817 LINE",
"432 1399 LINE",
"312 1399 LINE",
"312 817 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 0 0 1 95 4 1 1 1 92 77 5 1 3 3 2 95 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
4 1 1 0 0 3 1 0 103 5 1 3 3 2 95 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 555;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"467 109 LINE",
"467 688 LINE",
"272 688 LINE",
"272 109 LINE"
);
},
{
closed = 1;
nodes = (
"467 795 LINE",
"467 1372 LINE",
"272 1372 LINE",
"272 795 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 2 3 2 99 0 0 0 1 95 0 1 1 31 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 0 3 1 0 103 0 3 2 2 3 87 0 3 3 2 95 0 2 3 2 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 579;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = bullet;
lastChange = "2018-08-09 15:30:58 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"637 513 OFFCURVE",
"740 609 OFFCURVE",
"740 742 CURVE SMOOTH",
"740 881 OFFCURVE",
"649 988 OFFCURVE",
"511 988 CURVE SMOOTH",
"370 988 OFFCURVE",
"257 897 OFFCURVE",
"257 759 CURVE SMOOTH",
"257 616 OFFCURVE",
"359 513 OFFCURVE",
"511 513 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 19 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 815;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"645 487 OFFCURVE",
"757 594 OFFCURVE",
"757 746 CURVE SMOOTH",
"757 890 OFFCURVE",
"656 1012 OFFCURVE",
"505 1012 CURVE SMOOTH",
"348 1012 OFFCURVE",
"226 907 OFFCURVE",
"226 760 CURVE SMOOTH",
"226 597 OFFCURVE",
"362 487 OFFCURVE",
"502 487 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 38 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 821;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = c;
lastChange = "2018-08-17 12:36:39 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{247, 0}";
},
{
name = top;
position = "{397, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"567 129 OFFCURVE",
"535 157 OFFCURVE",
"520 145 CURVE",
"463 93 OFFCURVE",
"422 63 OFFCURVE",
"338 63 CURVE SMOOTH",
"257 63 OFFCURVE",
"202 163 OFFCURVE",
"202 324 CURVE SMOOTH",
"203 512 OFFCURVE",
"353 788 OFFCURVE",
"473 788 CURVE SMOOTH",
"519 788 OFFCURVE",
"549 779 OFFCURVE",
"562 762 CURVE",
"566 756 OFFCURVE",
"571 734 OFFCURVE",
"577 696 CURVE",
"584 683 OFFCURVE",
"596 677 OFFCURVE",
"614 677 CURVE SMOOTH",
"649 677 OFFCURVE",
"690 711 OFFCURVE",
"690 754 CURVE SMOOTH",
"690 806 OFFCURVE",
"609 852 OFFCURVE",
"526 852 CURVE SMOOTH",
"297 852 OFFCURVE",
"67 527 OFFCURVE",
"67 256 CURVE SMOOTH",
"67 91 OFFCURVE",
"147 -27 OFFCURVE",
"270 -27 CURVE SMOOTH",
"365 -27 OFFCURVE",
"460 20 OFFCURVE",
"553 113 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"491 150 LINE",
"437 96 OFFCURVE",
"395 58 OFFCURVE",
"320 58 CURVE SMOOTH",
"204 58 OFFCURVE",
"144 218 OFFCURVE",
"144 356 CURVE SMOOTH",
"144 542 OFFCURVE",
"268 791 OFFCURVE",
"392 791 CURVE SMOOTH",
"427 791 OFFCURVE",
"463 779 OFFCURVE",
"478 762 CURVE",
"496 696 LINE",
"504 683 OFFCURVE",
"516 677 OFFCURVE",
"534 677 CURVE SMOOTH",
"568 677 OFFCURVE",
"602 708 OFFCURVE",
"602 749 CURVE SMOOTH",
"602 803 OFFCURVE",
"515 852 OFFCURVE",
"429 852 CURVE SMOOTH",
"212 852 OFFCURVE",
"26 561 OFFCURVE",
"26 300 CURVE SMOOTH",
"26 135 OFFCURVE",
"105 -27 OFFCURVE",
"250 -27 CURVE SMOOTH",
"345 -27 OFFCURVE",
"440 21 OFFCURVE",
"526 120 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 37 values pushed */
0 2 3 4 3 2 4 128 0 3 3 1 97 0 1 1 95 77 0 4 4 0 97 0 0 0 93 0 78 36 36 36 36 33 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 643;
},
{
anchors = (
{
name = bottom;
position = "{273, 0}";
},
{
name = top;
position = "{423, 856}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"547 158 LINE",
"526 135 OFFCURVE",
"470 90 OFFCURVE",
"399 90 CURVE SMOOTH",
"298 90 OFFCURVE",
"249 242 OFFCURVE",
"249 383 CURVE SMOOTH",
"249 570 OFFCURVE",
"331 770 OFFCURVE",
"448 770 CURVE SMOOTH",
"469 770 OFFCURVE",
"498 761 OFFCURVE",
"514 749 CURVE",
"538 674 LINE",
"551 653 OFFCURVE",
"571 643 OFFCURVE",
"600 643 CURVE SMOOTH",
"647 643 OFFCURVE",
"694 685 OFFCURVE",
"694 731 CURVE SMOOTH",
"694 799 OFFCURVE",
"602 852 OFFCURVE",
"492 852 CURVE SMOOTH",
"261 852 OFFCURVE",
"46 565 OFFCURVE",
"46 304 CURVE SMOOTH",
"46 126 OFFCURVE",
"149 -27 OFFCURVE",
"315 -27 CURVE SMOOTH",
"434 -27 OFFCURVE",
"528 22 OFFCURVE",
"598 115 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
29 1 4 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 2 3 4 3 2 114 0 3 3 1 97 0 1 1 34 77 0 4 4 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 2 3 4 3 2 4 128 0 3 3 1 97 0 1 1 34 77 0 4 4 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
36 36 36 36 33 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
leftKerningGroup = c;
note = c;
rightKerningGroup = c;
unicode = 0063;
},
{
glyphname = caron;
lastChange = "2018-08-15 13:22:03 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"866 1443 LINE",
"655 1219 LINE SMOOTH",
"638 1202 OFFCURVE",
"627 1193 OFFCURVE",
"622 1193 CURVE SMOOTH",
"615 1193 OFFCURVE",
"606 1203 OFFCURVE",
"595 1223 CURVE SMOOTH",
"472 1438 LINE",
"431 1416 LINE",
"556 1064 LINE SMOOTH",
"566 1037 OFFCURVE",
"578 1023 OFFCURVE",
"593 1023 CURVE SMOOTH",
"608 1023 OFFCURVE",
"625 1035 OFFCURVE",
"642 1058 CURVE SMOOTH",
"902 1412 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"461 1022 LINE",
"742 1405 LINE",
"706 1436 LINE",
"432 1145 LINE",
"475 1145 LINE",
"312 1431 LINE",
"271 1409 LINE",
"409 1022 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 14 values pushed */
0 1 0 1 133 0 0 0 118 19 34 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"438 1194 LINE SMOOTH",
"409.333 1168 OFFCURVE",
"391.667 1155 OFFCURVE",
"385 1155 CURVE SMOOTH",
"378.333 1155 OFFCURVE",
"367.333 1168 OFFCURVE",
"352 1194 CURVE SMOOTH",
"231 1409 LINE",
"229.667 1411.667 OFFCURVE",
"227 1413 OFFCURVE",
"223 1413 CURVE SMOOTH",
"219 1413 OFFCURVE",
"213 1411 OFFCURVE",
"205 1407 CURVE SMOOTH",
"180.333 1394.333 OFFCURVE",
"168 1382.667 OFFCURVE",
"168 1372 CURVE SMOOTH",
"168 1368 LINE",
"279 956 LINE SMOOTH",
"289.667 916 OFFCURVE",
"341 914.667 OFFCURVE",
"377 956 CURVE SMOOTH",
"725 1368 LINE",
"741.771 1384.771 OFFCURVE",
"703.708 1423.472 OFFCURVE",
"682 1409 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"482 1022 LINE",
"855 1464 LINE",
"812 1505 LINE",
"473 1206 LINE",
"529 1206 LINE",
"361 1505 LINE",
"295 1476 LINE",
"417 1022 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 18 values pushed */
10 1 1 74 0 1 0 1 133 0 0 0 118 26 23 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = caron.alt;
lastChange = "2018-08-16 21:46:46 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"621 1110 OFFCURVE",
"637 1122 OFFCURVE",
"652 1145 CURVE SMOOTH",
"742 1274 OFFCURVE",
"787 1384 OFFCURVE",
"787 1473 CURVE SMOOTH",
"787 1486 OFFCURVE",
"773 1492 OFFCURVE",
"744 1492 CURVE SMOOTH",
"680 1492 OFFCURVE",
"648 1479 OFFCURVE",
"648 1454 CURVE SMOOTH",
"648 1451 OFFCURVE",
"649 1445 OFFCURVE",
"650 1437 CURVE SMOOTH",
"651 1428 OFFCURVE",
"651 1415 OFFCURVE",
"651 1397 CURVE SMOOTH",
"651 1319 OFFCURVE",
"630 1242 OFFCURVE",
"587 1165 CURVE SMOOTH",
"580 1153 OFFCURVE",
"577 1143 OFFCURVE",
"577 1135 CURVE SMOOTH",
"577 1118 OFFCURVE",
"592 1110 OFFCURVE",
"605 1110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
43 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 569;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"601 1110 OFFCURVE",
"621 1122 OFFCURVE",
"642 1145 CURVE SMOOTH",
"761 1275 OFFCURVE",
"819 1375 OFFCURVE",
"819 1440 CURVE SMOOTH",
"819 1474 OFFCURVE",
"800 1491 OFFCURVE",
"763 1491 CURVE SMOOTH",
"680 1491 OFFCURVE",
"638 1474 OFFCURVE",
"638 1440 CURVE SMOOTH",
"638 1436 OFFCURVE",
"639 1428 OFFCURVE",
"640 1419 CURVE SMOOTH",
"641 1410 OFFCURVE",
"642 1396 OFFCURVE",
"642 1378 CURVE SMOOTH",
"642 1314 OFFCURVE",
"613 1243 OFFCURVE",
"558 1165 CURVE SMOOTH",
"550 1154 OFFCURVE",
"546 1144 OFFCURVE",
"546 1136 CURVE SMOOTH",
"546 1119 OFFCURVE",
"560 1110 OFFCURVE",
"581 1110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 1 0 134 0 1 1 33 1 78 42 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 567;
}
);
note = caron.alt;
},
{
glyphname = ccedilla;
lastChange = "2018-08-17 11:53:50 +0000";
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = cedilla;
transform = "{1, 0, 0, 1, 40, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
42 1 6 4 14 1 1 6 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 2 1 0 1 2 114 0 1 7 1 0 1 0 101 0 5 5 3 97 0 3 3 95 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 2 1 0 1 2 0 128 0 1 7 1 0 1 0 101 0 5 5 3 97 0 3 3 95 5 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 21 values pushed */
1 0 40 38 34 32 28 26 22 20 8 6 5 3 0 54 1 54 8 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 643;
},
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = cedilla;
transform = "{1, 0, 0, 1, 40, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
45 1 6 4 18 17 2 1 6 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 4 5 6 5 4 114 0 6 1 5 6 1 126 0 2 1 0 1 2 114 0 5 5 3 97 0 3 3 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 2 1 0 1 2 114 0 5 5 3 97 0 3 3 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 2 1 0 1 2 114 0 1 0 0 1 0 101 0 5 5 3 97 0 3 3 34 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 2 1 0 1 2 0 128 0 1 0 0 1 0 101 0 5 5 3 97 0 3 3 34 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
36 35 36 45 17 35 34 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 696;
}
);
leftMetricsKey = c;
widthMetricsKey = "=c";
note = ccedilla;
unicode = 00E7;
},
{
glyphname = cdotaccent;
lastChange = "2018-08-17 12:37:11 +0000";
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
name = uni0307;
transform = "{1, 0, 0, 1, 317, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 643;
},
{
components = (
{
alignment = -1;
name = c;
},
{
name = uni0307;
transform = "{1, 0, 0, 1, 344, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 696;
}
);
leftMetricsKey = c;
widthMetricsKey = "=c";
note = cdotaccent;
rightKerningGroup = c;
unicode = 010B;
},
{
glyphname = cedilla;
lastChange = "2018-08-14 11:36:58 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"383 -209 OFFCURVE",
"358 -166 OFFCURVE",
"307 -125 CURVE SMOOTH",
"288 -110 OFFCURVE",
"285 -95 OFFCURVE",
"297 -80 CURVE SMOOTH",
"358 0 LINE",
"291 0 LINE",
"173 -157 LINE",
"164 -170 OFFCURVE",
"167 -180 OFFCURVE",
"181 -187 CURVE SMOOTH",
"242 -219 OFFCURVE",
"272 -256 OFFCURVE",
"272 -298 CURVE SMOOTH",
"272 -345 OFFCURVE",
"253 -368 OFFCURVE",
"215 -369 CURVE SMOOTH",
"207 -369 OFFCURVE",
"193 -359 OFFCURVE",
"173 -339 CURVE SMOOTH",
"153 -319 OFFCURVE",
"136 -309 OFFCURVE",
"123 -309 CURVE SMOOTH",
"89 -309 OFFCURVE",
"72 -325 OFFCURVE",
"72 -358 CURVE SMOOTH",
"72 -402 OFFCURVE",
"106 -424 OFFCURVE",
"174 -424 CURVE SMOOTH",
"277 -424 OFFCURVE",
"383 -349 OFFCURVE",
"383 -256 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"292 -424 OFFCURVE",
"387 -354 OFFCURVE",
"387 -266 CURVE SMOOTH",
"387 -251 OFFCURVE",
"380 -184 OFFCURVE",
"250 -84 CURVE",
"256 -122 LINE",
"339 0 LINE",
"272 0 LINE",
"157 -174 LINE",
"274 -234 OFFCURVE",
"281 -281 OFFCURVE",
"281 -310 CURVE SMOOTH",
"281 -349 OFFCURVE",
"262 -369 OFFCURVE",
"237 -369 CURVE SMOOTH",
"219 -369 OFFCURVE",
"206 -359 OFFCURVE",
"184 -339 CURVE SMOOTH",
"162 -319 OFFCURVE",
"144 -309 OFFCURVE",
"131 -309 CURVE SMOOTH",
"100 -309 OFFCURVE",
"85 -322 OFFCURVE",
"85 -350 CURVE SMOOTH",
"85 -399 OFFCURVE",
"121 -424 OFFCURVE",
"193 -424 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 1 3 133 0 2 1 0 1 2 114 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 3 1 3 133 0 2 1 0 1 2 0 128 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
22 33 34 34 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"434 -260 OFFCURVE",
"401 -203 OFFCURVE",
"336 -154 CURVE SMOOTH",
"305 -131 OFFCURVE",
"303 -127 OFFCURVE",
"319 -106 CURVE SMOOTH",
"397 0 LINE",
"289 0 LINE",
"141 -217 LINE",
"147 -233 LINE",
"232 -269 OFFCURVE",
"274 -318 OFFCURVE",
"274 -381 CURVE SMOOTH",
"274 -410 OFFCURVE",
"245 -432 OFFCURVE",
"221 -432 CURVE SMOOTH",
"208 -432 OFFCURVE",
"186 -419 OFFCURVE",
"157 -394 CURVE SMOOTH",
"128 -369 OFFCURVE",
"103 -356 OFFCURVE",
"82 -356 CURVE SMOOTH",
"43 -356 OFFCURVE",
"16 -385 OFFCURVE",
"16 -424 CURVE SMOOTH",
"16 -484 OFFCURVE",
"69 -514 OFFCURVE",
"174 -514 CURVE SMOOTH",
"314 -514 OFFCURVE",
"434 -433 OFFCURVE",
"434 -324 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"331 -514 OFFCURVE",
"441 -420 OFFCURVE",
"441 -336 CURVE SMOOTH",
"441 -297 OFFCURVE",
"441 -216 OFFCURVE",
"254 -105 CURVE",
"264 -170 LINE",
"375 0 LINE",
"267 0 LINE",
"129 -228 LINE",
"279 -281 OFFCURVE",
"285 -377 OFFCURVE",
"285 -389 CURVE SMOOTH",
"285 -411 OFFCURVE",
"259 -432 OFFCURVE",
"239 -432 CURVE SMOOTH",
"223 -432 OFFCURVE",
"200 -419 OFFCURVE",
"169 -394 CURVE SMOOTH",
"138 -369 OFFCURVE",
"112 -356 OFFCURVE",
"91 -356 CURVE SMOOTH",
"55 -356 OFFCURVE",
"31 -381 OFFCURVE",
"31 -416 CURVE SMOOTH",
"31 -481 OFFCURVE",
"87 -514 OFFCURVE",
"196 -514 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
PUSHB[ ]\011/* 6 values pushed */
17 1 1 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 1 3 133 0 2 1 0 1 2 114 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 3 1 3 133 0 2 1 0 1 2 0 128 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
23 17 35 34 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = cent;
lastChange = "2018-08-16 22:01:44 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"506 220 LINE",
"524 220 LINE SMOOTH",
"651 220 OFFCURVE",
"757 250 OFFCURVE",
"844 311 CURVE",
"818 364 LINE",
"724 326 OFFCURVE",
"655 307 OFFCURVE",
"610 307 CURVE SMOOTH",
"578 307 OFFCURVE",
"553 309 OFFCURVE",
"534 314 CURVE",
"736 999 LINE",
"762 988 OFFCURVE",
"796 972 OFFCURVE",
"834 896 CURVE SMOOTH",
"850 864 OFFCURVE",
"892 876 OFFCURVE",
"919 896 CURVE SMOOTH",
"941 912 OFFCURVE",
"946 950 OFFCURVE",
"940 984 CURVE",
"920 1024 OFFCURVE",
"866 1052 OFFCURVE",
"757 1068 CURVE",
"807 1237 LINE",
"731 1253 LINE",
"678 1073 LINE",
"542 1069 OFFCURVE",
"402 1011 OFFCURVE",
"305 920 CURVE SMOOTH",
"226 845 OFFCURVE",
"161 727 OFFCURVE",
"161 590 CURVE SMOOTH",
"161 430 OFFCURVE",
"267 274 OFFCURVE",
"430 231 CURVE",
"369 23 LINE",
"444 8 LINE"
);
},
{
closed = 1;
nodes = (
"366 399 OFFCURVE",
"317 493 OFFCURVE",
"317 623 CURVE SMOOTH",
"317 812 OFFCURVE",
"475 1003 OFFCURVE",
"660 1011 CURVE",
"463 342 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 59 values pushed */
22 1 4 1 33 1 2 4 38 34 2 3 2 9 1 0 3 4 76 0 2 4 3 4 2 3 128 0 1 0 4 2 1 4 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 22 37 44 29 17 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 866;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"395 219 LINE",
"416 219 LINE SMOOTH",
"552 219 OFFCURVE",
"680 259 OFFCURVE",
"795 338 CURVE",
"762 422 LINE",
"711 394 OFFCURVE",
"640 358 OFFCURVE",
"539 358 CURVE SMOOTH",
"516 358 OFFCURVE",
"492 366 OFFCURVE",
"467 379 CURVE",
"743 1004 LINE",
"764 986 OFFCURVE",
"779 970 OFFCURVE",
"795 899 CURVE SMOOTH",
"804 859 OFFCURVE",
"859 862 OFFCURVE",
"915 905 CURVE SMOOTH",
"956 936 OFFCURVE",
"975 994 OFFCURVE",
"975 1030 CURVE",
"960 1075 OFFCURVE",
"899 1104 OFFCURVE",
"793 1116 CURVE",
"870 1290 LINE",
"764 1311 LINE",
"680 1118 LINE",
"542 1106 OFFCURVE",
"416 1041 OFFCURVE",
"303 924 CURVE SMOOTH",
"197 814 OFFCURVE",
"119 658 OFFCURVE",
"119 522 CURVE SMOOTH",
"119 391 OFFCURVE",
"187 291 OFFCURVE",
"291 244 CURVE",
"205 49 LINE",
"311 29 LINE"
);
},
{
closed = 1;
nodes = (
"374 506 OFFCURVE",
"365 548 OFFCURVE",
"365 592 CURVE SMOOTH",
"365 751 OFFCURVE",
"499 977 OFFCURVE",
"635 1018 CURVE",
"391 467 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
29 1 1 0 1 76 49 42 9 8 4 0 74 0 0 1 0 133 0 1 1 118 42 42 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 878;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = cent.oldstyle;
lastChange = "2018-08-16 22:03:47 +0000";
layers = (
{
components = (
{
name = c;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"286 -213 LINE",
"499 996 LINE",
"418 1010 LINE",
"205 -199 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
50 37 33 7 4 0 73 0 2 1 2 136 0 1 0 1 136 0 0 0 118 35 34 28 26 22 21 3 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 643;
},
{
components = (
{
name = c;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"346 -213 LINE",
"559 996 LINE",
"458 1010 LINE",
"245 -199 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 37 values pushed */
54 41 36 7 4 0 73 0 2 1 2 136 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 39 37 31 29 24 23 3 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 696;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "B2F6134A-D4CF-4691-8982-29412FAA33D2";
name = "Aug 16 18, 18:02";
paths = (
{
closed = 1;
nodes = (
"355 -22 LINE",
"431.667 -8 OFFCURVE",
"508 37 OFFCURVE",
"584 113 CURVE",
"597.657 129.388 OFFCURVE",
"565.57 156.656 OFFCURVE",
"551 145 CURVE",
"493.667 93 OFFCURVE",
"454 64.333 OFFCURVE",
"374 63 CURVE",
"541 786 LINE",
"566.333 782 OFFCURVE",
"583.667 774 OFFCURVE",
"593 762 CURVE",
"597 756 OFFCURVE",
"602 734 OFFCURVE",
"608 696 CURVE",
"614.667 683.333 OFFCURVE",
"627 677 OFFCURVE",
"645 677 CURVE SMOOTH",
"679.667 677 OFFCURVE",
"721 711.333 OFFCURVE",
"721 754 CURVE SMOOTH",
"721 806 OFFCURVE",
"640 852 OFFCURVE",
"556 852 CURVE",
"586 981 LINE SMOOTH",
"587.333 987 OFFCURVE",
"574.667 993.333 OFFCURVE",
"548 1000 CURVE",
"535.333 1002.667 OFFCURVE",
"525.333 1004 OFFCURVE",
"518 1004 CURVE SMOOTH",
"510.667 1004 OFFCURVE",
"506.667 1002.333 OFFCURVE",
"506 999 CURVE SMOOTH",
"469 839 LINE",
"286.333 781.667 OFFCURVE",
"98 500 OFFCURVE",
"98 256 CURVE SMOOTH",
"98 105.333 OFFCURVE",
"166 -7.667 OFFCURVE",
"270 -25 CURVE",
"239 -158 LINE SMOOTH",
"237.667 -164.667 OFFCURVE",
"250.333 -171 OFFCURVE",
"277 -177 CURVE",
"289.667 -180.333 OFFCURVE",
"299.667 -182 OFFCURVE",
"307 -182 CURVE SMOOTH",
"314.333 -182 OFFCURVE",
"318.333 -180.333 OFFCURVE",
"319 -177 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"297 95 LINE",
"247.667 152.333 OFFCURVE",
"233 233.333 OFFCURVE",
"233 324 CURVE SMOOTH",
"233 500 OFFCURVE",
"360.667 729.333 OFFCURVE",
"454 776 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
50 37 33 7 4 0 73 0 2 1 2 136 0 1 0 1 136 0 0 0 118 35 34 28 26 22 21 3 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 674;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "34494860-DB1B-4C92-9C19-86C3554103CC";
name = "Aug 16 18, 18:03";
paths = (
{
closed = 1;
nodes = (
"389 -23 LINE",
"531 -4 OFFCURVE",
"629 113 QCURVE SMOOTH",
"637 123 OFFCURVE",
"618 150 OFFCURVE",
"590 166 OFFCURVE",
"582 158 QCURVE SMOOTH",
"565 141 OFFCURVE",
"481 90 OFFCURVE",
"428 90 QCURVE SMOOTH",
"416 90 LINE",
"569 762 LINE",
"582 755 OFFCURVE",
"592 745 QCURVE",
"614 721 OFFCURVE",
"618 674 QCURVE",
"635 643 OFFCURVE",
"678 643 QCURVE SMOOTH",
"715 643 OFFCURVE",
"780 700 OFFCURVE",
"780 737 QCURVE SMOOTH",
"780 786 OFFCURVE",
"725 819 QCURVE SMOOTH",
"668 852 OFFCURVE",
"590 852 QCURVE",
"614 956 LINE",
"616 971 OFFCURVE",
"563 983 QCURVE SMOOTH",
"540 989 OFFCURVE",
"526 989 QCURVE SMOOTH",
"510 989 OFFCURVE",
"508 981 QCURVE SMOOTH",
"473 831 LINE",
"356 790 OFFCURVE",
"250 659 QCURVE SMOOTH",
"92 467 OFFCURVE",
"92 264 QCURVE SMOOTH",
"92 133 OFFCURVE",
"160 53 QCURVE SMOOTH",
"209 -4 OFFCURVE",
"279 -20 QCURVE",
"250 -145 LINE",
"246 -156 OFFCURVE",
"299 -168 QCURVE SMOOTH",
"328 -174 OFFCURVE",
"342 -174 QCURVE SMOOTH",
"354 -174 OFFCURVE",
"356 -170 QCURVE"
);
},
{
closed = 1;
nodes = (
"324 182 LINE",
"301 246 OFFCURVE",
"301 330 QCURVE SMOOTH",
"301 480 OFFCURVE",
"371 625 QCURVE SMOOTH",
"408 700 OFFCURVE",
"453 737 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 37 values pushed */
54 41 36 7 4 0 73 0 2 1 2 136 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 39 37 31 29 24 23 3 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 741;
}
);
note = cent.oldstyle;
},
{
glyphname = circumflex;
lastChange = "2018-08-20 10:13:57 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"601 1282 LINE",
"560 1282 LINE",
"749 996 LINE",
"788 1015 LINE",
"614 1409 LINE",
"563 1409 LINE",
"315 1025 LINE",
"356 996 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 15 values pushed */
16 4 1 3 0 73 0 0 0 118 22 20 1 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"651 1296 LINE",
"567 1296 LINE",
"761 996 LINE",
"835 1034 LINE",
"647 1409 LINE",
"571 1409 LINE",
"289 1035 LINE",
"343 996 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 9 values pushed */
0 0 0 118 18 17 1 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = colon;
lastChange = "2018-08-18 01:30:42 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"258 985 LINE",
"44 -223 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"401 565 OFFCURVE",
"455 600 OFFCURVE",
"455 674 CURVE SMOOTH",
"455 752 OFFCURVE",
"386 796 OFFCURVE",
"326 796 CURVE SMOOTH",
"270 796 OFFCURVE",
"219 763 OFFCURVE",
"219 685 CURVE SMOOTH",
"219 608 OFFCURVE",
"285 565 OFFCURVE",
"347 565 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"298 -27 OFFCURVE",
"352 8 OFFCURVE",
"352 82 CURVE SMOOTH",
"352 160 OFFCURVE",
"283 204 OFFCURVE",
"223 204 CURVE SMOOTH",
"167 204 OFFCURVE",
"116 171 OFFCURVE",
"116 93 CURVE SMOOTH",
"116 16 OFFCURVE",
"182 -27 OFFCURVE",
"244 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 2 2 3 97 0 3 3 95 77 0 1 1 0 97 0 0 0 93 0 78 19 19 19 17 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 561;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"633 795 OFFCURVE",
"562 864 OFFCURVE",
"478 864 CURVE SMOOTH",
"435 864 OFFCURVE",
"398 848 OFFCURVE",
"367 817 CURVE SMOOTH",
"351 802 OFFCURVE",
"343 776 OFFCURVE",
"343 739 CURVE SMOOTH",
"343 703 OFFCURVE",
"351 656 OFFCURVE",
"367 598 CURVE",
"398 567 OFFCURVE",
"438 552 OFFCURVE",
"477 552 CURVE SMOOTH",
"517 552 OFFCURVE",
"557 567 OFFCURVE",
"587 598 CURVE SMOOTH",
"618 629 OFFCURVE",
"633 665 OFFCURVE",
"633 707 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"463 234 OFFCURVE",
"385 285 OFFCURVE",
"308 285 CURVE SMOOTH",
"230 285 OFFCURVE",
"152 234 OFFCURVE",
"152 131 CURVE SMOOTH",
"153 87 OFFCURVE",
"169 49 OFFCURVE",
"199 18 CURVE SMOOTH",
"229 -12 OFFCURVE",
"265 -27 OFFCURVE",
"307 -27 CURVE SMOOTH",
"351 -27 OFFCURVE",
"388 -12 OFFCURVE",
"418 18 CURVE SMOOTH",
"448 49 OFFCURVE",
"463 87 OFFCURVE",
"463 131 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"568 552 OFFCURVE",
"633 621 OFFCURVE",
"633 710 CURVE SMOOTH",
"633 813 OFFCURVE",
"555 864 OFFCURVE",
"478 864 CURVE SMOOTH",
"400 864 OFFCURVE",
"322 813 OFFCURVE",
"322 710 CURVE SMOOTH",
"322 626 OFFCURVE",
"387 552 OFFCURVE",
"477 552 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"398 -27 OFFCURVE",
"463 42 OFFCURVE",
"463 131 CURVE SMOOTH",
"463 234 OFFCURVE",
"385 285 OFFCURVE",
"308 285 CURVE SMOOTH",
"230 285 OFFCURVE",
"152 230 OFFCURVE",
"152 131 CURVE SMOOTH",
"152 47 OFFCURVE",
"217 -27 OFFCURVE",
"307 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 0 1 97 0 1 1 34 77 0 3 3 2 97 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 3 1 0 105 0 3 3 2 97 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
21 37 20 18 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 591;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = comma;
lastChange = "2018-08-18 01:28:22 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"265 -27 OFFCURVE",
"319 8 OFFCURVE",
"319 82 CURVE SMOOTH",
"319 160 OFFCURVE",
"250 204 OFFCURVE",
"190 204 CURVE SMOOTH",
"134 204 OFFCURVE",
"83 171 OFFCURVE",
"83 93 CURVE SMOOTH",
"83 16 OFFCURVE",
"149 -27 OFFCURVE",
"211 -27 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"86 -293 OFFCURVE",
"215 -172 OFFCURVE",
"270 -64 CURVE SMOOTH",
"298 -9 OFFCURVE",
"311 42 OFFCURVE",
"311 89 CURVE SMOOTH",
"311 145 OFFCURVE",
"272 203 OFFCURVE",
"201 203 CURVE SMOOTH",
"133 203 OFFCURVE",
"75 157 OFFCURVE",
"75 93 CURVE SMOOTH",
"75 53 OFFCURVE",
"93 9 OFFCURVE",
"233 -45 CURVE",
"194 32 LINE",
"178 -116 OFFCURVE",
"43 -246 OFFCURVE",
"-53 -323 CURVE",
"-36 -352 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
14 1 0 73 0 0 0 118 23 21 1 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 520;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"428 279 OFFCURVE",
"346 331 OFFCURVE",
"264 331 CURVE SMOOTH",
"180 331 OFFCURVE",
"96 278 OFFCURVE",
"96 180 CURVE SMOOTH",
"96 125 OFFCURVE",
"122 84 OFFCURVE",
"174 55 CURVE",
"185 51 OFFCURVE",
"190 43 OFFCURVE",
"190 30 CURVE SMOOTH",
"190 25 OFFCURVE",
"189 20 OFFCURVE",
"188 14 CURVE",
"165 -58 OFFCURVE",
"90 -144 OFFCURVE",
"-35 -244 CURVE",
"-39 -248 OFFCURVE",
"-41 -253 OFFCURVE",
"-41 -259 CURVE SMOOTH",
"-41 -281 OFFCURVE",
"-19 -313 OFFCURVE",
"-2 -303 CURVE",
"53 -282 OFFCURVE",
"149 -222 OFFCURVE",
"249 -138 CURVE SMOOTH",
"349 -53 OFFCURVE",
"428 67 OFFCURVE",
"428 168 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"53 -282 OFFCURVE",
"149 -222 OFFCURVE",
"249 -138 CURVE SMOOTH",
"349 -53 OFFCURVE",
"428 67 OFFCURVE",
"428 168 CURVE SMOOTH",
"428 279 OFFCURVE",
"346 331 OFFCURVE",
"264 331 CURVE SMOOTH",
"180 331 OFFCURVE",
"96 278 OFFCURVE",
"96 180 CURVE SMOOTH",
"96 125 OFFCURVE",
"124 58 OFFCURVE",
"264 12 CURVE",
"237 99 LINE",
"184 -30 OFFCURVE",
"90 -144 OFFCURVE",
"-35 -244 CURVE",
"-2 -303 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
0 0 0 118 17 16 1 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 555;
}
);
leftKerningGroup = comma;
note = comma;
unicode = 002C;
},
{
glyphname = copyright;
lastChange = "2018-08-09 15:37:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1226 27 OFFCURVE",
"1545 347 OFFCURVE",
"1545 748 CURVE SMOOTH",
"1545 1151 OFFCURVE",
"1225 1468 OFFCURVE",
"824 1468 CURVE SMOOTH",
"423 1468 OFFCURVE",
"103 1150 OFFCURVE",
"103 748 CURVE SMOOTH",
"103 346 OFFCURVE",
"423 27 OFFCURVE",
"824 27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"903 355 OFFCURVE",
"973 364 OFFCURVE",
"1029 381 CURVE SMOOTH",
"1046 386 OFFCURVE",
"1058 389 OFFCURVE",
"1070 390 CURVE",
"1095 426 OFFCURVE",
"1120 523 OFFCURVE",
"1120 549 CURVE",
"1088 549 LINE",
"1051 448 OFFCURVE",
"963 391 OFFCURVE",
"830 391 CURVE SMOOTH",
"673 391 OFFCURVE",
"535 557 OFFCURVE",
"535 770 CURVE SMOOTH",
"535 950 OFFCURVE",
"678 1119 OFFCURVE",
"831 1119 CURVE SMOOTH",
"975 1119 OFFCURVE",
"1053 1057 OFFCURVE",
"1064 944 CURVE",
"1099 944 LINE",
"1099 1010 OFFCURVE",
"1091 1070 OFFCURVE",
"1080 1121 CURVE",
"1069 1121 OFFCURVE",
"1050 1123 OFFCURVE",
"1029 1128 CURVE SMOOTH",
"950 1147 OFFCURVE",
"896 1153 OFFCURVE",
"848 1153 CURVE SMOOTH",
"604 1153 OFFCURVE",
"452 979 OFFCURVE",
"452 736 CURVE SMOOTH",
"452 521 OFFCURVE",
"604 355 OFFCURVE",
"816 355 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"454 96 OFFCURVE",
"173 394 OFFCURVE",
"173 755 CURVE SMOOTH",
"173 1108 OFFCURVE",
"461 1399 OFFCURVE",
"824 1399 CURVE SMOOTH",
"1183 1399 OFFCURVE",
"1475 1114 OFFCURVE",
"1475 748 CURVE SMOOTH",
"1475 389 OFFCURVE",
"1186 96 OFFCURVE",
"817 96 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 57 values pushed */
36 1 7 6 1 76 0 1 0 2 5 1 2 105 0 5 0 6 7 5 6 105 0 7 0 4 3 7 4 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 36 40 36 41 19 20 19 17 8 12 30 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1482;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1182 31 OFFCURVE",
"1542 292 OFFCURVE",
"1542 748 CURVE SMOOTH",
"1542 1143 OFFCURVE",
"1222 1468 OFFCURVE",
"821 1468 CURVE SMOOTH",
"429 1468 OFFCURVE",
"100 1150 OFFCURVE",
"100 748 CURVE SMOOTH",
"100 348 OFFCURVE",
"411 31 OFFCURVE",
"819 31 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"893 363 OFFCURVE",
"960 369 OFFCURVE",
"1018 387 CURVE SMOOTH",
"1034 392 OFFCURVE",
"1050 396 OFFCURVE",
"1068 399 CURVE",
"1085 425 OFFCURVE",
"1126 522 OFFCURVE",
"1126 571 CURVE",
"1072 571 LINE",
"1035 468 OFFCURVE",
"953 416 OFFCURVE",
"825 416 CURVE SMOOTH",
"693 416 OFFCURVE",
"570 551 OFFCURVE",
"570 773 CURVE SMOOTH",
"570 964 OFFCURVE",
"673 1104 OFFCURVE",
"827 1104 CURVE SMOOTH",
"952 1104 OFFCURVE",
"1040 1056 OFFCURVE",
"1050 935 CURVE",
"1103 935 LINE",
"1100 1023 OFFCURVE",
"1092 1089 OFFCURVE",
"1080 1122 CURVE",
"1061 1123 OFFCURVE",
"1041 1124 OFFCURVE",
"1020 1129 CURVE SMOOTH",
"943 1147 OFFCURVE",
"879 1153 OFFCURVE",
"831 1153 CURVE SMOOTH",
"585 1153 OFFCURVE",
"417 974 OFFCURVE",
"417 740 CURVE SMOOTH",
"417 520 OFFCURVE",
"598 363 OFFCURVE",
"817 363 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"472 129 OFFCURVE",
"203 405 OFFCURVE",
"203 748 CURVE SMOOTH",
"203 1092 OFFCURVE",
"480 1366 OFFCURVE",
"821 1366 CURVE SMOOTH",
"1166 1366 OFFCURVE",
"1440 1089 OFFCURVE",
"1440 748 CURVE SMOOTH",
"1440 411 OFFCURVE",
"1166 129 OFFCURVE",
"821 129 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 66 values pushed */
36 1 8 7 1 76 0 6 5 7 5 6 7 128 0 1 0 2 5 1 2 105 0 5 0 7 8 5 7 105 0 8 0 4 3 8 4 105 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 36 38 33 36 41 19 19 19 17 9 8 31 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1482;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = currency;
lastChange = "2018-08-16 15:02:43 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"611 234 OFFCURVE",
"697 263 OFFCURVE",
"774 322 CURVE",
"852 243 LINE",
"936 327 LINE",
"858 406 LINE",
"917 483 OFFCURVE",
"946 570 OFFCURVE",
"946 668 CURVE SMOOTH",
"946 766 OFFCURVE",
"917 853 OFFCURVE",
"858 930 CURVE",
"936 1008 LINE",
"852 1092 LINE",
"774 1013 LINE",
"697 1072 OFFCURVE",
"610 1101 OFFCURVE",
"513 1101 CURVE SMOOTH",
"415 1101 OFFCURVE",
"328 1072 OFFCURVE",
"251 1013 CURVE",
"172 1092 LINE",
"88 1008 LINE",
"167 928 LINE",
"109 851 OFFCURVE",
"80 764 OFFCURVE",
"80 667 CURVE SMOOTH",
"80 570 OFFCURVE",
"109 484 OFFCURVE",
"167 407 CURVE",
"88 327 LINE",
"172 243 LINE",
"251 323 LINE",
"330 264 OFFCURVE",
"417 234 OFFCURVE",
"514 234 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"323 321 OFFCURVE",
"167 477 OFFCURVE",
"167 669 CURVE SMOOTH",
"167 860 OFFCURVE",
"321 1014 OFFCURVE",
"514 1014 CURVE SMOOTH",
"706 1014 OFFCURVE",
"860 860 OFFCURVE",
"860 668 CURVE SMOOTH",
"860 476 OFFCURVE",
"705 321 OFFCURVE",
"514 321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
47 38 35 26 23 14 11 2 8 3 2 1 76 0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 56 55 52 51 37 36 28 4 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"609 233 OFFCURVE",
"696 263 OFFCURVE",
"774 322 CURVE",
"852 244 LINE",
"936 328 LINE",
"858 406 LINE",
"917 484 OFFCURVE",
"946 571 OFFCURVE",
"946 668 CURVE SMOOTH",
"946 765 OFFCURVE",
"917 852 OFFCURVE",
"858 930 CURVE",
"936 1008 LINE",
"852 1092 LINE",
"774 1014 LINE",
"696 1073 OFFCURVE",
"609 1102 OFFCURVE",
"512 1102 CURVE SMOOTH",
"417 1102 OFFCURVE",
"330 1072 OFFCURVE",
"252 1012 CURVE",
"172 1092 LINE",
"88 1008 LINE",
"168 928 LINE",
"109 851 OFFCURVE",
"80 765 OFFCURVE",
"80 668 CURVE SMOOTH",
"80 571 OFFCURVE",
"109 485 OFFCURVE",
"168 408 CURVE",
"88 328 LINE",
"172 244 LINE",
"252 324 LINE",
"330 263 OFFCURVE",
"417 233 OFFCURVE",
"514 233 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"332 356 OFFCURVE",
"201 502 OFFCURVE",
"201 675 CURVE SMOOTH",
"201 839 OFFCURVE",
"335 979 OFFCURVE",
"512 979 CURVE SMOOTH",
"687 979 OFFCURVE",
"825 840 OFFCURVE",
"825 668 CURVE SMOOTH",
"825 497 OFFCURVE",
"691 356 OFFCURVE",
"512 356 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 58 values pushed */
29 25 2 2 1 34 20 17 2 4 3 2 12 8 3 3 0 3 3 76 0 1 4 1 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 38 37 44 42 37 48 38 48 47 41 5 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = d;
lastChange = "2018-08-18 13:52:52 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{351, 0}";
},
{
name = center;
position = "{426, 428}";
},
{
name = top;
position = "{612, 1485}";
},
{
name = topright;
position = "{807, 856}";
}
);
background = {
paths = (
{
closed = 0;
nodes = (
"817 1209 LINE",
"549 205 LINE"
);
},
{
closed = 0;
nodes = (
"610 970 LINE",
"985 970 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"265 -27 OFFCURVE",
"414 125 OFFCURVE",
"547 358 CURVE",
"539 375 LINE",
"496 135 LINE SMOOTH",
"481 52 OFFCURVE",
"487 -27 OFFCURVE",
"553 -27 CURVE SMOOTH",
"621 -27 OFFCURVE",
"706 42 OFFCURVE",
"811 173 CURVE",
"766 210 LINE",
"717 147 OFFCURVE",
"673 113 OFFCURVE",
"639 113 CURVE SMOOTH",
"612 113 OFFCURVE",
"603 162 OFFCURVE",
"611 209 CURVE SMOOTH",
"837 1466 LINE",
"824 1485 LINE",
"768 1460 OFFCURVE",
"678 1430 OFFCURVE",
"606 1430 CURVE",
"610 1378 LINE",
"666 1378 OFFCURVE",
"696 1345 OFFCURVE",
"696 1277 CURVE SMOOTH",
"696 1258 OFFCURVE",
"694 1232 OFFCURVE",
"688 1200 CURVE SMOOTH",
"606 750 LINE",
"630 750 LINE",
"598 813 OFFCURVE",
"527 852 OFFCURVE",
"464 852 CURVE SMOOTH",
"236 852 OFFCURVE",
"6 469 OFFCURVE",
"6 187 CURVE SMOOTH",
"6 74 OFFCURVE",
"43 -27 OFFCURVE",
"133 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"152 75 OFFCURVE",
"126 143 OFFCURVE",
"126 218 CURVE SMOOTH",
"126 437 OFFCURVE",
"273 791 OFFCURVE",
"453 791 CURVE SMOOTH",
"512 791 OFFCURVE",
"561 753 OFFCURVE",
"595 688 CURVE",
"559 487 LINE",
"469 310 OFFCURVE",
"301 75 OFFCURVE",
"208 75 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
29 1 6 3 17 6 2 0 6 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 4 5 97 0 5 5 98 77 0 6 6 3 97 0 3 3 95 77 0 0 0 1 97 2 1 1 1 93 77 0 7 7 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 5 0 4 3 5 4 105 0 6 6 3 97 0 3 3 95 77 0 0 0 1 97 2 1 1 1 93 77 0 7 7 1 97 2 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
35 40 34 21 36 39 38 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 852;
},
{
anchors = (
{
name = bottom;
position = "{382, 0}";
},
{
name = center;
position = "{457, 428}";
},
{
name = top;
position = "{643, 1485}";
},
{
name = topright;
position = "{959, 856}";
}
);
background = {
paths = (
{
closed = 0;
nodes = (
"698 721 LINE",
"479 -94 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"324 -27 OFFCURVE",
"441 96 OFFCURVE",
"586 296 CURVE",
"546 276 LINE",
"534 159 LINE SMOOTH",
"523 56 OFFCURVE",
"546 -27 OFFCURVE",
"638 -27 CURVE SMOOTH",
"723 -27 OFFCURVE",
"807 43 OFFCURVE",
"894 180 CURVE",
"835 227 LINE",
"798 169 OFFCURVE",
"767 141 OFFCURVE",
"748 141 CURVE SMOOTH",
"723 141 OFFCURVE",
"729 180 OFFCURVE",
"737 227 CURVE SMOOTH",
"958 1455 LINE",
"936 1487 LINE",
"829 1455 OFFCURVE",
"727 1432 OFFCURVE",
"648 1432 CURVE",
"655 1360 LINE",
"702 1360 OFFCURVE",
"725 1327 OFFCURVE",
"725 1258 CURVE SMOOTH",
"725 1244 OFFCURVE",
"724 1228 OFFCURVE",
"721 1210 CURVE SMOOTH",
"646 790 LINE",
"678 804 LINE",
"631 838 OFFCURVE",
"577 852 OFFCURVE",
"540 852 CURVE SMOOTH",
"279 852 OFFCURVE",
"28 475 OFFCURVE",
"28 207 CURVE SMOOTH",
"28 83 OFFCURVE",
"92 -27 OFFCURVE",
"207 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"258 111 OFFCURVE",
"247 179 OFFCURVE",
"247 245 CURVE SMOOTH",
"247 461 OFFCURVE",
"384 770 OFFCURVE",
"528 770 CURVE SMOOTH",
"568 770 OFFCURVE",
"601 753 OFFCURVE",
"631 714 CURVE",
"578 420 LINE SMOOTH",
"562 329 OFFCURVE",
"380 111 OFFCURVE",
"304 111 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
29 1 7 3 17 6 2 0 7 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 6 6 33 77 0 4 4 5 97 0 5 5 37 77 0 7 7 3 97 0 3 3 34 77 0 0 0 1 97 2 1 1 1 32 77 0 8 8 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 5 0 4 3 5 4 105 0 6 6 33 77 0 7 7 3 97 0 3 3 34 77 0 0 0 1 97 2 1 1 1 32 77 0 8 8 1 97 2 1 1 1 32 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
35 37 33 34 21 36 39 38 35 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 914;
}
);
leftKerningGroup = d;
note = d;
rightKerningGroup = d;
unicode = 0064;
},
{
glyphname = dagger;
lastChange = "2018-08-16 21:30:56 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"361 -387 LINE",
"415 -84 LINE SMOOTH",
"441 67 OFFCURVE",
"461 173 OFFCURVE",
"474 232 CURVE SMOOTH",
"514 403 OFFCURVE",
"563 527 OFFCURVE",
"626 602 CURVE",
"589 652 OFFCURVE",
"572 709 OFFCURVE",
"572 774 CURVE SMOOTH",
"572 797 OFFCURVE",
"574 820 OFFCURVE",
"578 844 CURVE",
"630 843 OFFCURVE",
"700 839 OFFCURVE",
"759 816 CURVE SMOOTH",
"825 790 OFFCURVE",
"849 784 OFFCURVE",
"879 784 CURVE SMOOTH",
"905 784 OFFCURVE",
"925 791 OFFCURVE",
"963 812 CURVE SMOOTH",
"1020 843 OFFCURVE",
"1030 867 OFFCURVE",
"1030 880 CURVE SMOOTH",
"1030 896 OFFCURVE",
"1019 912 OFFCURVE",
"999 931 CURVE SMOOTH",
"971 956 OFFCURVE",
"945 967 OFFCURVE",
"920 967 CURVE SMOOTH",
"903 967 OFFCURVE",
"861 962 OFFCURVE",
"795 946 CURVE SMOOTH",
"671 916 OFFCURVE",
"623 908 OFFCURVE",
"589 907 CURVE",
"596 932 OFFCURVE",
"628 1023 OFFCURVE",
"649 1075 CURVE SMOOTH",
"680 1151 OFFCURVE",
"702 1216 OFFCURVE",
"702 1265 CURVE SMOOTH",
"702 1284 OFFCURVE",
"699 1304 OFFCURVE",
"693 1324 CURVE SMOOTH",
"679 1369 OFFCURVE",
"661 1391 OFFCURVE",
"636 1391 CURVE SMOOTH",
"618 1391 OFFCURVE",
"597 1377 OFFCURVE",
"574 1348 CURVE SMOOTH",
"522 1284 OFFCURVE",
"511 1235 OFFCURVE",
"511 1173 CURVE SMOOTH",
"511 1147 OFFCURVE",
"512 1116 OFFCURVE",
"515 1077 CURVE SMOOTH",
"517 1051 OFFCURVE",
"518 1027 OFFCURVE",
"518 1002 CURVE SMOOTH",
"518 970 OFFCURVE",
"516 938 OFFCURVE",
"513 907 CURVE",
"473 910 OFFCURVE",
"421 920 OFFCURVE",
"355 938 CURVE SMOOTH",
"284 957 OFFCURVE",
"234 967 OFFCURVE",
"205 967 CURVE SMOOTH",
"183 967 OFFCURVE",
"156 959 OFFCURVE",
"124 938 CURVE SMOOTH",
"82 911 OFFCURVE",
"61 889 OFFCURVE",
"61 867 CURVE SMOOTH",
"61 853 OFFCURVE",
"74 836 OFFCURVE",
"99 818 CURVE SMOOTH",
"131 795 OFFCURVE",
"158 784 OFFCURVE",
"181 784 CURVE SMOOTH",
"202 784 OFFCURVE",
"280 806 OFFCURVE",
"327 820 CURVE SMOOTH",
"389 839 OFFCURVE",
"447 843 OFFCURVE",
"502 844 CURVE",
"485 744 OFFCURVE",
"439 663 OFFCURVE",
"368 602 CURVE",
"390 563 OFFCURVE",
"401 501 OFFCURVE",
"401 418 CURVE SMOOTH",
"401 373 OFFCURVE",
"398 323 OFFCURVE",
"392 266 CURVE SMOOTH",
"380 148 OFFCURVE",
"359 32 OFFCURVE",
"338 -85 CURVE SMOOTH",
"285 -387 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
31 1 5 7 17 1 2 0 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 2 0 2 134 8 1 6 3 1 1 0 6 1 105 9 1 5 4 1 0 2 5 0 105 0 7 7 98 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 7 5 7 133 0 2 0 2 134 9 1 5 6 0 5 89 8 1 6 3 1 1 0 6 1 105 9 1 5 5 0 97 4 1 0 5 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
46 44 22 37 17 34 33 21 22 17 35 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"388 -387 LINE",
"435 -123 LINE SMOOTH",
"455 -7 OFFCURVE",
"470 67 OFFCURVE",
"478 100 CURVE SMOOTH",
"513 248 OFFCURVE",
"568 368 OFFCURVE",
"645 459 CURVE",
"609 499 OFFCURVE",
"591 606 OFFCURVE",
"591 704 CURVE SMOOTH",
"591 742 OFFCURVE",
"594 778 OFFCURVE",
"599 809 CURVE",
"636 809 OFFCURVE",
"681 796 OFFCURVE",
"735 770 CURVE SMOOTH",
"784 747 OFFCURVE",
"822 737 OFFCURVE",
"848 737 CURVE SMOOTH",
"867 737 OFFCURVE",
"893 747 OFFCURVE",
"925 762 CURVE SMOOTH",
"989 793 OFFCURVE",
"1022 828 OFFCURVE",
"1022 870 CURVE SMOOTH",
"1022 896 OFFCURVE",
"1008 920 OFFCURVE",
"985 944 CURVE SMOOTH",
"959 971 OFFCURVE",
"930 983 OFFCURVE",
"900 983 CURVE SMOOTH",
"871 983 OFFCURVE",
"826 970 OFFCURVE",
"764 946 CURVE SMOOTH",
"703 922 OFFCURVE",
"655 909 OFFCURVE",
"617 909 CURVE",
"624 943 OFFCURVE",
"649 1005 OFFCURVE",
"670 1051 CURVE SMOOTH",
"707 1132 OFFCURVE",
"731 1181 OFFCURVE",
"731 1227 CURVE SMOOTH",
"731 1254 OFFCURVE",
"724 1277 OFFCURVE",
"716 1303 CURVE SMOOTH",
"698 1362 OFFCURVE",
"669 1391 OFFCURVE",
"634 1391 CURVE SMOOTH",
"601 1391 OFFCURVE",
"566 1366 OFFCURVE",
"528 1313 CURVE SMOOTH",
"483 1252 OFFCURVE",
"468 1211 OFFCURVE",
"468 1165 CURVE SMOOTH",
"468 1140 OFFCURVE",
"471 1108 OFFCURVE",
"477 1069 CURVE SMOOTH",
"484 1024 OFFCURVE",
"488 986 OFFCURVE",
"488 956 CURVE SMOOTH",
"488 937 OFFCURVE",
"486 922 OFFCURVE",
"484 909 CURVE",
"441 910 OFFCURVE",
"407 920 OFFCURVE",
"347 948 CURVE SMOOTH",
"298 971 OFFCURVE",
"257 983 OFFCURVE",
"226 983 CURVE SMOOTH",
"205 983 OFFCURVE",
"178 974 OFFCURVE",
"148 958 CURVE SMOOTH",
"73 918 OFFCURVE",
"60 870 OFFCURVE",
"60 846 CURVE SMOOTH",
"60 818 OFFCURVE",
"78 792 OFFCURVE",
"113 768 CURVE SMOOTH",
"143 747 OFFCURVE",
"169 737 OFFCURVE",
"191 737 CURVE SMOOTH",
"216 737 OFFCURVE",
"256 748 OFFCURVE",
"311 770 CURVE SMOOTH",
"377 796 OFFCURVE",
"428 809 OFFCURVE",
"466 809 CURVE",
"443 695 OFFCURVE",
"379 528 OFFCURVE",
"291 459 CURVE",
"335 388 OFFCURVE",
"346 305 OFFCURVE",
"346 229 CURVE SMOOTH",
"346 199 OFFCURVE",
"345 170 OFFCURVE",
"343 143 CURVE SMOOTH",
"339 101 OFFCURVE",
"326 12 OFFCURVE",
"302 -123 CURVE SMOOTH",
"255 -387 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
22 12 9 3 2 0 1 76 43 1 7 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 2 0 2 134 0 7 3 1 1 0 7 1 106 8 1 5 4 1 0 2 5 0 105 0 6 6 37 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 6 5 6 133 0 2 0 2 134 8 1 5 7 0 5 89 0 7 3 1 1 0 7 1 106 8 1 5 5 0 97 4 1 0 5 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
50 25 43 38 34 24 26 17 19 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
lastChange = "2018-08-16 21:37:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"347 -387 OFFCURVE",
"373 -365 OFFCURVE",
"403 -320 CURVE SMOOTH",
"444 -259 OFFCURVE",
"449 -209 OFFCURVE",
"449 -141 CURVE SMOOTH",
"449 -120 OFFCURVE",
"448 -96 OFFCURVE",
"447 -71 CURVE SMOOTH",
"446 -45 OFFCURVE",
"445 -9 OFFCURVE",
"445 23 CURVE SMOOTH",
"445 56 OFFCURVE",
"446 85 OFFCURVE",
"447 97 CURVE",
"479 96 OFFCURVE",
"525 88 OFFCURVE",
"639 58 CURVE SMOOTH",
"699 42 OFFCURVE",
"739 37 OFFCURVE",
"756 37 CURVE SMOOTH",
"781 37 OFFCURVE",
"811 48 OFFCURVE",
"847 73 CURVE SMOOTH",
"881 97 OFFCURVE",
"900 117 OFFCURVE",
"900 136 CURVE SMOOTH",
"900 152 OFFCURVE",
"884 171 OFFCURVE",
"853 192 CURVE SMOOTH",
"823 213 OFFCURVE",
"805 220 OFFCURVE",
"779 220 CURVE SMOOTH",
"749 220 OFFCURVE",
"723 214 OFFCURVE",
"649 188 CURVE SMOOTH",
"582 165 OFFCURVE",
"510 161 OFFCURVE",
"458 160 CURVE",
"474 255 OFFCURVE",
"540 456 OFFCURVE",
"612 523 CURVE",
"581 567 OFFCURVE",
"569 649 OFFCURVE",
"569 728 CURVE SMOOTH",
"569 770 OFFCURVE",
"572 811 OFFCURVE",
"578 844 CURVE",
"630 843 OFFCURVE",
"700 839 OFFCURVE",
"759 816 CURVE SMOOTH",
"825 790 OFFCURVE",
"849 784 OFFCURVE",
"879 784 CURVE SMOOTH",
"905 784 OFFCURVE",
"925 791 OFFCURVE",
"963 812 CURVE SMOOTH",
"1005 835 OFFCURVE",
"1027 855 OFFCURVE",
"1030 872 CURVE SMOOTH",
"1033 890 OFFCURVE",
"1023 909 OFFCURVE",
"999 931 CURVE SMOOTH",
"971 956 OFFCURVE",
"945 967 OFFCURVE",
"920 967 CURVE SMOOTH",
"903 967 OFFCURVE",
"861 962 OFFCURVE",
"795 946 CURVE SMOOTH",
"671 916 OFFCURVE",
"623 908 OFFCURVE",
"589 907 CURVE",
"596 932 OFFCURVE",
"628 1023 OFFCURVE",
"649 1075 CURVE SMOOTH",
"680 1151 OFFCURVE",
"702 1216 OFFCURVE",
"702 1265 CURVE SMOOTH",
"702 1284 OFFCURVE",
"699 1304 OFFCURVE",
"693 1324 CURVE SMOOTH",
"679 1369 OFFCURVE",
"661 1391 OFFCURVE",
"636 1391 CURVE SMOOTH",
"618 1391 OFFCURVE",
"597 1377 OFFCURVE",
"574 1348 CURVE SMOOTH",
"522 1284 OFFCURVE",
"511 1235 OFFCURVE",
"511 1173 CURVE SMOOTH",
"511 1147 OFFCURVE",
"512 1116 OFFCURVE",
"515 1077 CURVE SMOOTH",
"517 1051 OFFCURVE",
"518 1027 OFFCURVE",
"518 1002 CURVE SMOOTH",
"518 970 OFFCURVE",
"516 938 OFFCURVE",
"513 907 CURVE",
"473 910 OFFCURVE",
"421 920 OFFCURVE",
"355 938 CURVE SMOOTH",
"284 957 OFFCURVE",
"234 967 OFFCURVE",
"205 967 CURVE SMOOTH",
"183 967 OFFCURVE",
"156 959 OFFCURVE",
"124 938 CURVE SMOOTH",
"82 911 OFFCURVE",
"61 889 OFFCURVE",
"61 867 CURVE SMOOTH",
"61 853 OFFCURVE",
"74 836 OFFCURVE",
"99 818 CURVE SMOOTH",
"131 795 OFFCURVE",
"158 784 OFFCURVE",
"181 784 CURVE SMOOTH",
"202 784 OFFCURVE",
"280 806 OFFCURVE",
"327 820 CURVE SMOOTH",
"389 839 OFFCURVE",
"447 843 OFFCURVE",
"502 844 CURVE",
"485 744 OFFCURVE",
"425 584 OFFCURVE",
"354 523 CURVE",
"384 487 OFFCURVE",
"394 402 OFFCURVE",
"394 317 CURVE SMOOTH",
"394 259 OFFCURVE",
"389 201 OFFCURVE",
"382 160 CURVE",
"327 161 OFFCURVE",
"271 166 OFFCURVE",
"215 184 CURVE SMOOTH",
"172 198 OFFCURVE",
"102 220 OFFCURVE",
"81 220 CURVE SMOOTH",
"58 220 OFFCURVE",
"27 209 OFFCURVE",
"-13 186 CURVE SMOOTH",
"-52 163 OFFCURVE",
"-70 143 OFFCURVE",
"-70 125 CURVE SMOOTH",
"-70 107 OFFCURVE",
"-56 88 OFFCURVE",
"-30 66 CURVE SMOOTH",
"-6 45 OFFCURVE",
"19 37 OFFCURVE",
"41 37 CURVE SMOOTH",
"70 37 OFFCURVE",
"124 47 OFFCURVE",
"201 66 CURVE SMOOTH",
"273 84 OFFCURVE",
"329 94 OFFCURVE",
"371 97 CURVE",
"357 42 OFFCURVE",
"338 -14 OFFCURVE",
"313 -73 CURVE SMOOTH",
"275 -159 OFFCURVE",
"257 -210 OFFCURVE",
"257 -257 CURVE SMOOTH",
"257 -287 OFFCURVE",
"264 -316 OFFCURVE",
"276 -344 CURVE SMOOTH",
"289 -373 OFFCURVE",
"304 -387 OFFCURVE",
"322 -387 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
48 9 2 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 6 4 6 134 16 1 14 11 1 1 0 14 1 105 17 1 13 12 1 0 3 13 0 105 10 1 2 7 1 5 4 2 5 105 9 1 3 8 1 4 6 3 4 105 0 15 15 98 15 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
0 15 13 15 133 0 6 4 6 134 16 1 14 11 1 1 0 14 1 105 17 1 13 12 1 0 3 13 0 105 9 1 3 2 4 3 89 10 1 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
78 76 75 74 68 66 62 61 60 58 55 53 52 51 45 44 43 41 33 22 36 17 35 33 21 17 34 18 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 963;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"348 -433 OFFCURVE",
"387 -404 OFFCURVE",
"426 -345 CURVE SMOOTH",
"454 -303 OFFCURVE",
"478 -267 OFFCURVE",
"478 -209 CURVE SMOOTH",
"478 -181 OFFCURVE",
"474 -143 OFFCURVE",
"469 -93 CURVE SMOOTH",
"466 -64 OFFCURVE",
"463 -28 OFFCURVE",
"463 3 CURVE SMOOTH",
"463 21 OFFCURVE",
"464 37 OFFCURVE",
"466 49 CURVE",
"504 49 OFFCURVE",
"547 36 OFFCURVE",
"600 12 CURVE SMOOTH",
"653 -12 OFFCURVE",
"694 -25 OFFCURVE",
"723 -25 CURVE SMOOTH",
"753 -25 OFFCURVE",
"786 -13 OFFCURVE",
"821 14 CURVE SMOOTH",
"863 46 OFFCURVE",
"889 76 OFFCURVE",
"889 113 CURVE SMOOTH",
"889 144 OFFCURVE",
"868 171 OFFCURVE",
"826 196 CURVE SMOOTH",
"799 211 OFFCURVE",
"777 221 OFFCURVE",
"758 221 CURVE SMOOTH",
"732 221 OFFCURVE",
"690 211 OFFCURVE",
"633 188 CURVE SMOOTH",
"570 162 OFFCURVE",
"520 149 OFFCURVE",
"483 149 CURVE",
"503 260 OFFCURVE",
"583 444 OFFCURVE",
"653 499 CURVE",
"617 539 OFFCURVE",
"599 645 OFFCURVE",
"599 743 CURVE SMOOTH",
"599 781 OFFCURVE",
"601 818 OFFCURVE",
"607 849 CURVE",
"644 849 OFFCURVE",
"688 836 OFFCURVE",
"743 810 CURVE SMOOTH",
"792 787 OFFCURVE",
"830 777 OFFCURVE",
"856 777 CURVE SMOOTH",
"875 777 OFFCURVE",
"901 787 OFFCURVE",
"932 802 CURVE SMOOTH",
"997 833 OFFCURVE",
"1029 869 OFFCURVE",
"1029 912 CURVE SMOOTH",
"1029 937 OFFCURVE",
"1016 960 OFFCURVE",
"993 984 CURVE SMOOTH",
"966 1011 OFFCURVE",
"937 1023 OFFCURVE",
"907 1023 CURVE SMOOTH",
"878 1023 OFFCURVE",
"833 1010 OFFCURVE",
"772 986 CURVE SMOOTH",
"711 962 OFFCURVE",
"662 949 OFFCURVE",
"624 949 CURVE",
"631 983 OFFCURVE",
"656 1045 OFFCURVE",
"677 1091 CURVE SMOOTH",
"716 1172 OFFCURVE",
"739 1221 OFFCURVE",
"739 1267 CURVE SMOOTH",
"739 1294 OFFCURVE",
"732 1317 OFFCURVE",
"724 1343 CURVE SMOOTH",
"705 1402 OFFCURVE",
"676 1431 OFFCURVE",
"641 1431 CURVE SMOOTH",
"608 1431 OFFCURVE",
"574 1406 OFFCURVE",
"536 1353 CURVE SMOOTH",
"490 1291 OFFCURVE",
"476 1251 OFFCURVE",
"476 1205 CURVE SMOOTH",
"476 1179 OFFCURVE",
"479 1147 OFFCURVE",
"485 1109 CURVE SMOOTH",
"492 1066 OFFCURVE",
"495 1030 OFFCURVE",
"495 1000 CURVE SMOOTH",
"495 980 OFFCURVE",
"493 963 OFFCURVE",
"491 949 CURVE",
"449 950 OFFCURVE",
"414 960 OFFCURVE",
"354 988 CURVE SMOOTH",
"305 1011 OFFCURVE",
"264 1023 OFFCURVE",
"233 1023 CURVE SMOOTH",
"212 1023 OFFCURVE",
"186 1014 OFFCURVE",
"156 998 CURVE SMOOTH",
"81 958 OFFCURVE",
"67 911 OFFCURVE",
"67 887 CURVE SMOOTH",
"67 858 OFFCURVE",
"85 833 OFFCURVE",
"120 808 CURVE SMOOTH",
"151 787 OFFCURVE",
"177 777 OFFCURVE",
"199 777 CURVE SMOOTH",
"224 777 OFFCURVE",
"264 788 OFFCURVE",
"319 810 CURVE SMOOTH",
"384 836 OFFCURVE",
"436 849 OFFCURVE",
"474 849 CURVE",
"451 735 OFFCURVE",
"386 568 OFFCURVE",
"299 499 CURVE",
"343 451 OFFCURVE",
"358 357 OFFCURVE",
"358 265 CURVE SMOOTH",
"358 224 OFFCURVE",
"355 184 OFFCURVE",
"350 149 CURVE",
"312 149 OFFCURVE",
"266 162 OFFCURVE",
"209 188 CURVE SMOOTH",
"162 210 OFFCURVE",
"126 221 OFFCURVE",
"101 221 CURVE SMOOTH",
"79 221 OFFCURVE",
"49 211 OFFCURVE",
"12 190 CURVE SMOOTH",
"-45 158 OFFCURVE",
"-74 125 OFFCURVE",
"-74 83 CURVE SMOOTH",
"-74 52 OFFCURVE",
"-56 24 OFFCURVE",
"-20 0 CURVE SMOOTH",
"4 -16 OFFCURVE",
"28 -25 OFFCURVE",
"49 -25 CURVE SMOOTH",
"80 -25 OFFCURVE",
"125 -13 OFFCURVE",
"182 10 CURVE SMOOTH",
"252 38 OFFCURVE",
"289 48 OFFCURVE",
"333 49 CURVE",
"327 16 OFFCURVE",
"307 -37 OFFCURVE",
"269 -111 CURVE SMOOTH",
"232 -184 OFFCURVE",
"216 -225 OFFCURVE",
"216 -266 CURVE SMOOTH",
"216 -292 OFFCURVE",
"222 -322 OFFCURVE",
"234 -355 CURVE SMOOTH",
"254 -408 OFFCURVE",
"280 -433 OFFCURVE",
"313 -433 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
104 1 12 14 85 1 1 13 72 13 2 3 0 56 23 2 5 2 4 76 66 1 2 1 75 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
104 1 12 14 85 1 10 13 72 13 2 3 0 56 23 2 5 2 4 76 66 1 2 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 6 4 6 134 15 1 13 10 1 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 0 2 7 1 5 4 2 5 105 9 1 3 8 1 4 6 3 4 105 0 14 14 37 14 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 14 12 14 133 0 6 4 6 134 15 1 13 10 1 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 9 1 3 2 4 3 89 0 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 14 12 14 133 0 6 4 6 134 0 10 1 13 10 90 15 1 13 0 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 9 1 3 2 4 3 89 0 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
116 114 112 111 101 99 93 92 90 88 82 80 78 77 63 61 34 25 38 18 38 34 25 18 35 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 960;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "96CF2D90-7D8C-4D7A-817A-BD779A97C3AF";
name = "Aug 16 18, 17:31";
paths = (
{
closed = 1;
nodes = (
"1022 1004.667 OFFCURVE",
"997 1028 OFFCURVE",
"947 1028 CURVE SMOOTH",
"921 1028 OFFCURVE",
"877.667 1017.833 OFFCURVE",
"817 997.5 CURVE SMOOTH",
"756.333 977.167 OFFCURVE",
"707.333 967 OFFCURVE",
"670 967 CURVE",
"690.667 1037.667 OFFCURVE",
"710 1090.667 OFFCURVE",
"728 1126 CURVE",
"789 1226 LINE SMOOTH",
"816.333 1271.333 OFFCURVE",
"830 1303.667 OFFCURVE",
"830 1323 CURVE SMOOTH",
"830 1373.667 OFFCURVE",
"805.333 1399 OFFCURVE",
"756 1399 CURVE SMOOTH",
"690.667 1399 OFFCURVE",
"641 1343.667 OFFCURVE",
"641 1277 CURVE SMOOTH",
"641 1155 OFFCURVE",
"629 1051.667 OFFCURVE",
"605 967 CURVE",
"567 967 OFFCURVE",
"520.667 977.167 OFFCURVE",
"466 997.5 CURVE SMOOTH",
"411.333 1017.833 OFFCURVE",
"372.667 1028 OFFCURVE",
"350 1028 CURVE SMOOTH",
"304.667 1028 OFFCURVE",
"244 992 OFFCURVE",
"244 944 CURVE SMOOTH",
"244 884 OFFCURVE",
"268 854 OFFCURVE",
"316 854 CURVE SMOOTH",
"344 854 OFFCURVE",
"387.833 864.167 OFFCURVE",
"447.5 884.5 CURVE SMOOTH",
"507.167 904.833 OFFCURVE",
"554.667 915 OFFCURVE",
"590 915 CURVE",
"543.333 755 OFFCURVE",
"509.333 659.333 OFFCURVE",
"424 594 CURVE",
"443.333 570.667 OFFCURVE",
"453 541.333 OFFCURVE",
"453 506 CURVE SMOOTH",
"453 470.667 OFFCURVE",
"434.667 386 OFFCURVE",
"398 252 CURVE",
"360.667 252 OFFCURVE",
"314.667 262.5 OFFCURVE",
"260 283.5 CURVE SMOOTH",
"205.333 304.5 OFFCURVE",
"166.667 315 OFFCURVE",
"144 315 CURVE SMOOTH",
"98.667 315 OFFCURVE",
"37 275.667 OFFCURVE",
"37 229 CURVE SMOOTH",
"37 170.333 OFFCURVE",
"61 141 OFFCURVE",
"109 141 CURVE SMOOTH",
"139 141 OFFCURVE",
"183.667 151.333 OFFCURVE",
"243 172 CURVE SMOOTH",
"302.333 192.667 OFFCURVE",
"349 203 OFFCURVE",
"383 203 CURVE",
"365 139 OFFCURVE",
"346.333 87.333 OFFCURVE",
"327 48 CURVE",
"261 -69 LINE SMOOTH",
"231.667 -123.667 OFFCURVE",
"217 -162 OFFCURVE",
"217 -184 CURVE SMOOTH",
"217 -232 OFFCURVE",
"243 -256 OFFCURVE",
"295 -256 CURVE SMOOTH",
"368.333 -256 OFFCURVE",
"410 -197 OFFCURVE",
"410 -125 CURVE SMOOTH",
"410 3.667 OFFCURVE",
"423 113 OFFCURVE",
"449 203 CURVE",
"484.333 203 OFFCURVE",
"530 192.667 OFFCURVE",
"586 172 CURVE SMOOTH",
"642 151.333 OFFCURVE",
"682.333 141 OFFCURVE",
"707 141 CURVE SMOOTH",
"756.333 141 OFFCURVE",
"811 175 OFFCURVE",
"811 219 CURVE SMOOTH",
"811 283 OFFCURVE",
"787.333 315 OFFCURVE",
"740 315 CURVE SMOOTH",
"717.333 315 OFFCURVE",
"675.333 304.5 OFFCURVE",
"614 283.5 CURVE SMOOTH",
"552.667 262.5 OFFCURVE",
"502.333 252 OFFCURVE",
"463 252 CURVE",
"517 436.667 OFFCURVE",
"573.667 550.667 OFFCURVE",
"633 594 CURVE",
"617 618 OFFCURVE",
"609 650.667 OFFCURVE",
"609 692 CURVE SMOOTH",
"609 733.333 OFFCURVE",
"624.667 807.667 OFFCURVE",
"656 915 CURVE",
"691.333 915 OFFCURVE",
"737.167 904.833 OFFCURVE",
"793.5 884.5 CURVE SMOOTH",
"849.833 864.167 OFFCURVE",
"892 854 OFFCURVE",
"920 854 CURVE SMOOTH",
"976 854 OFFCURVE",
"1022 899.333 OFFCURVE",
"1022 958 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
48 9 2 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 6 4 6 134 16 1 14 11 1 1 0 14 1 105 17 1 13 12 1 0 3 13 0 105 10 1 2 7 1 5 4 2 5 105 9 1 3 8 1 4 6 3 4 105 0 15 15 98 15 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
0 15 13 15 133 0 6 4 6 134 16 1 14 11 1 1 0 14 1 105 17 1 13 12 1 0 3 13 0 105 9 1 3 2 4 3 89 10 1 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
78 76 75 74 68 66 62 61 60 58 55 53 52 51 45 44 43 41 33 22 36 17 35 33 21 17 34 18 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 963;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "61D4F085-B0BD-4C62-820C-0605593C86EB";
name = "Aug 16 18, 17:31";
paths = (
{
closed = 1;
nodes = (
"1059 958 OFFCURVE",
"1055 975 QCURVE",
"1044 997 LINE",
"1014 1044 OFFCURVE",
"946 1044 QCURVE SMOOTH",
"914 1045 OFFCURVE",
"846 1012 QCURVE SMOOTH",
"759 969 OFFCURVE",
"700 969 QCURVE",
"705 989 OFFCURVE",
"719 1016 QCURVE",
"762 1085 LINE",
"766 1094 LINE",
"807 1159 LINE SMOOTH",
"866 1253 OFFCURVE",
"866 1290 QCURVE",
"864 1316 OFFCURVE",
"856 1339 QCURVE",
"832 1399 OFFCURVE",
"756 1399 QCURVE",
"700 1401 OFFCURVE",
"659 1366 QCURVE SMOOTH",
"604 1319 OFFCURVE",
"604 1247 QCURVE SMOOTH",
"604 1237 LINE SMOOTH",
"605 1057 OFFCURVE",
"582 969 QCURVE",
"530 971 OFFCURVE",
"444 1012 QCURVE SMOOTH",
"381 1044 OFFCURVE",
"352 1044 QCURVE SMOOTH",
"320 1044 OFFCURVE",
"285 1028 QCURVE",
"207 996 OFFCURVE",
"207 928 QCURVE SMOOTH",
"207 913 OFFCURVE",
"209 901 QCURVE",
"221 807 OFFCURVE",
"315 807 QCURVE SMOOTH",
"346 807 OFFCURVE",
"412 838 QCURVE SMOOTH",
"496 877 OFFCURVE",
"555 877 QCURVE",
"542 840 OFFCURVE",
"530 809 QCURVE SMOOTH",
"480 678 OFFCURVE",
"371 598 QCURVE",
"375 594 LINE",
"416 547 OFFCURVE",
"416 508 QCURVE SMOOTH",
"416 498 LINE SMOOTH",
"414 404 OFFCURVE",
"377 283 QCURVE",
"362 283 LINE",
"324 287 OFFCURVE",
"250 326 QCURVE SMOOTH",
"182 360 OFFCURVE",
"145 360 QCURVE SMOOTH",
"113 360 OFFCURVE",
"74 342 QCURVE SMOOTH",
"0 307 OFFCURVE",
"0 244 QCURVE SMOOTH",
"0 225 OFFCURVE",
"2 209 QCURVE",
"21 125 OFFCURVE",
"109 125 QCURVE SMOOTH",
"145 125 OFFCURVE",
"217 156 QCURVE SMOOTH",
"303 190 OFFCURVE",
"350 190 QCURVE",
"342 154 OFFCURVE",
"301 80 QCURVE",
"293 70 OFFCURVE",
"264 27 QCURVE SMOOTH",
"180 -103 OFFCURVE",
"180 -152 QCURVE SMOOTH",
"180 -177 OFFCURVE",
"188 -197 QCURVE SMOOTH",
"213 -256 OFFCURVE",
"295 -256 QCURVE SMOOTH",
"352 -256 OFFCURVE",
"391 -223 QCURVE SMOOTH",
"446 -178 OFFCURVE",
"446 -96 QCURVE SMOOTH",
"446 -57 LINE SMOOTH",
"446 104 OFFCURVE",
"469 190 QCURVE",
"532 189 OFFCURVE",
"610 154 QCURVE SMOOTH",
"674 125 OFFCURVE",
"711 125 QCURVE SMOOTH",
"741 125 OFFCURVE",
"776 139 QCURVE",
"848 174 OFFCURVE",
"848 233 QCURVE SMOOTH",
"848 252 OFFCURVE",
"846 268 QCURVE",
"827 360 OFFCURVE",
"739 360 QCURVE SMOOTH",
"707 361 OFFCURVE",
"629 324 QCURVE SMOOTH",
"547 283 OFFCURVE",
"496 283 QCURVE",
"502 301 LINE SMOOTH",
"567 502 OFFCURVE",
"682 584 QCURVE",
"678 592 LINE",
"645 641 OFFCURVE",
"645 682 QCURVE SMOOTH",
"645 789 OFFCURVE",
"674 877 QCURVE",
"709 874 LINE SMOOTH",
"765 871 OFFCURVE",
"831 836 QCURVE SMOOTH",
"883 807 OFFCURVE",
"918 807 QCURVE SMOOTH",
"962 806 OFFCURVE",
"999 831 QCURVE SMOOTH",
"1059 870 OFFCURVE",
"1059 942 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
104 1 12 14 85 1 1 13 72 13 2 3 0 56 23 2 5 2 4 76 66 1 2 1 75 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
104 1 12 14 85 1 10 13 72 13 2 3 0 56 23 2 5 2 4 76 66 1 2 1 75 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 6 4 6 134 15 1 13 10 1 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 0 2 7 1 5 4 2 5 105 9 1 3 8 1 4 6 3 4 105 0 14 14 37 14 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 14 12 14 133 0 6 4 6 134 15 1 13 10 1 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 9 1 3 2 4 3 89 0 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 14 12 14 133 0 6 4 6 134 0 10 1 13 10 90 15 1 13 0 1 0 13 1 106 16 1 12 11 1 0 3 12 0 105 9 1 3 2 4 3 89 0 2 7 1 5 4 2 5 105 9 1 3 3 4 97 8 1 4 3 4 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
116 114 112 111 101 99 93 92 90 88 82 80 78 77 63 61 34 25 38 18 38 34 25 18 35 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 960;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = dcaron;
lastChange = "2018-08-18 13:52:55 +0000";
layers = (
{
components = (
{
alignment = -1;
name = d;
},
{
name = uni030C.alt;
transform = "{1, 0, 0, 1, 620, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 998;
},
{
components = (
{
name = d;
},
{
name = uni030C.alt;
transform = "{1, 0, 0, 1, 772, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 914;
}
);
leftMetricsKey = "=d";
note = dcaron;
rightKerningGroup = dcaron;
unicode = 010F;
},
{
glyphname = degree;
lastChange = "2018-08-09 15:38:08 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"639 782 OFFCURVE",
"751 891 OFFCURVE",
"751 1032 CURVE SMOOTH",
"751 1208 OFFCURVE",
"627 1311 OFFCURVE",
"488 1311 CURVE SMOOTH",
"323 1311 OFFCURVE",
"202 1206 OFFCURVE",
"202 1047 CURVE SMOOTH",
"202 899 OFFCURVE",
"311 782 OFFCURVE",
"462 782 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"368 854 OFFCURVE",
"317 942 OFFCURVE",
"317 1047 CURVE SMOOTH",
"317 1158 OFFCURVE",
"388 1239 OFFCURVE",
"475 1239 CURVE SMOOTH",
"588 1239 OFFCURVE",
"636 1138 OFFCURVE",
"636 1066 CURVE SMOOTH",
"636 959 OFFCURVE",
"583 854 OFFCURVE",
"492 854 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 39 values pushed */
4 1 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 0 0 14 13 10 9 0 7 0 7 19 5 12 23 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 629;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"682 782 OFFCURVE",
"801 885 OFFCURVE",
"801 1047 CURVE SMOOTH",
"801 1197 OFFCURVE",
"686 1311 OFFCURVE",
"526 1311 CURVE SMOOTH",
"373 1311 OFFCURVE",
"252 1205 OFFCURVE",
"252 1047 CURVE SMOOTH",
"252 894 OFFCURVE",
"363 782 OFFCURVE",
"526 782 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"449 887 OFFCURVE",
"397 956 OFFCURVE",
"397 1047 CURVE SMOOTH",
"397 1129 OFFCURVE",
"441 1206 OFFCURVE",
"526 1206 CURVE SMOOTH",
"603 1206 OFFCURVE",
"655 1138 OFFCURVE",
"655 1047 CURVE SMOOTH",
"655 962 OFFCURVE",
"613 887 OFFCURVE",
"526 887 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 19 19 20 18 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 733;
}
);
note = degree;
unicode = 00B0;
},
{
glyphname = dieresis;
lastChange = "2018-08-18 03:23:36 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"713 1021 OFFCURVE",
"759 1063 OFFCURVE",
"759 1131 CURVE SMOOTH",
"759 1200 OFFCURVE",
"728 1236 OFFCURVE",
"666 1236 CURVE SMOOTH",
"611 1236 OFFCURVE",
"562 1187 OFFCURVE",
"562 1124 CURVE SMOOTH",
"562 1055 OFFCURVE",
"595 1021 OFFCURVE",
"657 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"356 1021 OFFCURVE",
"402 1063 OFFCURVE",
"402 1131 CURVE SMOOTH",
"402 1200 OFFCURVE",
"371 1236 OFFCURVE",
"309 1236 CURVE SMOOTH",
"254 1236 OFFCURVE",
"205 1187 OFFCURVE",
"205 1124 CURVE SMOOTH",
"205 1055 OFFCURVE",
"238 1021 OFFCURVE",
"300 1021 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 35 35 35 34 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 717;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"805 1021 OFFCURVE",
"863 1077 OFFCURVE",
"863 1150 CURVE SMOOTH",
"863 1221 OFFCURVE",
"806 1273 OFFCURVE",
"737 1273 CURVE SMOOTH",
"663 1273 OFFCURVE",
"610 1215 OFFCURVE",
"610 1143 CURVE SMOOTH",
"610 1070 OFFCURVE",
"657 1021 OFFCURVE",
"730 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"406 1021 OFFCURVE",
"461 1076 OFFCURVE",
"461 1149 CURVE SMOOTH",
"461 1221 OFFCURVE",
"409 1273 OFFCURVE",
"340 1273 CURVE SMOOTH",
"260 1273 OFFCURVE",
"208 1215 OFFCURVE",
"208 1143 CURVE SMOOTH",
"208 1070 OFFCURVE",
"258 1021 OFFCURVE",
"331 1021 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 818;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = divide;
lastChange = "2018-08-09 15:38:56 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"897 371 LINE",
"897 471 LINE",
"82 471 LINE",
"82 371 LINE"
);
},
{
closed = 1;
nodes = (
"539 29 OFFCURVE",
"591 63 OFFCURVE",
"591 132 CURVE SMOOTH",
"591 201 OFFCURVE",
"539 235 OFFCURVE",
"487 235 CURVE SMOOTH",
"435 235 OFFCURVE",
"383 201 OFFCURVE",
"383 132 CURVE SMOOTH",
"383 63 OFFCURVE",
"435 29 OFFCURVE",
"487 29 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"539 607 OFFCURVE",
"591 641 OFFCURVE",
"591 710 CURVE SMOOTH",
"591 779 OFFCURVE",
"539 813 OFFCURVE",
"487 813 CURVE SMOOTH",
"435 813 OFFCURVE",
"383 779 OFFCURVE",
"383 710 CURVE SMOOTH",
"383 641 OFFCURVE",
"435 607 OFFCURVE",
"487 607 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 5 0 4 1 5 4 103 0 1 0 0 1 0 101 0 2 2 3 97 0 3 3 95 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 3 0 2 5 3 2 105 0 5 0 4 1 5 4 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
17 18 19 19 19 17 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1051;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"991 383 LINE",
"991 541 LINE",
"102 541 LINE",
"102 383 LINE"
);
},
{
closed = 1;
nodes = (
"622 2 OFFCURVE",
"679 46 OFFCURVE",
"679 125 CURVE SMOOTH",
"679 208 OFFCURVE",
"624 260 OFFCURVE",
"545 260 CURVE SMOOTH",
"471 260 OFFCURVE",
"411 208 OFFCURVE",
"411 137 CURVE SMOOTH",
"411 56 OFFCURVE",
"469 2 OFFCURVE",
"550 2 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"621 664 OFFCURVE",
"679 709 OFFCURVE",
"679 786 CURVE SMOOTH",
"679 878 OFFCURVE",
"611 922 OFFCURVE",
"544 922 CURVE SMOOTH",
"477 922 OFFCURVE",
"411 879 OFFCURVE",
"411 799 CURVE SMOOTH",
"411 723 OFFCURVE",
"465 664 OFFCURVE",
"550 664 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 1 0 0 3 1 0 105 0 3 0 2 5 3 2 103 0 5 5 4 97 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 1 0 0 3 1 0 105 0 3 0 2 5 3 2 103 0 5 4 4 5 89 0 5 5 4 97 0 4 5 4 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
37 37 17 19 37 21 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1095;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = dollar;
lastChange = "2018-08-16 21:11:35 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"726 -27 OFFCURVE",
"882 249 OFFCURVE",
"882 485 CURVE SMOOTH",
"882 647 OFFCURVE",
"787 734 OFFCURVE",
"585 777 CURVE SMOOTH",
"417 812 OFFCURVE",
"325 913 OFFCURVE",
"325 1043 CURVE SMOOTH",
"325 1171 OFFCURVE",
"441 1326 OFFCURVE",
"611 1326 CURVE SMOOTH",
"788 1326 OFFCURVE",
"869 1224 OFFCURVE",
"871 1077 CURVE",
"930 1077 LINE",
"941 1169 OFFCURVE",
"947 1281 OFFCURVE",
"939 1345 CURVE",
"934 1343 OFFCURVE",
"927 1342 OFFCURVE",
"919 1342 CURVE SMOOTH",
"862 1342 OFFCURVE",
"754 1385 OFFCURVE",
"645 1385 CURVE SMOOTH",
"358 1385 OFFCURVE",
"205 1174 OFFCURVE",
"205 953 CURVE SMOOTH",
"205 777 OFFCURVE",
"308 678 OFFCURVE",
"529 626 CURVE SMOOTH",
"676 591 OFFCURVE",
"757 492 OFFCURVE",
"757 363 CURVE SMOOTH",
"757 213 OFFCURVE",
"633 40 OFFCURVE",
"466 40 CURVE SMOOTH",
"252 40 OFFCURVE",
"132 182 OFFCURVE",
"132 341 CURVE SMOOTH",
"132 352 OFFCURVE",
"133 363 OFFCURVE",
"134 374 CURVE",
"74 374 LINE",
"57 272 OFFCURVE",
"51 170 OFFCURVE",
"70 73 CURVE",
"209 -4 OFFCURVE",
"266 -27 OFFCURVE",
"426 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"385 -204 LINE",
"688 1517 LINE",
"607 1531 LINE",
"304 -190 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
43 1 7 8 59 44 21 3 3 7 20 10 2 9 3 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 0 5 5 94 77 0 8 8 4 97 6 1 4 4 92 77 0 9 9 0 97 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 5 5 94 77 0 9 9 0 97 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 9 2 1 0 1 9 0 105 0 5 5 94 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 5 4 5 133 0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 9 0 0 9 89 0 9 9 0 97 2 1 0 9 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
0 5 4 5 133 0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 2 0 1 0 2 1 128 0 1 1 132 6 1 4 0 8 7 4 8 105 0 9 0 0 9 89 0 9 9 0 97 0 0 9 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
55 54 26 21 18 18 27 36 18 18 18 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1042;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"747 -27 OFFCURVE",
"939 239 OFFCURVE",
"939 483 CURVE SMOOTH",
"939 658 OFFCURVE",
"822 775 OFFCURVE",
"586 834 CURVE SMOOTH",
"447 868 OFFCURVE",
"377 936 OFFCURVE",
"377 1034 CURVE SMOOTH",
"377 1148 OFFCURVE",
"469 1300 OFFCURVE",
"636 1300 CURVE SMOOTH",
"775 1300 OFFCURVE",
"845 1219 OFFCURVE",
"859 1063 CURVE",
"957 1063 LINE",
"969 1157 OFFCURVE",
"969 1272 OFFCURVE",
"957 1354 CURVE",
"946 1352 OFFCURVE",
"939 1352 OFFCURVE",
"931 1352 CURVE SMOOTH",
"876 1352 OFFCURVE",
"765 1384 OFFCURVE",
"648 1384 CURVE SMOOTH",
"355 1384 OFFCURVE",
"157 1181 OFFCURVE",
"157 940 CURVE SMOOTH",
"157 760 OFFCURVE",
"267 642 OFFCURVE",
"485 584 CURVE SMOOTH",
"634 545 OFFCURVE",
"709 468 OFFCURVE",
"709 358 CURVE SMOOTH",
"709 240 OFFCURVE",
"615 68 OFFCURVE",
"443 68 CURVE SMOOTH",
"279 68 OFFCURVE",
"157 187 OFFCURVE",
"157 359 CURVE SMOOTH",
"157 370 OFFCURVE",
"157 380 OFFCURVE",
"158 391 CURVE",
"60 391 LINE",
"41 284 OFFCURVE",
"41 176 OFFCURVE",
"57 72 CURVE",
"181 0 OFFCURVE",
"255 -27 OFFCURVE",
"431 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"439 -196 LINE",
"746 1545 LINE",
"615 1568 LINE",
"308 -173 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
8 6 2 0 4 63 57 37 9 4 1 0 2 76 36 24 21 3 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 1 134 0 4 0 0 1 4 0 105 0 2 2 33 77 0 3 3 31 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 3 2 4 2 3 4 128 0 1 0 1 134 0 4 0 0 1 4 0 105 0 2 2 33 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
51 50 49 48 46 45 30 29 19 5 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1040;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "BAFA6DCB-4E1A-415F-8315-8511C390122B";
name = "Aug 16 18, 17:09";
paths = (
{
closed = 1;
nodes = (
"877 619.333 OFFCURVE",
"813.667 689.333 OFFCURVE",
"635 756 CURVE",
"776 1243 LINE",
"863.333 1223.667 OFFCURVE",
"907.667 1170.333 OFFCURVE",
"909 1083 CURVE SMOOTH",
"910 1027 LINE SMOOTH",
"910 1016.333 OFFCURVE",
"920.333 1011 OFFCURVE",
"941 1011 CURVE SMOOTH",
"961.667 1011 OFFCURVE",
"973.333 1017 OFFCURVE",
"976 1029 CURVE SMOOTH",
"996.667 1123.667 OFFCURVE",
"1008 1205.667 OFFCURVE",
"1010 1275 CURVE",
"999.333 1275 OFFCURVE",
"966.167 1280.833 OFFCURVE",
"910.5 1292.5 CURVE SMOOTH",
"854.833 1304.167 OFFCURVE",
"816.667 1310 OFFCURVE",
"796 1310 CURVE",
"846 1483 LINE SMOOTH",
"848.667 1493 OFFCURVE",
"837.167 1498 OFFCURVE",
"811.5 1498 CURVE SMOOTH",
"785.833 1498 OFFCURVE",
"771.333 1493 OFFCURVE",
"768 1483 CURVE",
"718 1312 LINE",
"482 1301.333 OFFCURVE",
"267 1117.667 OFFCURVE",
"267 887 CURVE SMOOTH",
"267 764.333 OFFCURVE",
"314.333 698.333 OFFCURVE",
"513 605 CURVE",
"358 71 LINE",
"220.667 96.333 OFFCURVE",
"152 175 OFFCURVE",
"152 307 CURVE SMOOTH",
"152 319 OFFCURVE",
"154 336.667 OFFCURVE",
"158 360 CURVE",
"159.333 370.667 OFFCURVE",
"150 376 OFFCURVE",
"130 376 CURVE SMOOTH",
"108.667 376 OFFCURVE",
"96 369.667 OFFCURVE",
"92 357 CURVE SMOOTH",
"70.667 280.333 OFFCURVE",
"60 190.667 OFFCURVE",
"60 88 CURVE",
"160.667 31.333 OFFCURVE",
"252.667 1 OFFCURVE",
"336 -3 CURVE",
"281 -195 LINE SMOOTH",
"277.667 -205.667 OFFCURVE",
"288.833 -211 OFFCURVE",
"314.5 -211 CURVE SMOOTH",
"340.167 -211 OFFCURVE",
"354.667 -205.667 OFFCURVE",
"358 -195 CURVE SMOOTH",
"414 -3 LINE",
"658 14.333 OFFCURVE",
"877 250 OFFCURVE",
"877 490 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"460.333 822.667 OFFCURVE",
"408 878.667 OFFCURVE",
"408 950 CURVE SMOOTH",
"408 1115.333 OFFCURVE",
"536 1250 OFFCURVE",
"700 1250 CURVE",
"694 1227.333 OFFCURVE",
"649 1071.333 OFFCURVE",
"565 782 CURVE"
);
},
{
closed = 1;
nodes = (
"581 572 LINE",
"672.333 522.667 OFFCURVE",
"718 459.333 OFFCURVE",
"718 382 CURVE SMOOTH",
"718 227.333 OFFCURVE",
"585 67.667 OFFCURVE",
"433 65 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
43 1 7 8 59 44 21 3 3 7 20 10 2 9 3 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 0 5 5 94 77 0 8 8 4 97 6 1 4 4 92 77 0 9 9 0 97 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 5 5 94 77 0 9 9 0 97 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 9 2 1 0 1 9 0 105 0 5 5 94 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 5 4 5 133 0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 1 0 1 134 6 1 4 0 8 7 4 8 105 0 9 0 0 9 89 0 9 9 0 97 2 1 0 9 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
0 5 4 5 133 0 7 8 3 8 7 3 128 0 3 9 8 3 9 126 0 2 0 1 0 2 1 128 0 1 1 132 6 1 4 0 8 7 4 8 105 0 9 0 0 9 89 0 9 9 0 97 0 0 9 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
55 54 26 21 18 18 27 36 18 18 18 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 926;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "C0918093-C7A8-4518-A21D-5A62ABC5222A";
name = "Aug 16 18, 17:10";
paths = (
{
closed = 1;
nodes = (
"1031 1301 OFFCURVE",
"983 1300 OFFCURVE",
"913 1325 OFFCURVE",
"817 1329 QCURVE",
"854 1466 LINE SMOOTH",
"858 1483 OFFCURVE",
"733 1482 OFFCURVE",
"729 1466 QCURVE SMOOTH",
"692 1329 LINE",
"502 1307 OFFCURVE",
"244 1038 OFFCURVE",
"244 864 QCURVE SMOOTH",
"244 772 OFFCURVE",
"330 650 OFFCURVE",
"492 580 QCURVE",
"358 88 LINE",
"287 111 OFFCURVE",
"195 232 OFFCURVE",
"195 326 QCURVE SMOOTH",
"195 348 OFFCURVE",
"199 379 QCURVE",
"203 399 OFFCURVE",
"110 400 OFFCURVE",
"104 375 QCURVE SMOOTH",
"74 248 OFFCURVE",
"74 154 QCURVE SMOOTH",
"74 135 LINE",
"76 76 LINE",
"141 43 LINE SMOOTH",
"232 -6 OFFCURVE",
"332 -14 QCURVE",
"295 -150 LINE SMOOTH",
"291 -166 OFFCURVE",
"416 -164 OFFCURVE",
"420 -150 QCURVE SMOOTH",
"457 -16 LINE",
"639 0 OFFCURVE",
"872 213 OFFCURVE",
"956 420 OFFCURVE",
"956 514 QCURVE SMOOTH",
"956 618 OFFCURVE",
"830 748 OFFCURVE",
"674 797 QCURVE",
"793 1241 LINE",
"920 1204 OFFCURVE",
"926 1069 QCURVE SMOOTH",
"928 1028 LINE",
"930 1014 OFFCURVE",
"1020 1013 OFFCURVE",
"1024 1042 QCURVE",
"1047 1174 OFFCURVE",
"1047 1303 QCURVE"
);
},
{
closed = 1;
nodes = (
"561 840 LINE",
"461 887 OFFCURVE",
"461 973 QCURVE SMOOTH",
"461 1051 OFFCURVE",
"580 1225 OFFCURVE",
"670 1245 QCURVE"
);
},
{
closed = 1;
nodes = (
"604 532 LINE",
"725 473 OFFCURVE",
"725 375 QCURVE SMOOTH",
"725 276 OFFCURVE",
"587 86 OFFCURVE",
"481 74 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
8 6 2 0 4 63 57 37 9 4 1 0 2 76 36 24 21 3 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 1 134 0 4 0 0 1 4 0 105 0 2 2 33 77 0 3 3 31 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 3 2 4 2 3 4 128 0 1 0 1 134 0 4 0 0 1 4 0 105 0 2 2 33 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
51 50 49 48 46 45 30 29 19 5 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 993;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = dollar.oldstyle;
lastChange = "2018-08-16 21:14:42 +0000";
layers = (
{
components = (
{
name = s;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"204 -152 LINE",
"403 977 LINE",
"322 991 LINE",
"123 -138 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 43 values pushed */
41 1 2 74 58 50 28 27 19 6 5 7 3 73 0 2 1 2 136 0 1 0 1 136 0 0 3 0 136 0 3 3 118 54 51 47 46 26 24 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 514;
},
{
components = (
{
name = s;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"258 -165 LINE",
"464 1005 LINE",
"352 1025 LINE",
"146 -145 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 44 values pushed */
44 39 2 2 74 62 54 30 29 20 6 5 7 3 73 0 2 1 2 136 0 1 0 1 136 0 0 3 0 136 0 3 3 118 58 57 51 50 28 26 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 585;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "7CD987C4-810F-4C86-AF90-7EA7FC2A6901";
name = "Aug 16 18, 17:12";
paths = (
{
closed = 1;
nodes = (
"543 780.333 OFFCURVE",
"493.667 834.667 OFFCURVE",
"443 848 CURVE",
"472 957 LINE SMOOTH",
"474.667 966.333 OFFCURVE",
"462.667 975 OFFCURVE",
"436 983 CURVE",
"425.333 985.667 OFFCURVE",
"416.333 987 OFFCURVE",
"409 987 CURVE SMOOTH",
"399.667 987 OFFCURVE",
"394.333 984 OFFCURVE",
"393 978 CURVE",
"358 848 LINE",
"232.667 828 OFFCURVE",
"158 718.667 OFFCURVE",
"158 592 CURVE SMOOTH",
"158 530.667 OFFCURVE",
"183.667 461.667 OFFCURVE",
"235 385 CURVE",
"164 120 LINE",
"146 148 OFFCURVE",
"117.333 162 OFFCURVE",
"78 162 CURVE SMOOTH",
"43.333 162 OFFCURVE",
"23 130 OFFCURVE",
"23 82 CURVE SMOOTH",
"23 31.333 OFFCURVE",
"80.667 -13.333 OFFCURVE",
"126 -24 CURVE",
"96 -138 LINE SMOOTH",
"94 -145.333 OFFCURVE",
"106 -152.333 OFFCURVE",
"132 -159 CURVE",
"145.333 -163 OFFCURVE",
"155.667 -165 OFFCURVE",
"163 -165 CURVE SMOOTH",
"169.667 -165 OFFCURVE",
"173.667 -163 OFFCURVE",
"175 -159 CURVE",
"211 -23 LINE",
"336.333 -3 OFFCURVE",
"449 98.667 OFFCURVE",
"449 236 CURVE SMOOTH",
"449 296 OFFCURVE",
"414 376.667 OFFCURVE",
"344 478 CURVE",
"413 736 LINE",
"426.333 693.333 OFFCURVE",
"451 672 OFFCURVE",
"487 672 CURVE SMOOTH",
"511 672 OFFCURVE",
"543 700.333 OFFCURVE",
"543 731 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"295 294 LINE",
"323.667 244.667 OFFCURVE",
"338 205.333 OFFCURVE",
"338 176 CURVE SMOOTH",
"338 95.333 OFFCURVE",
"310.667 55 OFFCURVE",
"256 55 CURVE SMOOTH",
"247.333 55 OFFCURVE",
"239.333 55.667 OFFCURVE",
"232 57 CURVE"
);
},
{
closed = 1;
nodes = (
"285 576 LINE",
"264.333 617.333 OFFCURVE",
"254 651.333 OFFCURVE",
"254 678 CURVE SMOOTH",
"254 723.333 OFFCURVE",
"287.333 788 OFFCURVE",
"334 788 CURVE SMOOTH",
"336.667 788 OFFCURVE",
"339.333 788 OFFCURVE",
"342 788 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 43 values pushed */
41 1 2 74 58 50 28 27 19 6 5 7 3 73 0 2 1 2 136 0 1 0 1 136 0 0 3 0 136 0 3 3 118 54 51 47 46 26 24 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 524;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "B81A8853-C51E-4164-BA81-77DB5BC82B94";
name = "Aug 16 18, 17:13";
paths = (
{
closed = 1;
nodes = (
"614 739 OFFCURVE",
"563 784 QCURVE SMOOTH",
"530 815 OFFCURVE",
"489 825 QCURVE",
"522 948 LINE SMOOTH",
"526 965 OFFCURVE",
"473 979 QCURVE SMOOTH",
"448 985 OFFCURVE",
"434 985 QCURVE",
"418 987 OFFCURVE",
"416 979 QCURVE SMOOTH",
"377 825 LINE",
"295 811 OFFCURVE",
"236 760 QCURVE SMOOTH",
"152 690 OFFCURVE",
"152 567 QCURVE SMOOTH",
"154 467 OFFCURVE",
"252 356 QCURVE",
"207 188 LINE",
"168 225 OFFCURVE",
"109 225 QCURVE SMOOTH",
"63 225 OFFCURVE",
"18 162 OFFCURVE",
"18 123 QCURVE SMOOTH",
"19 82 OFFCURVE",
"68 39 QCURVE SMOOTH",
"105 6 OFFCURVE",
"156 -2 QCURVE",
"119 -137 LINE",
"117 -150 OFFCURVE",
"170 -164 QCURVE SMOOTH",
"199 -172 OFFCURVE",
"213 -172 QCURVE SMOOTH",
"223 -172 OFFCURVE",
"225 -168 QCURVE",
"270 2 LINE",
"360 19 OFFCURVE",
"426 74 QCURVE SMOOTH",
"520 154 OFFCURVE",
"520 258 QCURVE",
"518 361 OFFCURVE",
"399 492 QCURVE",
"440 643 LINE",
"473 608 OFFCURVE",
"532 608 QCURVE SMOOTH",
"563 608 OFFCURVE",
"614 663 OFFCURVE",
"614 692 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"338 258 LINE",
"385 199 OFFCURVE",
"385 172 QCURVE SMOOTH",
"385 113 OFFCURVE",
"322 113 QCURVE SMOOTH",
"309 113 OFFCURVE",
"299 115 QCURVE"
);
},
{
closed = 1;
nodes = (
"313 594 LINE",
"272 651 OFFCURVE",
"272 680 QCURVE SMOOTH",
"272 700 OFFCURVE",
"299 729 OFFCURVE",
"322 729 QCURVE SMOOTH",
"338 729 OFFCURVE",
"350 725 QCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 44 values pushed */
44 39 2 2 74 62 54 30 29 20 6 5 7 3 73 0 2 1 2 136 0 1 0 1 136 0 0 3 0 136 0 3 3 118 58 57 51 50 28 26 34 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 616;
}
);
note = dollar.oldstyle;
},
{
glyphname = dotaccent;
lastChange = "2018-08-18 13:08:36 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"669 1050 OFFCURVE",
"715 1092 OFFCURVE",
"715 1160 CURVE SMOOTH",
"715 1229 OFFCURVE",
"684 1265 OFFCURVE",
"622 1265 CURVE SMOOTH",
"568 1265 OFFCURVE",
"518 1216 OFFCURVE",
"518 1152 CURVE SMOOTH",
"518 1084 OFFCURVE",
"551 1050 OFFCURVE",
"613 1050 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"657 1010 OFFCURVE",
"709 1059 OFFCURVE",
"709 1115 CURVE SMOOTH",
"709 1158 OFFCURVE",
"679 1190 OFFCURVE",
"634 1190 CURVE SMOOTH",
"579 1190 OFFCURVE",
"527 1141 OFFCURVE",
"527 1085 CURVE SMOOTH",
"527 1042 OFFCURVE",
"557 1010 OFFCURVE",
"602 1010 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 35 34 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 791;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"560 1050 OFFCURVE",
"631 1106 OFFCURVE",
"631 1194 CURVE SMOOTH",
"631 1232 OFFCURVE",
"597 1308 OFFCURVE",
"495 1308 CURVE SMOOTH",
"415 1308 OFFCURVE",
"342 1255 OFFCURVE",
"341 1172 CURVE SMOOTH",
"341 1131 OFFCURVE",
"373 1050 OFFCURVE",
"479 1050 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"551 1010 OFFCURVE",
"629 1087 OFFCURVE",
"629 1184 CURVE SMOOTH",
"629 1255 OFFCURVE",
"591 1290 OFFCURVE",
"513 1290 CURVE SMOOTH",
"423 1290 OFFCURVE",
"342 1213 OFFCURVE",
"342 1116 CURVE SMOOTH",
"342 1045 OFFCURVE",
"382 1010 OFFCURVE",
"461 1010 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 21 19 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 522;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = dotbelowcomb;
lastChange = "2018-08-18 15:27:25 +0000";
layers = (
{
anchors = (
{
name = _bottom;
position = "{-68, 0}";
},
{
name = bottom;
position = "{-135, -379}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"66 -226.667 OFFCURVE",
"37.667 -196.667 OFFCURVE",
"-19 -196 CURVE SMOOTH",
"-77.667 -196 OFFCURVE",
"-133 -252.667 OFFCURVE",
"-133 -322 CURVE SMOOTH",
"-133 -381.333 OFFCURVE",
"-104 -411 OFFCURVE",
"-46 -411 CURVE SMOOTH",
"14 -411 OFFCURVE",
"66 -363.333 OFFCURVE",
"66 -286 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-80 -379 OFFCURVE",
"-28 -330 OFFCURVE",
"-28 -274 CURVE SMOOTH",
"-28 -231 OFFCURVE",
"-58 -199 OFFCURVE",
"-103 -199 CURVE SMOOTH",
"-158 -199 OFFCURVE",
"-210 -248 OFFCURVE",
"-210 -304 CURVE SMOOTH",
"-210 -347 OFFCURVE",
"-180 -379 OFFCURVE",
"-135 -379 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 35 34 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
position = "{-80, 0}";
},
{
name = bottom;
position = "{-157, -437}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"-285 -367 OFFCURVE",
"-238 -434 OFFCURVE",
"-121 -434 OFFCURVE",
"-68 -393 QCURVE SMOOTH",
"8 -334 OFFCURVE",
"8 -248 QCURVE SMOOTH",
"8 -221 OFFCURVE",
"-41 -154 OFFCURVE",
"-156 -154 OFFCURVE",
"-209 -195 QCURVE SMOOTH",
"-285 -254 OFFCURVE",
"-285 -334 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-67 -437 OFFCURVE",
"11 -360 OFFCURVE",
"11 -263 CURVE SMOOTH",
"11 -192 OFFCURVE",
"-27 -157 OFFCURVE",
"-105 -157 CURVE SMOOTH",
"-195 -157 OFFCURVE",
"-276 -234 OFFCURVE",
"-276 -331 CURVE SMOOTH",
"-276 -402 OFFCURVE",
"-236 -437 OFFCURVE",
"-157 -437 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 21 19 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
}
);
note = dotbelowcomb;
unicode = 0323;
},
{
glyphname = dotlessi;
lastChange = "2018-08-17 12:59:43 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{160, 0}";
},
{
name = ogonek;
position = "{349, 10}";
},
{
name = top;
position = "{230, 856}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"254 -27 OFFCURVE",
"398 111 OFFCURVE",
"421 158 CURVE",
"379 195 LINE",
"315 133 OFFCURVE",
"275 102 OFFCURVE",
"256 102 CURVE SMOOTH",
"217 102 OFFCURVE",
"219 150 OFFCURVE",
"229 203 CURVE SMOOTH",
"317 690 LINE SMOOTH",
"321 713 OFFCURVE",
"327 748 OFFCURVE",
"327 776 CURVE SMOOTH",
"327 818 OFFCURVE",
"313 852 OFFCURVE",
"272 852 CURVE SMOOTH",
"195 852 OFFCURVE",
"77 742 OFFCURVE",
"25 663 CURVE",
"67 623 LINE",
"124 682 OFFCURVE",
"160 711 OFFCURVE",
"177 711 CURVE SMOOTH",
"205 711 OFFCURVE",
"210 660 OFFCURVE",
"204 625 CURVE SMOOTH",
"116 137 LINE SMOOTH",
"112 115 OFFCURVE",
"109 90 OFFCURVE",
"109 67 CURVE SMOOTH",
"109 17 OFFCURVE",
"124 -27 OFFCURVE",
"159 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
24 5 2 0 2 1 76 0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 95 77 0 1 1 93 1 78 41 23 41 19 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 470;
},
{
anchors = (
{
name = bottom;
position = "{175, 0}";
},
{
name = ogonek;
position = "{375, 10}";
},
{
name = top;
position = "{275, 856}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"285 -27 OFFCURVE",
"399 67 OFFCURVE",
"473 174 CURVE",
"413 221 LINE",
"376 168 OFFCURVE",
"349 142 OFFCURVE",
"332 142 CURVE SMOOTH",
"305 142 OFFCURVE",
"302 155 OFFCURVE",
"307 180 CURVE SMOOTH",
"412 662 LINE SMOOTH",
"416 681 OFFCURVE",
"420 710 OFFCURVE",
"420 739 CURVE SMOOTH",
"420 814 OFFCURVE",
"374 852 OFFCURVE",
"303 852 CURVE SMOOTH",
"230 852 OFFCURVE",
"119 759 OFFCURVE",
"44 655 CURVE",
"102 606 LINE",
"149 661 OFFCURVE",
"179 688 OFFCURVE",
"192 688 CURVE SMOOTH",
"211 688 OFFCURVE",
"215 670 OFFCURVE",
"210 647 CURVE SMOOTH",
"105 168 LINE SMOOTH",
"102 155 OFFCURVE",
"101 140 OFFCURVE",
"101 122 CURVE SMOOTH",
"101 34 OFFCURVE",
"125 -27 OFFCURVE",
"212 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 48 values pushed */
31 30 2 2 3 16 1 0 2 0 1 1 0 3 76 0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 3 3 34 77 0 1 1 32 1 78 39 22 36 20 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 499;
}
);
leftMetricsKey = "=i";
widthMetricsKey = "=i";
note = dotlessi;
unicode = 0131;
},
{
glyphname = e;
lastChange = "2018-08-18 03:25:51 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{231, 0}";
},
{
name = ogonek;
position = "{477, 10}";
},
{
name = top;
position = "{381, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"308 -27 OFFCURVE",
"406 37 OFFCURVE",
"510 164 CURVE",
"481 197 LINE",
"402 124 OFFCURVE",
"333 62 OFFCURVE",
"256 62 CURVE SMOOTH",
"177 62 OFFCURVE",
"139 123 OFFCURVE",
"139 238 CURVE SMOOTH",
"139 267 OFFCURVE",
"146 313 OFFCURVE",
"156 363 CURVE",
"356 398 OFFCURVE",
"631 557 OFFCURVE",
"631 737 CURVE SMOOTH",
"631 814 OFFCURVE",
"592 852 OFFCURVE",
"510 852 CURVE SMOOTH",
"280 852 OFFCURVE",
"20 470 OFFCURVE",
"20 215 CURVE SMOOTH",
"20 54 OFFCURVE",
"87 -27 OFFCURVE",
"217 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"233 609 OFFCURVE",
"341 782 OFFCURVE",
"444 782 CURVE SMOOTH",
"480 782 OFFCURVE",
"508 752 OFFCURVE",
"508 711 CURVE SMOOTH",
"508 566 OFFCURVE",
"334 448 OFFCURVE",
"170 413 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"326 -27 OFFCURVE",
"419 37 OFFCURVE",
"512 164 CURVE",
"480 197 LINE",
"407 124 OFFCURVE",
"344 62 OFFCURVE",
"267 62 CURVE SMOOTH",
"165 62 OFFCURVE",
"133 171 OFFCURVE",
"133 259 CURVE SMOOTH",
"133 287 OFFCURVE",
"136 324 OFFCURVE",
"140 363 CURVE",
"332 397 OFFCURVE",
"584 549 OFFCURVE",
"584 723 CURVE SMOOTH",
"584 758 OFFCURVE",
"576 852 OFFCURVE",
"452 852 CURVE SMOOTH",
"232 852 OFFCURVE",
"16 504 OFFCURVE",
"16 250 CURVE SMOOTH",
"16 161 OFFCURVE",
"39 -27 OFFCURVE",
"235 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"196 609 OFFCURVE",
"289 782 OFFCURVE",
"392 782 CURVE SMOOTH",
"437 782 OFFCURVE",
"463 740 OFFCURVE",
"463 695 CURVE SMOOTH",
"463 557 OFFCURVE",
"305 447 OFFCURVE",
"150 413 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
28 10 2 0 3 1 76 0 3 3 2 97 0 2 2 95 77 0 0 0 1 97 0 1 1 93 1 78 34 35 39 38 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 612;
},
{
anchors = (
{
name = bottom;
position = "{268, 0}";
},
{
name = ogonek;
position = "{543, 10}";
},
{
name = top;
position = "{488, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"723 806 OFFCURVE",
"667 852 OFFCURVE",
"555 852 CURVE SMOOTH",
"312 852 OFFCURVE",
"23 488 OFFCURVE",
"23 231 CURVE SMOOTH",
"22 59 OFFCURVE",
"102 -27 OFFCURVE",
"262 -27 CURVE SMOOTH",
"371 -26 OFFCURVE",
"473 37 OFFCURVE",
"570 164 CURVE SMOOTH",
"582 180 OFFCURVE",
"536 215 OFFCURVE",
"520 207 CURVE",
"485 174 OFFCURVE",
"385 104 OFFCURVE",
"320 104 CURVE SMOOTH",
"259 105 OFFCURVE",
"228 154 OFFCURVE",
"228 252 CURVE SMOOTH",
"228 271 OFFCURVE",
"233 305 OFFCURVE",
"244 356 CURVE",
"504 416 OFFCURVE",
"723 552 OFFCURVE",
"723 713 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"520 584 OFFCURVE",
"388 488 OFFCURVE",
"271 449 CURVE",
"300 536 OFFCURVE",
"332 609 OFFCURVE",
"369 667 CURVE SMOOTH",
"406 725 OFFCURVE",
"441 754 OFFCURVE",
"475 754 CURVE SMOOTH",
"505 754 OFFCURVE",
"520 732 OFFCURVE",
"520 688 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"409 -27 OFFCURVE",
"506 37 OFFCURVE",
"592 164 CURVE",
"538 207 LINE",
"506 174 OFFCURVE",
"412 104 OFFCURVE",
"347 104 CURVE SMOOTH",
"266 104 OFFCURVE",
"241 199 OFFCURVE",
"241 269 CURVE SMOOTH",
"241 289 OFFCURVE",
"244 317 OFFCURVE",
"249 356 CURVE",
"496 414 OFFCURVE",
"698 543 OFFCURVE",
"698 698 CURVE SMOOTH",
"698 742 OFFCURVE",
"687 852 OFFCURVE",
"517 852 CURVE SMOOTH",
"284 852 OFFCURVE",
"38 518 OFFCURVE",
"38 264 CURVE SMOOTH",
"38 178 OFFCURVE",
"58 -27 OFFCURVE",
"300 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"299 576 OFFCURVE",
"362 754 OFFCURVE",
"445 754 CURVE SMOOTH",
"477 754 OFFCURVE",
"496 728 OFFCURVE",
"496 677 CURVE SMOOTH",
"496 577 OFFCURVE",
"377 487 OFFCURVE",
"268 449 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
28 10 2 0 3 1 76 0 3 3 2 97 0 2 2 34 77 0 0 0 1 97 0 1 1 32 1 78 34 35 39 38 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
leftKerningGroup = c;
note = e;
rightKerningGroup = ae;
unicode = 0065;
},
{
glyphname = eacute;
lastChange = "2018-08-18 03:26:21 +0000";
layers = (
{
components = (
{
name = e;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
name = e;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 328, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftMetricsKey = e;
widthMetricsKey = "=e";
note = eacute;
unicode = 00E9;
},
{
glyphname = ebreve;
lastChange = "2018-08-18 03:27:24 +0000";
layers = (
{
components = (
{
name = e;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 304, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
name = e;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 409, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftMetricsKey = e;
widthMetricsKey = "=e";
note = ebreve;
unicode = 0115;
},
{
glyphname = ecircumflex;
lastChange = "2018-08-18 03:29:37 +0000";
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 327, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
alignment = -1;
name = e;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 444, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftMetricsKey = e;
widthMetricsKey = "=e";
note = ecircumflex;
unicode = 00EA;
},
{
glyphname = edieresis;
lastChange = "2018-08-18 03:25:54 +0000";
layers = (
{
components = (
{
name = e;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 305, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
name = e;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 411, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftMetricsKey = e;
widthMetricsKey = "=e";
note = edieresis;
unicode = 00EB;
},
{
glyphname = egrave;
lastChange = "2018-08-18 03:30:10 +0000";
layers = (
{
components = (
{
alignment = -1;
name = e;
transform = "{1, 0, 0, 1, 2, 0}";
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 305, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
alignment = -1;
name = e;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 406, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftKerningGroup = egrave;
leftMetricsKey = e;
widthMetricsKey = "=e";
note = egrave;
unicode = 00E8;
},
{
glyphname = eight;
lastChange = "2018-08-15 17:53:06 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"622 -16 OFFCURVE",
"870 182 OFFCURVE",
"870 406 CURVE SMOOTH",
"870 518 OFFCURVE",
"810 620 OFFCURVE",
"691 711 CURVE",
"909 812 OFFCURVE",
"1018 953 OFFCURVE",
"1018 1135 CURVE SMOOTH",
"1018 1248 OFFCURVE",
"933 1333 OFFCURVE",
"738 1333 CURVE SMOOTH",
"543 1333 OFFCURVE",
"317 1145 OFFCURVE",
"317 924 CURVE SMOOTH",
"317 837 OFFCURVE",
"369 752 OFFCURVE",
"474 668 CURVE",
"221 549 OFFCURVE",
"94 400 OFFCURVE",
"94 223 CURVE SMOOTH",
"94 83 OFFCURVE",
"199 -16 OFFCURVE",
"403 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"332 51 OFFCURVE",
"257 127 OFFCURVE",
"257 243 CURVE SMOOTH",
"257 387 OFFCURVE",
"343 533 OFFCURVE",
"520 625 CURVE",
"645 522 OFFCURVE",
"707 427 OFFCURVE",
"707 338 CURVE SMOOTH",
"707 190 OFFCURVE",
"587 51 OFFCURVE",
"440 51 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"488 878 OFFCURVE",
"456 935 OFFCURVE",
"456 1026 CURVE SMOOTH",
"456 1143 OFFCURVE",
"579 1257 OFFCURVE",
"708 1257 CURVE SMOOTH",
"808 1257 OFFCURVE",
"868 1194 OFFCURVE",
"868 1085 CURVE SMOOTH",
"868 950 OFFCURVE",
"795 840 OFFCURVE",
"648 754 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"704 -16 OFFCURVE",
"825 250 OFFCURVE",
"825 389 CURVE SMOOTH",
"825 518 OFFCURVE",
"742 618 OFFCURVE",
"616 708 CURVE",
"804 805 OFFCURVE",
"909 943 OFFCURVE",
"909 1097 CURVE SMOOTH",
"909 1226 OFFCURVE",
"826 1333 OFFCURVE",
"639 1333 CURVE SMOOTH",
"359 1333 OFFCURVE",
"255 1074 OFFCURVE",
"255 958 CURVE SMOOTH",
"255 842 OFFCURVE",
"328 754 OFFCURVE",
"440 672 CURVE",
"223 563 OFFCURVE",
"99 417 OFFCURVE",
"99 246 CURVE SMOOTH",
"99 91 OFFCURVE",
"201 -16 OFFCURVE",
"401 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"313 45 OFFCURVE",
"222 156 OFFCURVE",
"222 287 CURVE SMOOTH",
"222 420 OFFCURVE",
"330 562 OFFCURVE",
"484 639 CURVE",
"619 533 OFFCURVE",
"704 440 OFFCURVE",
"704 313 CURVE SMOOTH",
"704 201 OFFCURVE",
"611 45 OFFCURVE",
"442 45 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"454 824 OFFCURVE",
"358 920 OFFCURVE",
"358 1038 CURVE SMOOTH",
"358 1101 OFFCURVE",
"417 1272 OFFCURVE",
"603 1272 CURVE SMOOTH",
"713 1272 OFFCURVE",
"794 1185 OFFCURVE",
"794 1057 CURVE SMOOTH",
"794 937 OFFCURVE",
"700 805 OFFCURVE",
"573 739 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
33 29 12 2 4 3 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 92 77 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
46 36 40 38 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1108 1217 OFFCURVE",
"946 1333 OFFCURVE",
"811 1333 QCURVE SMOOTH",
"634 1333 OFFCURVE",
"335 1079 OFFCURVE",
"335 907 QCURVE SMOOTH",
"336 766 OFFCURVE",
"481 655 QCURVE",
"317 586 OFFCURVE",
"120 393 OFFCURVE",
"120 246 QCURVE SMOOTH",
"120 121 OFFCURVE",
"307 -16 OFFCURVE",
"450 -16 QCURVE SMOOTH",
"641 -16 OFFCURVE",
"970 248 OFFCURVE",
"970 432 QCURVE SMOOTH",
"970 600 OFFCURVE",
"804 719 QCURVE",
"933 778 OFFCURVE",
"1108 975 OFFCURVE",
"1108 1100 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"888 890 OFFCURVE",
"729 782 QCURVE",
"548 897 OFFCURVE",
"548 1014 QCURVE SMOOTH",
"548 1094 OFFCURVE",
"679 1233 OFFCURVE",
"759 1233 QCURVE SMOOTH",
"888 1233 OFFCURVE",
"888 1083 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"733 248 OFFCURVE",
"595 76 OFFCURVE",
"505 76 QCURVE SMOOTH",
"432 76 OFFCURVE",
"356 178 OFFCURVE",
"356 254 QCURVE SMOOTH",
"356 360 OFFCURVE",
"465 547 OFFCURVE",
"557 596 QCURVE",
"733 471 OFFCURVE",
"733 342 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"747 -16 OFFCURVE",
"899 245 OFFCURVE",
"899 410 CURVE SMOOTH",
"899 528 OFFCURVE",
"834 631 OFFCURVE",
"704 717 CURVE",
"896 817 OFFCURVE",
"974 941 OFFCURVE",
"974 1081 CURVE SMOOTH",
"974 1245 OFFCURVE",
"847 1333 OFFCURVE",
"655 1333 CURVE SMOOTH",
"345 1333 OFFCURVE",
"216 1073 OFFCURVE",
"216 934 CURVE SMOOTH",
"216 829 OFFCURVE",
"271 738 OFFCURVE",
"382 662 CURVE",
"119 522 OFFCURVE",
"64 388 OFFCURVE",
"64 271 CURVE SMOOTH",
"64 91 OFFCURVE",
"215 -16 OFFCURVE",
"417 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"354 76 OFFCURVE",
"296 168 OFFCURVE",
"296 284 CURVE SMOOTH",
"296 392 OFFCURVE",
"338 523 OFFCURVE",
"474 596 CURVE",
"603 509 OFFCURVE",
"668 417 OFFCURVE",
"668 321 CURVE SMOOTH",
"668 229 OFFCURVE",
"597 76 OFFCURVE",
"464 76 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"482 862 OFFCURVE",
"421 944 OFFCURVE",
"421 1025 CURVE SMOOTH",
"421 1081 OFFCURVE",
"473 1233 OFFCURVE",
"613 1233 CURVE SMOOTH",
"711 1233 OFFCURVE",
"756 1159 OFFCURVE",
"756 1055 CURVE SMOOTH",
"756 952 OFFCURVE",
"723 843 OFFCURVE",
"604 780 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
33 29 14 3 4 3 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 31 77 0 3 3 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
45 35 41 39 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1013;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = eight.oldstyle;
lastChange = "2018-08-15 17:54:46 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1149 1196 OFFCURVE",
"1035 1272 OFFCURVE",
"939 1272 CURVE SMOOTH",
"859 1272 OFFCURVE",
"786 1257 OFFCURVE",
"721 1228 CURVE SMOOTH",
"592 1169 OFFCURVE",
"471 1017 OFFCURVE",
"471 913 CURVE SMOOTH",
"471 822 OFFCURVE",
"512 692 OFFCURVE",
"615 596 CURVE",
"499 525 LINE",
"336 417 OFFCURVE",
"254 300 OFFCURVE",
"254 174 CURVE SMOOTH",
"254 49 OFFCURVE",
"363 -31 OFFCURVE",
"526 -31 CURVE SMOOTH",
"757 -31 OFFCURVE",
"955 166 OFFCURVE",
"955 401 CURVE SMOOTH",
"955 467 OFFCURVE",
"931 527 OFFCURVE",
"883 580 CURVE",
"813 651 LINE",
"1025 750 OFFCURVE",
"1149 932 OFFCURVE",
"1149 1060 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1008 930 OFFCURVE",
"929 803 OFFCURVE",
"770 690 CURVE",
"672 763 OFFCURVE",
"623 843 OFFCURVE",
"623 930 CURVE SMOOTH",
"623 1066 OFFCURVE",
"765 1210 OFFCURVE",
"889 1210 CURVE SMOOTH",
"969 1210 OFFCURVE",
"1008 1160 OFFCURVE",
"1008 1071 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"803 184 OFFCURVE",
"697 33 OFFCURVE",
"537 33 CURVE SMOOTH",
"461 33 OFFCURVE",
"398 90 OFFCURVE",
"398 186 CURVE SMOOTH",
"398 313 OFFCURVE",
"481 450 OFFCURVE",
"652 557 CURVE",
"753 477 OFFCURVE",
"803 393 OFFCURVE",
"803 305 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"653 -31 OFFCURVE",
"783 170 OFFCURVE",
"783 360 CURVE SMOOTH",
"783 455 OFFCURVE",
"744 533 OFFCURVE",
"616 641 CURVE",
"891 803 OFFCURVE",
"905 979 OFFCURVE",
"905 1053 CURVE SMOOTH",
"905 1180 OFFCURVE",
"802 1272 OFFCURVE",
"682 1272 CURVE SMOOTH",
"385 1272 OFFCURVE",
"278 1017 OFFCURVE",
"278 910 CURVE SMOOTH",
"278 801 OFFCURVE",
"355 695 OFFCURVE",
"457 607 CURVE",
"267 493 OFFCURVE",
"142 366 OFFCURVE",
"142 198 CURVE SMOOTH",
"142 58 OFFCURVE",
"243 -31 OFFCURVE",
"436 -31 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"345 26 OFFCURVE",
"265 93 OFFCURVE",
"265 221 CURVE SMOOTH",
"265 340 OFFCURVE",
"339 473 OFFCURVE",
"501 570 CURVE",
"606 493 OFFCURVE",
"660 395 OFFCURVE",
"660 294 CURVE SMOOTH",
"660 169 OFFCURVE",
"584 26 OFFCURVE",
"424 26 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"478 735 OFFCURVE",
"401 843 OFFCURVE",
"401 951 CURVE SMOOTH",
"401 1077 OFFCURVE",
"512 1211 OFFCURVE",
"638 1211 CURVE SMOOTH",
"728 1211 OFFCURVE",
"784 1149 OFFCURVE",
"784 1037 CURVE SMOOTH",
"784 955 OFFCURVE",
"757 809 OFFCURVE",
"570 677 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
38 34 15 3 4 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 37 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
45 36 44 40 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 932;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1087 1098 OFFCURVE",
"1065 1143 QCURVE",
"1044 1174 LINE",
"1022 1200 LINE",
"944 1272 OFFCURVE",
"821 1272 QCURVE SMOOTH",
"748 1271 OFFCURVE",
"678 1251 QCURVE SMOOTH",
"518 1206 OFFCURVE",
"416 1077 QCURVE SMOOTH",
"336 975 OFFCURVE",
"336 885 QCURVE SMOOTH",
"336 856 OFFCURVE",
"342 823 QCURVE",
"371 705 OFFCURVE",
"475 584 QCURVE",
"357 524 OFFCURVE",
"285 473 QCURVE SMOOTH",
"119 353 OFFCURVE",
"119 199 QCURVE SMOOTH",
"119 125 OFFCURVE",
"162 72 QCURVE SMOOTH",
"243 -31 OFFCURVE",
"442 -31 QCURVE SMOOTH",
"475 -31 OFFCURVE",
"510 -25 QCURVE SMOOTH",
"651 0 OFFCURVE",
"760 106 QCURVE SMOOTH",
"893 236 OFFCURVE",
"893 414 QCURVE SMOOTH",
"893 430 OFFCURVE",
"891 446 QCURVE SMOOTH",
"877 558 OFFCURVE",
"754 662 QCURVE",
"909 744 OFFCURVE",
"997 850 QCURVE SMOOTH",
"1087 955 OFFCURVE",
"1087 1047 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"883 1022 OFFCURVE",
"877 991 QCURVE SMOOTH",
"848 828 OFFCURVE",
"690 717 QCURVE",
"563 823 OFFCURVE",
"564 1012 OFFCURVE",
"621 1096 QCURVE SMOOTH",
"686 1192 OFFCURVE",
"778 1192 QCURVE",
"795 1190 LINE",
"819 1182 LINE",
"840 1169 LINE",
"883 1129 OFFCURVE",
"883 1055 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"666 242 OFFCURVE",
"635 174 QCURVE SMOOTH",
"576 47 OFFCURVE",
"451 47 QCURVE SMOOTH",
"414 48 OFFCURVE",
"385 68 QCURVE SMOOTH",
"328 109 OFFCURVE",
"328 193 QCURVE",
"327 251 OFFCURVE",
"354 317 QCURVE SMOOTH",
"409 452 OFFCURVE",
"532 532 QCURVE",
"592 483 OFFCURVE",
"621 444 QCURVE SMOOTH",
"666 387 OFFCURVE",
"666 303 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"580 -31 OFFCURVE",
"745 168 OFFCURVE",
"745 373 CURVE SMOOTH",
"745 491 OFFCURVE",
"687 577 OFFCURVE",
"584 657 CURVE",
"792 762 OFFCURVE",
"856 925 OFFCURVE",
"856 1028 CURVE SMOOTH",
"856 1172 OFFCURVE",
"727 1272 OFFCURVE",
"572 1272 CURVE SMOOTH",
"223 1272 OFFCURVE",
"122 988 OFFCURVE",
"122 894 CURVE SMOOTH",
"122 787 OFFCURVE",
"200 672 OFFCURVE",
"288 590 CURVE",
"103 479 OFFCURVE",
"-9 378 OFFCURVE",
"-9 220 CURVE SMOOTH",
"-9 56 OFFCURVE",
"134 -31 OFFCURVE",
"338 -31 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"257 51 OFFCURVE",
"221 129 OFFCURVE",
"221 219 CURVE SMOOTH",
"221 301 OFFCURVE",
"252 441 OFFCURVE",
"366 524 CURVE",
"447 472 OFFCURVE",
"501 392 OFFCURVE",
"501 293 CURVE SMOOTH",
"501 198 OFFCURVE",
"462 51 OFFCURVE",
"330 51 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"416 780 OFFCURVE",
"358 853 OFFCURVE",
"358 946 CURVE SMOOTH",
"358 1030 OFFCURVE",
"413 1192 OFFCURVE",
"535 1192 CURVE SMOOTH",
"603 1192 OFFCURVE",
"633 1136 OFFCURVE",
"633 1059 CURVE SMOOTH",
"633 970 OFFCURVE",
"593 819 OFFCURVE",
"496 727 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
56 48 22 6 4 5 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
84 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 24 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
65 63 44 42 33 31 45 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 849;
}
);
note = eight.oldstyle;
},
{
glyphname = ellipsis;
lastChange = "2018-08-09 09:03:56 +0000";
layers = (
{
components = (
{
name = period;
},
{
name = period;
transform = "{1, 0, 0, 1, 696, 0}";
},
{
name = period;
transform = "{1, 0, 0, 1, 1383, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 2048;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1884 178 OFFCURVE",
"1851 221 QCURVE SMOOTH",
"1809 279 OFFCURVE",
"1735 279 QCURVE SMOOTH",
"1653 278 OFFCURVE",
"1610 227 QCURVE",
"1571 184 OFFCURVE",
"1571 133 QCURVE SMOOTH",
"1571 61 OFFCURVE",
"1614 18 QCURVE SMOOTH",
"1661 -27 OFFCURVE",
"1735 -27 QCURVE",
"1763 -26 OFFCURVE",
"1792 -16 QCURVE",
"1821 -2 LINE",
"1884 39 OFFCURVE",
"1884 119 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1208 178 OFFCURVE",
"1178 219 QCURVE SMOOTH",
"1135 279 OFFCURVE",
"1059 279 QCURVE SMOOTH",
"977 278 OFFCURVE",
"934 227 QCURVE",
"895 184 OFFCURVE",
"895 133 QCURVE SMOOTH",
"895 63 OFFCURVE",
"936 20 QCURVE SMOOTH",
"983 -27 OFFCURVE",
"1059 -27 QCURVE",
"1087 -26 OFFCURVE",
"1116 -16 QCURVE",
"1145 -2 LINE",
"1208 39 OFFCURVE",
"1208 119 QCURVE SMOOTH"
);
}
);
};
components = (
{
name = period;
},
{
name = period;
transform = "{1, 0, 0, 1, 669, 0}";
},
{
name = period;
transform = "{1, 0, 0, 1, 1338, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
5 3 2 1 1 0 97 4 2 2 0 0 32 0 78 38 38 38 39 38 36 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 2072;
}
);
note = ellipsis;
unicode = 2026;
},
{
glyphname = emacron;
lastChange = "2018-08-17 11:53:18 +0000";
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, -28, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 612;
},
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = macron;
transform = "{1, 0, 0, 1, 49, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 686;
}
);
leftKerningGroup = emacron;
leftMetricsKey = e;
widthMetricsKey = "=e";
note = emacron;
rightKerningGroup = ae;
unicode = 0113;
},
{
glyphname = emdash;
lastChange = "2018-08-18 02:26:41 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"2080 473 LINE",
"2080 586 LINE",
"93 586 LINE",
"93 473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 9 0 8 35 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 2048;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"2054 463 LINE",
"2054 596 LINE",
"68 596 LINE",
"68 463 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
10 4 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 2 0 8 5 0 11 2 11 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 2048;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = endash;
lastChange = "2018-08-16 15:23:38 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1033 473 LINE",
"1033 586 LINE",
"71 586 LINE",
"71 473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 6 4 0 9 1 9 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1030 463 LINE",
"1030 596 LINE",
"68 596 LINE",
"68 463 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
10 4 2 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 2 0 8 5 0 11 2 11 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = eogonek;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"328 -27 OFFCURVE",
"426 37 OFFCURVE",
"530 164 CURVE",
"501 197 LINE",
"422 124 OFFCURVE",
"353 62 OFFCURVE",
"276 62 CURVE SMOOTH",
"197 62 OFFCURVE",
"159 123 OFFCURVE",
"159 238 CURVE SMOOTH",
"159 267 OFFCURVE",
"166 313 OFFCURVE",
"176 363 CURVE",
"376 398 OFFCURVE",
"651 557 OFFCURVE",
"651 737 CURVE SMOOTH",
"651 814 OFFCURVE",
"612 852 OFFCURVE",
"530 852 CURVE SMOOTH",
"300 852 OFFCURVE",
"40 470 OFFCURVE",
"40 215 CURVE SMOOTH",
"40 54 OFFCURVE",
"107 -27 OFFCURVE",
"237 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"253 609 OFFCURVE",
"361 782 OFFCURVE",
"464 782 CURVE SMOOTH",
"500 782 OFFCURVE",
"528 752 OFFCURVE",
"528 711 CURVE SMOOTH",
"528 566 OFFCURVE",
"354 448 OFFCURVE",
"190 413 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"301 -488 OFFCURVE",
"367 -458 OFFCURVE",
"411 -398 CURVE",
"395 -373 LINE",
"353 -392 OFFCURVE",
"317 -402 OFFCURVE",
"286 -402 CURVE SMOOTH",
"159 -402 OFFCURVE",
"142 -300 OFFCURVE",
"142 -263 CURVE SMOOTH",
"143 -183 OFFCURVE",
"239 -63 OFFCURVE",
"345 2 CURVE SMOOTH",
"403 38 OFFCURVE",
"458 91 OFFCURVE",
"512 164 CURVE",
"480 197 LINE",
"402 119 OFFCURVE",
"343 62 OFFCURVE",
"266 62 CURVE SMOOTH",
"164 62 OFFCURVE",
"133 175 OFFCURVE",
"133 259 CURVE SMOOTH",
"133 287 OFFCURVE",
"136 324 OFFCURVE",
"140 363 CURVE",
"336 399 OFFCURVE",
"583 548 OFFCURVE",
"583 721 CURVE SMOOTH",
"583 809 OFFCURVE",
"544 852 OFFCURVE",
"451 852 CURVE SMOOTH",
"231 852 OFFCURVE",
"16 504 OFFCURVE",
"16 250 CURVE SMOOTH",
"16 164 OFFCURVE",
"34 -14 OFFCURVE",
"214 -26 CURVE",
"87 -115 OFFCURVE",
"22 -209 OFFCURVE",
"21 -295 CURVE SMOOTH",
"21 -333 OFFCURVE",
"34 -488 OFFCURVE",
"212 -488 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"196 609 OFFCURVE",
"289 782 OFFCURVE",
"392 782 CURVE SMOOTH",
"438 782 OFFCURVE",
"463 739 OFFCURVE",
"463 696 CURVE SMOOTH",
"463 558 OFFCURVE",
"305 447 OFFCURVE",
"150 413 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
18 5 2 1 0 32 30 2 2 4 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 3 2 3 101 0 0 0 5 97 0 5 5 95 77 0 1 1 4 97 0 4 4 93 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 1 0 4 2 1 4 105 0 2 0 3 2 3 101 0 0 0 5 97 0 5 5 95 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
35 19 38 43 43 33 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 612;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"355 -487 OFFCURVE",
"425 -452 OFFCURVE",
"475 -381 CURVE",
"455 -342 LINE",
"430 -363 OFFCURVE",
"397 -373 OFFCURVE",
"358 -373 CURVE SMOOTH",
"277 -373 OFFCURVE",
"247 -313 OFFCURVE",
"247 -268 CURVE SMOOTH",
"247 -169 OFFCURVE",
"329 -70 OFFCURVE",
"436 10 CURVE SMOOTH",
"491 51 OFFCURVE",
"544 103 OFFCURVE",
"592 164 CURVE",
"538 207 LINE",
"499 163 OFFCURVE",
"418 104 OFFCURVE",
"347 104 CURVE SMOOTH",
"266 104 OFFCURVE",
"241 198 OFFCURVE",
"241 269 CURVE SMOOTH",
"241 289 OFFCURVE",
"244 317 OFFCURVE",
"249 356 CURVE",
"496 414 OFFCURVE",
"698 543 OFFCURVE",
"698 698 CURVE SMOOTH",
"698 739 OFFCURVE",
"687 852 OFFCURVE",
"516 852 CURVE SMOOTH",
"283 852 OFFCURVE",
"38 518 OFFCURVE",
"38 264 CURVE SMOOTH",
"38 179 OFFCURVE",
"59 -13 OFFCURVE",
"272 -27 CURVE",
"141 -124 OFFCURVE",
"75 -220 OFFCURVE",
"75 -316 CURVE SMOOTH",
"75 -417 OFFCURVE",
"146 -487 OFFCURVE",
"266 -487 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"299 576 OFFCURVE",
"362 754 OFFCURVE",
"445 754 CURVE SMOOTH",
"477 754 OFFCURVE",
"496 728 OFFCURVE",
"496 677 CURVE SMOOTH",
"496 577 OFFCURVE",
"377 487 OFFCURVE",
"268 449 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
45 10 2 0 5 23 1 1 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 0 5 3 5 0 3 128 0 1 0 2 1 2 102 0 5 5 4 97 0 4 4 34 77 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 5 3 5 0 3 128 0 3 1 5 3 1 126 0 1 0 2 1 2 102 0 5 5 4 97 0 4 4 34 5 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
34 35 20 37 44 38 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
leftMetricsKey = "=e";
widthMetricsKey = "=e";
note = eogonek;
unicode = 0119;
},
{
glyphname = eogonek.alt;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"-176 700 LINE",
"-176 -384 LINE"
);
}
);
};
components = (
{
alignment = -1;
name = e;
transform = "{1, 0, 0, 1, -40, 0}";
},
{
alignment = -1;
name = ogonek;
transform = "{1, 0, 0, 1, -149, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 48 values pushed */
44 32 24 22 10 5 3 73 0 0 1 4 1 0 4 131 0 2 0 1 0 2 1 109 0 4 3 3 4 93 0 4 4 3 97 0 3 4 3 81 34 39 38 43 38 5 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 612;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"-170 725 LINE",
"-170 -488 LINE"
);
}
);
};
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = ogonek;
transform = "{1, 0, 0, 1, -128, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
46 34 23 10 4 3 73 0 0 1 4 1 0 4 131 0 2 0 1 0 2 1 109 0 4 3 3 4 93 0 4 4 3 97 0 3 4 3 81 34 41 37 44 38 5 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
widthMetricsKey = "=e";
note = eogonek.alt;
},
{
glyphname = equal;
lastChange = "2018-08-01 21:48:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"907 696 LINE",
"119 696 LINE",
"119 596 LINE",
"907 596 LINE"
);
},
{
closed = 1;
nodes = (
"907 430 LINE",
"119 430 LINE",
"119 330 LINE",
"907 330 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 31 values pushed */
0 1 0 0 3 1 0 103 0 3 2 2 3 87 0 3 3 2 95 0 2 3 2 79 17 17 17 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"948 717 LINE",
"119 717 LINE",
"119 575 LINE",
"948 575 LINE"
);
},
{
closed = 1;
nodes = (
"948 410 LINE",
"119 410 LINE",
"119 268 LINE",
"948 268 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 31 values pushed */
0 1 0 0 3 1 0 103 0 3 2 2 3 87 0 3 3 2 95 0 2 3 2 79 17 17 17 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1062;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = eth;
lastChange = "2018-08-20 10:16:21 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"686 379 OFFCURVE",
"494 57 OFFCURVE",
"358 57 CURVE SMOOTH",
"264 57 OFFCURVE",
"217 110 OFFCURVE",
"217 215 CURVE SMOOTH",
"217 451 OFFCURVE",
"420 768 OFFCURVE",
"553 768 CURVE SMOOTH",
"642 768 OFFCURVE",
"686 721 OFFCURVE",
"686 627 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"817 824 OFFCURVE",
"729 980 OFFCURVE",
"553 1112 CURVE",
"743 1235 LINE SMOOTH",
"785 1261 OFFCURVE",
"840 1219 OFFCURVE",
"881 1219 CURVE SMOOTH",
"888 1219 OFFCURVE",
"885 1232 OFFCURVE",
"873 1258 CURVE SMOOTH",
"848 1313 OFFCURVE",
"829 1341 OFFCURVE",
"816 1341 CURVE SMOOTH",
"814 1341 OFFCURVE",
"812 1340 OFFCURVE",
"809 1339 CURVE",
"508 1141 LINE",
"411 1206 OFFCURVE",
"293 1261 OFFCURVE",
"156 1307 CURVE SMOOTH",
"134 1314 OFFCURVE",
"102 1254 OFFCURVE",
"125 1245 CURVE SMOOTH",
"250 1194 OFFCURVE",
"349 1140 OFFCURVE",
"422 1085 CURVE",
"246 971 LINE SMOOTH",
"196 938 OFFCURVE",
"157 995 OFFCURVE",
"115 995 CURVE SMOOTH",
"111 995 OFFCURVE",
"112 986 OFFCURVE",
"117 967 CURVE SMOOTH",
"138 897 OFFCURVE",
"154 862 OFFCURVE",
"163 862 CURVE SMOOTH",
"165 862 OFFCURVE",
"167 863 OFFCURVE",
"170 864 CURVE",
"463 1053 LINE",
"536 993 OFFCURVE",
"593 923 OFFCURVE",
"633 844 CURVE",
"616 849 OFFCURVE",
"594 852 OFFCURVE",
"567 852 CURVE SMOOTH",
"347 852 OFFCURVE",
"96 595 OFFCURVE",
"96 303 CURVE SMOOTH",
"96 83 OFFCURVE",
"176 -27 OFFCURVE",
"336 -27 CURVE SMOOTH",
"625 -27 OFFCURVE",
"817 238 OFFCURVE",
"817 645 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"507 -27 OFFCURVE",
"709 272 OFFCURVE",
"709 533 CURVE SMOOTH",
"709 600 OFFCURVE",
"706 807 OFFCURVE",
"504 1009 CURVE SMOOTH",
"397 1116 OFFCURVE",
"235 1220 OFFCURVE",
"-12 1302 CURVE",
"-35 1250 LINE",
"197 1159 OFFCURVE",
"398 1035 OFFCURVE",
"509 847 CURVE",
"490 851 OFFCURVE",
"478 852 OFFCURVE",
"460 852 CURVE SMOOTH",
"227 852 OFFCURVE",
"25 553 OFFCURVE",
"25 292 CURVE SMOOTH",
"25 145 OFFCURVE",
"98 -27 OFFCURVE",
"273 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"175 34 OFFCURVE",
"142 161 OFFCURVE",
"142 267 CURVE SMOOTH",
"142 512 OFFCURVE",
"288 791 OFFCURVE",
"431 791 CURVE SMOOTH",
"555 791 OFFCURVE",
"585 674 OFFCURVE",
"585 570 CURVE SMOOTH",
"585 315 OFFCURVE",
"448 34 OFFCURVE",
"303 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 1235 LINE SMOOTH",
"620 1261 OFFCURVE",
"675 1245 OFFCURVE",
"722 1214 CURVE",
"732 1224 LINE",
"644 1342 LINE",
"109 971 LINE SMOOTH",
"67 942 OFFCURVE",
"20 961 OFFCURVE",
"-29 992 CURVE",
"-41 986 LINE",
"37 862 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 54 values pushed */
54 42 34 22 4 4 5 20 1 0 3 2 76 0 5 4 5 133 0 4 3 4 133 0 0 0 3 97 0 3 3 95 77 0 1 1 2 97 0 2 2 93 2 78 52 51 28 35 36 35 33 6 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 772;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"690 493 OFFCURVE",
"625 296 OFFCURVE",
"533 169 CURVE SMOOTH",
"487 106 OFFCURVE",
"443 74 OFFCURVE",
"401 74 CURVE SMOOTH",
"346 74 OFFCURVE",
"287 125 OFFCURVE",
"287 201 CURVE SMOOTH",
"287 353 OFFCURVE",
"355 544 OFFCURVE",
"451 662 CURVE SMOOTH",
"498 721 OFFCURVE",
"544 750 OFFCURVE",
"588 750 CURVE SMOOTH",
"640 750 OFFCURVE",
"690 720 OFFCURVE",
"690 641 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"484 1198 OFFCURVE",
"317 1276 OFFCURVE",
"193 1311 CURVE",
"156 1235 LINE",
"272 1184 OFFCURVE",
"430 1086 OFFCURVE",
"498 1034 CURVE",
"563 977 OFFCURVE",
"605 915 OFFCURVE",
"643 850 CURVE",
"628 852 OFFCURVE",
"606 852 OFFCURVE",
"592 852 CURVE SMOOTH",
"352 852 OFFCURVE",
"94 617 OFFCURVE",
"94 322 CURVE SMOOTH",
"95 89 OFFCURVE",
"187 -27 OFFCURVE",
"371 -27 CURVE SMOOTH",
"684 -27 OFFCURVE",
"891 240 OFFCURVE",
"891 647 CURVE SMOOTH",
"891 827 OFFCURVE",
"797 979 OFFCURVE",
"610 1110 CURVE"
);
},
{
closed = 1;
nodes = (
"782 1225 LINE",
"792 1230 OFFCURVE",
"803 1233 OFFCURVE",
"815 1233 CURVE SMOOTH",
"830 1233 OFFCURVE",
"851 1229 OFFCURVE",
"876 1221 CURVE SMOOTH",
"901 1212 OFFCURVE",
"916 1208 OFFCURVE",
"920 1208 CURVE SMOOTH",
"939 1208 OFFCURVE",
"863 1363 OFFCURVE",
"842 1350 CURVE SMOOTH",
"276 981 LINE",
"261 973 OFFCURVE",
"248 969 OFFCURVE",
"236 969 CURVE SMOOTH",
"219 969 OFFCURVE",
"201 975 OFFCURVE",
"182 987 CURVE SMOOTH",
"162 998 OFFCURVE",
"151 1004 OFFCURVE",
"150 1004 CURVE SMOOTH",
"135 1004 OFFCURVE",
"183 837 OFFCURVE",
"209 854 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"678 -27 OFFCURVE",
"856 197 OFFCURVE",
"856 548 CURVE SMOOTH",
"856 720 OFFCURVE",
"788 895 OFFCURVE",
"627 1042 CURVE SMOOTH",
"507 1152 OFFCURVE",
"333 1246 OFFCURVE",
"96 1311 CURVE",
"66 1235 LINE",
"299 1134 OFFCURVE",
"482 1029 OFFCURVE",
"587 850 CURVE",
"571 852 OFFCURVE",
"549 852 OFFCURVE",
"535 852 CURVE SMOOTH",
"307 852 OFFCURVE",
"82 640 OFFCURVE",
"82 366 CURVE SMOOTH",
"82 253 OFFCURVE",
"111 -27 OFFCURVE",
"391 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"328 74 OFFCURVE",
"285 155 OFFCURVE",
"285 242 CURVE SMOOTH",
"285 441 OFFCURVE",
"394 750 OFFCURVE",
"540 750 CURVE SMOOTH",
"621 750 OFFCURVE",
"654 692 OFFCURVE",
"654 601 CURVE SMOOTH",
"654 405 OFFCURVE",
"550 74 OFFCURVE",
"412 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"695 1215 LINE",
"737 1238 OFFCURVE",
"786 1222 OFFCURVE",
"834 1198 CURVE",
"845 1207 LINE",
"739 1370 LINE",
"205 1001 LINE SMOOTH",
"165 974 OFFCURVE",
"122 991 OFFCURVE",
"74 1023 CURVE",
"61 1014 LINE",
"154 844 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 65 values pushed */
52 45 35 20 4 6 2 1 76 0 3 2 3 133 7 1 2 6 2 133 0 6 5 6 133 0 0 0 5 97 0 5 5 34 77 0 1 1 4 98 0 4 4 32 4 78 15 14 42 41 32 29 26 24 17 16 14 55 15 55 37 34 8 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 902;
}
);
note = eth;
rightMetricsKey = "=o";
unicode = 00F0;
},
{
glyphname = eth.alt;
lastChange = "2018-08-20 10:17:17 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"217 451 OFFCURVE",
"421 768 OFFCURVE",
"554 768 CURVE SMOOTH",
"642 768 OFFCURVE",
"686 721 OFFCURVE",
"686 627 CURVE SMOOTH",
"686 379 OFFCURVE",
"494 57 OFFCURVE",
"358 57 CURVE SMOOTH",
"264 57 OFFCURVE",
"217 110 OFFCURVE",
"217 215 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"96 83 OFFCURVE",
"176 -27 OFFCURVE",
"336 -27 CURVE SMOOTH",
"627 -27 OFFCURVE",
"817 237 OFFCURVE",
"817 645 CURVE SMOOTH",
"817 824 OFFCURVE",
"729 980 OFFCURVE",
"553 1112 CURVE",
"744 1235 LINE SMOOTH",
"752 1240 OFFCURVE",
"763 1243 OFFCURVE",
"778 1243 CURVE SMOOTH",
"791 1243 OFFCURVE",
"811 1239 OFFCURVE",
"837 1231 CURVE SMOOTH",
"863 1223 OFFCURVE",
"878 1219 OFFCURVE",
"882 1219 CURVE SMOOTH",
"889 1219 OFFCURVE",
"886 1232 OFFCURVE",
"874 1258 CURVE SMOOTH",
"849 1313 OFFCURVE",
"829 1341 OFFCURVE",
"816 1341 CURVE SMOOTH",
"814 1341 OFFCURVE",
"812 1340 OFFCURVE",
"810 1339 CURVE SMOOTH",
"508 1141 LINE",
"429 1192 OFFCURVE",
"352 1233 OFFCURVE",
"275 1263 CURVE SMOOTH",
"254 1271 OFFCURVE",
"220 1203 OFFCURVE",
"243 1191 CURVE",
"310 1159 OFFCURVE",
"369 1124 OFFCURVE",
"422 1085 CURVE",
"320 1019 LINE SMOOTH",
"307 1011 OFFCURVE",
"293 1007 OFFCURVE",
"278 1007 CURVE SMOOTH",
"262 1007 OFFCURVE",
"244 1013 OFFCURVE",
"223 1025 CURVE SMOOTH",
"202 1037 OFFCURVE",
"191 1043 OFFCURVE",
"190 1043 CURVE SMOOTH",
"185 1043 OFFCURVE",
"186 1034 OFFCURVE",
"192 1015 CURVE SMOOTH",
"215 945 OFFCURVE",
"230 910 OFFCURVE",
"238 910 CURVE SMOOTH",
"240 910 OFFCURVE",
"242 911 OFFCURVE",
"244 912 CURVE SMOOTH",
"463 1053 LINE",
"538 993 OFFCURVE",
"595 923 OFFCURVE",
"634 844 CURVE",
"617 849 OFFCURVE",
"595 852 OFFCURVE",
"568 852 CURVE SMOOTH",
"347 852 OFFCURVE",
"96 595 OFFCURVE",
"96 303 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"507 -27 OFFCURVE",
"709 272 OFFCURVE",
"709 533 CURVE SMOOTH",
"709 635 OFFCURVE",
"695 1069 OFFCURVE",
"-12 1302 CURVE",
"-35 1250 LINE",
"197 1159 OFFCURVE",
"398 1035 OFFCURVE",
"509 847 CURVE",
"490 851 OFFCURVE",
"478 852 OFFCURVE",
"460 852 CURVE SMOOTH",
"227 852 OFFCURVE",
"25 553 OFFCURVE",
"25 292 CURVE SMOOTH",
"25 145 OFFCURVE",
"98 -27 OFFCURVE",
"273 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"175 34 OFFCURVE",
"142 161 OFFCURVE",
"142 267 CURVE SMOOTH",
"142 512 OFFCURVE",
"288 791 OFFCURVE",
"431 791 CURVE SMOOTH",
"555 791 OFFCURVE",
"585 674 OFFCURVE",
"585 570 CURVE SMOOTH",
"585 315 OFFCURVE",
"448 34 OFFCURVE",
"303 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 1235 LINE SMOOTH",
"615 1258 OFFCURVE",
"673 1246 OFFCURVE",
"722 1214 CURVE",
"732 1224 LINE",
"644 1342 LINE",
"183 1021 LINE SMOOTH",
"139 991 OFFCURVE",
"95 1010 OFFCURVE",
"45 1042 CURVE",
"34 1036 LINE",
"112 912 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
50 37 30 17 15 5 4 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 4 3 4 137 0 1 0 2 3 1 2 109 0 0 0 5 97 0 5 5 37 77 0 3 3 38 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 2 4 2 3 4 131 0 4 4 132 0 1 0 2 3 1 2 109 0 0 0 5 97 0 5 5 37 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 3 2 4 2 3 4 131 0 4 4 132 0 5 0 0 1 5 0 109 0 1 2 2 1 93 0 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
56 54 48 46 44 36 35 33 6 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 772;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"693 1225 LINE SMOOTH",
"734 1253 OFFCURVE",
"784 1230 OFFCURVE",
"832 1208 CURVE",
"843 1217 LINE",
"742 1350 LINE",
"266 1021 LINE SMOOTH",
"226 993 OFFCURVE",
"182 1011 OFFCURVE",
"135 1043 CURVE",
"121 1034 LINE",
"210 894 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"678 -27 OFFCURVE",
"856 197 OFFCURVE",
"856 548 CURVE SMOOTH",
"856 848 OFFCURVE",
"649 1158 OFFCURVE",
"96 1311 CURVE",
"66 1235 LINE",
"299 1134 OFFCURVE",
"482 1029 OFFCURVE",
"587 850 CURVE",
"571 852 OFFCURVE",
"549 852 OFFCURVE",
"535 852 CURVE SMOOTH",
"307 852 OFFCURVE",
"82 640 OFFCURVE",
"82 366 CURVE SMOOTH",
"82 253 OFFCURVE",
"111 -27 OFFCURVE",
"391 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"328 74 OFFCURVE",
"285 155 OFFCURVE",
"285 242 CURVE SMOOTH",
"285 441 OFFCURVE",
"394 750 OFFCURVE",
"540 750 CURVE SMOOTH",
"621 750 OFFCURVE",
"654 692 OFFCURVE",
"654 601 CURVE SMOOTH",
"654 405 OFFCURVE",
"550 74 OFFCURVE",
"412 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"695 1215 LINE",
"737 1238 OFFCURVE",
"786 1222 OFFCURVE",
"834 1198 CURVE",
"845 1207 LINE",
"739 1370 LINE",
"251 1044 LINE SMOOTH",
"211 1017 OFFCURVE",
"168 1034 OFFCURVE",
"120 1066 CURVE",
"107 1057 LINE",
"210 894 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
52 45 35 20 4 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
7 1 2 6 3 6 2 3 131 0 3 3 132 0 0 0 5 6 0 5 109 0 1 1 4 97 0 4 4 24 77 0 6 6 25 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 6 5 2 5 6 2 131 7 1 2 3 5 2 3 129 0 3 3 132 0 0 0 5 6 0 5 109 0 1 1 4 97 0 4 4 24 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 6 5 2 5 6 2 131 7 1 2 3 5 2 3 129 0 3 3 132 0 4 0 1 0 4 1 109 0 0 5 5 0 93 0 0 0 5 97 0 5 0 5 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 19 values pushed */
15 14 43 41 32 29 26 24 18 16 14 56 15 56 37 34 8 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 902;
}
);
note = eth.alt;
rightMetricsKey = "=o";
},
{
glyphname = eth.nordic;
lastChange = "2018-08-17 21:11:26 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"746 860 OFFCURVE",
"704 1034 OFFCURVE",
"620 1177 CURVE",
"785 1262 LINE",
"795 1272 OFFCURVE",
"760 1345 OFFCURVE",
"745 1337 CURVE SMOOTH",
"573 1248 LINE",
"502 1352 OFFCURVE",
"412 1426 OFFCURVE",
"301 1469 CURVE",
"272 1407 LINE",
"358 1357 OFFCURVE",
"428 1288 OFFCURVE",
"481 1201 CURVE",
"307 1113 LINE",
"291 1106 OFFCURVE",
"334 1033 OFFCURVE",
"347 1038 CURVE",
"522 1127 LINE",
"561 1042 OFFCURVE",
"588 944 OFFCURVE",
"605 832 CURVE",
"562 845 OFFCURVE",
"525 852 OFFCURVE",
"496 852 CURVE SMOOTH",
"276 852 OFFCURVE",
"25 595 OFFCURVE",
"25 303 CURVE SMOOTH",
"25 83 OFFCURVE",
"105 -27 OFFCURVE",
"265 -27 CURVE SMOOTH",
"557 -27 OFFCURVE",
"746 240 OFFCURVE",
"746 653 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"615 379 OFFCURVE",
"423 57 OFFCURVE",
"287 57 CURVE SMOOTH",
"193 57 OFFCURVE",
"146 110 OFFCURVE",
"146 215 CURVE SMOOTH",
"146 451 OFFCURVE",
"349 768 OFFCURVE",
"482 768 CURVE SMOOTH",
"571 768 OFFCURVE",
"615 721 OFFCURVE",
"615 627 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"511 -27 OFFCURVE",
"720 294 OFFCURVE",
"720 574 CURVE SMOOTH",
"720 932 OFFCURVE",
"548 1253 OFFCURVE",
"278 1464 CURVE",
"254 1412 LINE",
"412 1270 OFFCURVE",
"529 1067 OFFCURVE",
"577 835 CURVE",
"540 851 OFFCURVE",
"524 852 OFFCURVE",
"495 852 CURVE SMOOTH",
"241 852 OFFCURVE",
"9 511 OFFCURVE",
"9 252 CURVE SMOOTH",
"9 88 OFFCURVE",
"93 -27 OFFCURVE",
"233 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170 34 OFFCURVE",
"123 117 OFFCURVE",
"123 239 CURVE SMOOTH",
"123 446 OFFCURVE",
"289 791 OFFCURVE",
"471 791 CURVE SMOOTH",
"553 791 OFFCURVE",
"600 708 OFFCURVE",
"600 587 CURVE SMOOTH",
"600 380 OFFCURVE",
"434 34 OFFCURVE",
"252 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"725 1262 LINE",
"685 1337 LINE",
"247 1113 LINE",
"287 1038 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
31 26 25 17 13 12 6 0 74 10 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 37 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
41 39 36 34 35 34 4 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 776;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"638 604 OFFCURVE",
"634 563 OFFCURVE",
"626 518 CURVE SMOOTH",
"603 403 OFFCURVE",
"562 300 OFFCURVE",
"505 207 CURVE SMOOTH",
"452 118 OFFCURVE",
"400 74 OFFCURVE",
"349 74 CURVE SMOOTH",
"280 74 OFFCURVE",
"242 116 OFFCURVE",
"235 201 CURVE SMOOTH",
"232 230 OFFCURVE",
"236 271 OFFCURVE",
"247 326 CURVE SMOOTH",
"270 439 OFFCURVE",
"312 540 OFFCURVE",
"372 627 CURVE SMOOTH",
"428 709 OFFCURVE",
"483 750 OFFCURVE",
"536 750 CURVE SMOOTH",
"547 750 OFFCURVE",
"556 749 OFFCURVE",
"564 748 CURVE",
"613 735 OFFCURVE",
"638 700 OFFCURVE",
"638 641 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"343 1106 LINE",
"342 1105 OFFCURVE",
"341 1103 OFFCURVE",
"341 1100 CURVE",
"342 1091 OFFCURVE",
"349 1073 OFFCURVE",
"362 1047 CURVE SMOOTH",
"379 1012 OFFCURVE",
"390 995 OFFCURVE",
"397 995 CURVE",
"569 1081 LINE",
"596 1010 OFFCURVE",
"615 932 OFFCURVE",
"626 846 CURVE",
"593 850 OFFCURVE",
"565 852 OFFCURVE",
"540 852 CURVE SMOOTH",
"511 852 OFFCURVE",
"476 847 OFFCURVE",
"437 838 CURVE SMOOTH",
"344 816 OFFCURVE",
"258 762 OFFCURVE",
"179 676 CURVE SMOOTH",
"88 574 OFFCURVE",
"42 456 OFFCURVE",
"42 322 CURVE SMOOTH",
"42 304 OFFCURVE",
"43 287 OFFCURVE",
"44 272 CURVE SMOOTH",
"61 73 OFFCURVE",
"152 -27 OFFCURVE",
"319 -27 CURVE SMOOTH",
"341 -27 LINE",
"493 -13 OFFCURVE",
"611 48 OFFCURVE",
"696 156 CURVE SMOOTH",
"791 280 OFFCURVE",
"839 444 OFFCURVE",
"839 647 CURVE SMOOTH",
"839 848 OFFCURVE",
"800 1019 OFFCURVE",
"722 1161 CURVE",
"888 1245 LINE",
"892 1248 OFFCURVE",
"894 1253 OFFCURVE",
"894 1260 CURVE SMOOTH",
"894 1271 OFFCURVE",
"889 1287 OFFCURVE",
"878 1309 CURVE SMOOTH",
"861 1342 OFFCURVE",
"848 1358 OFFCURVE",
"839 1358 CURVE",
"838 1357 OFFCURVE",
"836 1356 OFFCURVE",
"835 1356 CURVE"
);
},
{
closed = 0;
nodes = (
"655 1264 LINE",
"572 1370 OFFCURVE",
"484 1439 OFFCURVE",
"390 1470 CURVE",
"339 1389 LINE",
"410 1337 OFFCURVE",
"468 1272 OFFCURVE",
"515 1194 CURVE"
);
},
{
closed = 0;
nodes = (
"268 -156 LINE",
"268 -242 OFFCURVE",
"197 -313 OFFCURVE",
"111 -313 CURVE",
"59 -313 OFFCURVE",
"16 -270 OFFCURVE",
"16 -218 CURVE",
"16 -187 OFFCURVE",
"42 -162 OFFCURVE",
"73 -162 CURVE",
"92 -162 OFFCURVE",
"107 -177 OFFCURVE",
"107 -196 CURVE",
"107 -207 OFFCURVE",
"98 -216 OFFCURVE",
"86 -216 CURVE",
"80 -216 OFFCURVE",
"74 -211 OFFCURVE",
"74 -204 CURVE",
"74 -200 OFFCURVE",
"78 -197 OFFCURVE",
"82 -197 CURVE",
"84 -197 OFFCURVE",
"86 -199 OFFCURVE",
"86 -201 CURVE",
"86 -202 OFFCURVE",
"85 -204 OFFCURVE",
"83 -204 CURVE"
);
},
{
closed = 0;
nodes = (
"268 -156 LINE",
"268 -242 OFFCURVE",
"197 -313 OFFCURVE",
"111 -313 CURVE",
"59 -313 OFFCURVE",
"16 -270 OFFCURVE",
"16 -218 CURVE",
"16 -187 OFFCURVE",
"42 -162 OFFCURVE",
"73 -162 CURVE",
"92 -162 OFFCURVE",
"107 -177 OFFCURVE",
"107 -196 CURVE",
"107 -207 OFFCURVE",
"98 -216 OFFCURVE",
"86 -216 CURVE",
"80 -216 OFFCURVE",
"74 -211 OFFCURVE",
"74 -204 CURVE",
"74 -200 OFFCURVE",
"78 -197 OFFCURVE",
"82 -197 CURVE",
"84 -197 OFFCURVE",
"86 -199 OFFCURVE",
"86 -201 CURVE",
"86 -202 OFFCURVE",
"85 -204 OFFCURVE",
"83 -204 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"663 -27 OFFCURVE",
"839 275 OFFCURVE",
"839 647 CURVE SMOOTH",
"839 1024 OFFCURVE",
"693 1342 OFFCURVE",
"390 1470 CURVE",
"339 1389 LINE",
"514 1261 OFFCURVE",
"598 1066 OFFCURVE",
"626 846 CURVE",
"593 850 OFFCURVE",
"565 852 OFFCURVE",
"540 852 CURVE SMOOTH",
"277 852 OFFCURVE",
"42 599 OFFCURVE",
"42 322 CURVE SMOOTH",
"42 117 OFFCURVE",
"124 -27 OFFCURVE",
"319 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"280 74 OFFCURVE",
"235 116 OFFCURVE",
"235 201 CURVE SMOOTH",
"235 405 OFFCURVE",
"384 750 OFFCURVE",
"536 750 CURVE SMOOTH",
"605 750 OFFCURVE",
"638 707 OFFCURVE",
"638 641 CURVE SMOOTH",
"638 440 OFFCURVE",
"491 74 OFFCURVE",
"349 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"888 1245 LINE",
"835 1356 LINE",
"343 1106 LINE",
"397 995 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
63 53 47 45 44 38 37 7 2 74 35 1 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 0 0 3 0 3 101 0 1 1 2 97 0 2 2 24 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 1 0 2 1 109 0 0 3 3 0 93 0 0 0 3 97 0 3 0 3 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
40 41 38 20 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 870;
}
);
leftKerningGroup = eth.nordic;
leftMetricsKey = o;
note = eth.nordic;
rightMetricsKey = o;
},
{
glyphname = exclam;
lastChange = "2018-08-16 15:26:20 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"322 432 LINE",
"641 1278 LINE SMOOTH",
"647 1294 OFFCURVE",
"650 1311 OFFCURVE",
"650 1329 CURVE SMOOTH",
"650 1376 OFFCURVE",
"624 1399 OFFCURVE",
"571 1399 CURVE SMOOTH",
"514 1399 OFFCURVE",
"458 1358 OFFCURVE",
"442 1286 CURVE SMOOTH",
"257 432 LINE"
);
},
{
closed = 1;
nodes = (
"267 -25 OFFCURVE",
"321 29 OFFCURVE",
"321 97 CURVE SMOOTH",
"321 164 OFFCURVE",
"267 218 OFFCURVE",
"200 218 CURVE SMOOTH",
"132 218 OFFCURVE",
"78 164 OFFCURVE",
"78 97 CURVE SMOOTH",
"78 29 OFFCURVE",
"132 -25 OFFCURVE",
"200 -25 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 1 3 1 0 3 128 0 1 1 98 77 0 3 3 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 1 133 0 0 3 0 133 0 3 3 2 97 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 21 36 17 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 520;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"369 442 LINE",
"700 1231 LINE SMOOTH",
"711 1257 OFFCURVE",
"715 1284 OFFCURVE",
"715 1307 CURVE SMOOTH",
"715 1368 OFFCURVE",
"676 1399 OFFCURVE",
"598 1399 CURVE SMOOTH",
"500 1399 OFFCURVE",
"446 1349 OFFCURVE",
"423 1231 CURVE SMOOTH",
"271 442 LINE"
);
},
{
closed = 1;
nodes = (
"340 -27 OFFCURVE",
"406 35 OFFCURVE",
"406 119 CURVE SMOOTH",
"406 208 OFFCURVE",
"339 279 OFFCURVE",
"256 279 CURVE SMOOTH",
"161 279 OFFCURVE",
"92 221 OFFCURVE",
"92 133 CURVE SMOOTH",
"92 32 OFFCURVE",
"158 -27 OFFCURVE",
"256 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 1 3 1 0 3 128 0 1 1 37 77 0 3 3 2 97 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 1 133 0 0 3 0 133 0 3 3 2 97 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 23 37 17 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 567;
}
);
leftKerningGroup = exclam;
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
lastChange = "2018-08-16 15:41:00 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"197 404 LINE",
"-122 -442 LINE SMOOTH",
"-128 -458 OFFCURVE",
"-131 -475 OFFCURVE",
"-131 -493 CURVE SMOOTH",
"-131 -540 OFFCURVE",
"-105 -563 OFFCURVE",
"-52 -563 CURVE SMOOTH",
"5 -563 OFFCURVE",
"61 -522 OFFCURVE",
"77 -450 CURVE SMOOTH",
"262 404 LINE"
);
},
{
closed = 1;
nodes = (
"252 861 OFFCURVE",
"198 807 OFFCURVE",
"198 739 CURVE SMOOTH",
"198 672 OFFCURVE",
"252 618 OFFCURVE",
"319 618 CURVE SMOOTH",
"387 618 OFFCURVE",
"441 672 OFFCURVE",
"441 739 CURVE SMOOTH",
"441 807 OFFCURVE",
"387 861 OFFCURVE",
"319 861 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"5 -563 OFFCURVE",
"61 -522 OFFCURVE",
"77 -450 CURVE SMOOTH",
"262 404 LINE",
"197 404 LINE",
"-122 -442 LINE SMOOTH",
"-128 -458 OFFCURVE",
"-131 -475 OFFCURVE",
"-131 -493 CURVE SMOOTH",
"-131 -540 OFFCURVE",
"-105 -563 OFFCURVE",
"-52 -563 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"387 618 OFFCURVE",
"441 672 OFFCURVE",
"441 739 CURVE SMOOTH",
"441 807 OFFCURVE",
"387 861 OFFCURVE",
"319 861 CURVE SMOOTH",
"252 861 OFFCURVE",
"198 807 OFFCURVE",
"198 739 CURVE SMOOTH",
"198 672 OFFCURVE",
"252 618 OFFCURVE",
"319 618 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 2 0 2 1 0 128 0 2 2 3 97 0 3 3 95 77 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 22 values pushed */
0 1 2 0 2 1 0 128 0 3 0 2 1 3 2 105 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 19 21 34 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 520;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"478 557 OFFCURVE",
"571 649 OFFCURVE",
"571 780 OFFCURVE",
"477 872 OFFCURVE",
"346 872 OFFCURVE",
"254 781 OFFCURVE",
"254 715 QCURVE SMOOTH",
"254 651 OFFCURVE",
"349 557 OFFCURVE",
"412 557 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"369 411 OFFCURVE",
"326 426 OFFCURVE",
"276 417 OFFCURVE",
"270 403 QCURVE SMOOTH",
"233 313 OFFCURVE",
"-57 -371 OFFCURVE",
"-63 -391 QCURVE SMOOTH",
"-115 -553 OFFCURVE",
"41 -553 QCURVE SMOOTH",
"92 -553 OFFCURVE",
"191 -471 OFFCURVE",
"207 -412 QCURVE",
"209 -402 OFFCURVE",
"367 399 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"149 -553 OFFCURVE",
"203 -503 OFFCURVE",
"226 -385 CURVE SMOOTH",
"378 404 LINE",
"280 404 LINE",
"-51 -385 LINE SMOOTH",
"-62 -411 OFFCURVE",
"-66 -438 OFFCURVE",
"-66 -461 CURVE SMOOTH",
"-66 -522 OFFCURVE",
"-27 -553 OFFCURVE",
"51 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"488 567 OFFCURVE",
"557 625 OFFCURVE",
"557 713 CURVE SMOOTH",
"557 814 OFFCURVE",
"491 873 OFFCURVE",
"393 873 CURVE SMOOTH",
"309 873 OFFCURVE",
"243 811 OFFCURVE",
"243 727 CURVE SMOOTH",
"243 638 OFFCURVE",
"310 567 OFFCURVE",
"393 567 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
3 1 0 0 1 97 0 1 1 34 77 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
0 1 3 1 0 2 1 0 105 0 2 2 36 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
1 0 16 14 6 5 0 9 1 9 4 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 593;
}
);
note = exclamdown;
unicode = 00A1;
},
{
glyphname = f;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-38 -289 LINE",
"64 -289 LINE",
"460 1192 LINE",
"358 1192 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"93 -369 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"395 1314 OFFCURVE",
"496 1403 OFFCURVE",
"619 1403 CURVE SMOOTH",
"705 1403 OFFCURVE",
"741 1355 OFFCURVE",
"748 1274 CURVE SMOOTH",
"751 1238 OFFCURVE",
"782 1202 OFFCURVE",
"823 1202 CURVE SMOOTH",
"858 1202 OFFCURVE",
"875 1226 OFFCURVE",
"875 1275 CURVE SMOOTH",
"875 1326 OFFCURVE",
"853 1464 OFFCURVE",
"671 1464 CURVE SMOOTH",
"474 1464 OFFCURVE",
"302 1363 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -459 CURVE SMOOTH",
"-333 -492 OFFCURVE",
"-307 -551 OFFCURVE",
"-169 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"553 763 LINE",
"575 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 2 1 114 0 7 7 5 97 0 5 5 94 77 9 1 3 3 4 95 8 1 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 7 7 5 97 0 5 5 94 77 9 1 3 3 4 95 8 1 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 9 1 3 3 4 95 8 1 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 1 4 3 103 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
49 47 18 35 35 34 37 19 33 36 35 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 432;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"426 1360 LINE",
"648 1360 LINE",
"244 -147 LINE",
"22 -147 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"552 1382 OFFCURVE",
"680 1382 CURVE SMOOTH",
"734 1382 OFFCURVE",
"763 1347 OFFCURVE",
"770 1276 CURVE SMOOTH",
"781 1169 OFFCURVE",
"827 1149 OFFCURVE",
"884 1149 CURVE SMOOTH",
"941 1149 OFFCURVE",
"969 1181 OFFCURVE",
"969 1245 CURVE SMOOTH",
"969 1373 OFFCURVE",
"869 1464 OFFCURVE",
"724 1464 CURVE SMOOTH",
"495 1464 OFFCURVE",
"321 1367 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"655 737 LINE",
"680 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
44 20 2 3 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 2 1 114 0 7 7 5 97 0 5 5 33 77 9 1 3 3 4 95 8 1 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 7 7 5 97 0 5 5 33 77 9 1 3 3 4 95 8 1 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 9 1 3 3 4 95 8 1 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 1 4 3 103 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 6 7 4 7 6 4 128 0 1 3 2 3 1 2 128 0 5 0 7 6 5 7 105 8 1 4 9 1 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
49 47 18 35 35 34 37 19 33 36 35 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 549;
}
);
leftKerningGroup = f;
note = f;
rightKerningGroup = f;
unicode = 0066;
},
{
glyphname = f.alt;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"370 763 LINE",
"639 763 LINE SMOOTH",
"644.333 763 OFFCURVE",
"650 767.667 OFFCURVE",
"656 777 CURVE SMOOTH",
"668.667 795.667 OFFCURVE",
"675 813.333 OFFCURVE",
"675 830 CURVE SMOOTH",
"675 838 OFFCURVE",
"672.667 842 OFFCURVE",
"668 842 CURVE SMOOTH",
"386 842 LINE",
"432.667 1074.667 OFFCURVE",
"474.833 1225 OFFCURVE",
"512.5 1293 CURVE SMOOTH",
"550.167 1361 OFFCURVE",
"589.667 1395 OFFCURVE",
"631 1395 CURVE SMOOTH",
"678.333 1395 OFFCURVE",
"702 1354.667 OFFCURVE",
"702 1274 CURVE SMOOTH",
"702 1235.333 OFFCURVE",
"731.667 1202 OFFCURVE",
"777 1202 CURVE SMOOTH",
"821 1202 OFFCURVE",
"843 1234 OFFCURVE",
"843 1298 CURVE SMOOTH",
"843 1387.333 OFFCURVE",
"766.667 1464 OFFCURVE",
"660 1464 CURVE SMOOTH",
"586 1464 OFFCURVE",
"515 1426.5 OFFCURVE",
"447 1351.5 CURVE SMOOTH",
"379 1276.5 OFFCURVE",
"318 1106.667 OFFCURVE",
"264 842 CURVE",
"94 842 LINE SMOOTH",
"88.667 842 OFFCURVE",
"83.333 837.667 OFFCURVE",
"78 829 CURVE",
"66 811 OFFCURVE",
"60 793 OFFCURVE",
"60 775 CURVE SMOOTH",
"60 767 OFFCURVE",
"62.333 763 OFFCURVE",
"67 763 CURVE SMOOTH",
"249 763 LINE",
"45 -297 LINE SMOOTH",
"26.333 -391.667 OFFCURVE",
"-27.333 -467 OFFCURVE",
"-82 -467 CURVE SMOOTH",
"-112.667 -467 OFFCURVE",
"-137 -450.333 OFFCURVE",
"-155 -417 CURVE SMOOTH",
"-173 -383.667 OFFCURVE",
"-202 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-270 -367 OFFCURVE",
"-305 -398 OFFCURVE",
"-305 -446 CURVE SMOOTH",
"-305 -490 OFFCURVE",
"-244 -551 OFFCURVE",
"-148 -551 CURVE SMOOTH",
"-41.333 -551 OFFCURVE",
"55.5 -496.833 OFFCURVE",
"121.5 -365.5 CURVE SMOOTH",
"154.5 -299.833 OFFCURVE",
"181 -215 OFFCURVE",
"201 -111 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"69 -551 OFFCURVE",
"101 -370 OFFCURVE",
"148 -111 CURVE SMOOTH",
"352 1025 LINE SMOOTH",
"399 1287 OFFCURVE",
"445 1403 OFFCURVE",
"528 1403 CURVE SMOOTH",
"608 1403 OFFCURVE",
"616 1355 OFFCURVE",
"623 1274 CURVE SMOOTH",
"626 1238 OFFCURVE",
"657 1202 OFFCURVE",
"698 1202 CURVE SMOOTH",
"733 1202 OFFCURVE",
"750 1226 OFFCURVE",
"750 1275 CURVE SMOOTH",
"750 1332 OFFCURVE",
"716 1464 OFFCURVE",
"552 1464 CURVE SMOOTH",
"405 1464 OFFCURVE",
"304 1327 OFFCURVE",
"247 1011 CURVE SMOOTH",
"11 -297 LINE SMOOTH",
"-6 -392 OFFCURVE",
"-44 -489 OFFCURVE",
"-99 -489 CURVE SMOOTH",
"-130 -489 OFFCURVE",
"-157 -469 OFFCURVE",
"-176 -442 CURVE SMOOTH",
"-196 -414 OFFCURVE",
"-227 -401 OFFCURVE",
"-267 -401 CURVE SMOOTH",
"-293 -401 OFFCURVE",
"-324 -423 OFFCURVE",
"-324 -458 CURVE SMOOTH",
"-324 -471 OFFCURVE",
"-301 -551 OFFCURVE",
"-155 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"562 763 LINE",
"584 842 LINE",
"40 842 LINE",
"20 763 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 1 2 3 2 1 117 0 6 4 7 4 6 7 131 0 0 0 2 1 0 2 109 9 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 1 2 3 2 1 3 131 0 6 4 7 4 6 7 131 0 0 0 2 1 0 2 109 9 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
49 47 18 35 35 34 37 19 33 36 35 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 462;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"45 -265 OFFCURVE",
"40 -288 OFFCURVE",
"33 -317 CURVE SMOOTH",
"18 -384 OFFCURVE",
"-2 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-102 -425 OFFCURVE",
"-123 -383 CURVE SMOOTH",
"-144 -340 OFFCURVE",
"-174 -319 OFFCURVE",
"-213 -319 CURVE SMOOTH",
"-258 -319 OFFCURVE",
"-305 -364 OFFCURVE",
"-305 -424 CURVE SMOOTH",
"-305 -484 OFFCURVE",
"-231 -551 OFFCURVE",
"-114 -551 CURVE SMOOTH",
"14 -551 OFFCURVE",
"144 -478 OFFCURVE",
"207 -319 CURVE SMOOTH",
"240 -241 OFFCURVE",
"264 -167 OFFCURVE",
"277 -96 CURVE SMOOTH",
"445 737 LINE",
"689 737 LINE SMOOTH",
"708 737 OFFCURVE",
"744 844 OFFCURVE",
"723 844 CURVE SMOOTH",
"467 844 LINE",
"491 969 OFFCURVE",
"515 1175 OFFCURVE",
"578 1293 CURVE SMOOTH",
"609 1352 OFFCURVE",
"643 1382 OFFCURVE",
"678 1382 CURVE SMOOTH",
"719 1382 OFFCURVE",
"740 1349 OFFCURVE",
"740 1284 CURVE SMOOTH",
"740 1219 OFFCURVE",
"793 1190 OFFCURVE",
"842 1190 CURVE SMOOTH",
"921 1190 OFFCURVE",
"972 1346 OFFCURVE",
"869 1417 CURVE SMOOTH",
"822 1448 OFFCURVE",
"764 1464 OFFCURVE",
"693 1464 CURVE SMOOTH",
"542 1464 OFFCURVE",
"391 1312 OFFCURVE",
"337 1114 CURVE SMOOTH",
"310 1015 OFFCURVE",
"287 925 OFFCURVE",
"269 844 CURVE",
"101 844 LINE SMOOTH",
"78 844 OFFCURVE",
"47 737 OFFCURVE",
"68 737 CURVE SMOOTH",
"248 737 LINE",
"48 -250 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"167 -551 OFFCURVE",
"240 -361 OFFCURVE",
"288 -96 CURVE SMOOTH",
"489 1017 LINE SMOOTH",
"521 1194 OFFCURVE",
"560 1382 OFFCURVE",
"678 1382 CURVE SMOOTH",
"708 1382 OFFCURVE",
"740 1349 OFFCURVE",
"740 1284 CURVE SMOOTH",
"740 1219 OFFCURVE",
"793 1190 OFFCURVE",
"842 1190 CURVE SMOOTH",
"890 1190 OFFCURVE",
"927 1247 OFFCURVE",
"927 1307 CURVE SMOOTH",
"927 1414 OFFCURVE",
"814 1464 OFFCURVE",
"693 1464 CURVE SMOOTH",
"494 1464 OFFCURVE",
"325 1342 OFFCURVE",
"269 1029 CURVE SMOOTH",
"40 -250 LINE SMOOTH",
"20 -364 OFFCURVE",
"5 -446 OFFCURVE",
"-52 -446 CURVE SMOOTH",
"-73 -446 OFFCURVE",
"-96 -425 OFFCURVE",
"-120 -383 CURVE SMOOTH",
"-144 -340 OFFCURVE",
"-176 -319 OFFCURVE",
"-215 -319 CURVE SMOOTH",
"-257 -319 OFFCURVE",
"-298 -359 OFFCURVE",
"-298 -414 CURVE SMOOTH",
"-298 -438 OFFCURVE",
"-268 -551 OFFCURVE",
"-96 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"664 737 LINE",
"689 844 LINE",
"67 844 LINE",
"43 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 64 values pushed */
0 8 9 0 9 8 0 131 0 3 1 4 1 3 4 131 0 7 0 9 8 7 9 109 6 1 0 5 1 1 3 0 1 107 0 4 2 2 4 93 0 4 4 2 97 0 2 4 2 81 46 44 36 37 34 19 35 36 35 34 17 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 558;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 0;
nodes = (
"696 1382 LINE SMOOTH",
"737 1382 OFFCURVE",
"758 1349 OFFCURVE",
"758 1284 CURVE SMOOTH",
"758 1219 OFFCURVE",
"811 1190 OFFCURVE",
"860 1190 CURVE SMOOTH",
"939 1190 OFFCURVE",
"990 1346 OFFCURVE",
"887 1417 CURVE SMOOTH",
"840 1448 OFFCURVE",
"782 1464 OFFCURVE",
"711 1464 CURVE SMOOTH"
);
}
);
};
layerId = "150EC3E6-A2B3-4C9B-9DD2-E1345782C944";
name = "Aug 15 18, 12:26";
paths = (
{
closed = 1;
nodes = (
"185 -551 OFFCURVE",
"258 -361 OFFCURVE",
"306 -96 CURVE SMOOTH",
"507 1017 LINE SMOOTH",
"539 1194 OFFCURVE",
"579 1382 OFFCURVE",
"707 1382 CURVE SMOOTH",
"761 1382 OFFCURVE",
"790 1347 OFFCURVE",
"797 1276 CURVE SMOOTH",
"807 1169 OFFCURVE",
"854 1149 OFFCURVE",
"911 1149 CURVE SMOOTH",
"968 1149 OFFCURVE",
"996 1181 OFFCURVE",
"996 1245 CURVE SMOOTH",
"996 1373 OFFCURVE",
"896 1464 OFFCURVE",
"751 1464 CURVE SMOOTH",
"522 1464 OFFCURVE",
"348 1367 OFFCURVE",
"287 1029 CURVE SMOOTH",
"58 -250 LINE SMOOTH",
"38 -364 OFFCURVE",
"23 -446 OFFCURVE",
"-34 -446 CURVE SMOOTH",
"-55 -446 OFFCURVE",
"-78 -425 OFFCURVE",
"-102 -383 CURVE SMOOTH",
"-126 -340 OFFCURVE",
"-158 -319 OFFCURVE",
"-197 -319 CURVE SMOOTH",
"-239 -319 OFFCURVE",
"-280 -359 OFFCURVE",
"-280 -414 CURVE SMOOTH",
"-280 -438 OFFCURVE",
"-250 -551 OFFCURVE",
"-78 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"682 737 LINE",
"707 844 LINE",
"85 844 LINE",
"61 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 64 values pushed */
0 8 9 0 9 8 0 131 0 3 1 4 1 3 4 131 0 7 0 9 8 7 9 109 6 1 0 5 1 1 3 0 1 107 0 4 2 2 4 93 0 4 4 2 97 0 2 4 2 81 46 44 36 37 34 19 35 36 35 34 17 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 622;
}
);
leftKerningGroup = f;
note = f.alt;
rightKerningGroup = f.alt;
},
{
glyphname = f_eth;
lastChange = "2018-08-18 09:41:54 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"341 763 LINE",
"535 763 LINE SMOOTH",
"540 763 OFFCURVE",
"546 768 OFFCURVE",
"552 777 CURVE SMOOTH",
"565 796 OFFCURVE",
"571 813 OFFCURVE",
"571 830 CURVE SMOOTH",
"571 838 OFFCURVE",
"569 842 OFFCURVE",
"564 842 CURVE SMOOTH",
"357 842 LINE",
"404 1075 OFFCURVE",
"446 1225 OFFCURVE",
"484 1293 CURVE SMOOTH",
"521 1361 OFFCURVE",
"561 1395 OFFCURVE",
"602 1395 CURVE SMOOTH",
"641 1395 OFFCURVE",
"667 1363 OFFCURVE",
"667 1320 CURVE SMOOTH",
"667 1281 OFFCURVE",
"697 1248 OFFCURVE",
"742 1248 CURVE SMOOTH",
"786 1248 OFFCURVE",
"808 1280 OFFCURVE",
"808 1344 CURVE SMOOTH",
"808 1395 OFFCURVE",
"747 1464 OFFCURVE",
"631 1464 CURVE SMOOTH",
"557 1464 OFFCURVE",
"486 1427 OFFCURVE",
"418 1352 CURVE SMOOTH",
"350 1277 OFFCURVE",
"289 1107 OFFCURVE",
"235 842 CURVE",
"65 842 LINE SMOOTH",
"60 842 OFFCURVE",
"54 838 OFFCURVE",
"49 829 CURVE",
"37 811 OFFCURVE",
"31 793 OFFCURVE",
"31 775 CURVE SMOOTH",
"31 767 OFFCURVE",
"33 763 OFFCURVE",
"38 763 CURVE SMOOTH",
"220 763 LINE",
"16 -297 LINE SMOOTH",
"-3 -392 OFFCURVE",
"-56 -467 OFFCURVE",
"-111 -467 CURVE SMOOTH",
"-142 -467 OFFCURVE",
"-166 -450 OFFCURVE",
"-184 -417 CURVE SMOOTH",
"-202 -384 OFFCURVE",
"-231 -367 OFFCURVE",
"-271 -367 CURVE SMOOTH",
"-299 -367 OFFCURVE",
"-334 -398 OFFCURVE",
"-334 -446 CURVE SMOOTH",
"-334 -490 OFFCURVE",
"-273 -551 OFFCURVE",
"-177 -551 CURVE SMOOTH",
"-70 -551 OFFCURVE",
"27 -497 OFFCURVE",
"93 -366 CURVE SMOOTH",
"126 -300 OFFCURVE",
"152 -215 OFFCURVE",
"172 -111 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1267 824 OFFCURVE",
"1179 980 OFFCURVE",
"1003 1112 CURVE",
"1193 1235 LINE SMOOTH",
"1201 1240 OFFCURVE",
"1212 1243 OFFCURVE",
"1227 1243 CURVE SMOOTH",
"1241 1243 OFFCURVE",
"1261 1239 OFFCURVE",
"1287 1231 CURVE SMOOTH",
"1312 1223 OFFCURVE",
"1327 1219 OFFCURVE",
"1331 1219 CURVE SMOOTH",
"1338 1219 OFFCURVE",
"1335 1232 OFFCURVE",
"1323 1258 CURVE SMOOTH",
"1298 1313 OFFCURVE",
"1279 1341 OFFCURVE",
"1266 1341 CURVE SMOOTH",
"1263 1341 OFFCURVE",
"1261 1340 OFFCURVE",
"1259 1339 CURVE SMOOTH",
"958 1141 LINE",
"898 1179 OFFCURVE",
"846 1209 OFFCURVE",
"803 1230 CURVE SMOOTH",
"793 1235 OFFCURVE",
"782 1229 OFFCURVE",
"771 1210 CURVE",
"759 1192 OFFCURVE",
"753 1179 OFFCURVE",
"753 1172 CURVE SMOOTH",
"753 1163 OFFCURVE",
"756 1158 OFFCURVE",
"763 1155 CURVE",
"786 1144 OFFCURVE",
"823 1121 OFFCURVE",
"872 1085 CURVE",
"770 1019 LINE SMOOTH",
"757 1011 OFFCURVE",
"743 1007 OFFCURVE",
"728 1007 CURVE SMOOTH",
"712 1007 OFFCURVE",
"694 1013 OFFCURVE",
"673 1025 CURVE SMOOTH",
"652 1037 OFFCURVE",
"640 1043 OFFCURVE",
"639 1043 CURVE SMOOTH",
"635 1043 OFFCURVE",
"636 1034 OFFCURVE",
"641 1015 CURVE SMOOTH",
"662 945 OFFCURVE",
"678 910 OFFCURVE",
"687 910 CURVE SMOOTH",
"690 910 OFFCURVE",
"692 911 OFFCURVE",
"694 912 CURVE SMOOTH",
"913 1053 LINE",
"986 993 OFFCURVE",
"1043 923 OFFCURVE",
"1083 844 CURVE",
"1066 849 OFFCURVE",
"1044 852 OFFCURVE",
"1017 852 CURVE SMOOTH",
"797 852 OFFCURVE",
"546 595 OFFCURVE",
"546 303 CURVE SMOOTH",
"546 83 OFFCURVE",
"626 -27 OFFCURVE",
"786 -27 CURVE SMOOTH",
"1075 -27 OFFCURVE",
"1267 238 OFFCURVE",
"1267 645 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1136 379 OFFCURVE",
"944 57 OFFCURVE",
"808 57 CURVE SMOOTH",
"714 57 OFFCURVE",
"667 110 OFFCURVE",
"667 215 CURVE SMOOTH",
"667 451 OFFCURVE",
"870 768 OFFCURVE",
"1003 768 CURVE SMOOTH",
"1092 768 OFFCURVE",
"1136 721 OFFCURVE",
"1136 627 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1067 -27 OFFCURVE",
"1269 272 OFFCURVE",
"1269 533 CURVE SMOOTH",
"1269 623 OFFCURVE",
"1258 974 OFFCURVE",
"766 1214 CURVE",
"735 1152 LINE",
"876 1074 OFFCURVE",
"993 975 OFFCURVE",
"1069 847 CURVE",
"1050 851 OFFCURVE",
"1038 852 OFFCURVE",
"1020 852 CURVE SMOOTH",
"787 852 OFFCURVE",
"585 553 OFFCURVE",
"585 292 CURVE SMOOTH",
"585 145 OFFCURVE",
"658 -27 OFFCURVE",
"833 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"735 34 OFFCURVE",
"702 161 OFFCURVE",
"702 267 CURVE SMOOTH",
"702 512 OFFCURVE",
"848 791 OFFCURVE",
"991 791 CURVE SMOOTH",
"1115 791 OFFCURVE",
"1145 674 OFFCURVE",
"1145 570 CURVE SMOOTH",
"1145 315 OFFCURVE",
"1008 34 OFFCURVE",
"863 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1142 1235 LINE SMOOTH",
"1175 1258 OFFCURVE",
"1233 1246 OFFCURVE",
"1282 1214 CURVE",
"1292 1224 LINE",
"1204 1342 LINE",
"743 1021 LINE SMOOTH",
"699 991 OFFCURVE",
"655 1010 OFFCURVE",
"605 1042 CURVE",
"594 1036 LINE",
"672 912 LINE"
);
},
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"599 1403 OFFCURVE",
"607 1355 OFFCURVE",
"614 1274 CURVE SMOOTH",
"617 1238 OFFCURVE",
"648 1202 OFFCURVE",
"689 1202 CURVE SMOOTH",
"724 1202 OFFCURVE",
"741 1226 OFFCURVE",
"741 1275 CURVE SMOOTH",
"741 1332 OFFCURVE",
"707 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"396 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"553 763 LINE",
"575 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
99 86 80 76 63 61 6 5 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 1 2 10 2 1 117 13 1 6 12 7 12 6 7 131 0 0 0 2 1 0 2 109 14 9 2 3 11 8 2 4 12 3 4 107 0 7 0 5 7 5 102 0 15 15 10 97 0 10 10 37 77 0 12 12 38 12 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 1 2 10 2 1 117 0 12 4 6 4 12 6 131 13 1 6 7 4 6 7 129 0 0 0 2 1 0 2 109 14 9 2 3 11 8 2 4 12 3 4 107 0 7 0 5 7 5 102 0 15 15 10 97 0 10 10 37 15 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
0 1 2 10 2 1 10 131 0 12 4 6 4 12 6 131 13 1 6 7 4 6 7 129 0 0 0 2 1 0 2 109 14 9 2 3 11 8 2 4 12 3 4 107 0 7 0 5 7 5 102 0 15 15 10 97 0 10 10 37 15 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 1 2 10 2 1 10 131 0 12 11 6 11 12 6 131 13 1 6 7 11 6 7 129 0 0 0 2 1 0 2 109 8 1 4 11 3 4 91 14 9 2 3 0 11 12 3 11 109 0 7 0 5 7 5 102 0 15 15 10 97 0 10 10 37 15 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 1 2 10 2 1 10 131 0 12 11 13 11 12 13 131 0 13 6 11 13 6 129 0 6 7 11 6 7 129 0 0 0 2 1 0 2 109 9 1 3 8 1 4 11 3 4 107 0 14 0 11 12 14 11 109 0 7 0 5 7 5 102 0 15 15 10 97 0 10 10 37 15 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
0 1 2 10 2 1 10 131 0 12 11 13 11 12 13 131 0 13 6 11 13 6 129 0 6 7 11 6 7 129 0 0 0 2 1 0 2 109 0 10 0 15 3 10 15 109 9 1 3 8 1 4 11 3 4 107 0 14 0 11 12 14 11 109 0 7 5 5 7 93 0 7 7 5 98 0 5 7 5 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
109 107 104 102 97 95 74 72 60 58 55 53 50 48 18 36 35 34 37 19 33 36 35 16 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1332;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1380 -27 OFFCURVE",
"1558 197 OFFCURVE",
"1558 548 CURVE SMOOTH",
"1558 804 OFFCURVE",
"1408 1067 OFFCURVE",
"1021 1233 CURVE",
"974 1135 LINE",
"1109 1060 OFFCURVE",
"1217 972 OFFCURVE",
"1289 850 CURVE",
"1273 852 OFFCURVE",
"1251 852 OFFCURVE",
"1237 852 CURVE SMOOTH",
"1009 852 OFFCURVE",
"784 640 OFFCURVE",
"784 366 CURVE SMOOTH",
"784 253 OFFCURVE",
"813 -27 OFFCURVE",
"1093 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1030 74 OFFCURVE",
"987 155 OFFCURVE",
"987 242 CURVE SMOOTH",
"987 441 OFFCURVE",
"1096 750 OFFCURVE",
"1242 750 CURVE SMOOTH",
"1323 750 OFFCURVE",
"1356 692 OFFCURVE",
"1356 601 CURVE SMOOTH",
"1356 405 OFFCURVE",
"1252 74 OFFCURVE",
"1114 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1395 1225 LINE SMOOTH",
"1436 1253 OFFCURVE",
"1486 1230 OFFCURVE",
"1534 1208 CURVE",
"1545 1217 LINE",
"1444 1350 LINE",
"968 1021 LINE SMOOTH",
"928 993 OFFCURVE",
"884 1011 OFFCURVE",
"837 1043 CURVE",
"823 1034 LINE",
"912 894 LINE"
);
},
{
closed = 1;
nodes = (
"137 -551 OFFCURVE",
"227 -361 OFFCURVE",
"298 -96 CURVE SMOOTH",
"596 1017 LINE SMOOTH",
"643 1194 OFFCURVE",
"691 1372 OFFCURVE",
"756 1372 CURVE SMOOTH",
"788 1372 OFFCURVE",
"797 1341 OFFCURVE",
"797 1307 CURVE SMOOTH",
"797 1200 OFFCURVE",
"863 1190 OFFCURVE",
"900 1190 CURVE SMOOTH",
"953 1190 OFFCURVE",
"984 1250 OFFCURVE",
"984 1309 CURVE SMOOTH",
"984 1424 OFFCURVE",
"887 1464 OFFCURVE",
"751 1464 CURVE SMOOTH",
"562 1464 OFFCURVE",
"445 1284 OFFCURVE",
"377 1029 CURVE SMOOTH",
"36 -250 LINE SMOOTH",
"6 -364 OFFCURVE",
"-16 -446 OFFCURVE",
"-73 -446 CURVE SMOOTH",
"-94 -446 OFFCURVE",
"-114 -425 OFFCURVE",
"-135 -383 CURVE SMOOTH",
"-156 -340 OFFCURVE",
"-186 -319 OFFCURVE",
"-225 -319 CURVE SMOOTH",
"-270 -319 OFFCURVE",
"-317 -364 OFFCURVE",
"-317 -424 CURVE SMOOTH",
"-317 -484 OFFCURVE",
"-243 -551 OFFCURVE",
"-126 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"747 737 LINE",
"781 844 LINE",
"159 844 LINE",
"126 737 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1350 -27 OFFCURVE",
"1528 197 OFFCURVE",
"1528 548 CURVE SMOOTH",
"1528 804 OFFCURVE",
"1378 1067 OFFCURVE",
"991 1233 CURVE",
"944 1135 LINE",
"1079 1060 OFFCURVE",
"1187 972 OFFCURVE",
"1259 850 CURVE",
"1243 852 OFFCURVE",
"1221 852 OFFCURVE",
"1207 852 CURVE SMOOTH",
"979 852 OFFCURVE",
"754 640 OFFCURVE",
"754 366 CURVE SMOOTH",
"754 253 OFFCURVE",
"783 -27 OFFCURVE",
"1063 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1000 74 OFFCURVE",
"957 155 OFFCURVE",
"957 242 CURVE SMOOTH",
"957 441 OFFCURVE",
"1066 750 OFFCURVE",
"1212 750 CURVE SMOOTH",
"1293 750 OFFCURVE",
"1326 692 OFFCURVE",
"1326 601 CURVE SMOOTH",
"1326 405 OFFCURVE",
"1222 74 OFFCURVE",
"1084 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1365 1225 LINE SMOOTH",
"1406 1253 OFFCURVE",
"1456 1230 OFFCURVE",
"1504 1208 CURVE",
"1515 1217 LINE",
"1414 1350 LINE",
"938 1021 LINE SMOOTH",
"898 993 OFFCURVE",
"854 1011 OFFCURVE",
"807 1043 CURVE",
"793 1034 LINE",
"882 894 LINE"
);
},
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"669 1382 CURVE SMOOTH",
"699 1382 OFFCURVE",
"731 1349 OFFCURVE",
"731 1284 CURVE SMOOTH",
"731 1219 OFFCURVE",
"784 1190 OFFCURVE",
"833 1190 CURVE SMOOTH",
"881 1190 OFFCURVE",
"918 1247 OFFCURVE",
"918 1307 CURVE SMOOTH",
"918 1414 OFFCURVE",
"805 1464 OFFCURVE",
"684 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"655 737 LINE",
"680 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
100 90 83 73 4 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 8 9 16 9 8 16 131 14 1 3 13 15 13 3 15 131 0 15 4 13 15 4 129 0 7 0 9 8 7 9 109 6 1 0 11 1 0 91 0 11 12 5 2 1 13 11 1 107 0 4 0 2 4 2 102 0 10 10 16 97 0 16 16 24 77 0 13 13 25 13 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 8 9 16 9 8 16 131 0 13 1 3 1 13 3 131 14 1 3 15 1 3 15 129 0 15 4 1 15 4 129 0 7 0 9 8 7 9 109 6 1 0 11 1 0 91 0 11 12 5 2 1 13 11 1 107 0 4 0 2 4 2 102 0 10 10 16 97 0 16 16 24 10 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
0 8 9 16 9 8 16 131 0 13 12 3 12 13 3 131 14 1 3 15 12 3 15 129 0 15 4 12 15 4 129 0 7 0 9 8 7 9 109 6 1 0 5 1 1 12 0 1 107 0 11 0 12 13 11 12 109 0 4 0 2 4 2 102 0 10 10 16 97 0 16 16 24 10 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 81 values pushed */
0 8 9 16 9 8 16 131 0 13 12 3 12 13 3 131 14 1 3 15 12 3 15 129 0 15 4 12 15 4 129 0 7 0 9 8 7 9 109 0 16 0 10 0 16 10 109 6 1 0 5 1 1 12 0 1 107 0 11 0 12 13 11 12 109 0 4 2 2 4 93 0 4 4 2 98 0 2 4 2 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
106 104 98 96 95 93 81 79 70 67 62 60 55 53 46 44 36 37 34 19 35 36 35 34 17 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1574;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = f_eth;
rightMetricsKey = "=eth";
},
{
glyphname = f_eth.nordic;
lastChange = "2018-08-18 09:40:29 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1005 -27 OFFCURVE",
"1214 294 OFFCURVE",
"1214 574 CURVE SMOOTH",
"1214 914 OFFCURVE",
"1059 1221 OFFCURVE",
"811 1432 CURVE",
"775 1387 LINE",
"919 1246 OFFCURVE",
"1026 1054 OFFCURVE",
"1071 835 CURVE",
"1034 851 OFFCURVE",
"1018 852 OFFCURVE",
"989 852 CURVE SMOOTH",
"735 852 OFFCURVE",
"503 511 OFFCURVE",
"503 252 CURVE SMOOTH",
"503 88 OFFCURVE",
"587 -27 OFFCURVE",
"727 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"664 34 OFFCURVE",
"617 117 OFFCURVE",
"617 239 CURVE SMOOTH",
"617 446 OFFCURVE",
"783 791 OFFCURVE",
"965 791 CURVE SMOOTH",
"1047 791 OFFCURVE",
"1094 708 OFFCURVE",
"1094 587 CURVE SMOOTH",
"1094 380 OFFCURVE",
"928 34 OFFCURVE",
"746 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1219 1262 LINE",
"1179 1337 LINE",
"741 1113 LINE",
"781 1038 LINE"
);
},
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"599 1403 OFFCURVE",
"607 1355 OFFCURVE",
"614 1274 CURVE SMOOTH",
"617 1238 OFFCURVE",
"648 1202 OFFCURVE",
"689 1202 CURVE SMOOTH",
"724 1202 OFFCURVE",
"741 1226 OFFCURVE",
"741 1275 CURVE SMOOTH",
"741 1332 OFFCURVE",
"707 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"396 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"553 763 LINE",
"575 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
}
);
width = 1270;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1270 -27 OFFCURVE",
"1446 275 OFFCURVE",
"1446 647 CURVE SMOOTH",
"1446 1002 OFFCURVE",
"1316 1305 OFFCURVE",
"1048 1446 CURVE",
"988 1355 LINE",
"1135 1228 OFFCURVE",
"1207 1048 OFFCURVE",
"1233 846 CURVE",
"1200 850 OFFCURVE",
"1172 852 OFFCURVE",
"1147 852 CURVE SMOOTH",
"884 852 OFFCURVE",
"649 599 OFFCURVE",
"649 322 CURVE SMOOTH",
"649 117 OFFCURVE",
"731 -27 OFFCURVE",
"926 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"887 74 OFFCURVE",
"842 116 OFFCURVE",
"842 201 CURVE SMOOTH",
"842 405 OFFCURVE",
"991 750 OFFCURVE",
"1143 750 CURVE SMOOTH",
"1212 750 OFFCURVE",
"1245 707 OFFCURVE",
"1245 641 CURVE SMOOTH",
"1245 440 OFFCURVE",
"1098 74 OFFCURVE",
"956 74 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1495 1245 LINE",
"1442 1356 LINE",
"950 1106 LINE",
"1004 995 LINE"
);
},
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"669 1382 CURVE SMOOTH",
"699 1382 OFFCURVE",
"731 1349 OFFCURVE",
"731 1284 CURVE SMOOTH",
"731 1219 OFFCURVE",
"784 1190 OFFCURVE",
"833 1190 CURVE SMOOTH",
"881 1190 OFFCURVE",
"918 1247 OFFCURVE",
"918 1307 CURVE SMOOTH",
"918 1414 OFFCURVE",
"805 1464 OFFCURVE",
"684 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"655 737 LINE",
"680 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
}
);
width = 1477;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = f_eth.nordic;
rightKerningGroup = eth.nordic;
rightMetricsKey = "=eth.nordic";
},
{
glyphname = f_j;
lastChange = "2018-08-18 11:50:52 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"93 -369 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"395 1314 OFFCURVE",
"496 1403 OFFCURVE",
"619 1403 CURVE SMOOTH",
"705 1403 OFFCURVE",
"741 1355 OFFCURVE",
"748 1274 CURVE SMOOTH",
"751 1238 OFFCURVE",
"782 1202 OFFCURVE",
"823 1202 CURVE SMOOTH",
"858 1202 OFFCURVE",
"875 1226 OFFCURVE",
"875 1275 CURVE SMOOTH",
"875 1326 OFFCURVE",
"853 1464 OFFCURVE",
"671 1464 CURVE SMOOTH",
"474 1464 OFFCURVE",
"302 1363 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -459 CURVE SMOOTH",
"-333 -492 OFFCURVE",
"-307 -551 OFFCURVE",
"-169 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"400 -553 OFFCURVE",
"528 -371 OFFCURVE",
"576 -144 CURVE SMOOTH",
"600 -30 OFFCURVE",
"618 64 OFFCURVE",
"632 139 CURVE SMOOTH",
"727 665 LINE SMOOTH",
"746 772 OFFCURVE",
"747 775 OFFCURVE",
"764 858 CURVE",
"752 869 LINE",
"688 850 OFFCURVE",
"610 842 OFFCURVE",
"570 842 CURVE",
"549 763 LINE",
"630 763 OFFCURVE",
"631 694 OFFCURVE",
"624 655 CURVE SMOOTH",
"454 -260 LINE SMOOTH",
"435 -360 OFFCURVE",
"380 -477 OFFCURVE",
"288 -477 CURVE SMOOTH",
"273 -477 OFFCURVE",
"256 -470 OFFCURVE",
"235 -455 CURVE SMOOTH",
"215 -440 OFFCURVE",
"196 -433 OFFCURVE",
"175 -433 CURVE SMOOTH",
"138 -433 OFFCURVE",
"107 -449 OFFCURVE",
"107 -481 CURVE SMOOTH",
"107 -511 OFFCURVE",
"131 -553 OFFCURVE",
"197 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"653 763 LINE",
"675 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 1 10 3 2 1 117 0 6 4 7 4 6 7 131 11 1 2 10 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 1 10 3 10 1 3 131 0 6 4 7 4 6 7 131 11 1 2 10 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
0 11 2 10 2 11 10 131 0 1 10 3 10 1 3 131 0 6 4 7 4 6 7 131 0 2 11 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
75 73 67 65 64 62 58 56 35 35 35 34 37 19 33 36 35 13 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 847;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"552 1382 OFFCURVE",
"680 1382 CURVE SMOOTH",
"734 1382 OFFCURVE",
"763 1347 OFFCURVE",
"770 1276 CURVE SMOOTH",
"781 1169 OFFCURVE",
"827 1149 OFFCURVE",
"884 1149 CURVE SMOOTH",
"941 1149 OFFCURVE",
"969 1181 OFFCURVE",
"969 1245 CURVE SMOOTH",
"969 1373 OFFCURVE",
"869 1464 OFFCURVE",
"724 1464 CURVE SMOOTH",
"495 1464 OFFCURVE",
"321 1367 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"608 -553 OFFCURVE",
"738 -349 OFFCURVE",
"790 -150 CURVE SMOOTH",
"816 -50 OFFCURVE",
"832 48 OFFCURVE",
"846 143 CURVE SMOOTH",
"923 666 LINE SMOOTH",
"931 719 OFFCURVE",
"948 777 OFFCURVE",
"964 826 CURVE",
"939 865 LINE",
"894 852 OFFCURVE",
"827 844 OFFCURVE",
"746 844 CURVE",
"688 737 LINE",
"727 737 OFFCURVE",
"729 682 OFFCURVE",
"724 647 CURVE SMOOTH",
"592 -229 LINE SMOOTH",
"578 -323 OFFCURVE",
"542 -446 OFFCURVE",
"480 -446 CURVE SMOOTH",
"463 -446 OFFCURVE",
"441 -435 OFFCURVE",
"413 -408 CURVE SMOOTH",
"386 -382 OFFCURVE",
"363 -369 OFFCURVE",
"342 -369 CURVE SMOOTH",
"290 -369 OFFCURVE",
"246 -402 OFFCURVE",
"246 -453 CURVE SMOOTH",
"246 -515 OFFCURVE",
"298 -553 OFFCURVE",
"356 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"825 737 LINE",
"850 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 91 values pushed */
46 1 9 73 0 5 1 3 1 5 3 131 0 13 8 10 8 13 10 131 0 10 11 8 10 11 129 6 1 2 1 0 2 93 4 1 0 0 1 5 0 1 109 7 1 3 12 1 8 13 3 8 107 0 11 9 9 11 93 0 11 11 9 98 0 9 11 9 82 78 76 74 72 68 66 62 60 56 54 37 19 33 36 38 38 33 36 36 14 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 997;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "5038B0B1-7DD2-42D9-85ED-E770B35FFE7C";
name = "Aug 16 18, 16:48";
paths = (
{
closed = 1;
nodes = (
"368 747 LINE",
"635 747 LINE SMOOTH",
"677 747 OFFCURVE",
"698 726.333 OFFCURVE",
"698 685 CURVE SMOOTH",
"698 658.333 OFFCURVE",
"696.333 637.667 OFFCURVE",
"693 623 CURVE SMOOTH",
"491 -260 LINE SMOOTH",
"472.333 -340 OFFCURVE",
"406.667 -460 OFFCURVE",
"340 -460 CURVE SMOOTH",
"317.333 -460 OFFCURVE",
"299.667 -453 OFFCURVE",
"287 -439 CURVE SMOOTH",
"274.333 -425 OFFCURVE",
"255.333 -418 OFFCURVE",
"230 -418 CURVE SMOOTH",
"188.667 -418 OFFCURVE",
"148 -442.333 OFFCURVE",
"148 -477 CURVE SMOOTH",
"148 -507.667 OFFCURVE",
"176.667 -553 OFFCURVE",
"222 -553 CURVE SMOOTH",
"422 -553 OFFCURVE",
"551.833 -358.833 OFFCURVE",
"616.5 -171.5 CURVE SMOOTH",
"648.833 -77.833 OFFCURVE",
"678 25.667 OFFCURVE",
"704 139 CURVE SMOOTH",
"831 694 LINE SMOOTH",
"836.333 718.667 OFFCURVE",
"848.667 756.667 OFFCURVE",
"868 808 CURVE SMOOTH",
"873.333 822.667 OFFCURVE",
"876 833.667 OFFCURVE",
"876 841 CURVE SMOOTH",
"876 848.333 OFFCURVE",
"872 852 OFFCURVE",
"864 852 CURVE SMOOTH",
"862 852 OFFCURVE",
"844.333 847.333 OFFCURVE",
"811 838 CURVE SMOOTH",
"779.667 829.333 OFFCURVE",
"746 825 OFFCURVE",
"710 825 CURVE SMOOTH",
"384 825 LINE",
"440 1121 OFFCURVE",
"449.667 1185 OFFCURVE",
"531 1305 CURVE SMOOTH",
"571.667 1365 OFFCURVE",
"623.333 1395 OFFCURVE",
"686 1395 CURVE SMOOTH",
"756 1395 OFFCURVE",
"791 1354.667 OFFCURVE",
"791 1274 CURVE SMOOTH",
"791 1230 OFFCURVE",
"832.667 1202 OFFCURVE",
"866 1202 CURVE SMOOTH",
"910 1202 OFFCURVE",
"932 1234 OFFCURVE",
"932 1298 CURVE SMOOTH",
"932 1396.667 OFFCURVE",
"856.333 1464 OFFCURVE",
"743 1464 CURVE SMOOTH",
"504.333 1464 OFFCURVE",
"358 1349 OFFCURVE",
"262 825 CURVE",
"92 825 LINE SMOOTH",
"84 825 OFFCURVE",
"76.667 817 OFFCURVE",
"70 801 CURVE SMOOTH",
"62 781.667 OFFCURVE",
"58 767.667 OFFCURVE",
"58 759 CURVE SMOOTH",
"58 751 OFFCURVE",
"60.333 747 OFFCURVE",
"65 747 CURVE SMOOTH",
"247 747 LINE",
"45 -297 LINE SMOOTH",
"23.667 -407.667 OFFCURVE",
"-27.333 -467 OFFCURVE",
"-82 -467 CURVE SMOOTH",
"-113.333 -467 OFFCURVE",
"-137.5 -450.333 OFFCURVE",
"-154.5 -417 CURVE SMOOTH",
"-171.5 -383.667 OFFCURVE",
"-200.667 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-275.333 -367 OFFCURVE",
"-305 -402 OFFCURVE",
"-305 -446 CURVE SMOOTH",
"-305 -488.667 OFFCURVE",
"-239.333 -551 OFFCURVE",
"-154 -551 CURVE SMOOTH",
"-15.333 -551 OFFCURVE",
"82 -468.333 OFFCURVE",
"138 -327 CURVE SMOOTH",
"166 -256.333 OFFCURVE",
"187 -184.333 OFFCURVE",
"201 -111 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 1 10 3 2 1 117 0 6 4 7 4 6 7 131 11 1 2 10 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 1 10 3 10 1 3 131 0 6 4 7 4 6 7 131 11 1 2 10 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
0 11 2 10 2 11 10 131 0 1 10 3 10 1 3 131 0 6 4 7 4 6 7 131 0 2 11 0 2 93 9 1 0 0 10 1 0 10 109 12 1 3 8 1 4 6 3 4 107 0 7 5 5 7 93 0 7 7 5 97 0 5 7 5 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
75 73 67 65 64 62 58 56 35 35 35 34 37 19 33 36 35 13 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 932;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "5FCF7FBE-3E5E-43FF-9CD7-9AC5D6E80AD3";
name = "Aug 16 18, 16:50";
paths = (
{
closed = 1;
nodes = (
"1012 825 LINE",
"1014 832 OFFCURVE",
"1014 836 QCURVE SMOOTH",
"1014 852 OFFCURVE",
"991 852 QCURVE SMOOTH",
"977 852 OFFCURVE",
"954 848 QCURVE",
"882 831 OFFCURVE",
"829 831 QCURVE SMOOTH",
"481 831 LINE",
"510 983 LINE SMOOTH",
"553 1204 OFFCURVE",
"616 1290 QCURVE SMOOTH",
"682 1382 OFFCURVE",
"748 1382 QCURVE SMOOTH",
"829 1383 OFFCURVE",
"829 1315 QCURVE SMOOTH",
"829 1243 LINE",
"827 1204 OFFCURVE",
"883 1149 OFFCURVE",
"932 1149 QCURVE SMOOTH",
"971 1149 OFFCURVE",
"1026 1209 OFFCURVE",
"1026 1268 QCURVE SMOOTH",
"1026 1350 OFFCURVE",
"914 1464 OFFCURVE",
"799 1464 QCURVE SMOOTH",
"643 1464 OFFCURVE",
"430 1303 OFFCURVE",
"336 1077 OFFCURVE",
"285 831 QCURVE",
"109 831 LINE SMOOTH",
"100 831 OFFCURVE",
"90 813 QCURVE SMOOTH",
"70 774 OFFCURVE",
"70 739 QCURVE SMOOTH",
"70 725 OFFCURVE",
"76 725 QCURVE SMOOTH",
"262 725 LINE",
"66 -250 LINE SMOOTH",
"43 -373 OFFCURVE",
"-4 -446 OFFCURVE",
"-43 -446 QCURVE SMOOTH",
"-78 -446 OFFCURVE",
"-134 -319 OFFCURVE",
"-195 -319 QCURVE SMOOTH",
"-223 -319 OFFCURVE",
"-287 -369 OFFCURVE",
"-287 -424 QCURVE SMOOTH",
"-287 -469 OFFCURVE",
"-182 -551 OFFCURVE",
"-96 -551 QCURVE SMOOTH",
"35 -551 OFFCURVE",
"156 -440 QCURVE",
"174 -422 OFFCURVE",
"199 -375 QCURVE SMOOTH",
"264 -250 OFFCURVE",
"295 -96 QCURVE SMOOTH",
"461 725 LINE",
"731 725 LINE SMOOTH",
"772 725 OFFCURVE",
"772 680 QCURVE SMOOTH",
"772 669 OFFCURVE",
"768 653 QCURVE SMOOTH",
"557 -229 LINE SMOOTH",
"537 -315 OFFCURVE",
"467 -446 OFFCURVE",
"426 -446 QCURVE SMOOTH",
"399 -446 OFFCURVE",
"330 -369 OFFCURVE",
"293 -369 QCURVE SMOOTH",
"258 -369 OFFCURVE",
"190 -414 OFFCURVE",
"190 -461 QCURVE SMOOTH",
"190 -498 OFFCURVE",
"246 -553 OFFCURVE",
"307 -553 QCURVE SMOOTH",
"477 -553 OFFCURVE",
"706 -305 OFFCURVE",
"774 -115 QCURVE SMOOTH",
"795 -56 OFFCURVE",
"844 143 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 91 values pushed */
46 1 9 73 0 5 1 3 1 5 3 131 0 13 8 10 8 13 10 131 0 10 11 8 10 11 129 6 1 2 1 0 2 93 4 1 0 0 1 5 0 1 109 7 1 3 12 1 8 13 3 8 107 0 11 9 9 11 93 0 11 11 9 98 0 9 11 9 82 78 76 74 72 68 66 62 60 56 54 37 19 33 36 38 38 33 36 36 14 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1030;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = f_j;
rightMetricsKey = j;
},
{
glyphname = f_odieresis;
lastChange = "2018-08-18 09:34:03 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"411 1403 OFFCURVE",
"499 1403 CURVE SMOOTH",
"566 1403 OFFCURVE",
"571 1355 OFFCURVE",
"578 1274 CURVE SMOOTH",
"581 1238 OFFCURVE",
"602 1202 OFFCURVE",
"643 1202 CURVE SMOOTH",
"678 1202 OFFCURVE",
"705 1226 OFFCURVE",
"705 1275 CURVE SMOOTH",
"705 1332 OFFCURVE",
"687 1464 OFFCURVE",
"523 1464 CURVE SMOOTH",
"366 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"733 763 LINE",
"915 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
},
{
closed = 1;
nodes = (
"1009 -27 OFFCURVE",
"1185 220 OFFCURVE",
"1185 485 CURVE SMOOTH",
"1185 680 OFFCURVE",
"1103 852 OFFCURVE",
"924 852 CURVE SMOOTH",
"686 852 OFFCURVE",
"478 592 OFFCURVE",
"478 343 CURVE SMOOTH",
"478 153 OFFCURVE",
"566 -27 OFFCURVE",
"741 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"636 34 OFFCURVE",
"597 150 OFFCURVE",
"597 269 CURVE SMOOTH",
"597 492 OFFCURVE",
"747 791 OFFCURVE",
"926 791 CURVE SMOOTH",
"1025 791 OFFCURVE",
"1063 675 OFFCURVE",
"1063 556 CURVE SMOOTH",
"1063 335 OFFCURVE",
"912 34 OFFCURVE",
"736 34 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"869 1021 OFFCURVE",
"915 1063 OFFCURVE",
"915 1131 CURVE SMOOTH",
"915 1200 OFFCURVE",
"884 1236 OFFCURVE",
"822 1236 CURVE SMOOTH",
"767 1236 OFFCURVE",
"718 1187 OFFCURVE",
"718 1124 CURVE SMOOTH",
"718 1055 OFFCURVE",
"751 1021 OFFCURVE",
"813 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1166 1021 OFFCURVE",
"1212 1063 OFFCURVE",
"1212 1131 CURVE SMOOTH",
"1212 1200 OFFCURVE",
"1181 1236 OFFCURVE",
"1119 1236 CURVE SMOOTH",
"1064 1236 OFFCURVE",
"1015 1187 OFFCURVE",
"1015 1124 CURVE SMOOTH",
"1015 1055 OFFCURVE",
"1048 1021 OFFCURVE",
"1110 1021 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 4 5 13 5 4 117 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 17 14 2 6 12 11 2 7 0 6 7 107 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 17 14 2 6 12 11 2 7 0 6 7 107 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 11 1 7 12 6 7 91 17 14 2 6 0 12 0 6 12 109 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 14 1 6 11 1 7 12 6 7 107 0 17 0 12 0 17 12 109 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 0 13 0 16 6 13 16 109 14 1 6 11 1 7 12 6 7 107 0 17 0 12 0 17 12 109 2 1 0 3 1 1 10 0 1 109 0 10 8 8 10 93 0 10 10 8 97 0 8 10 8 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
86 84 81 79 76 74 69 68 63 61 57 55 54 53 51 49 46 44 34 35 20 33 35 35 35 35 34 18 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"639 1382 CURVE SMOOTH",
"669 1382 OFFCURVE",
"701 1349 OFFCURVE",
"701 1284 CURVE SMOOTH",
"701 1219 OFFCURVE",
"754 1190 OFFCURVE",
"803 1190 CURVE SMOOTH",
"851 1190 OFFCURVE",
"888 1247 OFFCURVE",
"888 1307 CURVE SMOOTH",
"888 1414 OFFCURVE",
"775 1464 OFFCURVE",
"654 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"875 737 LINE",
"1080 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
},
{
closed = 1;
nodes = (
"1211 -27 OFFCURVE",
"1404 219 OFFCURVE",
"1404 481 CURVE SMOOTH",
"1404 691 OFFCURVE",
"1298 852 OFFCURVE",
"1096 852 CURVE SMOOTH",
"850 852 OFFCURVE",
"624 592 OFFCURVE",
"624 348 CURVE SMOOTH",
"624 145 OFFCURVE",
"736 -27 OFFCURVE",
"933 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"852 86 OFFCURVE",
"816 134 OFFCURVE",
"816 230 CURVE SMOOTH",
"816 425 OFFCURVE",
"982 748 OFFCURVE",
"1115 748 CURVE SMOOTH",
"1181 748 OFFCURVE",
"1217 700 OFFCURVE",
"1217 605 CURVE SMOOTH",
"1217 412 OFFCURVE",
"1043 86 OFFCURVE",
"923 86 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1084 1021 OFFCURVE",
"1139 1076 OFFCURVE",
"1139 1149 CURVE SMOOTH",
"1139 1221 OFFCURVE",
"1087 1273 OFFCURVE",
"1018 1273 CURVE SMOOTH",
"938 1273 OFFCURVE",
"886 1215 OFFCURVE",
"886 1143 CURVE SMOOTH",
"886 1070 OFFCURVE",
"936 1021 OFFCURVE",
"1009 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1413 1021 OFFCURVE",
"1471 1077 OFFCURVE",
"1471 1150 CURVE SMOOTH",
"1471 1221 OFFCURVE",
"1414 1273 OFFCURVE",
"1345 1273 CURVE SMOOTH",
"1271 1273 OFFCURVE",
"1218 1215 OFFCURVE",
"1218 1143 CURVE SMOOTH",
"1218 1070 OFFCURVE",
"1265 1021 OFFCURVE",
"1338 1021 CURVE SMOOTH"
);
}
);
width = 1456;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "BD2C8B67-D4A1-48B8-B833-22DD63BEFEF8";
name = "Aug 16 18, 16:53";
paths = (
{
closed = 1;
nodes = (
"1071 1194.333 OFFCURVE",
"1042.667 1224.333 OFFCURVE",
"986 1225 CURVE SMOOTH",
"927.333 1225 OFFCURVE",
"872 1169.333 OFFCURVE",
"872 1100 CURVE SMOOTH",
"872 1040 OFFCURVE",
"901 1010 OFFCURVE",
"959 1010 CURVE SMOOTH",
"1019 1010 OFFCURVE",
"1071 1057.667 OFFCURVE",
"1071 1135 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1408 1194.333 OFFCURVE",
"1379.667 1224.333 OFFCURVE",
"1323 1225 CURVE SMOOTH",
"1264.333 1225 OFFCURVE",
"1209 1169.333 OFFCURVE",
"1209 1100 CURVE SMOOTH",
"1209 1040 OFFCURVE",
"1238 1010 OFFCURVE",
"1296 1010 CURVE SMOOTH",
"1356 1010 OFFCURVE",
"1408 1057.667 OFFCURVE",
"1408 1135 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-305 -490 OFFCURVE",
"-244 -551 OFFCURVE",
"-148 -551 CURVE SMOOTH",
"-41.333 -551 OFFCURVE",
"55.333 -496.667 OFFCURVE",
"122 -366 CURVE SMOOTH",
"154 -301.333 OFFCURVE",
"180.333 -216.333 OFFCURVE",
"201 -111 CURVE SMOOTH",
"370 763 LINE",
"816 763 LINE",
"685.333 660.333 OFFCURVE",
"575 487.667 OFFCURVE",
"575 305 CURVE SMOOTH",
"575 106.333 OFFCURVE",
"653 -27 OFFCURVE",
"817 -27 CURVE SMOOTH",
"1093 -27 OFFCURVE",
"1298 253 OFFCURVE",
"1298 537 CURVE SMOOTH",
"1298 730.333 OFFCURVE",
"1217 852 OFFCURVE",
"1057 852 CURVE SMOOTH",
"1028.333 852 OFFCURVE",
"1000.333 848.667 OFFCURVE",
"973 842 CURVE",
"386 842 LINE",
"432.667 1074.667 OFFCURVE",
"474.833 1225 OFFCURVE",
"512.5 1293 CURVE SMOOTH",
"550.167 1361 OFFCURVE",
"589.667 1395 OFFCURVE",
"631 1395 CURVE SMOOTH",
"678.333 1395 OFFCURVE",
"702 1354.667 OFFCURVE",
"702 1274 CURVE SMOOTH",
"702 1235.333 OFFCURVE",
"731.667 1202 OFFCURVE",
"777 1202 CURVE SMOOTH",
"821 1202 OFFCURVE",
"843 1234 OFFCURVE",
"843 1298 CURVE SMOOTH",
"843 1387.333 OFFCURVE",
"766.667 1464 OFFCURVE",
"660 1464 CURVE SMOOTH",
"586 1464 OFFCURVE",
"515 1426.5 OFFCURVE",
"447 1351.5 CURVE SMOOTH",
"379 1276.5 OFFCURVE",
"318 1106.667 OFFCURVE",
"264 842 CURVE",
"94 842 LINE SMOOTH",
"73.325 842 OFFCURVE",
"45.75 763 OFFCURVE",
"67 763 CURVE SMOOTH",
"249 763 LINE",
"45 -297 LINE SMOOTH",
"36.333 -343 OFFCURVE",
"19.667 -383.333 OFFCURVE",
"-5 -418 CURVE SMOOTH",
"-29 -450.667 OFFCURVE",
"-54.667 -467 OFFCURVE",
"-82 -467 CURVE SMOOTH",
"-112.667 -467 OFFCURVE",
"-137 -450.333 OFFCURVE",
"-155 -417 CURVE SMOOTH",
"-173 -383.667 OFFCURVE",
"-202 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-270 -367 OFFCURVE",
"-305 -398 OFFCURVE",
"-305 -446 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"692 439 OFFCURVE",
"901 768 OFFCURVE",
"1057 768 CURVE SMOOTH",
"1143 768 OFFCURVE",
"1186 708 OFFCURVE",
"1186 588 CURVE SMOOTH",
"1186 392 OFFCURVE",
"970.333 68 OFFCURVE",
"825 68 CURVE SMOOTH",
"736.333 68 OFFCURVE",
"692 122.333 OFFCURVE",
"692 231 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 4 5 13 5 4 117 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 17 14 2 6 12 11 2 7 0 6 7 107 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 17 14 2 6 12 11 2 7 0 6 7 107 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 11 1 7 12 6 7 91 17 14 2 6 0 12 0 6 12 109 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 14 1 6 11 1 7 12 6 7 107 0 17 0 12 0 17 12 109 2 1 0 3 1 1 10 0 1 109 0 10 0 8 10 8 101 0 16 16 13 97 0 13 13 37 16 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
0 4 5 13 5 4 13 131 0 9 0 1 0 9 1 131 0 15 0 5 4 15 5 109 0 13 0 16 6 13 16 109 14 1 6 11 1 7 12 6 7 107 0 17 0 12 0 17 12 109 2 1 0 3 1 1 10 0 1 109 0 10 8 8 10 93 0 10 10 8 97 0 8 10 8 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
86 84 81 79 76 74 69 68 63 61 57 55 54 53 51 49 46 44 34 35 20 33 35 35 35 35 34 18 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 479;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = f_odieresis;
rightMetricsKey = o;
},
{
glyphname = f_thorn;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"452 -512 LINE",
"474 -486 LINE",
"557 -25 LINE",
"746 -15 OFFCURVE",
"864 90 OFFCURVE",
"927 151 CURVE SMOOTH",
"1060 281 OFFCURVE",
"1152 436 OFFCURVE",
"1152 628 CURVE SMOOTH",
"1152 764 OFFCURVE",
"1112 852 OFFCURVE",
"979 852 CURVE SMOOTH",
"867 852 OFFCURVE",
"772 789 OFFCURVE",
"676 637 CURVE",
"826 1466 LINE",
"812 1484 LINE",
"767 1458 OFFCURVE",
"717 1438 OFFCURVE",
"669 1426 CURVE",
"640 1449 OFFCURVE",
"599 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"396 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"31 842 LINE",
"11 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH",
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"503 763 LINE",
"525 842 LINE",
"310 842 LINE",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"630 1403 OFFCURVE",
"704 1352 OFFCURVE",
"674 1187 CURVE SMOOTH",
"377 -456 LINE",
"262 -512 LINE",
"274 -559 LINE"
);
},
{
closed = 1;
nodes = (
"658 535 LINE",
"734 663 OFFCURVE",
"843 782 OFFCURVE",
"929 782 CURVE SMOOTH",
"1012 782 OFFCURVE",
"1031 707 OFFCURVE",
"1031 613 CURVE SMOOTH",
"1031 449 OFFCURVE",
"967 321 OFFCURVE",
"873 203 CURVE SMOOTH",
"816 132 OFFCURVE",
"717 41 OFFCURVE",
"567 31 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
72 67 2 9 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 5 6 0 6 5 117 0 4 0 6 5 4 6 109 7 1 3 11 2 3 91 0 11 10 8 2 2 1 11 2 107 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 7 1 3 11 2 3 91 0 11 10 8 2 2 1 11 2 107 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
144 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 7 1 3 8 1 2 10 3 2 107 0 11 0 10 1 11 10 109 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 0 0 0 12 3 0 12 109 7 1 3 8 1 2 10 3 2 107 0 11 0 10 1 11 10 109 0 1 9 9 1 93 0 1 1 9 97 0 9 1 9 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
83 82 79 77 75 73 66 64 62 60 55 54 51 49 48 46 42 40 36 34 29 28 26 24 20 13 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 1199;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"608 -494 LINE",
"660 -451 LINE",
"737 -27 LINE",
"857 -11 OFFCURVE",
"967 48 OFFCURVE",
"1075 132 CURVE SMOOTH",
"1235 257 OFFCURVE",
"1338 415 OFFCURVE",
"1338 615 CURVE SMOOTH",
"1338 762 OFFCURVE",
"1261 852 OFFCURVE",
"1119 852 CURVE SMOOTH",
"1041 852 OFFCURVE",
"966 832 OFFCURVE",
"874 733 CURVE",
"1005 1448 LINE",
"984 1487 LINE",
"927 1465 OFFCURVE",
"869 1451 OFFCURVE",
"813 1442 CURVE",
"775 1457 OFFCURVE",
"730 1464 OFFCURVE",
"684 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"227 844 LINE",
"58 844 LINE",
"34 737 LINE",
"208 737 LINE",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH",
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"429 737 LINE",
"615 737 LINE",
"639 844 LINE",
"449 844 LINE",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"669 1382 CURVE SMOOTH",
"741 1382 OFFCURVE",
"793 1354 OFFCURVE",
"767 1210 CURVE SMOOTH",
"470 -429 LINE",
"364 -494 LINE",
"400 -557 LINE"
);
},
{
closed = 1;
nodes = (
"844 567 LINE",
"907 707 OFFCURVE",
"963 758 OFFCURVE",
"1030 758 CURVE SMOOTH",
"1111 758 OFFCURVE",
"1132 679 OFFCURVE",
"1132 590 CURVE SMOOTH",
"1132 495 OFFCURVE",
"1101 333 OFFCURVE",
"1008 220 CURVE SMOOTH",
"946 144 OFFCURVE",
"865 75 OFFCURVE",
"750 45 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
18 12 2 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 11 1 0 91 0 11 6 4 2 1 5 11 1 107 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 6 1 1 4 0 1 107 0 11 0 4 5 11 4 109 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 11 1 0 91 0 11 6 4 2 1 5 11 1 107 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 6 1 1 4 0 1 107 0 11 0 4 5 11 4 109 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
81 79 69 67 66 64 60 58 54 52 50 49 44 42 35 35 35 34 17 12 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 1367;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "48F0FBBA-4023-4B58-9C10-60661BB175A6";
name = "Aug 16 18, 17:01";
paths = (
{
closed = 1;
nodes = (
"1295 795.333 OFFCURVE",
"1237.667 852 OFFCURVE",
"1123 852 CURVE SMOOTH",
"1005 852 OFFCURVE",
"899 772 OFFCURVE",
"805 612 CURVE",
"977 1476 LINE",
"977 1518.986 OFFCURVE",
"890.583 1458.21 OFFCURVE",
"840 1446 CURVE",
"812 1458 OFFCURVE",
"779.667 1464 OFFCURVE",
"743 1464 CURVE SMOOTH",
"496.333 1464 OFFCURVE",
"361.333 1339.333 OFFCURVE",
"264 842 CURVE",
"94 842 LINE SMOOTH",
"88.667 842 OFFCURVE",
"83.333 837.667 OFFCURVE",
"78 829 CURVE",
"66 811 OFFCURVE",
"60 793 OFFCURVE",
"60 775 CURVE SMOOTH",
"60 767 OFFCURVE",
"62.333 763 OFFCURVE",
"67 763 CURVE SMOOTH",
"249 763 LINE",
"45 -297 LINE SMOOTH",
"26.333 -391.667 OFFCURVE",
"-27.333 -467 OFFCURVE",
"-82 -467 CURVE SMOOTH",
"-112.667 -467 OFFCURVE",
"-137 -450.333 OFFCURVE",
"-155 -417 CURVE SMOOTH",
"-173 -383.667 OFFCURVE",
"-202 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-270 -367 OFFCURVE",
"-305 -398 OFFCURVE",
"-305 -446 CURVE SMOOTH",
"-305 -490 OFFCURVE",
"-244 -551 OFFCURVE",
"-148 -551 CURVE SMOOTH",
"-41.333 -551 OFFCURVE",
"55.5 -496.833 OFFCURVE",
"121.5 -365.5 CURVE SMOOTH",
"154.5 -299.833 OFFCURVE",
"181 -215 OFFCURVE",
"201 -111 CURVE SMOOTH",
"370 763 LINE",
"561 763 LINE SMOOTH",
"566.333 763 OFFCURVE",
"572 767.667 OFFCURVE",
"578 777 CURVE SMOOTH",
"590.667 795.667 OFFCURVE",
"597 813.333 OFFCURVE",
"597 830 CURVE SMOOTH",
"597 838 OFFCURVE",
"594.667 842 OFFCURVE",
"590 842 CURVE SMOOTH",
"386 842 LINE",
"415.333 1028 OFFCURVE",
"453.833 1166.667 OFFCURVE",
"501.5 1258 CURVE SMOOTH",
"549.167 1349.333 OFFCURVE",
"613 1395 OFFCURVE",
"693 1395 CURVE SMOOTH",
"759.667 1395 OFFCURVE",
"803 1353 OFFCURVE",
"803 1273 CURVE SMOOTH",
"803 1246.333 OFFCURVE",
"800 1217.667 OFFCURVE",
"794 1187 CURVE SMOOTH",
"496 -379 LINE SMOOTH",
"485.333 -436.333 OFFCURVE",
"411.667 -496 OFFCURVE",
"357 -512 CURVE",
"353.667 -513.333 OFFCURVE",
"352 -516.667 OFFCURVE",
"352 -522 CURVE SMOOTH",
"352 -526 OFFCURVE",
"353 -531.333 OFFCURVE",
"355 -538 CURVE SMOOTH",
"359 -552 OFFCURVE",
"364.333 -559 OFFCURVE",
"371 -559 CURVE SMOOTH",
"451.895 -559 OFFCURVE",
"593.717 -503.823 OFFCURVE",
"611 -410 CURVE SMOOTH",
"686 -25 LINE",
"786 -25 OFFCURVE",
"954 75 OFFCURVE",
"1106 235 CURVE SMOOTH",
"1258 395 OFFCURVE",
"1295 570 OFFCURVE",
"1295 682 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1162 556 OFFCURVE",
"1137.167 361.167 OFFCURVE",
"940.5 172.5 CURVE SMOOTH",
"842.167 78.167 OFFCURVE",
"760.333 31 OFFCURVE",
"695 31 CURVE",
"772 438 LINE SMOOTH",
"801.333 596.667 OFFCURVE",
"968.333 782 OFFCURVE",
"1067 782 CURVE SMOOTH",
"1130.333 782 OFFCURVE",
"1162 745.333 OFFCURVE",
"1162 672 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
72 67 2 9 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 5 6 0 6 5 117 0 4 0 6 5 4 6 109 7 1 3 11 2 3 91 0 11 10 8 2 2 1 11 2 107 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 7 1 3 11 2 3 91 0 11 10 8 2 2 1 11 2 107 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
144 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 7 1 3 8 1 2 10 3 2 107 0 11 0 10 1 11 10 109 0 1 0 9 1 9 101 0 12 12 0 97 0 0 0 37 12 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 5 6 0 6 5 0 131 0 4 0 6 5 4 6 109 0 0 0 12 3 0 12 109 7 1 3 8 1 2 10 3 2 107 0 11 0 10 1 11 10 109 0 1 9 9 1 93 0 1 1 9 97 0 9 1 9 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
83 82 79 77 75 73 66 64 62 60 55 54 51 49 48 46 42 40 36 34 29 28 26 24 20 13 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 1295;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "E2EDBF94-4011-4ECF-A338-1FCF1468E82B";
name = "Aug 16 18, 17:01";
paths = (
{
closed = 1;
nodes = (
"55 -295 OFFCURVE",
"41 -352 OFFCURVE",
"20 -410 OFFCURVE",
"-18 -446 OFFCURVE",
"-45 -446 QCURVE SMOOTH",
"-80 -446 OFFCURVE",
"-142 -319 OFFCURVE",
"-197 -319 QCURVE SMOOTH",
"-231 -319 OFFCURVE",
"-289 -379 OFFCURVE",
"-289 -424 QCURVE SMOOTH",
"-289 -469 OFFCURVE",
"-186 -551 OFFCURVE",
"-98 -551 QCURVE SMOOTH",
"33 -551 OFFCURVE",
"186 -410 OFFCURVE",
"270 -202 OFFCURVE",
"293 -96 QCURVE SMOOTH",
"461 737 LINE",
"627 737 LINE SMOOTH",
"647 737 OFFCURVE",
"667 844 OFFCURVE",
"651 844 QCURVE SMOOTH",
"481 844 LINE",
"498 924 OFFCURVE",
"524 1071 OFFCURVE",
"573 1227 OFFCURVE",
"606 1278 QCURVE SMOOTH",
"673 1382 OFFCURVE",
"745 1382 QCURVE SMOOTH",
"819 1382 OFFCURVE",
"862 1275 OFFCURVE",
"850 1214 QCURVE SMOOTH",
"547 -340 LINE",
"537 -403 OFFCURVE",
"512 -436 QCURVE",
"489 -469 OFFCURVE",
"430 -487 QCURVE",
"422 -490 OFFCURVE",
"422 -508 QCURVE SMOOTH",
"422 -524 OFFCURVE",
"438 -559 OFFCURVE",
"446 -557 QCURVE SMOOTH",
"717 -489 OFFCURVE",
"737 -385 QCURVE SMOOTH",
"807 -27 LINE",
"954 10 OFFCURVE",
"1292 266 OFFCURVE",
"1419 541 OFFCURVE",
"1419 666 QCURVE SMOOTH",
"1419 760 OFFCURVE",
"1290 852 OFFCURVE",
"1208 852 QCURVE SMOOTH",
"1067 852 OFFCURVE",
"948 721 QCURVE",
"1087 1448 LINE SMOOTH",
"1095 1487 OFFCURVE",
"1075 1487 QCURVE SMOOTH",
"1061 1487 OFFCURVE",
"950 1446 OFFCURVE",
"913 1442 QCURVE",
"867 1464 OFFCURVE",
"797 1464 QCURVE SMOOTH",
"567 1464 OFFCURVE",
"436 1286 QCURVE SMOOTH",
"351 1170 OFFCURVE",
"285 844 QCURVE",
"113 844 LINE SMOOTH",
"98 844 OFFCURVE",
"66 737 OFFCURVE",
"80 737 QCURVE SMOOTH",
"262 737 LINE",
"63 -250 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"907 500 LINE SMOOTH",
"926 598 OFFCURVE",
"1054 758 OFFCURVE",
"1126 758 QCURVE SMOOTH",
"1155 758 OFFCURVE",
"1210 707 OFFCURVE",
"1210 662 QCURVE SMOOTH",
"1210 565 OFFCURVE",
"1149 344 OFFCURVE",
"950 90 OFFCURVE",
"819 45 QCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
18 12 2 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 11 1 0 91 0 11 6 4 2 1 5 11 1 107 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 6 1 1 4 0 1 107 0 11 0 4 5 11 4 109 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 11 1 0 91 0 11 6 4 2 1 5 11 1 107 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 0 3 2 3 137 0 8 0 10 9 8 10 109 7 1 0 6 1 1 4 0 1 107 0 11 0 4 5 11 4 109 0 5 2 2 5 93 0 5 5 2 97 0 2 5 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
81 79 69 67 66 64 60 58 54 52 50 49 44 42 35 35 35 34 17 12 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 1417;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = f_thorn;
rightMetricsKey = thorn;
},
{
glyphname = f_thorn.nordic;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"617 -555 LINE",
"613 -504 LINE",
"531 -504 OFFCURVE",
"472 -490 OFFCURVE",
"485 -420 CURVE SMOOTH",
"560 -9 LINE",
"598 -24 OFFCURVE",
"638 -29 OFFCURVE",
"681 -29 CURVE SMOOTH",
"932 -29 OFFCURVE",
"1153 196 OFFCURVE",
"1153 460 CURVE SMOOTH",
"1153 668 OFFCURVE",
"1032 842 OFFCURVE",
"827 842 CURVE SMOOTH",
"790 842 OFFCURVE",
"748 838 OFFCURVE",
"711 828 CURVE",
"828 1471 LINE",
"815 1484 LINE",
"755 1457 OFFCURVE",
"709 1441 OFFCURVE",
"658 1434 CURVE",
"630 1452 OFFCURVE",
"592 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"396 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"31 842 LINE",
"11 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH",
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"513 763 LINE",
"530 842 LINE",
"310 842 LINE",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"608 1403 OFFCURVE",
"706 1362 OFFCURVE",
"676 1197 CURVE SMOOTH",
"382 -428 LINE SMOOTH",
"373 -479 OFFCURVE",
"312 -504 OFFCURVE",
"228 -504 CURVE",
"232 -555 LINE"
);
},
{
closed = 1;
nodes = (
"631 32 OFFCURVE",
"596 43 OFFCURVE",
"573 64 CURVE",
"696 744 LINE",
"730 753 OFFCURVE",
"765 756 OFFCURVE",
"787 756 CURVE SMOOTH",
"926 756 OFFCURVE",
"1032 600 OFFCURVE",
"1032 441 CURVE SMOOTH",
"1032 226 OFFCURVE",
"864 32 OFFCURVE",
"684 32 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
88 75 70 19 17 12 6 13 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 117 4 1 1 10 2 1 93 8 3 2 2 0 10 9 2 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 4 1 1 10 2 1 93 8 3 2 2 0 10 9 2 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 9 10 0 10 9 0 131 3 1 2 4 1 1 10 2 1 109 0 8 0 10 9 8 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
0 2 3 2 136 0 9 10 0 10 9 0 131 4 1 1 10 3 1 93 8 1 3 0 10 9 3 10 109 0 15 7 6 15 93 11 1 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
0 2 3 2 136 0 9 10 0 10 9 0 131 4 1 1 10 3 1 93 8 1 3 0 10 9 3 10 109 0 0 0 16 15 0 16 109 0 15 7 6 15 93 11 1 7 14 12 2 6 5 7 6 107 0 5 13 13 5 93 0 5 5 13 97 0 13 5 13 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
91 89 84 82 78 76 69 67 65 63 58 57 54 52 51 49 36 37 18 37 36 17 19 21 34 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1217;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"822 -559 LINE",
"816 -485 LINE",
"696 -485 OFFCURVE",
"685 -456 OFFCURVE",
"695 -401 CURVE SMOOTH",
"765 -17 LINE",
"799 -25 OFFCURVE",
"828 -27 OFFCURVE",
"838 -27 CURVE SMOOTH",
"1108 -27 OFFCURVE",
"1358 223 OFFCURVE",
"1358 481 CURVE SMOOTH",
"1358 692 OFFCURVE",
"1202 844 OFFCURVE",
"981 844 CURVE SMOOTH",
"961 844 OFFCURVE",
"940 842 OFFCURVE",
"920 838 CURVE",
"1034 1468 LINE",
"1017 1489 LINE",
"943 1467 OFFCURVE",
"876 1450 OFFCURVE",
"816 1441 CURVE",
"777 1456 OFFCURVE",
"731 1464 OFFCURVE",
"684 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"227 844 LINE",
"58 844 LINE",
"34 737 LINE",
"208 737 LINE",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH",
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"429 737 LINE",
"655 737 LINE",
"680 844 LINE",
"449 844 LINE",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"669 1382 CURVE SMOOTH",
"765 1382 OFFCURVE",
"818 1345 OFFCURVE",
"791 1197 CURVE SMOOTH",
"500 -410 LINE SMOOTH",
"488 -478 OFFCURVE",
"446 -485 OFFCURVE",
"367 -485 CURVE",
"373 -559 LINE"
);
},
{
closed = 1;
nodes = (
"819 55 OFFCURVE",
"798 63 OFFCURVE",
"781 74 CURVE",
"901 734 LINE",
"928 739 OFFCURVE",
"951 741 OFFCURVE",
"963 741 CURVE SMOOTH",
"1084 741 OFFCURVE",
"1145 593 OFFCURVE",
"1145 447 CURVE SMOOTH",
"1145 258 OFFCURVE",
"1014 55 OFFCURVE",
"835 55 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
66 64 61 57 35 29 9 7 5 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 13 2 2 0 12 6 2 3 11 0 3 107 0 11 0 4 5 11 4 109 0 1 1 7 97 0 7 7 24 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
147 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 0 7 0 1 0 7 1 109 13 2 2 0 12 6 2 3 11 0 3 107 0 11 4 4 11 93 0 11 11 4 97 0 4 11 4 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 0 7 0 1 2 7 1 109 13 1 2 0 3 2 91 0 0 12 6 2 3 11 0 3 107 0 11 4 4 11 93 0 11 11 4 97 0 4 11 4 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
104 102 101 99 95 93 88 86 84 83 78 76 71 69 63 62 37 40 35 35 35 34 22 22 35 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1397;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "7C17829F-8F29-4C35-8F5D-EF01B6359F64";
name = "Aug 16 18, 17:06";
paths = (
{
closed = 1;
nodes = (
"1251 712.667 OFFCURVE",
"1126 842 OFFCURVE",
"950 842 CURVE SMOOTH",
"896 842 OFFCURVE",
"856.333 837.667 OFFCURVE",
"831 829 CURVE",
"977 1476 LINE",
"977 1518.986 OFFCURVE",
"890.583 1458.21 OFFCURVE",
"840 1446 CURVE",
"812 1458 OFFCURVE",
"779.667 1464 OFFCURVE",
"743 1464 CURVE SMOOTH",
"496.333 1464 OFFCURVE",
"361.333 1339.333 OFFCURVE",
"264 842 CURVE",
"94 842 LINE SMOOTH",
"88.667 842 OFFCURVE",
"83.333 837.667 OFFCURVE",
"78 829 CURVE",
"66 811 OFFCURVE",
"60 793 OFFCURVE",
"60 775 CURVE SMOOTH",
"60 767 OFFCURVE",
"62.333 763 OFFCURVE",
"67 763 CURVE SMOOTH",
"249 763 LINE",
"45 -297 LINE SMOOTH",
"26.333 -391.667 OFFCURVE",
"-27.333 -467 OFFCURVE",
"-82 -467 CURVE SMOOTH",
"-112.667 -467 OFFCURVE",
"-137 -450.333 OFFCURVE",
"-155 -417 CURVE SMOOTH",
"-173 -383.667 OFFCURVE",
"-202 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-270 -367 OFFCURVE",
"-305 -398 OFFCURVE",
"-305 -446 CURVE SMOOTH",
"-305 -490 OFFCURVE",
"-244 -551 OFFCURVE",
"-148 -551 CURVE SMOOTH",
"-41.333 -551 OFFCURVE",
"55.5 -496.833 OFFCURVE",
"121.5 -365.5 CURVE SMOOTH",
"154.5 -299.833 OFFCURVE",
"181 -215 OFFCURVE",
"201 -111 CURVE SMOOTH",
"370 763 LINE",
"534 763 LINE SMOOTH",
"539.333 763 OFFCURVE",
"545 767.667 OFFCURVE",
"551 777 CURVE SMOOTH",
"563.667 795.667 OFFCURVE",
"570 813.333 OFFCURVE",
"570 830 CURVE SMOOTH",
"570 838 OFFCURVE",
"567.667 842 OFFCURVE",
"563 842 CURVE SMOOTH",
"386 842 LINE",
"427.333 1062 OFFCURVE",
"470.667 1209.167 OFFCURVE",
"516 1283.5 CURVE SMOOTH",
"561.333 1357.833 OFFCURVE",
"618 1395 OFFCURVE",
"686 1395 CURVE SMOOTH",
"764 1395 OFFCURVE",
"803 1352.333 OFFCURVE",
"803 1267 CURVE SMOOTH",
"803 1245.667 OFFCURVE",
"800.333 1223.333 OFFCURVE",
"795 1200 CURVE SMOOTH",
"418 -428 LINE SMOOTH",
"406 -478.667 OFFCURVE",
"358 -504 OFFCURVE",
"274 -504 CURVE SMOOTH",
"256 -504 OFFCURVE",
"247 -518 OFFCURVE",
"247 -546 CURVE SMOOTH",
"247 -554.667 OFFCURVE",
"250.333 -559 OFFCURVE",
"257 -559 CURVE",
"303.667 -554.333 OFFCURVE",
"366 -552 OFFCURVE",
"444 -552 CURVE SMOOTH",
"522 -552 OFFCURVE",
"588.333 -554.333 OFFCURVE",
"643 -559 CURVE",
"661 -559 OFFCURVE",
"670 -545 OFFCURVE",
"670 -517 CURVE SMOOTH",
"670 -508.333 OFFCURVE",
"667 -504 OFFCURVE",
"661 -504 CURVE SMOOTH",
"578.333 -504 OFFCURVE",
"537 -485.333 OFFCURVE",
"537 -448 CURVE SMOOTH",
"537 -440.667 OFFCURVE",
"538.333 -431.333 OFFCURVE",
"541 -420 CURVE SMOOTH",
"635 -14 LINE",
"667 -22.667 OFFCURVE",
"695 -27 OFFCURVE",
"719 -27 CURVE SMOOTH",
"983 -27 OFFCURVE",
"1251 239.333 OFFCURVE",
"1251 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1112 258.333 OFFCURVE",
"937 39 OFFCURVE",
"737 39 CURVE SMOOTH",
"686.333 39 OFFCURVE",
"661 58.667 OFFCURVE",
"661 98 CURVE SMOOTH",
"661 101.333 OFFCURVE",
"661.667 107.667 OFFCURVE",
"663 117 CURVE",
"811 743 LINE",
"841 751.667 OFFCURVE",
"871.667 756 OFFCURVE",
"903 756 CURVE SMOOTH",
"1021.667 756 OFFCURVE",
"1112 634.333 OFFCURVE",
"1112 477 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
88 75 70 19 17 12 6 13 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 9 10 0 10 9 117 4 1 1 10 2 1 93 8 3 2 2 0 10 9 2 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 9 10 0 10 9 0 131 4 1 1 10 2 1 93 8 3 2 2 0 10 9 2 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 9 10 0 10 9 0 131 3 1 2 4 1 1 10 2 1 109 0 8 0 10 9 8 10 109 15 11 2 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
0 2 3 2 136 0 9 10 0 10 9 0 131 4 1 1 10 3 1 93 8 1 3 0 10 9 3 10 109 0 15 7 6 15 93 11 1 7 14 12 2 6 5 7 6 107 0 5 0 13 5 13 101 0 16 16 0 97 0 0 0 37 16 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
0 2 3 2 136 0 9 10 0 10 9 0 131 4 1 1 10 3 1 93 8 1 3 0 10 9 3 10 109 0 0 0 16 15 0 16 109 0 15 7 6 15 93 11 1 7 14 12 2 6 5 7 6 107 0 5 13 13 5 93 0 5 5 13 97 0 13 5 13 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
91 89 84 82 78 76 69 67 65 63 58 57 54 52 51 49 36 37 18 37 36 17 19 21 34 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1264;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "3361A3C3-2C5F-48E9-A89F-6E589DBAD7A5";
name = "Aug 16 18, 17:06";
paths = (
{
closed = 1;
nodes = (
"1155 452 OFFCURVE",
"1151 422 QCURVE SMOOTH",
"1130 280 OFFCURVE",
"1042 178 QCURVE SMOOTH",
"938 55 OFFCURVE",
"811 55 QCURVE SMOOTH",
"774 56 OFFCURVE",
"774 74 QCURVE SMOOTH",
"774 90 OFFCURVE",
"776 98 QCURVE SMOOTH",
"932 735 LINE",
"964 741 OFFCURVE",
"997 741 QCURVE SMOOTH",
"1063 740 OFFCURVE",
"1114 674 QCURVE SMOOTH",
"1155 620 OFFCURVE",
"1155 481 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"53 -305 OFFCURVE",
"47 -324 QCURVE",
"43 -352 OFFCURVE",
"31 -381 QCURVE SMOOTH",
"20 -410 OFFCURVE",
"-18 -446 OFFCURVE",
"-45 -446 QCURVE SMOOTH",
"-80 -446 OFFCURVE",
"-142 -319 OFFCURVE",
"-197 -319 QCURVE SMOOTH",
"-231 -319 OFFCURVE",
"-289 -379 OFFCURVE",
"-289 -424 QCURVE SMOOTH",
"-289 -469 OFFCURVE",
"-186 -551 OFFCURVE",
"-98 -551 QCURVE SMOOTH",
"33 -551 OFFCURVE",
"184 -409 OFFCURVE",
"227 -305 QCURVE SMOOTH",
"273 -200 OFFCURVE",
"293 -96 QCURVE SMOOTH",
"461 737 LINE",
"627 737 LINE SMOOTH",
"647 737 OFFCURVE",
"667 844 OFFCURVE",
"651 844 QCURVE SMOOTH",
"481 844 LINE",
"498 924 OFFCURVE",
"524 1071 OFFCURVE",
"573 1227 OFFCURVE",
"606 1278 QCURVE SMOOTH",
"673 1382 OFFCURVE",
"745 1382 QCURVE SMOOTH",
"819 1382 OFFCURVE",
"864 1269 OFFCURVE",
"850 1210 QCURVE SMOOTH",
"461 -410 LINE SMOOTH",
"455 -438 OFFCURVE",
"412 -485 OFFCURVE",
"344 -485 QCURVE",
"338 -486 OFFCURVE",
"328 -498 QCURVE",
"311 -520 OFFCURVE",
"311 -547 QCURVE SMOOTH",
"311 -559 OFFCURVE",
"319 -559 QCURVE",
"414 -551 OFFCURVE",
"668 -551 OFFCURVE",
"750 -559 QCURVE",
"758 -559 OFFCURVE",
"764 -549 QCURVE SMOOTH",
"778 -524 OFFCURVE",
"778 -504 QCURVE SMOOTH",
"778 -485 OFFCURVE",
"770 -485 QCURVE SMOOTH",
"743 -485 LINE SMOOTH",
"651 -483 OFFCURVE",
"651 -432 QCURVE SMOOTH",
"651 -417 OFFCURVE",
"655 -401 QCURVE SMOOTH",
"750 -23 LINE",
"787 -27 OFFCURVE",
"807 -27 QCURVE SMOOTH",
"885 -27 OFFCURVE",
"965 0 QCURVE SMOOTH",
"1122 56 OFFCURVE",
"1241 193 QCURVE SMOOTH",
"1372 344 OFFCURVE",
"1372 516 QCURVE SMOOTH",
"1372 662 OFFCURVE",
"1278 750 QCURVE SMOOTH",
"1180 844 OFFCURVE",
"1026 844 QCURVE SMOOTH",
"1011 844 OFFCURVE",
"958 840 QCURVE",
"1100 1442 LINE",
"1108 1487 OFFCURVE",
"1079 1487 QCURVE SMOOTH",
"1053 1487 OFFCURVE",
"962 1448 OFFCURVE",
"913 1442 QCURVE",
"867 1464 OFFCURVE",
"797 1464 QCURVE SMOOTH",
"567 1464 OFFCURVE",
"436 1286 QCURVE SMOOTH",
"351 1170 OFFCURVE",
"285 844 QCURVE",
"113 844 LINE SMOOTH",
"98 844 OFFCURVE",
"66 737 OFFCURVE",
"80 737 QCURVE SMOOTH",
"262 737 LINE",
"63 -250 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
66 64 61 57 35 29 9 7 5 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 13 2 2 0 12 6 2 3 11 0 3 107 0 11 0 4 5 11 4 109 0 1 1 7 97 0 7 7 24 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
147 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 0 7 0 1 0 7 1 109 13 2 2 0 12 6 2 3 11 0 3 107 0 11 4 4 11 93 0 11 11 4 97 0 4 11 4 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
0 15 16 7 16 15 7 131 0 5 4 5 137 10 1 8 16 9 8 93 14 1 9 0 16 15 9 16 109 0 7 0 1 2 7 1 109 13 1 2 0 3 2 91 0 0 12 6 2 3 11 0 3 107 0 11 4 4 11 93 0 11 11 4 97 0 4 11 4 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
104 102 101 99 95 93 88 86 84 83 78 76 71 69 63 62 37 40 35 35 35 34 22 22 35 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1380;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = f_thorn.nordic;
rightMetricsKey = thorn.nordic;
},
{
glyphname = f_udieresis;
lastChange = "2018-08-18 09:34:11 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"162 1442 LINE",
"-35 1442 OFFCURVE",
"-208 1341 OFFCURVE",
"-271 989 CURVE SMOOTH",
"-297 842 LINE",
"-474 842 LINE",
"-494 763 LINE",
"-312 763 LINE",
"-209 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH",
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH",
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"641 763 LINE SMOOTH",
"678 763 OFFCURVE",
"678 708 OFFCURVE",
"673 678 CURVE SMOOTH",
"583 180 LINE SMOOTH",
"576 142 OFFCURVE",
"572 106 OFFCURVE",
"572 75 CURVE SMOOTH",
"572 14 OFFCURVE",
"594 -27 OFFCURVE",
"655 -27 CURVE SMOOTH",
"733 -27 OFFCURVE",
"829 82 OFFCURVE",
"910 182 CURVE SMOOTH",
"975 263 OFFCURVE",
"1049 367 OFFCURVE",
"1110 466 CURVE",
"1051 137 LINE SMOOTH",
"1047 115 OFFCURVE",
"1043 90 OFFCURVE",
"1043 66 CURVE SMOOTH",
"1043 16 OFFCURVE",
"1059 -27 OFFCURVE",
"1103 -27 CURVE SMOOTH",
"1183 -27 OFFCURVE",
"1259 34 OFFCURVE",
"1357 156 CURVE",
"1313 195 LINE",
"1257 133 OFFCURVE",
"1219 102 OFFCURVE",
"1196 102 CURVE SMOOTH",
"1150 102 OFFCURVE",
"1157 157 OFFCURVE",
"1165 203 CURVE SMOOTH",
"1281 848 LINE",
"1179 848 LINE",
"1146 659 OFFCURVE",
"1079 528 OFFCURVE",
"975 363 CURVE SMOOTH",
"917 271 OFFCURVE",
"784 102 OFFCURVE",
"725 102 CURVE SMOOTH",
"700 102 OFFCURVE",
"691 128 OFFCURVE",
"691 169 CURVE SMOOTH",
"691 213 OFFCURVE",
"701 273 OFFCURVE",
"712 334 CURVE SMOOTH",
"767 636 LINE SMOOTH",
"778 698 OFFCURVE",
"790 764 OFFCURVE",
"806 826 CURVE",
"777 855 LINE",
"741 846 OFFCURVE",
"701 842 OFFCURVE",
"664 842 CURVE SMOOTH",
"310 842 LINE",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"599 1403 OFFCURVE",
"607 1355 OFFCURVE",
"614 1274 CURVE SMOOTH",
"617 1238 OFFCURVE",
"648 1202 OFFCURVE",
"689 1202 CURVE SMOOTH",
"724 1202 OFFCURVE",
"741 1226 OFFCURVE",
"741 1275 CURVE SMOOTH",
"741 1332 OFFCURVE",
"707 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"469 1464 OFFCURVE",
"407 1430 OFFCURVE",
"356 1355 CURVE"
);
},
{
closed = 0;
nodes = (
"296 1236 LINE",
"273 1174 OFFCURVE",
"254 1100 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"-195 842 LINE",
"-166 1003 LINE SMOOTH",
"-114 1292 OFFCURVE",
"-13 1381 OFFCURVE",
"110 1381 CURVE"
);
},
{
closed = 1;
nodes = (
"908 1021 OFFCURVE",
"954 1063 OFFCURVE",
"954 1131 CURVE SMOOTH",
"954 1200 OFFCURVE",
"923 1236 OFFCURVE",
"861 1236 CURVE SMOOTH",
"806 1236 OFFCURVE",
"757 1187 OFFCURVE",
"757 1124 CURVE SMOOTH",
"757 1055 OFFCURVE",
"790 1021 OFFCURVE",
"852 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1235 1021 OFFCURVE",
"1281 1063 OFFCURVE",
"1281 1131 CURVE SMOOTH",
"1281 1200 OFFCURVE",
"1250 1236 OFFCURVE",
"1188 1236 CURVE SMOOTH",
"1133 1236 OFFCURVE",
"1084 1187 OFFCURVE",
"1084 1124 CURVE SMOOTH",
"1084 1055 OFFCURVE",
"1117 1021 OFFCURVE",
"1179 1021 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"93 -369 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"641 763 LINE SMOOTH",
"678 763 OFFCURVE",
"678 708 OFFCURVE",
"673 678 CURVE SMOOTH",
"583 180 LINE SMOOTH",
"576 142 OFFCURVE",
"572 106 OFFCURVE",
"572 75 CURVE SMOOTH",
"572 14 OFFCURVE",
"594 -27 OFFCURVE",
"655 -27 CURVE SMOOTH",
"733 -27 OFFCURVE",
"829 82 OFFCURVE",
"910 182 CURVE SMOOTH",
"975 263 OFFCURVE",
"1049 367 OFFCURVE",
"1110 466 CURVE",
"1051 137 LINE SMOOTH",
"1047 115 OFFCURVE",
"1043 90 OFFCURVE",
"1043 66 CURVE SMOOTH",
"1043 16 OFFCURVE",
"1059 -27 OFFCURVE",
"1103 -27 CURVE SMOOTH",
"1183 -27 OFFCURVE",
"1259 34 OFFCURVE",
"1357 156 CURVE",
"1313 195 LINE",
"1257 133 OFFCURVE",
"1219 102 OFFCURVE",
"1196 102 CURVE SMOOTH",
"1150 102 OFFCURVE",
"1157 157 OFFCURVE",
"1165 203 CURVE SMOOTH",
"1281 848 LINE",
"1179 848 LINE",
"1146 659 OFFCURVE",
"1079 528 OFFCURVE",
"975 363 CURVE SMOOTH",
"917 271 OFFCURVE",
"784 102 OFFCURVE",
"725 102 CURVE SMOOTH",
"700 102 OFFCURVE",
"691 128 OFFCURVE",
"691 169 CURVE SMOOTH",
"691 213 OFFCURVE",
"701 273 OFFCURVE",
"712 334 CURVE SMOOTH",
"767 636 LINE SMOOTH",
"778 698 OFFCURVE",
"790 764 OFFCURVE",
"806 826 CURVE",
"777 855 LINE",
"741 846 OFFCURVE",
"701 842 OFFCURVE",
"664 842 CURVE SMOOTH",
"310 842 LINE",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"599 1403 OFFCURVE",
"607 1355 OFFCURVE",
"614 1274 CURVE SMOOTH",
"617 1238 OFFCURVE",
"648 1202 OFFCURVE",
"689 1202 CURVE SMOOTH",
"724 1202 OFFCURVE",
"741 1226 OFFCURVE",
"741 1275 CURVE SMOOTH",
"741 1332 OFFCURVE",
"707 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"469 1464 OFFCURVE",
"408 1430 OFFCURVE",
"356 1355 CURVE SMOOTH",
"318 1301 OFFCURVE",
"267 1177 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"31 842 LINE",
"16 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -459 CURVE SMOOTH",
"-333 -492 OFFCURVE",
"-307 -551 OFFCURVE",
"-169 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"908 1021 OFFCURVE",
"954 1063 OFFCURVE",
"954 1131 CURVE SMOOTH",
"954 1200 OFFCURVE",
"923 1236 OFFCURVE",
"861 1236 CURVE SMOOTH",
"806 1236 OFFCURVE",
"757 1187 OFFCURVE",
"757 1124 CURVE SMOOTH",
"757 1055 OFFCURVE",
"790 1021 OFFCURVE",
"852 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1235 1021 OFFCURVE",
"1281 1063 OFFCURVE",
"1281 1131 CURVE SMOOTH",
"1281 1200 OFFCURVE",
"1250 1236 OFFCURVE",
"1188 1236 CURVE SMOOTH",
"1133 1236 OFFCURVE",
"1084 1187 OFFCURVE",
"1084 1124 CURVE SMOOTH",
"1084 1055 OFFCURVE",
"1117 1021 OFFCURVE",
"1179 1021 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
39 1 13 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 9 10 5 10 9 117 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 19 17 16 3 12 0 7 12 110 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
0 9 10 5 10 9 5 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 19 17 16 3 12 0 7 12 110 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 9 10 5 10 9 5 131 19 1 17 12 0 12 17 0 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 16 1 12 17 7 12 108 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
0 9 10 5 10 9 5 131 19 1 17 12 0 12 17 0 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 6 1 5 18 1 4 7 5 4 109 11 1 7 16 1 12 17 7 12 108 2 1 0 3 1 1 15 0 1 109 0 15 13 13 15 93 0 15 15 13 97 0 13 15 13 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 34 values pushed */
110 109 104 102 96 94 93 92 90 88 85 83 80 78 76 74 71 70 67 65 64 62 36 39 38 41 20 35 35 35 34 20 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1406;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"429 737 LINE",
"731 737 LINE SMOOTH",
"768 737 OFFCURVE",
"768 682 OFFCURVE",
"763 652 CURVE SMOOTH",
"681 209 LINE SMOOTH",
"674 172 OFFCURVE",
"670 138 OFFCURVE",
"670 108 CURVE SMOOTH",
"670 26 OFFCURVE",
"700 -27 OFFCURVE",
"795 -27 CURVE SMOOTH",
"847 -27 OFFCURVE",
"920 23 OFFCURVE",
"994 99 CURVE SMOOTH",
"1055 161 OFFCURVE",
"1117 240 OFFCURVE",
"1169 322 CURVE",
"1143 170 LINE SMOOTH",
"1139 150 OFFCURVE",
"1137 130 OFFCURVE",
"1137 110 CURVE SMOOTH",
"1137 33 OFFCURVE",
"1166 -27 OFFCURVE",
"1249 -27 CURVE SMOOTH",
"1328 -27 OFFCURVE",
"1417 41 OFFCURVE",
"1516 176 CURVE",
"1459 225 LINE",
"1415 169 OFFCURVE",
"1383 142 OFFCURVE",
"1366 142 CURVE SMOOTH",
"1331 142 OFFCURVE",
"1341 200 OFFCURVE",
"1347 231 CURVE SMOOTH",
"1458 848 LINE",
"1265 848 LINE",
"1226 638 OFFCURVE",
"1208 545 OFFCURVE",
"1107 372 CURVE SMOOTH",
"1040 257 OFFCURVE",
"951 133 OFFCURVE",
"900 133 CURVE SMOOTH",
"883 133 OFFCURVE",
"877 155 OFFCURVE",
"877 184 CURVE SMOOTH",
"877 225 OFFCURVE",
"886 278 OFFCURVE",
"896 332 CURVE SMOOTH",
"953 639 LINE SMOOTH",
"964 701 OFFCURVE",
"975 767 OFFCURVE",
"991 829 CURVE",
"958 862 LINE",
"922 853 OFFCURVE",
"872 845 OFFCURVE",
"825 845 CURVE SMOOTH",
"449 844 LINE",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"547 1382 OFFCURVE",
"650 1382 CURVE SMOOTH",
"677 1382 OFFCURVE",
"719 1354 OFFCURVE",
"719 1289 CURVE SMOOTH",
"719 1224 OFFCURVE",
"771 1195 OFFCURVE",
"814 1195 CURVE SMOOTH",
"856 1195 OFFCURVE",
"889 1243 OFFCURVE",
"889 1307 CURVE SMOOTH",
"889 1414 OFFCURVE",
"775 1464 OFFCURVE",
"668 1464 CURVE SMOOTH",
"579 1464 OFFCURVE",
"513 1438 OFFCURVE",
"442 1385 CURVE SMOOTH",
"378 1337 OFFCURVE",
"290 1197 OFFCURVE",
"260 1029 CURVE SMOOTH",
"227 844 LINE",
"-1 844 LINE",
"-20 737 LINE",
"208 737 LINE",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1087 1021 OFFCURVE",
"1142 1076 OFFCURVE",
"1142 1149 CURVE SMOOTH",
"1142 1221 OFFCURVE",
"1090 1273 OFFCURVE",
"1021 1273 CURVE SMOOTH",
"941 1273 OFFCURVE",
"889 1215 OFFCURVE",
"889 1143 CURVE SMOOTH",
"889 1070 OFFCURVE",
"939 1021 OFFCURVE",
"1012 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1396 1021 OFFCURVE",
"1454 1077 OFFCURVE",
"1454 1150 CURVE SMOOTH",
"1454 1221 OFFCURVE",
"1397 1273 OFFCURVE",
"1328 1273 CURVE SMOOTH",
"1254 1273 OFFCURVE",
"1201 1215 OFFCURVE",
"1201 1143 CURVE SMOOTH",
"1201 1070 OFFCURVE",
"1248 1021 OFFCURVE",
"1321 1021 CURVE SMOOTH"
);
}
);
width = 1541;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 0;
nodes = (
"182 1442 LINE",
"-15 1442 OFFCURVE",
"-188 1341 OFFCURVE",
"-251 989 CURVE SMOOTH",
"-277 842 LINE",
"-454 842 LINE",
"-474 763 LINE",
"-292 763 LINE",
"-189 763 LINE",
"213 763 LINE",
"22 -297 LINE SMOOTH",
"5 -392 OFFCURVE",
"-33 -489 OFFCURVE",
"-88 -489 CURVE SMOOTH",
"-119 -489 OFFCURVE",
"-146 -469 OFFCURVE",
"-165 -442 CURVE SMOOTH",
"-185 -414 OFFCURVE",
"-216 -401 OFFCURVE",
"-256 -401 CURVE SMOOTH",
"-282 -401 OFFCURVE",
"-313 -423 OFFCURVE",
"-313 -458 CURVE SMOOTH",
"-313 -471 OFFCURVE",
"-290 -551 OFFCURVE",
"-144 -551 CURVE SMOOTH",
"80 -551 OFFCURVE",
"112 -370 OFFCURVE",
"159 -111 CURVE SMOOTH",
"316 763 LINE",
"661 763 LINE SMOOTH",
"698 763 OFFCURVE",
"698 708 OFFCURVE",
"693 678 CURVE SMOOTH",
"603 180 LINE SMOOTH",
"596 142 OFFCURVE",
"592 106 OFFCURVE",
"592 75 CURVE SMOOTH",
"592 14 OFFCURVE",
"614 -27 OFFCURVE",
"675 -27 CURVE SMOOTH",
"753 -27 OFFCURVE",
"849 82 OFFCURVE",
"930 182 CURVE SMOOTH",
"995 263 OFFCURVE",
"1069 367 OFFCURVE",
"1130 466 CURVE",
"1071 137 LINE SMOOTH",
"1067 115 OFFCURVE",
"1063 90 OFFCURVE",
"1063 66 CURVE SMOOTH",
"1063 16 OFFCURVE",
"1079 -27 OFFCURVE",
"1123 -27 CURVE SMOOTH",
"1203 -27 OFFCURVE",
"1279 34 OFFCURVE",
"1377 156 CURVE",
"1333 195 LINE",
"1277 133 OFFCURVE",
"1239 102 OFFCURVE",
"1216 102 CURVE SMOOTH",
"1170 102 OFFCURVE",
"1177 157 OFFCURVE",
"1185 203 CURVE SMOOTH",
"1301 848 LINE",
"1199 848 LINE",
"1166 659 OFFCURVE",
"1099 528 OFFCURVE",
"995 363 CURVE SMOOTH",
"937 271 OFFCURVE",
"804 102 OFFCURVE",
"745 102 CURVE SMOOTH",
"720 102 OFFCURVE",
"711 128 OFFCURVE",
"711 169 CURVE SMOOTH",
"711 213 OFFCURVE",
"721 273 OFFCURVE",
"732 334 CURVE SMOOTH",
"787 636 LINE SMOOTH",
"798 698 OFFCURVE",
"810 764 OFFCURVE",
"826 826 CURVE",
"797 855 LINE",
"761 846 OFFCURVE",
"721 842 OFFCURVE",
"684 842 CURVE SMOOTH",
"330 842 LINE",
"363 1025 LINE SMOOTH",
"410 1287 OFFCURVE",
"456 1403 OFFCURVE",
"539 1403 CURVE SMOOTH",
"619 1403 OFFCURVE",
"627 1355 OFFCURVE",
"634 1274 CURVE SMOOTH",
"637 1238 OFFCURVE",
"668 1202 OFFCURVE",
"709 1202 CURVE SMOOTH",
"744 1202 OFFCURVE",
"761 1226 OFFCURVE",
"761 1275 CURVE SMOOTH",
"761 1332 OFFCURVE",
"727 1464 OFFCURVE",
"563 1464 CURVE SMOOTH",
"489 1464 OFFCURVE",
"427 1430 OFFCURVE",
"376 1355 CURVE"
);
},
{
closed = 0;
nodes = (
"316 1236 LINE",
"293 1174 OFFCURVE",
"274 1100 OFFCURVE",
"258 1011 CURVE SMOOTH",
"228 842 LINE",
"-175 842 LINE",
"-146 1003 LINE SMOOTH",
"-94 1292 OFFCURVE",
"7 1381 OFFCURVE",
"130 1381 CURVE"
);
},
{
closed = 1;
nodes = (
"928 1021 OFFCURVE",
"974 1063 OFFCURVE",
"974 1131 CURVE SMOOTH",
"974 1200 OFFCURVE",
"943 1236 OFFCURVE",
"881 1236 CURVE SMOOTH",
"826 1236 OFFCURVE",
"777 1187 OFFCURVE",
"777 1124 CURVE SMOOTH",
"777 1055 OFFCURVE",
"810 1021 OFFCURVE",
"872 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1255 1021 OFFCURVE",
"1301 1063 OFFCURVE",
"1301 1131 CURVE SMOOTH",
"1301 1200 OFFCURVE",
"1270 1236 OFFCURVE",
"1208 1236 CURVE SMOOTH",
"1153 1236 OFFCURVE",
"1104 1187 OFFCURVE",
"1104 1124 CURVE SMOOTH",
"1104 1055 OFFCURVE",
"1137 1021 OFFCURVE",
"1199 1021 CURVE SMOOTH"
);
}
);
};
layerId = "F613185F-B77E-4395-A8F6-E7B3DB7F9E51";
name = "Aug 16 18, 16:42";
paths = (
{
closed = 1;
nodes = (
"928 1021 OFFCURVE",
"974 1063 OFFCURVE",
"974 1131 CURVE SMOOTH",
"974 1200 OFFCURVE",
"943 1236 OFFCURVE",
"881 1236 CURVE SMOOTH",
"826 1236 OFFCURVE",
"777 1187 OFFCURVE",
"777 1124 CURVE SMOOTH",
"777 1055 OFFCURVE",
"810 1021 OFFCURVE",
"872 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1255 1021 OFFCURVE",
"1301 1063 OFFCURVE",
"1301 1131 CURVE SMOOTH",
"1301 1200 OFFCURVE",
"1270 1236 OFFCURVE",
"1208 1236 CURVE SMOOTH",
"1153 1236 OFFCURVE",
"1104 1187 OFFCURVE",
"1104 1124 CURVE SMOOTH",
"1104 1055 OFFCURVE",
"1137 1021 OFFCURVE",
"1199 1021 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"5 -392 OFFCURVE",
"-33 -489 OFFCURVE",
"-88 -489 CURVE SMOOTH",
"-119 -489 OFFCURVE",
"-146 -469 OFFCURVE",
"-165 -442 CURVE SMOOTH",
"-185 -414 OFFCURVE",
"-216 -401 OFFCURVE",
"-256 -401 CURVE SMOOTH",
"-282 -401 OFFCURVE",
"-313 -423 OFFCURVE",
"-313 -459 CURVE SMOOTH",
"-313 -492 OFFCURVE",
"-287 -551 OFFCURVE",
"-149 -551 CURVE SMOOTH",
"80 -551 OFFCURVE",
"113 -369 OFFCURVE",
"159 -111 CURVE SMOOTH",
"316 763 LINE",
"661 763 LINE SMOOTH",
"698 763 OFFCURVE",
"698 708 OFFCURVE",
"693 678 CURVE SMOOTH",
"603 180 LINE SMOOTH",
"596 142 OFFCURVE",
"592 106 OFFCURVE",
"592 75 CURVE SMOOTH",
"592 14 OFFCURVE",
"614 -27 OFFCURVE",
"675 -27 CURVE SMOOTH",
"753 -27 OFFCURVE",
"849 82 OFFCURVE",
"930 182 CURVE SMOOTH",
"995 263 OFFCURVE",
"1069 367 OFFCURVE",
"1130 466 CURVE",
"1071 137 LINE SMOOTH",
"1067 115 OFFCURVE",
"1063 90 OFFCURVE",
"1063 66 CURVE SMOOTH",
"1063 16 OFFCURVE",
"1079 -27 OFFCURVE",
"1123 -27 CURVE SMOOTH",
"1203 -27 OFFCURVE",
"1279 34 OFFCURVE",
"1377 156 CURVE",
"1333 195 LINE",
"1277 133 OFFCURVE",
"1239 102 OFFCURVE",
"1216 102 CURVE SMOOTH",
"1170 102 OFFCURVE",
"1177 157 OFFCURVE",
"1185 203 CURVE SMOOTH",
"1301 848 LINE",
"1199 848 LINE",
"1166 659 OFFCURVE",
"1099 528 OFFCURVE",
"995 363 CURVE SMOOTH",
"937 271 OFFCURVE",
"804 102 OFFCURVE",
"745 102 CURVE SMOOTH",
"720 102 OFFCURVE",
"711 128 OFFCURVE",
"711 169 CURVE SMOOTH",
"711 213 OFFCURVE",
"721 273 OFFCURVE",
"732 334 CURVE SMOOTH",
"787 636 LINE SMOOTH",
"798 698 OFFCURVE",
"810 764 OFFCURVE",
"826 826 CURVE",
"797 855 LINE",
"761 846 OFFCURVE",
"721 842 OFFCURVE",
"684 842 CURVE SMOOTH",
"330 842 LINE",
"363 1025 LINE SMOOTH",
"410 1287 OFFCURVE",
"456 1403 OFFCURVE",
"539 1403 CURVE SMOOTH",
"619 1403 OFFCURVE",
"627 1355 OFFCURVE",
"634 1274 CURVE SMOOTH",
"637 1238 OFFCURVE",
"668 1202 OFFCURVE",
"709 1202 CURVE SMOOTH",
"744 1202 OFFCURVE",
"761 1226 OFFCURVE",
"761 1275 CURVE SMOOTH",
"761 1332 OFFCURVE",
"727 1464 OFFCURVE",
"563 1464 CURVE SMOOTH",
"489 1464 OFFCURVE",
"428 1430 OFFCURVE",
"376 1355 CURVE SMOOTH",
"338 1301 OFFCURVE",
"287 1177 OFFCURVE",
"258 1011 CURVE SMOOTH",
"228 842 LINE",
"51 842 LINE",
"36 763 LINE",
"213 763 LINE",
"22 -297 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
39 1 13 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 9 10 5 10 9 117 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 19 17 16 3 12 0 7 12 110 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
0 9 10 5 10 9 5 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 19 17 16 3 12 0 7 12 110 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 9 10 5 10 9 5 131 19 1 17 12 0 12 17 0 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 11 1 7 16 1 12 17 7 12 108 2 1 0 3 1 1 15 0 1 109 0 15 0 13 15 13 101 18 1 4 4 5 97 6 1 5 5 37 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
0 9 10 5 10 9 5 131 19 1 17 12 0 12 17 0 131 0 14 0 1 0 14 1 131 0 8 0 10 9 8 10 109 6 1 5 18 1 4 7 5 4 109 11 1 7 16 1 12 17 7 12 108 2 1 0 3 1 1 15 0 1 109 0 15 13 13 15 93 0 15 15 13 97 0 13 15 13 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 34 values pushed */
110 109 104 102 96 94 93 92 90 88 85 83 80 78 76 74 71 70 67 65 64 62 36 39 38 41 20 35 35 35 34 20 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1406;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = f_udieresis;
rightMetricsKey = u;
},
{
glyphname = figuredash;
lastChange = "2018-08-16 15:29:32 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"803 487 LINE",
"803 602 LINE",
"122 602 LINE",
"122 487 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 9 0 8 35 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"803 487 LINE",
"803 618 LINE",
"122 618 LINE",
"122 487 LINE"
);
}
);
width = 956;
}
);
note = figuredash;
unicode = 2012;
},
{
glyphname = five;
lastChange = "2018-08-15 17:57:49 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"882 798.667 OFFCURVE",
"768.333 895 OFFCURVE",
"541 895 CURVE SMOOTH",
"515 895 OFFCURVE",
"488.333 893.333 OFFCURVE",
"461 890 CURVE SMOOTH",
"447.667 888 OFFCURVE",
"445 895.667 OFFCURVE",
"453 913 CURVE SMOOTH",
"558 1147 LINE SMOOTH",
"566 1165 OFFCURVE",
"579.667 1174 OFFCURVE",
"599 1174 CURVE SMOOTH",
"982 1174 LINE SMOOTH",
"1017.277 1174 OFFCURVE",
"1105.956 1304.261 OFFCURVE",
"1055 1317 CURVE",
"584 1317 LINE SMOOTH",
"566 1317 OFFCURVE",
"552.333 1307.333 OFFCURVE",
"543 1288 CURVE",
"310 758 LINE SMOOTH",
"306.667 750.667 OFFCURVE",
"305 743.333 OFFCURVE",
"305 736 CURVE SMOOTH",
"305 724.667 OFFCURVE",
"312.333 720.667 OFFCURVE",
"327 724 CURVE SMOOTH",
"379 736.667 OFFCURVE",
"423.667 743 OFFCURVE",
"461 743 CURVE SMOOTH",
"633.667 743 OFFCURVE",
"720 668.667 OFFCURVE",
"720 520 CURVE SMOOTH",
"720 321.333 OFFCURVE",
"540.667 68 OFFCURVE",
"354 68 CURVE SMOOTH",
"311.333 68 OFFCURVE",
"271.667 88.833 OFFCURVE",
"235 130.5 CURVE SMOOTH",
"198.333 172.167 OFFCURVE",
"168.667 193 OFFCURVE",
"146 193 CURVE SMOOTH",
"100.667 193 OFFCURVE",
"36 158.667 OFFCURVE",
"36 84 CURVE SMOOTH",
"36 17.333 OFFCURVE",
"136 -16 OFFCURVE",
"248 -16 CURVE SMOOTH",
"597.333 -16 OFFCURVE",
"882 335.333 OFFCURVE",
"882 606 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"538 -16 OFFCURVE",
"760 316 OFFCURVE",
"760 586 CURVE SMOOTH",
"760 781 OFFCURVE",
"630 885 OFFCURVE",
"406 885 CURVE SMOOTH",
"379 885 OFFCURVE",
"319 880 OFFCURVE",
"292 876 CURVE",
"293 866 LINE",
"431 1252 LINE",
"401 1214 LINE",
"856 1214 LINE",
"894 1317 LINE",
"386 1317 LINE",
"189 758 LINE",
"206 733 LINE",
"259 746 OFFCURVE",
"300 753 OFFCURVE",
"344 753 CURVE SMOOTH",
"533 753 OFFCURVE",
"639 657 OFFCURVE",
"639 490 CURVE SMOOTH",
"639 333 OFFCURVE",
"506 56 OFFCURVE",
"295 56 CURVE SMOOTH",
"250 56 OFFCURVE",
"208 74 OFFCURVE",
"169 111 CURVE SMOOTH",
"132 146 OFFCURVE",
"96 164 OFFCURVE",
"70 164 CURVE SMOOTH",
"-12 164 OFFCURVE",
"-25 108 OFFCURVE",
"-25 80 CURVE SMOOTH",
"-25 11 OFFCURVE",
"81 -16 OFFCURVE",
"198 -16 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 1 3 2 2 1 114 0 5 5 4 95 0 4 4 92 77 0 3 3 6 97 0 6 6 95 77 0 2 2 0 98 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 3 2 3 1 2 128 0 5 5 4 95 0 4 4 92 77 0 3 3 6 97 0 6 6 95 77 0 2 2 0 98 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 1 3 2 3 1 2 128 0 6 0 3 1 6 3 105 0 5 5 4 95 0 4 4 92 77 0 2 2 0 98 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 2 3 1 2 128 0 4 0 5 6 4 5 103 0 6 0 3 1 6 3 105 0 2 2 0 98 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
0 1 3 2 3 1 2 128 0 4 0 5 6 4 5 103 0 6 0 3 1 6 3 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
37 51 39 35 33 36 34 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"584 1317 LINE SMOOTH",
"527 1317 OFFCURVE",
"500 1262 QCURVE",
"264 733 LINE",
"248 709 OFFCURVE",
"264 670 OFFCURVE",
"307 682 QCURVE SMOOTH",
"385 702 OFFCURVE",
"451 702 QCURVE SMOOTH",
"565 702 OFFCURVE",
"696 587 OFFCURVE",
"696 489 QCURVE SMOOTH",
"696 358 OFFCURVE",
"485 92 OFFCURVE",
"360 92 QCURVE SMOOTH",
"305 92 OFFCURVE",
"203 231 OFFCURVE",
"154 231 QCURVE",
"98 233 OFFCURVE",
"4 161 OFFCURVE",
"4 106 QCURVE SMOOTH",
"4 -16 OFFCURVE",
"248 -16 QCURVE SMOOTH",
"403 -16 OFFCURVE",
"682 131 OFFCURVE",
"778 256 QCURVE SMOOTH",
"922 441 OFFCURVE",
"922 631 QCURVE SMOOTH",
"922 756 OFFCURVE",
"735 918 OFFCURVE",
"547 918 QCURVE",
"534 917 OFFCURVE",
"481 913 QCURVE",
"467 911 OFFCURVE",
"459 926 OFFCURVE",
"467 946 QCURVE",
"537 1100 LINE",
"553 1130 OFFCURVE",
"586 1130 QCURVE SMOOTH",
"1001 1130 LINE",
"1016 1129 OFFCURVE",
"1059 1223 QCURVE SMOOTH",
"1090 1293 OFFCURVE",
"1090 1311 QCURVE",
"1089 1317 OFFCURVE",
"1085 1317 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"659 -15 OFFCURVE",
"832 386 OFFCURVE",
"832 592 CURVE SMOOTH",
"832 803 OFFCURVE",
"679 918 OFFCURVE",
"430 918 CURVE SMOOTH",
"409 918 OFFCURVE",
"343 910 OFFCURVE",
"310 902 CURVE",
"330 881 LINE",
"423 1155 LINE",
"380 1130 LINE",
"875 1130 LINE",
"943 1317 LINE",
"373 1317 LINE",
"158 711 LINE",
"176 678 LINE",
"225 693 OFFCURVE",
"291 702 OFFCURVE",
"353 702 CURVE SMOOTH",
"516 702 OFFCURVE",
"620 615 OFFCURVE",
"620 464 CURVE SMOOTH",
"620 326 OFFCURVE",
"504 92 OFFCURVE",
"320 92 CURVE SMOOTH",
"273 92 OFFCURVE",
"230 121 OFFCURVE",
"191 178 CURVE SMOOTH",
"167 212 OFFCURVE",
"137 231 OFFCURVE",
"96 231 CURVE SMOOTH",
"10 231 OFFCURVE",
"-39 176 OFFCURVE",
"-39 109 CURVE SMOOTH",
"-39 18 OFFCURVE",
"87 -16 OFFCURVE",
"216 -16 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 3 5 4 5 3 4 128 0 1 0 5 3 1 5 105 0 0 0 6 95 7 1 6 6 31 77 0 4 4 2 98 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 3 5 4 5 3 4 128 7 1 6 0 0 1 6 0 103 0 1 0 5 3 1 5 105 0 4 4 2 98 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 3 5 4 5 3 4 128 7 1 6 0 0 1 6 0 103 0 1 0 5 3 1 5 105 0 4 2 2 4 89 0 4 4 2 98 0 2 4 2 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
0 0 0 45 0 44 36 33 35 38 38 53 8 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = five;
unicode = 0035;
},
{
glyphname = five.oldstyle;
lastChange = "2018-08-15 18:11:36 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"616 285.333 OFFCURVE",
"543.667 400.667 OFFCURVE",
"399 508 CURVE SMOOTH",
"383 520.667 OFFCURVE",
"375 538.333 OFFCURVE",
"375 561 CURVE SMOOTH",
"375 591 OFFCURVE",
"388.333 620.333 OFFCURVE",
"415 649 CURVE SMOOTH",
"455 693 OFFCURVE",
"505 715 OFFCURVE",
"565 715 CURVE SMOOTH",
"950 715 LINE SMOOTH",
"999.989 715 OFFCURVE",
"1091.424 834 OFFCURVE",
"1036 834 CURVE SMOOTH",
"563 834 LINE SMOOTH",
"529 834 OFFCURVE",
"497 818.667 OFFCURVE",
"467 788 CURVE SMOOTH",
"351 672 OFFCURVE",
"278.667 567.667 OFFCURVE",
"250 475 CURVE",
"248 466.333 OFFCURVE",
"247 456 OFFCURVE",
"247 444 CURVE SMOOTH",
"247 428.667 OFFCURVE",
"255.333 409.667 OFFCURVE",
"272 387 CURVE SMOOTH",
"278 379 OFFCURVE",
"312.667 343.667 OFFCURVE",
"376 281 CURVE",
"430 223 OFFCURVE",
"457 162 OFFCURVE",
"457 98 CURVE SMOOTH",
"457 -112.667 OFFCURVE",
"251.667 -305 OFFCURVE",
"33 -461 CURVE",
"28.333 -465 OFFCURVE",
"26 -471.333 OFFCURVE",
"26 -480 CURVE SMOOTH",
"26 -488 OFFCURVE",
"36.333 -503 OFFCURVE",
"47 -503 CURVE SMOOTH",
"53.667 -503 OFFCURVE",
"57.667 -502.667 OFFCURVE",
"59 -502 CURVE",
"244.333 -418 OFFCURVE",
"424.667 -268.5 OFFCURVE",
"534 -102.5 CURVE SMOOTH",
"588.667 -19.5 OFFCURVE",
"616 68.667 OFFCURVE",
"616 162 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"338 -384 OFFCURVE",
"550 -82 OFFCURVE",
"550 136 CURVE SMOOTH",
"550 297 OFFCURVE",
"473 395 OFFCURVE",
"316 498 CURVE SMOOTH",
"287 517 OFFCURVE",
"273 549 OFFCURVE",
"273 574 CURVE SMOOTH",
"273 604 OFFCURVE",
"297 654 OFFCURVE",
"326 688 CURVE SMOOTH",
"361 729 OFFCURVE",
"405 775 OFFCURVE",
"466 775 CURVE SMOOTH",
"782 775 LINE",
"812 854 LINE",
"436 854 LINE SMOOTH",
"376 854 OFFCURVE",
"320 785 OFFCURVE",
"265 704 CURVE SMOOTH",
"218 635 OFFCURVE",
"191 578 OFFCURVE",
"182 550 CURVE SMOOTH",
"173 522 OFFCURVE",
"172 503 OFFCURVE",
"172 487 CURVE SMOOTH",
"172 459 OFFCURVE",
"193 426 OFFCURVE",
"224 404 CURVE SMOOTH",
"347 314 OFFCURVE",
"427 237 OFFCURVE",
"427 87 CURVE SMOOTH",
"427 -119 OFFCURVE",
"289 -293 OFFCURVE",
"57 -467 CURVE",
"81 -499 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 33 values pushed */
20 1 1 73 0 0 2 0 136 0 2 1 1 2 91 0 2 2 1 95 0 1 2 1 79 33 30 27 25 52 3 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 847;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"582 844 LINE SMOOTH",
"526 844 OFFCURVE",
"469 791 QCURVE",
"426 747 OFFCURVE",
"383 696 QCURVE SMOOTH",
"271 563 OFFCURVE",
"246 477 QCURVE",
"238 456 OFFCURVE",
"238 436 QCURVE",
"242 408 LINE",
"247 385 OFFCURVE",
"276 348 QCURVE",
"289 336 LINE",
"365 266 LINE SMOOTH",
"438 197 OFFCURVE",
"438 111 QCURVE",
"436 86 OFFCURVE",
"434 59 QCURVE SMOOTH",
"418 -91 OFFCURVE",
"328 -197 QCURVE SMOOTH",
"209 -343 OFFCURVE",
"47 -449 QCURVE",
"43 -453 OFFCURVE",
"43 -459 QCURVE SMOOTH",
"43 -475 LINE",
"48 -506 OFFCURVE",
"66 -510 QCURVE",
"78 -508 LINE",
"129 -490 OFFCURVE",
"184 -457 QCURVE SMOOTH",
"348 -362 OFFCURVE",
"475 -225 QCURVE SMOOTH",
"538 -157 OFFCURVE",
"575 -106 QCURVE SMOOTH",
"672 27 OFFCURVE",
"672 172 QCURVE SMOOTH",
"672 362 OFFCURVE",
"426 528 QCURVE",
"416 537 OFFCURVE",
"406 557 OFFCURVE",
"406 567 QCURVE",
"408 590 OFFCURVE",
"422 610 QCURVE SMOOTH",
"456 659 OFFCURVE",
"528 659 QCURVE SMOOTH",
"969 659 LINE",
"984 657 OFFCURVE",
"1004 684 QCURVE",
"1045 734 OFFCURVE",
"1063 797 QCURVE",
"1067 825 LINE",
"1067 844 OFFCURVE",
"1055 844 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"338 -419 OFFCURVE",
"617 -95 OFFCURVE",
"617 128 CURVE SMOOTH",
"617 302 OFFCURVE",
"506 425 OFFCURVE",
"330 541 CURVE SMOOTH",
"317 549 OFFCURVE",
"310 563 OFFCURVE",
"310 582 CURVE SMOOTH",
"310 600 OFFCURVE",
"317 616 OFFCURVE",
"328 635 CURVE SMOOTH",
"350 670 OFFCURVE",
"385 688 OFFCURVE",
"432 688 CURVE SMOOTH",
"796 688 LINE",
"858 854 LINE",
"457 854 LINE SMOOTH",
"387 854 OFFCURVE",
"326 797 OFFCURVE",
"261 705 CURVE SMOOTH",
"197 614 OFFCURVE",
"158 540 OFFCURVE",
"147 481 CURVE SMOOTH",
"143 461 OFFCURVE",
"141 444 OFFCURVE",
"141 429 CURVE SMOOTH",
"141 397 OFFCURVE",
"152 373 OFFCURVE",
"184 348 CURVE SMOOTH",
"302 256 OFFCURVE",
"379 195 OFFCURVE",
"379 74 CURVE SMOOTH",
"379 -49 OFFCURVE",
"317 -259 OFFCURVE",
"48 -459 CURVE",
"82 -517 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 42 values pushed */
44 37 28 12 2 5 2 73 0 1 0 1 136 0 0 2 2 0 91 0 0 0 2 95 3 1 2 0 2 79 0 0 0 52 0 51 27 25 54 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 882;
}
);
note = five.oldstyle;
},
{
glyphname = fiveeighths;
lastChange = "2018-08-16 04:15:26 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1351 1391 LINE",
"1271 1428 LINE",
"254 -71 LINE",
"332 -111 LINE"
);
},
{
closed = 1;
nodes = (
"519 506 OFFCURVE",
"626 756 OFFCURVE",
"626 880 CURVE SMOOTH",
"626 1007 OFFCURVE",
"537 1078 OFFCURVE",
"386 1078 CURVE SMOOTH",
"375 1078 OFFCURVE",
"348 1076 OFFCURVE",
"328 1072 CURVE",
"384 1230 LINE",
"657 1230 LINE",
"696 1333 LINE",
"362 1333 LINE",
"234 971 LINE",
"244 950 LINE",
"276 959 OFFCURVE",
"310 964 OFFCURVE",
"342 964 CURVE SMOOTH",
"449 964 OFFCURVE",
"512 909 OFFCURVE",
"512 811 CURVE SMOOTH",
"512 719 OFFCURVE",
"437 565 OFFCURVE",
"318 565 CURVE SMOOTH",
"290 565 OFFCURVE",
"263 581 OFFCURVE",
"240 611 CURVE SMOOTH",
"220 635 OFFCURVE",
"201 647 OFFCURVE",
"180 647 CURVE SMOOTH",
"122 647 OFFCURVE",
"108 603 OFFCURVE",
"108 579 CURVE SMOOTH",
"108 526 OFFCURVE",
"179 506 OFFCURVE",
"255 506 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1073 40 OFFCURVE",
"1031 101 OFFCURVE",
"1031 176 CURVE SMOOTH",
"1031 250 OFFCURVE",
"1065 330 OFFCURVE",
"1158 379 CURVE",
"1245 314 OFFCURVE",
"1285 260 OFFCURVE",
"1285 196 CURVE SMOOTH",
"1285 126 OFFCURVE",
"1232 40 OFFCURVE",
"1146 40 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1313 -10 OFFCURVE",
"1404 149 OFFCURVE",
"1404 247 CURVE SMOOTH",
"1404 320 OFFCURVE",
"1362 385 OFFCURVE",
"1280 443 CURVE",
"1404 506 OFFCURVE",
"1453 587 OFFCURVE",
"1453 676 CURVE SMOOTH",
"1453 768 OFFCURVE",
"1386 826 OFFCURVE",
"1266 826 CURVE SMOOTH",
"1085 826 OFFCURVE",
"1006 670 OFFCURVE",
"1006 584 CURVE SMOOTH",
"1006 515 OFFCURVE",
"1045 461 OFFCURVE",
"1114 412 CURVE",
"942 326 OFFCURVE",
"909 235 OFFCURVE",
"909 163 CURVE SMOOTH",
"909 58 OFFCURVE",
"992 -10 OFFCURVE",
"1118 -10 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1159 528 OFFCURVE",
"1110 579 OFFCURVE",
"1110 640 CURVE SMOOTH",
"1110 700 OFFCURVE",
"1159 772 OFFCURVE",
"1241 772 CURVE SMOOTH",
"1305 772 OFFCURVE",
"1340 727 OFFCURVE",
"1340 657 CURVE SMOOTH",
"1340 589 OFFCURVE",
"1315 524 OFFCURVE",
"1234 476 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
19 1 8 3 74 70 53 43 4 10 0 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 1 9 2 2 1 114 0 6 0 3 8 6 3 105 0 8 0 9 1 8 9 105 0 2 0 0 10 2 0 106 0 5 5 4 95 0 4 4 92 77 0 10 10 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 1 9 2 2 1 114 0 4 0 5 6 4 5 103 0 6 0 3 8 6 3 105 0 8 0 9 1 8 9 105 0 2 0 0 10 2 0 106 0 10 10 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 1 9 2 9 1 2 128 0 4 0 5 6 4 5 103 0 6 0 3 8 6 3 105 0 8 0 9 1 8 9 105 0 2 0 0 10 2 0 106 0 10 10 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
0 1 9 2 9 1 2 128 0 4 0 5 6 4 5 103 0 6 0 3 8 6 3 105 0 8 0 9 1 8 9 105 0 2 0 0 10 2 0 106 0 10 7 7 10 89 0 10 10 7 97 0 7 10 7 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
81 79 65 63 40 39 38 35 39 35 33 36 34 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1519;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1258 1387 LINE",
"1150 1424 LINE",
"355 -89 LINE",
"460 -131 LINE"
);
},
{
closed = 1;
nodes = (
"541 518 OFFCURVE",
"651 763 OFFCURVE",
"651 893 CURVE SMOOTH",
"651 1024 OFFCURVE",
"556 1096 OFFCURVE",
"401 1096 CURVE SMOOTH",
"391 1096 OFFCURVE",
"366 1093 OFFCURVE",
"345 1090 CURVE",
"393 1228 LINE",
"678 1228 LINE",
"720 1344 LINE",
"366 1344 LINE",
"233 968 LINE",
"244 947 LINE",
"275 957 OFFCURVE",
"316 962 OFFCURVE",
"354 962 CURVE SMOOTH",
"456 962 OFFCURVE",
"520 908 OFFCURVE",
"520 815 CURVE SMOOTH",
"520 729 OFFCURVE",
"448 584 OFFCURVE",
"333 584 CURVE SMOOTH",
"304 584 OFFCURVE",
"277 602 OFFCURVE",
"253 637 CURVE SMOOTH",
"238 658 OFFCURVE",
"220 670 OFFCURVE",
"194 670 CURVE SMOOTH",
"132 670 OFFCURVE",
"111 626 OFFCURVE",
"111 595 CURVE SMOOTH",
"111 538 OFFCURVE",
"189 517 OFFCURVE",
"269 517 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1072 47 OFFCURVE",
"1037 105 OFFCURVE",
"1037 178 CURVE SMOOTH",
"1037 248 OFFCURVE",
"1066 325 OFFCURVE",
"1147 370 CURVE",
"1227 315 OFFCURVE",
"1268 258 OFFCURVE",
"1268 198 CURVE SMOOTH",
"1268 142 OFFCURVE",
"1224 47 OFFCURVE",
"1141 47 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1316 -10 OFFCURVE",
"1410 151 OFFCURVE",
"1410 254 CURVE SMOOTH",
"1410 328 OFFCURVE",
"1370 391 OFFCURVE",
"1290 445 CURVE",
"1408 507 OFFCURVE",
"1458 583 OFFCURVE",
"1458 671 CURVE SMOOTH",
"1458 772 OFFCURVE",
"1378 826 OFFCURVE",
"1260 826 CURVE SMOOTH",
"1068 826 OFFCURVE",
"987 667 OFFCURVE",
"987 579 CURVE SMOOTH",
"987 514 OFFCURVE",
"1022 458 OFFCURVE",
"1090 410 CURVE",
"929 324 OFFCURVE",
"893 241 OFFCURVE",
"893 168 CURVE SMOOTH",
"893 56 OFFCURVE",
"986 -10 OFFCURVE",
"1112 -10 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1152 535 OFFCURVE",
"1114 585 OFFCURVE",
"1114 635 CURVE SMOOTH",
"1114 671 OFFCURVE",
"1147 764 OFFCURVE",
"1234 764 CURVE SMOOTH",
"1294 764 OFFCURVE",
"1322 719 OFFCURVE",
"1322 656 CURVE SMOOTH",
"1322 598 OFFCURVE",
"1305 524 OFFCURVE",
"1228 484 CURVE"
);
}
);
width = 1524;
}
);
note = fiveeighths;
unicode = 215D;
},
{
glyphname = four;
lastChange = "2018-08-15 18:24:21 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"749 371 LINE SMOOTH",
"752.333 384.333 OFFCURVE",
"760.667 391 OFFCURVE",
"774 391 CURVE SMOOTH",
"893 391 LINE SMOOTH",
"913.023 391 OFFCURVE",
"938.281 477 OFFCURVE",
"916 477 CURVE SMOOTH",
"798 477 LINE SMOOTH",
"784 477 OFFCURVE",
"779 484 OFFCURVE",
"783 498 CURVE SMOOTH",
"902 942 LINE",
"902 952 OFFCURVE",
"877 957 OFFCURVE",
"827 957 CURVE SMOOTH",
"777 957 OFFCURVE",
"750.667 952 OFFCURVE",
"748 942 CURVE SMOOTH",
"629 498 LINE SMOOTH",
"625 484 OFFCURVE",
"616.333 477 OFFCURVE",
"603 477 CURVE SMOOTH",
"214 477 LINE SMOOTH",
"198.667 477 OFFCURVE",
"191 480.167 OFFCURVE",
"191 486.5 CURVE SMOOTH",
"191 492.833 OFFCURVE",
"195.667 500.667 OFFCURVE",
"205 510 CURVE SMOOTH",
"1092 1407 LINE",
"1092.667 1408.333 OFFCURVE",
"1093 1410.333 OFFCURVE",
"1093 1413 CURVE SMOOTH",
"1093 1429 OFFCURVE",
"1079.833 1437 OFFCURVE",
"1053.5 1437 CURVE SMOOTH",
"1027.167 1437 OFFCURVE",
"1009.333 1433 OFFCURVE",
"1000 1425 CURVE",
"858 1268.333 OFFCURVE",
"664 1067 OFFCURVE",
"418 821 CURVE SMOOTH",
"116 520 LINE SMOOTH",
"68 472 OFFCURVE",
"44 438.5 OFFCURVE",
"44 419.5 CURVE SMOOTH",
"44 400.5 OFFCURVE",
"63.667 391 OFFCURVE",
"103 391 CURVE SMOOTH",
"580 391 LINE SMOOTH",
"593.333 391 OFFCURVE",
"598.333 384.333 OFFCURVE",
"595 371 CURVE SMOOTH",
"530 127 LINE SMOOTH",
"516 75 OFFCURVE",
"456.333 49 OFFCURVE",
"351 49 CURVE SMOOTH",
"325.589 49 OFFCURVE",
"315.181 -8 OFFCURVE",
"336 -8 CURVE",
"392.667 -2.667 OFFCURVE",
"464.333 0 OFFCURVE",
"551 0 CURVE SMOOTH",
"637.667 0 OFFCURVE",
"709.333 -2.667 OFFCURVE",
"766 -8 CURVE",
"791.182 -8 OFFCURVE",
"802.049 49 OFFCURVE",
"781 49 CURVE SMOOTH",
"713.667 49 OFFCURVE",
"680 68 OFFCURVE",
"680 106 CURVE SMOOTH",
"680 112.667 OFFCURVE",
"681 119.667 OFFCURVE",
"683 127 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"673 0 LINE",
"680 38 LINE",
"589 38 OFFCURVE",
"554 64 OFFCURVE",
"563 116 CURVE SMOOTH",
"613 401 LINE",
"762 401 LINE",
"774 467 LINE",
"625 467 LINE",
"708 942 LINE",
"591 942 LINE",
"508 467 LINE",
"40 467 LINE",
"26 441 LINE",
"865 1407 LINE",
"855 1425 LINE",
"781 1425 LINE",
"554 1137 OFFCURVE",
"389 950 OFFCURVE",
"275 821 CURVE SMOOTH",
"-51 453 LINE",
"-20 401 LINE",
"496 401 LINE",
"446 116 LINE SMOOTH",
"437 64 OFFCURVE",
"379 38 OFFCURVE",
"264 38 CURVE",
"257 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
30 1 5 4 2 1 0 3 2 76 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
6 1 5 7 1 3 0 5 3 105 0 4 4 94 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 4 5 4 133 6 1 5 7 1 3 0 5 3 105 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 5 4 133 6 1 5 7 1 3 0 5 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
51 39 39 22 51 36 21 19 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"928 903 LINE SMOOTH",
"934 926 OFFCURVE",
"706 926 OFFCURVE",
"700 903 QCURVE SMOOTH",
"594 504 LINE",
"238 504 LINE SMOOTH",
"199 504 OFFCURVE",
"240 545 QCURVE SMOOTH",
"1073 1360 LINE",
"1079 1372 OFFCURVE",
"1079 1382 QCURVE",
"1077 1409 OFFCURVE",
"1044 1423 QCURVE",
"1026 1432 OFFCURVE",
"1010 1432 QCURVE",
"984 1431 OFFCURVE",
"961 1413 QCURVE",
"783 1206 OFFCURVE",
"504 934 QCURVE SMOOTH",
"111 551 LINE SMOOTH",
"23 465 OFFCURVE",
"23 414 QCURVE SMOOTH",
"22 371 OFFCURVE",
"94 371 QCURVE SMOOTH",
"98 371 LINE",
"559 371 LINE",
"500 156 LINE SMOOTH",
"485 106 OFFCURVE",
"410 68 OFFCURVE",
"336 68 QCURVE SMOOTH",
"319 68 OFFCURVE",
"299 -8 OFFCURVE",
"315 -8 QCURVE",
"397 0 OFFCURVE",
"551 0 QCURVE SMOOTH",
"704 0 OFFCURVE",
"786 -8 QCURVE",
"803 -8 OFFCURVE",
"823 68 OFFCURVE",
"807 68 QCURVE SMOOTH",
"753 68 OFFCURVE",
"733 84 QCURVE SMOOTH",
"721 94 OFFCURVE",
"721 117 QCURVE SMOOTH",
"721 133 OFFCURVE",
"727 156 QCURVE SMOOTH",
"786 371 LINE",
"909 371 LINE",
"926 372 OFFCURVE",
"942 438 QCURVE SMOOTH",
"950 473 OFFCURVE",
"950 489 QCURVE SMOOTH",
"950 504 OFFCURVE",
"944 504 QCURVE SMOOTH",
"821 504 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"755 0 LINE",
"767 68 LINE",
"689 68 OFFCURVE",
"661 97 OFFCURVE",
"671 156 CURVE SMOOTH",
"709 371 LINE",
"832 371 LINE",
"855 504 LINE",
"732 504 LINE",
"808 932 LINE",
"581 932 LINE",
"505 504 LINE",
"78 504 LINE",
"88 483 LINE",
"922 1377 LINE",
"901 1413 LINE",
"791 1413 LINE",
"615 1197 OFFCURVE",
"565 1139 OFFCURVE",
"374 934 CURVE SMOOTH",
"-98 427 LINE",
"-49 371 LINE",
"482 371 LINE",
"444 156 LINE SMOOTH",
"434 97 OFFCURVE",
"380 68 OFFCURVE",
"276 68 CURVE",
"264 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
44 1 8 6 3 1 1 0 2 76 22 1 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 8 6 0 6 8 0 128 7 1 0 5 1 1 2 0 1 106 0 6 6 37 77 4 1 2 2 3 97 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
0 6 8 6 133 0 8 0 8 133 7 1 0 5 1 1 2 0 1 106 4 1 2 2 3 97 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 6 8 6 133 0 8 0 8 133 7 1 0 5 1 1 2 0 1 106 4 1 2 3 3 2 89 4 1 2 2 3 97 0 3 2 3 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
18 40 23 51 35 36 22 37 16 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = four;
unicode = 0034;
},
{
glyphname = four.oldstyle;
lastChange = "2018-08-16 01:43:47 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"725 4 LINE SMOOTH",
"731 25.333 OFFCURVE",
"736.333 38.667 OFFCURVE",
"741 44 CURVE",
"745.667 50 OFFCURVE",
"758 53 OFFCURVE",
"778 53 CURVE SMOOTH",
"950 53 LINE",
"962.667 54.333 OFFCURVE",
"972 66.667 OFFCURVE",
"978 90 CURVE SMOOTH",
"984.667 113.333 OFFCURVE",
"988 129.333 OFFCURVE",
"988 138 CURVE SMOOTH",
"988 147.333 OFFCURVE",
"985 152 OFFCURVE",
"979 152 CURVE SMOOTH",
"794 152 LINE",
"780.667 152.667 OFFCURVE",
"774 157 OFFCURVE",
"774 165 CURVE SMOOTH",
"774 173 OFFCURVE",
"776.667 187 OFFCURVE",
"782 207 CURVE SMOOTH",
"971 864 LINE",
"971.667 866.667 OFFCURVE",
"972 869 OFFCURVE",
"972 871 CURVE SMOOTH",
"972 881 OFFCURVE",
"966.667 886 OFFCURVE",
"956 886 CURVE SMOOTH",
"946 886 OFFCURVE",
"935.333 880.667 OFFCURVE",
"924 870 CURVE SMOOTH",
"70 94 LINE SMOOTH",
"63.333 88 OFFCURVE",
"60 79.667 OFFCURVE",
"60 69 CURVE SMOOTH",
"60 58.333 OFFCURVE",
"64.667 53 OFFCURVE",
"74 53 CURVE SMOOTH",
"547 53 LINE SMOOTH",
"571 53 OFFCURVE",
"583 47.333 OFFCURVE",
"583 36 CURVE SMOOTH",
"583 33.333 OFFCURVE",
"580.333 22.667 OFFCURVE",
"575 4 CURVE SMOOTH",
"470 -363 LINE",
"468.667 -367 OFFCURVE",
"468 -369.667 OFFCURVE",
"468 -371 CURVE SMOOTH",
"468 -385 OFFCURVE",
"490.667 -392 OFFCURVE",
"536 -392 CURVE SMOOTH",
"586 -392 OFFCURVE",
"613.333 -383.667 OFFCURVE",
"618 -367 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"633 207 LINE SMOOTH",
"626.333 183 OFFCURVE",
"620.667 168 OFFCURVE",
"616 162 CURVE SMOOTH",
"610.667 155.333 OFFCURVE",
"597 152 OFFCURVE",
"575 152 CURVE SMOOTH",
"281 152 LINE SMOOTH",
"263.667 152 OFFCURVE",
"255 156 OFFCURVE",
"255 164 CURVE SMOOTH",
"255 171.333 OFFCURVE",
"260.667 181 OFFCURVE",
"272 193 CURVE",
"730 618 LINE",
"732.667 620.667 OFFCURVE",
"736.667 622 OFFCURVE",
"742 622 CURVE SMOOTH",
"748.667 622 OFFCURVE",
"749.667 613.333 OFFCURVE",
"745 596 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"597 -377 LINE",
"673 53 LINE",
"894 53 LINE",
"910 142 LINE",
"689 142 LINE",
"816 864 LINE",
"793 880 LINE",
"7 88 LINE",
"19 53 LINE",
"556 53 LINE",
"480 -377 LINE"
);
},
{
closed = 1;
nodes = (
"690 710 LINE",
"673 716 LINE",
"572 142 LINE",
"119 142 LINE",
"121 121 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
31 23 4 3 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 0 136 4 1 1 5 1 3 2 1 3 108 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 0 1 0 136 0 2 3 2 137 4 1 1 3 3 1 91 4 1 1 1 3 96 5 1 3 1 3 80 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
60 38 39 38 39 33 6 7 28 
CALL[ ]\011/* CallFunction */";
};
width = 962;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1026 823 OFFCURVE",
"1026 829 QCURVE SMOOTH",
"1026 844 OFFCURVE",
"1022 854 QCURVE SMOOTH",
"1010 887 OFFCURVE",
"973 887 QCURVE SMOOTH",
"942 887 OFFCURVE",
"911 858 QCURVE SMOOTH",
"86 106 LINE",
"76 96 OFFCURVE",
"72 88 QCURVE",
"70 76 LINE",
"72 53 OFFCURVE",
"109 53 QCURVE SMOOTH",
"535 53 LINE SMOOTH",
"563 53 OFFCURVE",
"563 37 QCURVE",
"561 18 LINE",
"449 -358 LINE",
"449 -367 LINE",
"463 -391 OFFCURVE",
"559 -391 QCURVE SMOOTH",
"664 -391 OFFCURVE",
"672 -362 QCURVE SMOOTH",
"788 23 LINE SMOOTH",
"798 53 OFFCURVE",
"821 53 QCURVE SMOOTH",
"973 53 LINE SMOOTH",
"977 53 OFFCURVE",
"981 55 QCURVE",
"993 63 LINE",
"1016 92 OFFCURVE",
"1016 139 QCURVE",
"1015 176 OFFCURVE",
"997 176 QCURVE SMOOTH",
"870 176 LINE",
"844 177 OFFCURVE",
"842 193 QCURVE",
"844 211 LINE",
"1024 815 LINE"
);
},
{
closed = 1;
nodes = (
"616 207 LINE",
"609 176 OFFCURVE",
"582 176 QCURVE SMOOTH",
"340 176 LINE SMOOTH",
"323 176 OFFCURVE",
"319 182 QCURVE",
"317 190 LINE",
"318 199 OFFCURVE",
"328 209 QCURVE SMOOTH",
"686 543 LINE",
"688 547 OFFCURVE",
"690 547 QCURVE",
"699 553 OFFCURVE",
"705 553 QCURVE SMOOTH",
"713 553 OFFCURVE",
"713 541 QCURVE",
"711 522 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"648 -372 LINE",
"719 35 LINE",
"899 35 LINE",
"923 170 LINE",
"743 170 LINE",
"864 857 LINE",
"790 903 LINE",
"-22 85 LINE",
"-31 35 LINE",
"489 35 LINE",
"418 -372 LINE"
);
},
{
closed = 1;
nodes = (
"609 599 LINE",
"590 608 LINE",
"513 170 LINE",
"161 170 LINE",
"175 147 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
41 23 7 2 4 4 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
22 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 1 2 136 3 1 1 5 1 0 4 1 0 108 0 4 4 23 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 2 1 2 136 0 4 0 4 137 3 1 1 0 0 1 91 3 1 1 1 0 96 5 1 0 1 0 80 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
55 52 38 38 35 69 20 6 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 997;
}
);
note = four.oldstyle;
},
{
glyphname = g;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"850 805 OFFCURVE",
"844 814 OFFCURVE",
"833 813 CURVE SMOOTH",
"783 810 OFFCURVE",
"743 808 OFFCURVE",
"712 808 CURVE SMOOTH",
"681 808 OFFCURVE",
"647 810 OFFCURVE",
"609 814 CURVE SMOOTH",
"596 815 OFFCURVE",
"577 822 OFFCURVE",
"552 834 CURVE SMOOTH",
"527 846 OFFCURVE",
"506 852 OFFCURVE",
"490 852 CURVE SMOOTH",
"253 852 OFFCURVE",
"36 632 OFFCURVE",
"36 402 CURVE",
"82 620 OFFCURVE",
"36 517 OFFCURVE",
"36 402 CURVE SMOOTH",
"36 287 OFFCURVE",
"90 215 OFFCURVE",
"199 187 CURVE",
"128 118 OFFCURVE",
"93 65 OFFCURVE",
"93 26 CURVE SMOOTH",
"93 -6 OFFCURVE",
"124 -37 OFFCURVE",
"185 -66 CURVE",
"-3 -126 OFFCURVE",
"-157 -230 OFFCURVE",
"-157 -352 CURVE SMOOTH",
"-157 -474 OFFCURVE",
"-12 -559 OFFCURVE",
"184 -559 CURVE SMOOTH",
"905 -559 OFFCURVE",
"749 -235 OFFCURVE",
"331 -10 CURVE SMOOTH",
"249 34 OFFCURVE",
"208 72 OFFCURVE",
"208 105 CURVE SMOOTH",
"208 137 OFFCURVE",
"229 164 OFFCURVE",
"270 185 CURVE SMOOTH",
"278 189 OFFCURVE",
"291 194 OFFCURVE",
"308 199 CURVE SMOOTH",
"467 248 OFFCURVE",
"562 347 OFFCURVE",
"619 464 CURVE SMOOTH",
"669 569 OFFCURVE",
"674 687 OFFCURVE",
"633 756 CURVE",
"703 737 OFFCURVE",
"768 727 OFFCURVE",
"827 727 CURVE SMOOTH",
"842 727 OFFCURVE",
"850 747 OFFCURVE",
"850 786 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"547 527 OFFCURVE",
"384 248 OFFCURVE",
"232 248 CURVE SMOOTH",
"179 248 OFFCURVE",
"153 272 OFFCURVE",
"153 321 CURVE SMOOTH",
"153 518 OFFCURVE",
"325 791 OFFCURVE",
"468 791 CURVE SMOOTH",
"521 791 OFFCURVE",
"547 767 OFFCURVE",
"547 720 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"545 -436 OFFCURVE",
"405 -490 OFFCURVE",
"277 -490 CURVE SMOOTH",
"148 -490 OFFCURVE",
"-14 -431 OFFCURVE",
"-14 -328 CURVE SMOOTH",
"-14 -224 OFFCURVE",
"135 -115 OFFCURVE",
"231 -115 CURVE SMOOTH",
"327 -115 OFFCURVE",
"545 -268 OFFCURVE",
"545 -352 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"597 -559 OFFCURVE",
"722 -474 OFFCURVE",
"722 -370 CURVE SMOOTH",
"722 -259 OFFCURVE",
"571 -126 OFFCURVE",
"346 -10 CURVE SMOOTH",
"216 57 OFFCURVE",
"208 91 OFFCURVE",
"208 111 CURVE SMOOTH",
"208 142 OFFCURVE",
"231 179 OFFCURVE",
"296 211 CURVE",
"223 211 LINE",
"152 145 OFFCURVE",
"110 72 OFFCURVE",
"110 32 CURVE SMOOTH",
"110 13 OFFCURVE",
"127 -37 OFFCURVE",
"224 -76 CURVE SMOOTH",
"527 -198 OFFCURVE",
"598 -320 OFFCURVE",
"598 -358 CURVE SMOOTH",
"598 -439 OFFCURVE",
"478 -498 OFFCURVE",
"334 -498 CURVE SMOOTH",
"180 -498 OFFCURVE",
"18 -427 OFFCURVE",
"18 -317 CURVE SMOOTH",
"18 -217 OFFCURVE",
"153 -123 OFFCURVE",
"292 -90 CURVE",
"252 -48 LINE",
"41 -106 OFFCURVE",
"-103 -221 OFFCURVE",
"-103 -339 CURVE SMOOTH",
"-103 -468 OFFCURVE",
"43 -559 OFFCURVE",
"297 -559 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"146 245 OFFCURVE",
"135 298 OFFCURVE",
"135 358 CURVE SMOOTH",
"135 558 OFFCURVE",
"269 791 OFFCURVE",
"413 791 CURVE SMOOTH",
"490 791 OFFCURVE",
"504 741 OFFCURVE",
"504 683 CURVE SMOOTH",
"504 493 OFFCURVE",
"368 245 OFFCURVE",
"224 245 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"412 184 OFFCURVE",
"619 414 OFFCURVE",
"619 616 CURVE SMOOTH",
"619 670 OFFCURVE",
"605 719 OFFCURVE",
"581 756 CURVE",
"652 737 OFFCURVE",
"724 727 OFFCURVE",
"783 727 CURVE",
"776 813 LINE",
"726 810 OFFCURVE",
"686 808 OFFCURVE",
"655 808 CURVE SMOOTH",
"592 808 OFFCURVE",
"563 815 OFFCURVE",
"526 830 CURVE SMOOTH",
"497 842 OFFCURVE",
"461 852 OFFCURVE",
"419 852 CURVE SMOOTH",
"209 852 OFFCURVE",
"16 647 OFFCURVE",
"16 433 CURVE SMOOTH",
"16 367 OFFCURVE",
"51 184 OFFCURVE",
"225 184 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
4 0 2 0 4 28 24 2 6 5 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 5 0 6 7 5 6 105 0 4 4 2 97 0 2 2 95 77 0 0 0 3 97 0 3 3 95 77 0 7 7 1 97 0 1 1 97 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 3 0 0 5 3 0 105 0 5 0 6 7 5 6 105 0 4 4 2 97 0 2 2 95 77 0 7 7 1 97 0 1 1 97 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
19 20 35 35 35 43 47 33 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 753;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"973 793 OFFCURVE",
"955 813 OFFCURVE",
"920 813 CURVE SMOOTH",
"906 813 OFFCURVE",
"883 810 OFFCURVE",
"852 803 CURVE SMOOTH",
"820 796 OFFCURVE",
"798 793 OFFCURVE",
"786 793 CURVE SMOOTH",
"763 794 OFFCURVE",
"730 804 OFFCURVE",
"686 823 CURVE SMOOTH",
"644 842 OFFCURVE",
"608 852 OFFCURVE",
"578 852 CURVE SMOOTH",
"313 852 OFFCURVE",
"86 662 OFFCURVE",
"86 429 CURVE",
"135 645 OFFCURVE",
"86 546 OFFCURVE",
"86 429 CURVE SMOOTH",
"86 312 OFFCURVE",
"155 235 OFFCURVE",
"293 197 CURVE",
"193 133 OFFCURVE",
"143 78 OFFCURVE",
"143 33 CURVE SMOOTH",
"144 -7 OFFCURVE",
"175 -43 OFFCURVE",
"238 -76 CURVE",
"95 -123 OFFCURVE",
"-106 -208 OFFCURVE",
"-106 -328 CURVE SMOOTH",
"-106 -448 OFFCURVE",
"35 -559 OFFCURVE",
"270 -559 CURVE SMOOTH",
"549 -559 OFFCURVE",
"805 -449 OFFCURVE",
"805 -301 CURVE SMOOTH",
"805 -153 OFFCURVE",
"630 -61 OFFCURVE",
"479 4 CURVE SMOOTH",
"381 48 OFFCURVE",
"332 83 OFFCURVE",
"332 108 CURVE SMOOTH",
"332 133 OFFCURVE",
"349 156 OFFCURVE",
"383 178 CURVE",
"384 180 OFFCURVE",
"404 185 OFFCURVE",
"442 193 CURVE SMOOTH",
"582 220 OFFCURVE",
"688 311 OFFCURVE",
"743 434 CURVE SMOOTH",
"790 540 OFFCURVE",
"793 644 OFFCURVE",
"770 705 CURVE",
"839 678 OFFCURVE",
"886 664 OFFCURVE",
"909 664 CURVE SMOOTH",
"952 664 OFFCURVE",
"973 694 OFFCURVE",
"973 754 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"606 535 OFFCURVE",
"447 279 OFFCURVE",
"319 279 CURVE SMOOTH",
"285 278 OFFCURVE",
"268 292 OFFCURVE",
"268 319 CURVE SMOOTH",
"268 500 OFFCURVE",
"442 756 OFFCURVE",
"565 756 CURVE SMOOTH",
"592 756 OFFCURVE",
"606 742 OFFCURVE",
"606 715 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"596 -415 OFFCURVE",
"518 -451 OFFCURVE",
"393 -451 CURVE SMOOTH",
"268 -451 OFFCURVE",
"111 -398 OFFCURVE",
"111 -308 CURVE SMOOTH",
"111 -218 OFFCURVE",
"251 -129 OFFCURVE",
"319 -129 CURVE SMOOTH",
"386 -129 OFFCURVE",
"596 -259 OFFCURVE",
"596 -324 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"580 -559 OFFCURVE",
"820 -454 OFFCURVE",
"820 -311 CURVE SMOOTH",
"820 -227 OFFCURVE",
"770 -123 OFFCURVE",
"467 4 CURVE SMOOTH",
"362 48 OFFCURVE",
"311 86 OFFCURVE",
"311 111 CURVE SMOOTH",
"311 136 OFFCURVE",
"335 179 OFFCURVE",
"393 213 CURVE",
"315 234 LINE",
"184 159 OFFCURVE",
"129 83 OFFCURVE",
"129 38 CURVE SMOOTH",
"129 -2 OFFCURVE",
"174 -62 OFFCURVE",
"271 -96 CURVE SMOOTH",
"400 -141 OFFCURVE",
"614 -242 OFFCURVE",
"614 -337 CURVE SMOOTH",
"614 -418 OFFCURVE",
"540 -451 OFFCURVE",
"421 -451 CURVE SMOOTH",
"207 -451 OFFCURVE",
"127 -351 OFFCURVE",
"127 -299 CURVE SMOOTH",
"127 -213 OFFCURVE",
"243 -137 OFFCURVE",
"366 -89 CURVE",
"292 -56 LINE",
"121 -102 OFFCURVE",
"-88 -203 OFFCURVE",
"-88 -319 CURVE SMOOTH",
"-88 -345 OFFCURVE",
"-51 -559 OFFCURVE",
"308 -559 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"238 279 OFFCURVE",
"228 306 OFFCURVE",
"228 346 CURVE SMOOTH",
"228 524 OFFCURVE",
"371 756 OFFCURVE",
"488 756 CURVE SMOOTH",
"525 756 OFFCURVE",
"533 721 OFFCURVE",
"533 685 CURVE SMOOTH",
"533 508 OFFCURVE",
"404 279 OFFCURVE",
"283 279 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"552 185 OFFCURVE",
"721 348 OFFCURVE",
"721 575 CURVE SMOOTH",
"721 608 OFFCURVE",
"717 662 OFFCURVE",
"697 705 CURVE",
"768 678 OFFCURVE",
"863 664 OFFCURVE",
"886 664 CURVE",
"878 813 LINE",
"837 806 OFFCURVE",
"755 793 OFFCURVE",
"705 793 CURVE SMOOTH",
"682 793 OFFCURVE",
"648 802 OFFCURVE",
"603 823 CURVE SMOOTH",
"559 843 OFFCURVE",
"522 852 OFFCURVE",
"472 852 CURVE SMOOTH",
"246 852 OFFCURVE",
"36 685 OFFCURVE",
"36 461 CURVE SMOOTH",
"36 384 OFFCURVE",
"90 185 OFFCURVE",
"313 185 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
4 1 0 5 28 24 2 7 6 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
4 1 3 0 0 6 3 0 105 0 6 0 7 8 6 7 105 0 5 5 2 97 0 2 2 34 77 0 8 8 1 97 0 1 1 36 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
0 3 4 5 4 3 5 128 0 4 0 0 6 4 0 105 0 6 0 7 8 6 7 105 0 5 5 2 97 0 2 2 34 77 0 8 8 1 97 0 1 1 36 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
19 20 35 34 34 18 43 47 33 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 836;
}
);
leftKerningGroup = g;
note = g;
rightKerningGroup = g;
unicode = 0067;
},
{
glyphname = gdotaccent;
lastChange = "2018-08-17 11:48:23 +0000";
layers = (
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, -105, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 753;
},
{
components = (
{
alignment = -1;
name = g;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 46, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 836;
}
);
leftMetricsKey = "=g";
note = gdotaccent;
rightKerningGroup = g;
rightMetricsKey = "=g";
unicode = 0121;
},
{
glyphname = germandbls;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-137 -380 LINE",
"-35 -380 LINE",
"357 1081 LINE",
"255 1081 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-26 -551 OFFCURVE",
"21 -362 OFFCURVE",
"67 -111 CURVE SMOOTH",
"202 633 LINE SMOOTH",
"262 962 OFFCURVE",
"365 1403 OFFCURVE",
"671 1403 CURVE SMOOTH",
"746 1403 OFFCURVE",
"823 1347 OFFCURVE",
"823 1258 CURVE SMOOTH",
"823 1167 OFFCURVE",
"750 1106 OFFCURVE",
"600 1008 CURVE SMOOTH",
"459 916 OFFCURVE",
"404 799 OFFCURVE",
"404 650 CURVE SMOOTH",
"404 552 OFFCURVE",
"427 479 OFFCURVE",
"517 366 CURVE SMOOTH",
"614 245 OFFCURVE",
"628 200 OFFCURVE",
"628 152 CURVE SMOOTH",
"628 87 OFFCURVE",
"601 55 OFFCURVE",
"552 55 CURVE SMOOTH",
"522 55 OFFCURVE",
"498 78 OFFCURVE",
"476 102 CURVE SMOOTH",
"448 132 OFFCURVE",
"417 162 OFFCURVE",
"366 162 CURVE SMOOTH",
"333 162 OFFCURVE",
"316 141 OFFCURVE",
"316 99 CURVE SMOOTH",
"316 68 OFFCURVE",
"349 -27 OFFCURVE",
"461 -27 CURVE SMOOTH",
"607 -27 OFFCURVE",
"729 73 OFFCURVE",
"729 204 CURVE SMOOTH",
"729 239 OFFCURVE",
"717 332 OFFCURVE",
"621 456 CURVE SMOOTH",
"537 565 OFFCURVE",
"510 640 OFFCURVE",
"510 726 CURVE SMOOTH",
"510 832 OFFCURVE",
"549 909 OFFCURVE",
"627 958 CURVE SMOOTH",
"848 1096 LINE SMOOTH",
"917 1139 OFFCURVE",
"945 1195 OFFCURVE",
"945 1263 CURVE SMOOTH",
"945 1311 OFFCURVE",
"909 1464 OFFCURVE",
"712 1464 CURVE SMOOTH",
"306 1464 OFFCURVE",
"184 1095 OFFCURVE",
"100 633 CURVE SMOOTH",
"-69 -297 LINE SMOOTH",
"-83 -373 OFFCURVE",
"-131 -476 OFFCURVE",
"-188 -476 CURVE SMOOTH",
"-214 -476 OFFCURVE",
"-238 -460 OFFCURVE",
"-257 -431 CURVE SMOOTH",
"-277 -401 OFFCURVE",
"-307 -386 OFFCURVE",
"-348 -386 CURVE SMOOTH",
"-385 -386 OFFCURVE",
"-404 -410 OFFCURVE",
"-404 -440 CURVE SMOOTH",
"-404 -487 OFFCURVE",
"-355 -551 OFFCURVE",
"-246 -551 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 2 1 114 0 5 0 6 6 5 114 0 3 3 7 97 0 7 7 94 77 0 2 2 0 98 0 0 0 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 6 5 114 0 3 3 7 97 0 7 7 94 77 0 2 2 0 98 0 0 0 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 3 3 7 97 0 7 7 94 77 0 2 2 0 98 0 0 0 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 7 0 3 1 7 3 105 0 2 2 0 98 0 0 0 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 7 0 3 1 7 3 105 0 6 0 4 6 4 102 0 2 2 0 98 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
39 33 35 40 43 34 35 34 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 806;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-97 -230 LINE",
"97 -230 LINE",
"479 1193 LINE",
"285 1193 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"59 -551 OFFCURVE",
"136 -343 OFFCURVE",
"181 -96 CURVE SMOOTH",
"310 616 LINE SMOOTH",
"377 988 OFFCURVE",
"465 1382 OFFCURVE",
"725 1382 CURVE SMOOTH",
"831 1382 OFFCURVE",
"846 1275 OFFCURVE",
"846 1246 CURVE SMOOTH",
"846 1181 OFFCURVE",
"799 1111 OFFCURVE",
"703 1038 CURVE SMOOTH",
"553 924 OFFCURVE",
"450 831 OFFCURVE",
"450 646 CURVE SMOOTH",
"450 537 OFFCURVE",
"488 494 OFFCURVE",
"581 388 CURVE SMOOTH",
"688 266 OFFCURVE",
"722 193 OFFCURVE",
"722 147 CURVE SMOOTH",
"722 113 OFFCURVE",
"707 96 OFFCURVE",
"678 96 CURVE SMOOTH",
"623 96 OFFCURVE",
"607 110 OFFCURVE",
"573 145 CURVE SMOOTH",
"535 185 OFFCURVE",
"501 215 OFFCURVE",
"442 215 CURVE SMOOTH",
"382 215 OFFCURVE",
"359 167 OFFCURVE",
"359 121 CURVE SMOOTH",
"359 88 OFFCURVE",
"402 -27 OFFCURVE",
"545 -27 CURVE SMOOTH",
"710 -27 OFFCURVE",
"849 79 OFFCURVE",
"849 228 CURVE SMOOTH",
"849 285 OFFCURVE",
"846 336 OFFCURVE",
"721 483 CURVE SMOOTH",
"631 588 OFFCURVE",
"589 640 OFFCURVE",
"589 711 CURVE SMOOTH",
"589 803 OFFCURVE",
"649 899 OFFCURVE",
"780 985 CURVE SMOOTH",
"944 1093 LINE SMOOTH",
"1019 1143 OFFCURVE",
"1066 1181 OFFCURVE",
"1066 1260 CURVE SMOOTH",
"1066 1390 OFFCURVE",
"953 1464 OFFCURVE",
"800 1464 CURVE SMOOTH",
"364 1464 OFFCURVE",
"206 1111 OFFCURVE",
"119 631 CURVE SMOOTH",
"-40 -250 LINE SMOOTH",
"-57 -344 OFFCURVE",
"-76 -446 OFFCURVE",
"-131 -446 CURVE SMOOTH",
"-152 -446 OFFCURVE",
"-176 -423 OFFCURVE",
"-203 -375 CURVE SMOOTH",
"-224 -338 OFFCURVE",
"-255 -319 OFFCURVE",
"-294 -319 CURVE SMOOTH",
"-338 -319 OFFCURVE",
"-377 -359 OFFCURVE",
"-377 -413 CURVE SMOOTH",
"-377 -441 OFFCURVE",
"-344 -551 OFFCURVE",
"-175 -551 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 2 1 114 0 5 0 6 6 5 114 0 3 3 7 97 0 7 7 33 77 0 2 2 0 98 0 0 0 32 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 3 3 7 97 0 7 7 33 77 0 2 2 0 98 0 0 0 32 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 7 0 3 1 7 3 105 0 2 2 0 98 0 0 0 32 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 1 3 2 3 1 2 128 0 5 0 6 0 5 6 128 0 7 0 3 1 7 3 105 0 6 0 4 6 4 102 0 2 2 0 98 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 19 values pushed */
83 81 73 71 69 67 64 62 52 50 34 32 25 23 19 17 8 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 903;
}
);
note = germandbls;
unicode = 00DF;
},
{
glyphname = grave;
lastChange = "2018-08-14 11:37:20 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"322 1389 LINE SMOOTH",
"305.749 1426.146 OFFCURVE",
"207 1383.952 OFFCURVE",
"207 1343 CURVE SMOOTH",
"207 1339 OFFCURVE",
"207.667 1336.333 OFFCURVE",
"209 1335 CURVE",
"395 1034 LINE SMOOTH",
"406.333 1016 OFFCURVE",
"420 1007 OFFCURVE",
"436 1007 CURVE SMOOTH",
"460 1007 OFFCURVE",
"472 1019.333 OFFCURVE",
"472 1044 CURVE SMOOTH",
"472 1049.333 OFFCURVE",
"470.333 1056 OFFCURVE",
"467 1064 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"561 1022 LINE",
"236 1402 LINE",
"155 1336 LINE",
"508 987 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 20 values pushed */
2 1 0 1 1 76 0 1 0 1 133 0 0 0 118 22 35 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 569;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"397 946 LINE",
"417 930 OFFCURVE",
"440 930 QCURVE",
"463 927 OFFCURVE",
"471 950 QCURVE",
"479 970 OFFCURVE",
"459 1001 QCURVE SMOOTH",
"250 1315 LINE SMOOTH",
"238 1333 OFFCURVE",
"213 1333 QCURVE SMOOTH",
"168 1333 OFFCURVE",
"86 1248 OFFCURVE",
"117 1219 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"712 1023 LINE",
"448 1414 LINE",
"323 1318 LINE",
"645 975 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 14 values pushed */
0 0 1 0 133 0 1 1 118 22 34 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 915;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = gravecomb;
lastChange = "2018-08-17 12:45:16 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{78, 856}";
},
{
name = top;
position = "{175, 1402}";
}
);
components = (
{
name = grave;
transform = "{1, 0, 0, 1, -260, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 20 values pushed */
2 1 0 1 1 76 0 1 0 1 133 0 0 0 118 22 35 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{82, 856}";
},
{
name = top;
position = "{180, 1414}";
}
);
components = (
{
name = grave;
transform = "{1, 0, 0, 1, -376, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = gravecomb;
unicode = 0300;
},
{
glyphname = greater;
lastChange = "2018-08-16 15:03:51 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"909 467 LINE",
"113 846 LINE",
"113 727 LINE",
"762 424 LINE",
"762 420 LINE",
"113 115 LINE",
"113 -2 LINE",
"909 375 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"909 375 LINE",
"909 467 LINE",
"113 846 LINE",
"113 727 LINE",
"796 408 LINE",
"796 436 LINE",
"113 115 LINE",
"113 -2 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
6 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"946 356 LINE",
"946 485 LINE",
"76 866 LINE",
"76 682 LINE",
"721 404 LINE",
"721 440 LINE",
"76 162 LINE",
"76 -23 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
5 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = guillemotleft;
lastChange = "2018-08-18 02:27:14 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"243 373 LINE SMOOTH",
"238 384 OFFCURVE",
"236 398 OFFCURVE",
"236 415 CURVE SMOOTH",
"236 432 OFFCURVE",
"244 449 OFFCURVE",
"261 466 CURVE SMOOTH",
"537 760 LINE",
"540 762 OFFCURVE",
"541 765 OFFCURVE",
"541 769 CURVE SMOOTH",
"541 785 OFFCURVE",
"533 793 OFFCURVE",
"518 793 CURVE",
"515 794 OFFCURVE",
"512 793 OFFCURVE",
"509 790 CURVE",
"126 478 LINE SMOOTH",
"98 455 OFFCURVE",
"84 435 OFFCURVE",
"84 418 CURVE SMOOTH",
"84 400 OFFCURVE",
"88 385 OFFCURVE",
"97 372 CURVE SMOOTH",
"313 60 LINE",
"324 49 OFFCURVE",
"367 77 OFFCURVE",
"360 94 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"594 373 LINE SMOOTH",
"589 384 OFFCURVE",
"587 398 OFFCURVE",
"587 415 CURVE SMOOTH",
"587 432 OFFCURVE",
"595 449 OFFCURVE",
"612 466 CURVE SMOOTH",
"889 760 LINE SMOOTH",
"891 762 OFFCURVE",
"892 765 OFFCURVE",
"892 769 CURVE SMOOTH",
"892 785 OFFCURVE",
"884 793 OFFCURVE",
"869 793 CURVE",
"866 794 OFFCURVE",
"863 793 OFFCURVE",
"860 790 CURVE",
"477 478 LINE SMOOTH",
"449 455 OFFCURVE",
"435 435 OFFCURVE",
"435 418 CURVE SMOOTH",
"435 400 OFFCURVE",
"439 385 OFFCURVE",
"448 372 CURVE SMOOTH",
"664 60 LINE",
"676 48 OFFCURVE",
"718 76 OFFCURVE",
"711 94 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"710 94 LINE",
"550 476 LINE",
"508 356 LINE",
"887 760 LINE",
"859 790 LINE",
"434 444 LINE",
"434 391 LINE",
"663 60 LINE"
);
},
{
closed = 1;
nodes = (
"360 94 LINE",
"200 476 LINE",
"158 356 LINE",
"537 760 LINE",
"509 790 LINE",
"84 444 LINE",
"84 391 LINE",
"313 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
30 22 10 2 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 868;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"321 19 OFFCURVE",
"370 50 OFFCURVE",
"367 66 CURVE SMOOTH",
"299 399 LINE",
"294 418 OFFCURVE",
"300 438 OFFCURVE",
"315 459 CURVE SMOOTH",
"559 786 LINE",
"564 794 OFFCURVE",
"562 803 OFFCURVE",
"551 813 CURVE",
"538 822 OFFCURVE",
"529 824 OFFCURVE",
"522 817 CURVE",
"117 465 LINE SMOOTH",
"88 440 OFFCURVE",
"81 416 OFFCURVE",
"96 391 CURVE SMOOTH",
"313 35 LINE"
);
},
{
closed = 1;
nodes = (
"686 22 OFFCURVE",
"734 50 OFFCURVE",
"731 66 CURVE SMOOTH",
"664 399 LINE",
"659 418 OFFCURVE",
"665 438 OFFCURVE",
"680 459 CURVE SMOOTH",
"924 786 LINE",
"929 794 OFFCURVE",
"926 803 OFFCURVE",
"913 813 CURVE SMOOTH",
"902 822 OFFCURVE",
"894 824 OFFCURVE",
"887 817 CURVE",
"481 465 LINE SMOOTH",
"452 440 OFFCURVE",
"446 416 OFFCURVE",
"461 391 CURVE SMOOTH",
"678 35 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"727 66 LINE",
"640 499 LINE",
"607 366 LINE",
"920 786 LINE",
"883 817 LINE",
"457 447 LINE",
"457 391 LINE",
"674 35 LINE"
);
},
{
closed = 1;
nodes = (
"354 66 LINE",
"267 499 LINE",
"234 366 LINE",
"547 786 LINE",
"510 817 LINE",
"84 447 LINE",
"84 391 LINE",
"301 35 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
27 21 12 6 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 897;
}
);
leftMetricsKey = guilsinglleft;
note = guillemotleft;
rightKerningGroup = guillemotleft;
rightMetricsKey = guilsinglleft;
unicode = 00AB;
},
{
glyphname = guillemotright;
lastChange = "2018-08-16 15:58:22 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"682 477 LINE SMOOTH",
"686.667 466.333 OFFCURVE",
"689 452.667 OFFCURVE",
"689 436 CURVE SMOOTH",
"689 418.667 OFFCURVE",
"680.667 401.333 OFFCURVE",
"664 384 CURVE SMOOTH",
"387 90 LINE SMOOTH",
"385 88 OFFCURVE",
"384 85 OFFCURVE",
"384 81 CURVE",
"383.333 65 OFFCURVE",
"390.667 57 OFFCURVE",
"406 57 CURVE",
"410 56.333 OFFCURVE",
"413.333 57.333 OFFCURVE",
"416 60 CURVE",
"799 372 LINE SMOOTH",
"827 394.667 OFFCURVE",
"841 414.667 OFFCURVE",
"841 432 CURVE SMOOTH",
"841 450 OFFCURVE",
"836.667 465.333 OFFCURVE",
"828 478 CURVE SMOOTH",
"612 790 LINE",
"610 792 OFFCURVE",
"606 793 OFFCURVE",
"600 793 CURVE SMOOTH",
"594 793 OFFCURVE",
"586 788.667 OFFCURVE",
"576 780 CURVE",
"566 770.667 OFFCURVE",
"562.333 762.667 OFFCURVE",
"565 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"331 477 LINE SMOOTH",
"335.667 466.333 OFFCURVE",
"338 452.667 OFFCURVE",
"338 436 CURVE SMOOTH",
"338 418.667 OFFCURVE",
"329.667 401.333 OFFCURVE",
"313 384 CURVE SMOOTH",
"36 90 LINE",
"33.333 88 OFFCURVE",
"32 85 OFFCURVE",
"32 81 CURVE SMOOTH",
"32 65 OFFCURVE",
"39.667 57 OFFCURVE",
"55 57 CURVE",
"59 56.333 OFFCURVE",
"62.333 57.333 OFFCURVE",
"65 60 CURVE",
"448 372 LINE SMOOTH",
"476 394.667 OFFCURVE",
"490 414.667 OFFCURVE",
"490 432 CURVE SMOOTH",
"490 450 OFFCURVE",
"485.333 465.333 OFFCURVE",
"476 478 CURVE SMOOTH",
"260 790 LINE SMOOTH",
"258.667 792 OFFCURVE",
"255 793 OFFCURVE",
"249 793 CURVE SMOOTH",
"243 793 OFFCURVE",
"235 788.667 OFFCURVE",
"225 780 CURVE",
"215 770.667 OFFCURVE",
"211.333 762.667 OFFCURVE",
"214 756 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"817 406 LINE",
"817 460 LINE",
"588 790 LINE",
"541 756 LINE",
"701 376 LINE",
"723 472 LINE",
"363 90 LINE",
"392 60 LINE"
);
},
{
closed = 1;
nodes = (
"467 406 LINE",
"467 460 LINE",
"238 790 LINE",
"191 756 LINE",
"351 376 LINE",
"373 472 LINE",
"13 90 LINE",
"42 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
37 27 13 3 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 903;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"576 817 LINE SMOOTH",
"568 830 OFFCURVE",
"520 802 OFFCURVE",
"523 786 CURVE",
"590 459 LINE SMOOTH",
"595 438 OFFCURVE",
"589 418 OFFCURVE",
"574 399 CURVE SMOOTH",
"328 66 LINE SMOOTH",
"321 57 OFFCURVE",
"323 48 OFFCURVE",
"334 39 CURVE SMOOTH",
"347 28 OFFCURVE",
"357 27 OFFCURVE",
"365 35 CURVE",
"772 391 LINE SMOOTH",
"801 416 OFFCURVE",
"808 440 OFFCURVE",
"793 465 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"211 817 LINE SMOOTH",
"203 830 OFFCURVE",
"155 802 OFFCURVE",
"158 786 CURVE",
"226 459 LINE SMOOTH",
"230 438 OFFCURVE",
"224 418 OFFCURVE",
"209 399 CURVE SMOOTH",
"-37 66 LINE SMOOTH",
"-43 57 OFFCURVE",
"-40 48 OFFCURVE",
"-28 39 CURVE",
"-17 28 OFFCURVE",
"-8 27 OFFCURVE",
"0 35 CURVE",
"408 391 LINE SMOOTH",
"437 416 OFFCURVE",
"443 440 OFFCURVE",
"428 465 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"843 409 LINE",
"843 442 LINE",
"616 815 LINE",
"563 784 LINE",
"656 329 LINE",
"687 489 LINE",
"371 63 LINE",
"407 33 LINE"
);
},
{
closed = 1;
nodes = (
"481 409 LINE",
"481 442 LINE",
"254 815 LINE",
"201 784 LINE",
"294 329 LINE",
"325 489 LINE",
"9 63 LINE",
"45 33 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
28 19 13 4 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 928;
}
);
leftMetricsKey = guilsinglright;
note = guillemotright;
rightMetricsKey = guilsinglright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
lastChange = "2018-08-18 02:27:24 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"243 373 LINE",
"261 466 LINE",
"537 760 LINE",
"509 790 LINE",
"126 478 LINE SMOOTH",
"98 455 OFFCURVE",
"84 435 OFFCURVE",
"84 418 CURVE SMOOTH",
"84 400 OFFCURVE",
"88 385 OFFCURVE",
"97 372 CURVE SMOOTH",
"313 60 LINE",
"360 94 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"360 94 LINE",
"200 476 LINE",
"158 356 LINE",
"537 760 LINE",
"509 790 LINE",
"84 444 LINE",
"84 391 LINE",
"313 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
10 2 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 518;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"301 35 LINE",
"308.253 20.494 OFFCURVE",
"357.735 47.326 OFFCURVE",
"354 66 CURVE SMOOTH",
"287 399 LINE SMOOTH",
"285.667 406.333 OFFCURVE",
"285 414 OFFCURVE",
"285 422 CURVE SMOOTH",
"285 430 OFFCURVE",
"291 442.333 OFFCURVE",
"303 459 CURVE SMOOTH",
"547 786 LINE",
"548.333 788 OFFCURVE",
"549 791 OFFCURVE",
"549 795 CURVE SMOOTH",
"549 811 OFFCURVE",
"538.667 819 OFFCURVE",
"518 819 CURVE SMOOTH",
"514 819 OFFCURVE",
"511.333 818.333 OFFCURVE",
"510 817 CURVE",
"104 465 LINE SMOOTH",
"85.333 448.333 OFFCURVE",
"76 434.167 OFFCURVE",
"76 422.5 CURVE SMOOTH",
"76 410.833 OFFCURVE",
"78.667 400.333 OFFCURVE",
"84 391 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"354 66 LINE",
"267 499 LINE",
"234 366 LINE",
"547 786 LINE",
"510 817 LINE",
"84 447 LINE",
"84 391 LINE",
"301 35 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
15 8 2 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 134 0 0 0 34 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 52 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 524;
}
);
note = guilsinglleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
lastChange = "2018-08-16 15:56:12 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"308 477 LINE SMOOTH",
"313 466 OFFCURVE",
"315 453 OFFCURVE",
"315 436 CURVE SMOOTH",
"315 419 OFFCURVE",
"307 401 OFFCURVE",
"290 384 CURVE SMOOTH",
"13 90 LINE",
"42 60 LINE",
"425 372 LINE SMOOTH",
"453 395 OFFCURVE",
"467 415 OFFCURVE",
"467 433 CURVE SMOOTH",
"467 450 OFFCURVE",
"463 465 OFFCURVE",
"454 478 CURVE SMOOTH",
"238 790 LINE",
"191 756 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"467 406 LINE",
"467 460 LINE",
"238 790 LINE",
"191 756 LINE",
"351 376 LINE",
"373 472 LINE",
"13 90 LINE",
"42 60 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
10 2 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 553;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"45 33 LINE",
"453 385 LINE SMOOTH",
"492 418 OFFCURVE",
"482 440 OFFCURVE",
"471 459 CURVE SMOOTH",
"254 815 LINE",
"201 784 LINE",
"269 451 LINE SMOOTH",
"270 444 OFFCURVE",
"271 436 OFFCURVE",
"271 428 CURVE SMOOTH",
"270 420 OFFCURVE",
"264 408 OFFCURVE",
"252 391 CURVE SMOOTH",
"9 63 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"481 409 LINE",
"481 442 LINE",
"254 815 LINE",
"201 784 LINE",
"294 329 LINE",
"325 489 LINE",
"9 63 LINE",
"45 33 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
18 5 2 0 74 0 0 0 118 62 1 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 566;
}
);
note = guilsinglright;
unicode = 203A;
},
{
glyphname = h;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-30 32 LINE",
"72 32 LINE",
"416 1314 LINE",
"314 1314 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"714 852 OFFCURVE",
"560 852 CURVE SMOOTH",
"438 852 OFFCURVE",
"303 753 OFFCURVE",
"148 378 CURVE",
"182 416 LINE",
"372 1466 LINE",
"358 1484 LINE",
"297 1454 OFFCURVE",
"218 1429 OFFCURVE",
"141 1429 CURVE",
"145 1377 LINE",
"203 1377 OFFCURVE",
"230 1346 OFFCURVE",
"230 1282 CURVE SMOOTH",
"230 1261 OFFCURVE",
"228 1234 OFFCURVE",
"222 1201 CURVE SMOOTH",
"6 0 LINE",
"107 0 LINE",
"147 222 LINE SMOOTH",
"167 334 OFFCURVE",
"202 414 OFFCURVE",
"231 461 CURVE SMOOTH",
"351 656 OFFCURVE",
"441 753 OFFCURVE",
"519 753 CURVE SMOOTH",
"604 753 OFFCURVE",
"620 595 OFFCURVE",
"620 512 CURVE SMOOTH",
"620 378 OFFCURVE",
"586 212 OFFCURVE",
"549 130 CURVE SMOOTH",
"528 83 OFFCURVE",
"507 59 OFFCURVE",
"485 59 CURVE SMOOTH",
"474 59 OFFCURVE",
"440 81 OFFCURVE",
"422 113 CURVE SMOOTH",
"408 138 OFFCURVE",
"382 162 OFFCURVE",
"353 162 CURVE SMOOTH",
"320 162 OFFCURVE",
"302 140 OFFCURVE",
"302 86 CURVE SMOOTH",
"302 19 OFFCURVE",
"346 -27 OFFCURVE",
"426 -27 CURVE SMOOTH",
"623 -27 OFFCURVE",
"739 316 OFFCURVE",
"739 560 CURVE SMOOTH",
"739 687 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
42 1 1 3 26 1 0 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 3 2 2 1 114 0 7 7 94 77 0 5 5 6 97 0 6 6 98 77 0 3 3 8 97 0 8 8 95 77 0 2 2 0 98 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 1 3 2 2 1 114 0 6 0 5 8 6 5 105 0 7 7 94 77 0 3 3 8 97 0 8 8 95 77 0 2 2 0 98 4 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 8 6 5 105 0 7 7 94 77 0 3 3 8 97 0 8 8 95 77 0 2 2 0 98 4 1 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 33 34 22 37 36 17 36 34 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 791;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-48 12 LINE",
"146 12 LINE",
"490 1294 LINE",
"296 1294 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"805 852 OFFCURVE",
"627 852 CURVE SMOOTH",
"526 852 OFFCURVE",
"413 784 OFFCURVE",
"277 527 CURVE",
"302 526 LINE",
"468 1448 LINE",
"439 1487 LINE",
"357 1456 OFFCURVE",
"254 1432 OFFCURVE",
"161 1432 CURVE",
"167 1360 LINE",
"214 1360 OFFCURVE",
"237 1328 OFFCURVE",
"237 1267 CURVE SMOOTH",
"237 1252 OFFCURVE",
"235 1235 OFFCURVE",
"232 1217 CURVE SMOOTH",
"13 0 LINE",
"207 0 LINE",
"250 240 LINE SMOOTH",
"273 371 OFFCURVE",
"306 457 OFFCURVE",
"328 496 CURVE SMOOTH",
"414 646 OFFCURVE",
"487 721 OFFCURVE",
"547 721 CURVE SMOOTH",
"650 721 OFFCURVE",
"652 591 OFFCURVE",
"652 494 CURVE SMOOTH",
"652 377 OFFCURVE",
"636 248 OFFCURVE",
"616 167 CURVE SMOOTH",
"603 116 OFFCURVE",
"586 90 OFFCURVE",
"567 90 CURVE SMOOTH",
"552 90 OFFCURVE",
"524 118 OFFCURVE",
"505 147 CURVE SMOOTH",
"486 176 OFFCURVE",
"444 205 OFFCURVE",
"420 205 CURVE SMOOTH",
"367 205 OFFCURVE",
"341 166 OFFCURVE",
"341 110 CURVE SMOOTH",
"341 64 OFFCURVE",
"379 -27 OFFCURVE",
"495 -27 CURVE SMOOTH",
"717 -27 OFFCURVE",
"851 332 OFFCURVE",
"851 564 CURVE SMOOTH",
"851 705 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
42 1 1 3 26 1 0 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 3 2 2 1 114 0 7 7 33 77 0 5 5 6 97 0 6 6 37 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 1 3 2 2 1 114 0 6 0 5 8 6 5 105 0 7 7 33 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 8 6 5 105 0 7 7 33 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 33 33 38 37 36 17 36 34 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 880;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"45 12 LINE",
"239 12 LINE",
"583 1294 LINE",
"389 1294 LINE"
);
}
);
};
layerId = "A80A9A84-5FCE-44DB-BEE9-ED592DF0A93E";
name = "Aug 9 18, 22:37";
paths = (
{
closed = 1;
nodes = (
"932 771 OFFCURVE",
"865 852 OFFCURVE",
"731 852 CURVE SMOOTH",
"630 852 OFFCURVE",
"529 781 OFFCURVE",
"426 639 CURVE",
"410 649 LINE",
"624 1448 LINE",
"598 1487 LINE",
"514 1456 OFFCURVE",
"408 1432 OFFCURVE",
"315 1432 CURVE",
"315 1360 LINE",
"357 1360 OFFCURVE",
"378 1335 OFFCURVE",
"378 1286 CURVE SMOOTH",
"378 1267 OFFCURVE",
"375 1244 OFFCURVE",
"368 1217 CURVE SMOOTH",
"42 0 LINE",
"236 0 LINE",
"300 240 LINE SMOOTH",
"335 371 OFFCURVE",
"375 457 OFFCURVE",
"401 496 CURVE SMOOTH",
"500 646 OFFCURVE",
"579 721 OFFCURVE",
"639 721 CURVE SMOOTH",
"699 721 OFFCURVE",
"729 677 OFFCURVE",
"729 588 CURVE SMOOTH",
"729 453 OFFCURVE",
"695 270 OFFCURVE",
"660 167 CURVE SMOOTH",
"642 116 OFFCURVE",
"623 90 OFFCURVE",
"604 90 CURVE SMOOTH",
"585 90 OFFCURVE",
"542 128 OFFCURVE",
"477 205 CURVE",
"414 205 OFFCURVE",
"379 157 OFFCURVE",
"379 92 CURVE SMOOTH",
"379 29 OFFCURVE",
"443 -27 OFFCURVE",
"522 -27 CURVE SMOOTH",
"759 -27 OFFCURVE",
"932 383 OFFCURVE",
"932 610 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
42 1 1 3 26 1 0 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 3 2 2 1 114 0 7 7 33 77 0 5 5 6 97 0 6 6 37 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
0 1 3 2 2 1 114 0 6 0 5 8 6 5 105 0 7 7 33 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 8 6 5 105 0 7 7 33 77 0 3 3 8 97 0 8 8 34 77 0 2 2 0 98 4 1 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 33 33 38 37 36 17 36 34 9 8 31 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 940;
}
);
leftKerningGroup = h;
note = h;
unicode = 0068;
},
{
glyphname = hyphen;
lastChange = "2018-08-16 15:07:18 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"745 487 LINE",
"778 602 LINE",
"205 602 LINE",
"172 487 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 6 4 0 9 1 9 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 827;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"780 479 LINE",
"815 610 LINE",
"205 610 LINE",
"172 479 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
9 2 2 0 1 1 76 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 13 0 12 53 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 862;
}
);
leftKerningGroup = hyphen;
note = hyphen;
unicode = 002D;
},
{
glyphname = hyphen.cap;
lastChange = "2018-08-16 15:08:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"745 577 LINE",
"778 692 LINE",
"205 692 LINE",
"172 577 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 6 4 0 9 1 9 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 827;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"745 577 LINE",
"778 708 LINE",
"205 708 LINE",
"172 577 LINE"
);
}
);
width = 827;
}
);
note = hyphen.cap;
},
{
glyphname = i;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"332 1089 OFFCURVE",
"361 1049 OFFCURVE",
"411 1049 CURVE SMOOTH",
"461 1049 OFFCURVE",
"512 1089 OFFCURVE",
"525 1139 CURVE SMOOTH",
"538 1189 OFFCURVE",
"509 1229 OFFCURVE",
"459 1229 CURVE SMOOTH",
"409 1229 OFFCURVE",
"358 1189 OFFCURVE",
"345 1139 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"356 1049 OFFCURVE",
"408 1098 OFFCURVE",
"408 1154 CURVE SMOOTH",
"408 1197 OFFCURVE",
"378 1229 OFFCURVE",
"333 1229 CURVE SMOOTH",
"278 1229 OFFCURVE",
"226 1180 OFFCURVE",
"226 1124 CURVE SMOOTH",
"226 1081 OFFCURVE",
"256 1049 OFFCURVE",
"301 1049 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"254 -27 OFFCURVE",
"398 111 OFFCURVE",
"421 158 CURVE",
"379 195 LINE",
"315 133 OFFCURVE",
"275 102 OFFCURVE",
"256 102 CURVE SMOOTH",
"218 102 OFFCURVE",
"220 151 OFFCURVE",
"229 203 CURVE SMOOTH",
"317 690 LINE SMOOTH",
"321 713 OFFCURVE",
"327 748 OFFCURVE",
"327 776 CURVE SMOOTH",
"327 818 OFFCURVE",
"313 852 OFFCURVE",
"272 852 CURVE SMOOTH",
"195 852 OFFCURVE",
"79 742 OFFCURVE",
"25 663 CURVE",
"67 623 LINE",
"124 682 OFFCURVE",
"160 711 OFFCURVE",
"177 711 CURVE SMOOTH",
"202 711 OFFCURVE",
"212 669 OFFCURVE",
"204 625 CURVE SMOOTH",
"116 137 LINE SMOOTH",
"112 115 OFFCURVE",
"109 90 OFFCURVE",
"109 67 CURVE SMOOTH",
"109 17 OFFCURVE",
"124 -27 OFFCURVE",
"159 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 50 values pushed */
24 5 2 0 2 1 76 0 2 3 0 3 2 0 128 0 0 1 3 0 1 126 0 5 0 4 3 5 4 105 0 3 3 95 77 0 1 1 93 1 78 35 38 41 23 41 19 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 470;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"431 1010 OFFCURVE",
"509 1087 OFFCURVE",
"509 1184 CURVE SMOOTH",
"509 1255 OFFCURVE",
"471 1290 OFFCURVE",
"393 1290 CURVE SMOOTH",
"303 1290 OFFCURVE",
"222 1213 OFFCURVE",
"222 1116 CURVE SMOOTH",
"222 1045 OFFCURVE",
"262 1010 OFFCURVE",
"341 1010 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"285 -27 OFFCURVE",
"399 67 OFFCURVE",
"473 174 CURVE",
"413 221 LINE",
"376 168 OFFCURVE",
"349 142 OFFCURVE",
"332 142 CURVE SMOOTH",
"305 142 OFFCURVE",
"301 153 OFFCURVE",
"307 180 CURVE SMOOTH",
"412 662 LINE SMOOTH",
"416 681 OFFCURVE",
"420 710 OFFCURVE",
"420 739 CURVE SMOOTH",
"420 814 OFFCURVE",
"374 852 OFFCURVE",
"303 852 CURVE SMOOTH",
"230 852 OFFCURVE",
"119 759 OFFCURVE",
"44 655 CURVE",
"102 606 LINE",
"149 661 OFFCURVE",
"179 688 OFFCURVE",
"192 688 CURVE SMOOTH",
"212 688 OFFCURVE",
"215 670 OFFCURVE",
"210 647 CURVE SMOOTH",
"105 168 LINE SMOOTH",
"102 155 OFFCURVE",
"101 140 OFFCURVE",
"101 122 CURVE SMOOTH",
"101 34 OFFCURVE",
"125 -27 OFFCURVE",
"212 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 43 values pushed */
21 11 2 3 0 1 1 76 0 1 2 0 2 1 0 128 0 4 0 3 2 4 3 105 0 2 2 34 77 0 0 0 32 0 78 35 38 41 23 45 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 499;
}
);
note = i;
unicode = 0069;
},
{
glyphname = iacute;
lastChange = "2018-08-17 13:00:04 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 85, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 115, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
widthMetricsKey = "=i";
note = iacute;
unicode = 00ED;
},
{
glyphname = ibreve;
lastChange = "2018-08-17 13:00:04 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 153, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 196, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
leftKerningGroup = ibreve;
widthMetricsKey = "=i";
note = ibreve;
unicode = 012D;
},
{
glyphname = icircumflex;
lastChange = "2018-08-17 12:59:45 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 176, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 231, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
widthMetricsKey = "=i";
note = icircumflex;
unicode = 00EE;
},
{
glyphname = idieresis;
lastChange = "2018-08-17 12:59:45 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 154, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 198, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
leftKerningGroup = ibreve;
widthMetricsKey = "=i";
note = idieresis;
unicode = 00EF;
},
{
glyphname = igrave;
lastChange = "2018-08-17 12:59:45 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 152, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 193, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
leftKerningGroup = ibreve;
widthMetricsKey = "=i";
note = igrave;
unicode = 00EC;
},
{
glyphname = ij;
lastChange = "2018-08-18 11:50:41 +0000";
layers = (
{
components = (
{
alignment = -1;
name = i;
},
{
alignment = -1;
name = j;
transform = "{1, 0, 0, 1, 470, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 830;
},
{
components = (
{
alignment = -1;
name = i;
},
{
alignment = -1;
name = j;
transform = "{1, 0, 0, 1, 499, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 971;
}
);
leftMetricsKey = "=i";
note = ij;
rightMetricsKey = "=j";
unicode = 0133;
},
{
glyphname = imacron;
lastChange = "2018-08-17 12:59:45 +0000";
layers = (
{
components = (
{
name = dotlessi;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 157, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 470;
},
{
components = (
{
name = dotlessi;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 195, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 499;
}
);
leftKerningGroup = ibreve;
widthMetricsKey = "=i";
note = imacron;
unicode = 012B;
},
{
glyphname = j;
lastChange = "2018-08-18 09:46:52 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"14 -431 LINE",
"116 -431 LINE",
"460 851 LINE",
"358 851 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-44 -553 OFFCURVE",
"85 -371 OFFCURVE",
"132 -144 CURVE SMOOTH",
"156 -30 OFFCURVE",
"175 64 OFFCURVE",
"188 139 CURVE SMOOTH",
"283 665 LINE SMOOTH",
"288 693 OFFCURVE",
"292 719 OFFCURVE",
"292 750 CURVE SMOOTH",
"292 806 OFFCURVE",
"280 852 OFFCURVE",
"230 852 CURVE SMOOTH",
"156 852 OFFCURVE",
"91 784 OFFCURVE",
"2 649 CURVE",
"44 610 LINE",
"88 671 OFFCURVE",
"120 702 OFFCURVE",
"141 702 CURVE SMOOTH",
"175 702 OFFCURVE",
"182 664 OFFCURVE",
"174 623 CURVE SMOOTH",
"10 -260 LINE SMOOTH",
"-8 -360 OFFCURVE",
"-64 -477 OFFCURVE",
"-156 -477 CURVE SMOOTH",
"-171 -477 OFFCURVE",
"-188 -470 OFFCURVE",
"-209 -455 CURVE SMOOTH",
"-229 -440 OFFCURVE",
"-248 -433 OFFCURVE",
"-269 -433 CURVE SMOOTH",
"-306 -433 OFFCURVE",
"-337 -449 OFFCURVE",
"-337 -481 CURVE SMOOTH",
"-337 -511 OFFCURVE",
"-313 -553 OFFCURVE",
"-247 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"295 1049 OFFCURVE",
"347 1098 OFFCURVE",
"347 1154 CURVE SMOOTH",
"347 1197 OFFCURVE",
"317 1229 OFFCURVE",
"272 1229 CURVE SMOOTH",
"217 1229 OFFCURVE",
"165 1180 OFFCURVE",
"165 1124 CURVE SMOOTH",
"165 1081 OFFCURVE",
"195 1049 OFFCURVE",
"240 1049 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
52 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 1 3 2 2 1 114 0 6 0 5 4 6 5 105 0 3 3 4 97 0 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 4 6 5 105 0 3 3 4 97 0 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 40 22 33 36 35 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 360;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"83 -553 OFFCURVE",
"214 -349 OFFCURVE",
"265 -150 CURVE SMOOTH",
"291 -50 OFFCURVE",
"307 48 OFFCURVE",
"321 143 CURVE SMOOTH",
"398 666 LINE SMOOTH",
"400 681 OFFCURVE",
"401 696 OFFCURVE",
"401 710 CURVE SMOOTH",
"401 786 OFFCURVE",
"372 852 OFFCURVE",
"298 852 CURVE SMOOTH",
"219 852 OFFCURVE",
"130 785 OFFCURVE",
"31 651 CURVE",
"89 604 LINE",
"129 660 OFFCURVE",
"156 688 OFFCURVE",
"173 688 CURVE SMOOTH",
"197 688 OFFCURVE",
"203 672 OFFCURVE",
"199 647 CURVE SMOOTH",
"67 -229 LINE SMOOTH",
"53 -323 OFFCURVE",
"17 -446 OFFCURVE",
"-45 -446 CURVE SMOOTH",
"-62 -446 OFFCURVE",
"-84 -434 OFFCURVE",
"-112 -408 CURVE SMOOTH",
"-139 -382 OFFCURVE",
"-162 -369 OFFCURVE",
"-183 -369 CURVE SMOOTH",
"-235 -369 OFFCURVE",
"-279 -402 OFFCURVE",
"-279 -453 CURVE SMOOTH",
"-279 -515 OFFCURVE",
"-227 -553 OFFCURVE",
"-169 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"427 1010 OFFCURVE",
"490 1065 OFFCURVE",
"490 1132 CURVE SMOOTH",
"490 1226 OFFCURVE",
"439 1290 OFFCURVE",
"338 1290 CURVE SMOOTH",
"266 1290 OFFCURVE",
"205 1232 OFFCURVE",
"205 1170 CURVE SMOOTH",
"205 1076 OFFCURVE",
"259 1010 OFFCURVE",
"362 1010 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"83 -553 OFFCURVE",
"214 -349 OFFCURVE",
"265 -150 CURVE SMOOTH",
"291 -50 OFFCURVE",
"307 48 OFFCURVE",
"321 143 CURVE SMOOTH",
"398 666 LINE SMOOTH",
"400 681 OFFCURVE",
"401 696 OFFCURVE",
"401 710 CURVE SMOOTH",
"401 786 OFFCURVE",
"372 852 OFFCURVE",
"298 852 CURVE SMOOTH",
"219 852 OFFCURVE",
"130 785 OFFCURVE",
"31 651 CURVE",
"89 604 LINE",
"129 660 OFFCURVE",
"156 688 OFFCURVE",
"173 688 CURVE SMOOTH",
"197 688 OFFCURVE",
"203 672 OFFCURVE",
"199 647 CURVE SMOOTH",
"67 -229 LINE SMOOTH",
"53 -323 OFFCURVE",
"17 -446 OFFCURVE",
"-45 -446 CURVE SMOOTH",
"-62 -446 OFFCURVE",
"-84 -434 OFFCURVE",
"-112 -408 CURVE SMOOTH",
"-139 -382 OFFCURVE",
"-162 -369 OFFCURVE",
"-183 -369 CURVE SMOOTH",
"-235 -369 OFFCURVE",
"-279 -402 OFFCURVE",
"-279 -453 CURVE SMOOTH",
"-279 -515 OFFCURVE",
"-227 -553 OFFCURVE",
"-169 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"411 1010 OFFCURVE",
"489 1087 OFFCURVE",
"489 1184 CURVE SMOOTH",
"489 1255 OFFCURVE",
"451 1290 OFFCURVE",
"373 1290 CURVE SMOOTH",
"283 1290 OFFCURVE",
"202 1213 OFFCURVE",
"202 1116 CURVE SMOOTH",
"202 1045 OFFCURVE",
"242 1010 OFFCURVE",
"321 1010 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
19 1 1 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 3 4 1 4 3 1 128 0 1 2 2 1 112 0 6 0 5 4 6 5 105 0 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 3 4 1 4 3 1 128 0 1 2 4 1 2 126 0 6 0 5 4 6 5 105 0 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 40 22 33 36 35 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
leftKerningGroup = j;
note = j;
unicode = 006A;
},
{
glyphname = j.alt;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"34 -260 LINE",
"16 -360 OFFCURVE",
"-20 -467 OFFCURVE",
"-81 -467 CURVE SMOOTH",
"-107 -467 OFFCURVE",
"-126 -459 OFFCURVE",
"-140 -443 CURVE SMOOTH",
"-155 -426 OFFCURVE",
"-169 -418 OFFCURVE",
"-190 -418 CURVE SMOOTH",
"-225 -418 OFFCURVE",
"-254 -438 OFFCURVE",
"-252 -477 CURVE SMOOTH",
"-250 -510 OFFCURVE",
"-221 -553 OFFCURVE",
"-169 -553 CURVE SMOOTH",
"-24 -553 OFFCURVE",
"105 -371 OFFCURVE",
"163 -144 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-48 -553 OFFCURVE",
"74 -371 OFFCURVE",
"132 -144 CURVE",
"156 -30 OFFCURVE",
"174 64 OFFCURVE",
"188 139 CURVE SMOOTH",
"283 665 LINE SMOOTH",
"288 693 OFFCURVE",
"292 719 OFFCURVE",
"292 750 CURVE SMOOTH",
"292 806 OFFCURVE",
"280 852 OFFCURVE",
"230 852 CURVE SMOOTH",
"156 852 OFFCURVE",
"91 784 OFFCURVE",
"2 649 CURVE",
"44 610 LINE",
"88 671 OFFCURVE",
"120 702 OFFCURVE",
"141 702 CURVE SMOOTH",
"175 702 OFFCURVE",
"182 664 OFFCURVE",
"174 623 CURVE SMOOTH",
"10 -260 LINE SMOOTH",
"-9 -360 OFFCURVE",
"-44 -477 OFFCURVE",
"-105 -477 CURVE SMOOTH",
"-131 -477 OFFCURVE",
"-150 -469 OFFCURVE",
"-164 -455 CURVE SMOOTH",
"-179 -440 OFFCURVE",
"-193 -433 OFFCURVE",
"-214 -433 CURVE SMOOTH",
"-248 -433 OFFCURVE",
"-276 -450 OFFCURVE",
"-276 -491 CURVE SMOOTH",
"-276 -523 OFFCURVE",
"-247 -553 OFFCURVE",
"-193 -553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"286 1049 OFFCURVE",
"338 1098 OFFCURVE",
"338 1154 CURVE SMOOTH",
"338 1197 OFFCURVE",
"308 1229 OFFCURVE",
"263 1229 CURVE SMOOTH",
"208 1229 OFFCURVE",
"156 1180 OFFCURVE",
"156 1124 CURVE SMOOTH",
"156 1081 OFFCURVE",
"186 1049 OFFCURVE",
"231 1049 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
52 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 2 3 2 1 117 0 0 0 2 1 0 2 109 0 3 0 4 5 3 4 109 0 5 6 6 5 93 0 5 5 6 97 0 6 5 6 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
0 1 2 3 2 1 3 131 0 0 0 2 1 0 2 109 0 3 0 4 5 3 4 109 0 5 6 6 5 93 0 5 5 6 97 0 6 5 6 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 40 38 33 36 35 7 7 29 
CALL[ ]\011/* CallFunction */";
};
width = 420;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-35 -555 OFFCURVE",
"149 -446 OFFCURVE",
"225 -150 CURVE SMOOTH",
"250 -51 OFFCURVE",
"267 48 OFFCURVE",
"281 143 CURVE SMOOTH",
"358 666 LINE SMOOTH",
"360 681 OFFCURVE",
"361 696 OFFCURVE",
"361 710 CURVE SMOOTH",
"361 786 OFFCURVE",
"332 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"179 852 OFFCURVE",
"90 785 OFFCURVE",
"-10 651 CURVE",
"49 604 LINE",
"89 660 OFFCURVE",
"116 688 OFFCURVE",
"133 688 CURVE SMOOTH",
"157 688 OFFCURVE",
"163 672 OFFCURVE",
"159 647 CURVE SMOOTH",
"26 -229 LINE SMOOTH",
"12 -323 OFFCURVE",
"-23 -446 OFFCURVE",
"-84 -446 CURVE SMOOTH",
"-103 -446 OFFCURVE",
"-123 -434 OFFCURVE",
"-143 -409 CURVE SMOOTH",
"-163 -384 OFFCURVE",
"-181 -371 OFFCURVE",
"-196 -371 CURVE SMOOTH",
"-247 -371 OFFCURVE",
"-277 -403 OFFCURVE",
"-277 -451 CURVE SMOOTH",
"-277 -515 OFFCURVE",
"-227 -555 OFFCURVE",
"-168 -555 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"387 1010 OFFCURVE",
"450 1065 OFFCURVE",
"450 1132 CURVE SMOOTH",
"450 1226 OFFCURVE",
"399 1290 OFFCURVE",
"298 1290 CURVE SMOOTH",
"226 1290 OFFCURVE",
"165 1232 OFFCURVE",
"165 1170 CURVE SMOOTH",
"165 1076 OFFCURVE",
"219 1010 OFFCURVE",
"322 1010 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-35 -555 OFFCURVE",
"149 -446 OFFCURVE",
"225 -150 CURVE SMOOTH",
"250 -51 OFFCURVE",
"267 48 OFFCURVE",
"281 143 CURVE SMOOTH",
"358 666 LINE SMOOTH",
"360 681 OFFCURVE",
"361 696 OFFCURVE",
"361 710 CURVE SMOOTH",
"361 786 OFFCURVE",
"332 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"179 852 OFFCURVE",
"90 785 OFFCURVE",
"-10 651 CURVE",
"49 604 LINE",
"89 660 OFFCURVE",
"116 688 OFFCURVE",
"133 688 CURVE SMOOTH",
"157 688 OFFCURVE",
"163 672 OFFCURVE",
"159 647 CURVE SMOOTH",
"26 -229 LINE SMOOTH",
"12 -323 OFFCURVE",
"-23 -446 OFFCURVE",
"-84 -446 CURVE SMOOTH",
"-103 -446 OFFCURVE",
"-123 -434 OFFCURVE",
"-143 -409 CURVE SMOOTH",
"-163 -384 OFFCURVE",
"-181 -371 OFFCURVE",
"-196 -371 CURVE SMOOTH",
"-247 -371 OFFCURVE",
"-277 -403 OFFCURVE",
"-277 -451 CURVE SMOOTH",
"-277 -515 OFFCURVE",
"-227 -555 OFFCURVE",
"-168 -555 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"374 1010 OFFCURVE",
"452 1087 OFFCURVE",
"452 1184 CURVE SMOOTH",
"452 1255 OFFCURVE",
"414 1290 OFFCURVE",
"336 1290 CURVE SMOOTH",
"246 1290 OFFCURVE",
"165 1213 OFFCURVE",
"165 1116 CURVE SMOOTH",
"165 1045 OFFCURVE",
"205 1010 OFFCURVE",
"284 1010 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
19 1 6 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 2 0 1 1 2 117 0 3 1 4 1 3 4 131 0 4 5 1 4 5 129 0 0 0 1 3 0 1 109 0 5 6 6 5 93 0 5 5 6 97 0 6 5 6 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 2 0 1 0 2 1 131 0 3 1 4 1 3 4 131 0 4 5 1 4 5 129 0 0 0 1 3 0 1 109 0 5 6 6 5 93 0 5 5 6 97 0 6 5 6 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 38 40 38 33 36 35 7 7 29 
CALL[ ]\011/* CallFunction */";
};
width = 489;
}
);
leftKerningGroup = j.alt;
note = j.alt;
},
{
glyphname = k;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"759 781 OFFCURVE",
"722 852 OFFCURVE",
"631 852 CURVE SMOOTH",
"535 852 OFFCURVE",
"405 766 OFFCURVE",
"314 633 CURVE",
"301 639 LINE",
"524 1471 LINE",
"510 1484 LINE",
"438 1451 OFFCURVE",
"361 1429 OFFCURVE",
"288 1429 CURVE",
"288 1377 LINE",
"339 1377 OFFCURVE",
"365 1350 OFFCURVE",
"365 1295 CURVE SMOOTH",
"365 1276 OFFCURVE",
"361 1243 OFFCURVE",
"349 1197 CURVE SMOOTH",
"28 0 LINE",
"130 0 LINE",
"221 340 LINE",
"251 340 LINE SMOOTH",
"284 340 OFFCURVE",
"305 332 OFFCURVE",
"315 315 CURVE SMOOTH",
"452 94 LINE SMOOTH",
"511 -2 OFFCURVE",
"552 -27 OFFCURVE",
"653 -27 CURVE SMOOTH",
"706 -27 OFFCURVE",
"760 6 OFFCURVE",
"815 72 CURVE",
"816 75 OFFCURVE",
"817 77 OFFCURVE",
"817 79 CURVE SMOOTH",
"817 98 OFFCURVE",
"807 109 OFFCURVE",
"786 109 CURVE SMOOTH",
"783 109 OFFCURVE",
"780 108 OFFCURVE",
"778 106 CURVE SMOOTH",
"744 72 OFFCURVE",
"712 57 OFFCURVE",
"684 57 CURVE SMOOTH",
"647 57 OFFCURVE",
"609 85 OFFCURVE",
"569 141 CURVE SMOOTH",
"421 348 LINE SMOOTH",
"416 355 OFFCURVE",
"413 362 OFFCURVE",
"413 367 CURVE SMOOTH",
"413 371 OFFCURVE",
"416 374 OFFCURVE",
"421 377 CURVE SMOOTH",
"587 477 OFFCURVE",
"759 601 OFFCURVE",
"759 709 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"626 548 OFFCURVE",
"411 387 OFFCURVE",
"260 387 CURVE",
"233 387 LINE",
"264 500 LINE SMOOTH",
"270 522 OFFCURVE",
"285 547 OFFCURVE",
"307 575 CURVE SMOOTH",
"401 693 OFFCURVE",
"485 752 OFFCURVE",
"559 752 CURVE SMOOTH",
"604 752 OFFCURVE",
"626 725 OFFCURVE",
"626 672 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"676 -27 OFFCURVE",
"718 6 OFFCURVE",
"767 72 CURVE",
"727 106 LINE",
"696 72 OFFCURVE",
"666 57 OFFCURVE",
"638 57 CURVE SMOOTH",
"601 57 OFFCURVE",
"558 85 OFFCURVE",
"515 141 CURVE SMOOTH",
"330 383 LINE",
"319 349 LINE",
"511 463 OFFCURVE",
"668 593 OFFCURVE",
"668 720 CURVE SMOOTH",
"668 786 OFFCURVE",
"632 852 OFFCURVE",
"534 852 CURVE SMOOTH",
"438 852 OFFCURVE",
"321 779 OFFCURVE",
"175 557 CURVE",
"210 568 LINE",
"373 1471 LINE",
"358 1484 LINE",
"289 1451 OFFCURVE",
"214 1429 OFFCURVE",
"141 1429 CURVE",
"145 1377 LINE",
"202 1377 OFFCURVE",
"230 1344 OFFCURVE",
"230 1276 CURVE SMOOTH",
"230 1256 OFFCURVE",
"228 1230 OFFCURVE",
"222 1197 CURVE SMOOTH",
"6 0 LINE",
"108 0 LINE",
"169 340 LINE",
"199 340 LINE SMOOTH",
"232 340 OFFCURVE",
"253 331 OFFCURVE",
"265 315 CURVE SMOOTH",
"421 94 LINE SMOOTH",
"486 2 OFFCURVE",
"522 -27 OFFCURVE",
"623 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"198 500 LINE SMOOTH",
"202 522 OFFCURVE",
"215 548 OFFCURVE",
"234 575 CURVE SMOOTH",
"318 693 OFFCURVE",
"396 762 OFFCURVE",
"470 762 CURVE SMOOTH",
"519 762 OFFCURVE",
"549 716 OFFCURVE",
"549 663 CURVE SMOOTH",
"549 540 OFFCURVE",
"342 387 OFFCURVE",
"204 387 CURVE",
"177 387 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
47 1 9 8 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 9 0 2 0 9 2 105 0 6 6 94 77 0 4 4 5 97 0 5 5 98 77 0 8 8 7 97 0 7 7 95 77 0 0 0 1 97 3 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 0 4 7 5 4 105 0 9 0 2 0 9 2 105 0 6 6 94 77 0 8 8 7 97 0 7 7 95 77 0 0 0 1 97 3 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
66 64 35 37 33 34 21 19 36 41 41 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 752;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"845 816 OFFCURVE",
"765 852 OFFCURVE",
"686 852 CURVE SMOOTH",
"598 852 OFFCURVE",
"484 785 OFFCURVE",
"419 709 CURVE",
"408 717 LINE",
"606 1455 LINE",
"588 1487 LINE",
"494 1456 OFFCURVE",
"377 1432 OFFCURVE",
"289 1432 CURVE",
"289 1360 LINE",
"341 1360 OFFCURVE",
"362 1331 OFFCURVE",
"362 1272 CURVE SMOOTH",
"362 1259 OFFCURVE",
"359 1240 OFFCURVE",
"354 1214 CURVE",
"22 0 LINE",
"216 0 LINE",
"303 313 LINE SMOOTH",
"308 331 OFFCURVE",
"312 340 OFFCURVE",
"319 340 CURVE",
"336 339 OFFCURVE",
"347 332 OFFCURVE",
"354 319 CURVE",
"491 109 LINE SMOOTH",
"561 1 OFFCURVE",
"608 -27 OFFCURVE",
"723 -27 CURVE SMOOTH",
"792 -27 OFFCURVE",
"860 11 OFFCURVE",
"925 86 CURVE",
"874 131 LINE",
"847 104 OFFCURVE",
"823 90 OFFCURVE",
"800 90 CURVE SMOOTH",
"763 90 OFFCURVE",
"719 125 OFFCURVE",
"669 195 CURVE SMOOTH",
"550 360 LINE",
"537 380 OFFCURVE",
"537 395 OFFCURVE",
"553 403 CURVE SMOOTH",
"691 472 OFFCURVE",
"845 606 OFFCURVE",
"845 707 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"638 559 OFFCURVE",
"490 393 OFFCURVE",
"354 393 CURVE",
"336 394 OFFCURVE",
"327 399 OFFCURVE",
"327 408 CURVE SMOOTH",
"327 415 OFFCURVE",
"328 420 OFFCURVE",
"329 424 CURVE SMOOTH",
"362 547 LINE SMOOTH",
"367 564 OFFCURVE",
"378 585 OFFCURVE",
"399 610 CURVE SMOOTH",
"471 695 OFFCURVE",
"538 739 OFFCURVE",
"602 739 CURVE SMOOTH",
"626 739 OFFCURVE",
"638 721 OFFCURVE",
"638 684 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"792 -27 OFFCURVE",
"857 11 OFFCURVE",
"915 86 CURVE",
"860 131 LINE",
"836 104 OFFCURVE",
"813 90 OFFCURVE",
"790 90 CURVE SMOOTH",
"753 90 OFFCURVE",
"707 124 OFFCURVE",
"650 195 CURVE SMOOTH",
"475 412 LINE",
"452 370 LINE",
"648 462 OFFCURVE",
"781 598 OFFCURVE",
"781 698 CURVE SMOOTH",
"781 792 OFFCURVE",
"710 852 OFFCURVE",
"609 852 CURVE SMOOTH",
"521 852 OFFCURVE",
"403 791 OFFCURVE",
"291 634 CURVE",
"330 641 LINE",
"476 1455 LINE",
"456 1487 LINE",
"364 1456 OFFCURVE",
"249 1432 OFFCURVE",
"161 1432 CURVE",
"168 1360 LINE",
"225 1360 OFFCURVE",
"249 1325 OFFCURVE",
"249 1253 CURVE SMOOTH",
"249 1242 OFFCURVE",
"248 1229 OFFCURVE",
"245 1214 CURVE SMOOTH",
"20 0 LINE",
"214 0 LINE",
"279 340 LINE",
"291 340 LINE SMOOTH",
"304 340 OFFCURVE",
"315 332 OFFCURVE",
"324 319 CURVE SMOOTH",
"479 109 LINE SMOOTH",
"559 1 OFFCURVE",
"608 -27 OFFCURVE",
"723 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"312 547 LINE SMOOTH",
"315 564 OFFCURVE",
"324 585 OFFCURVE",
"343 610 CURVE SMOOTH",
"408 695 OFFCURVE",
"471 739 OFFCURVE",
"535 739 CURVE SMOOTH",
"562 739 OFFCURVE",
"577 716 OFFCURVE",
"577 669 CURVE SMOOTH",
"577 546 OFFCURVE",
"448 393 OFFCURVE",
"317 393 CURVE SMOOTH",
"284 393 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
60 47 2 9 8 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 9 0 2 0 9 2 105 0 6 6 33 77 0 4 4 5 97 0 5 5 37 77 0 8 8 7 97 0 7 7 34 77 0 0 0 1 97 3 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 0 4 7 5 4 105 0 9 0 2 0 9 2 105 0 6 6 33 77 0 8 8 7 97 0 7 7 34 77 0 0 0 1 97 3 1 1 1 32 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
65 63 35 37 33 33 37 20 20 41 40 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 877;
}
);
leftKerningGroup = h;
note = k;
rightKerningGroup = k;
unicode = 006B;
},
{
glyphname = l;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"113 0 LINE",
"215 0 LINE",
"479 1461 LINE",
"377 1461 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"182 -27 OFFCURVE",
"261 39 OFFCURVE",
"363 170 CURVE",
"319 207 LINE",
"269 144 OFFCURVE",
"228 113 OFFCURVE",
"193 113 CURVE SMOOTH",
"163 113 OFFCURVE",
"159 169 OFFCURVE",
"166 209 CURVE SMOOTH",
"394 1470 LINE",
"381 1484 LINE",
"302 1448 OFFCURVE",
"231 1429 OFFCURVE",
"161 1429 CURVE",
"165 1377 LINE",
"229 1377 OFFCURVE",
"250 1338 OFFCURVE",
"250 1270 CURVE SMOOTH",
"250 1251 OFFCURVE",
"248 1226 OFFCURVE",
"243 1197 CURVE SMOOTH",
"51 135 LINE SMOOTH",
"48 120 OFFCURVE",
"47 104 OFFCURVE",
"47 87 CURVE SMOOTH",
"47 31 OFFCURVE",
"67 -27 OFFCURVE",
"111 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 4 94 77 0 2 2 3 97 0 3 3 98 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 0 3 2 105 0 4 4 94 77 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
33 34 23 41 35 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 412;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"97 0 LINE",
"291 0 LINE",
"549 1423 LINE",
"355 1423 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"247 -27 OFFCURVE",
"335 43 OFFCURVE",
"428 182 CURVE",
"366 227 LINE",
"333 170 OFFCURVE",
"304 141 OFFCURVE",
"281 141 CURVE SMOOTH",
"255 141 OFFCURVE",
"257 164 OFFCURVE",
"263 195 CURVE SMOOTH",
"489 1448 LINE",
"467 1487 LINE",
"367 1452 OFFCURVE",
"258 1432 OFFCURVE",
"181 1432 CURVE",
"188 1360 LINE",
"235 1360 OFFCURVE",
"256 1327 OFFCURVE",
"256 1258 CURVE SMOOTH",
"256 1244 OFFCURVE",
"255 1228 OFFCURVE",
"252 1210 CURVE SMOOTH",
"61 156 LINE SMOOTH",
"58 142 OFFCURVE",
"57 128 OFFCURVE",
"57 114 CURVE SMOOTH",
"57 42 OFFCURVE",
"92 -27 OFFCURVE",
"165 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 4 33 77 0 2 2 3 97 0 3 3 37 77 0 0 0 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 0 3 2 105 0 4 4 33 77 0 0 0 1 97 0 1 1 32 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
33 33 39 41 35 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 455;
}
);
leftKerningGroup = h;
note = l;
rightKerningGroup = l;
unicode = 006C;
},
{
glyphname = less;
lastChange = "2018-08-16 15:04:34 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"911 115 LINE",
"200 449 LINE",
"200 395 LINE",
"911 727 LINE",
"911 846 LINE",
"115 467 LINE",
"115 375 LINE",
"911 -2 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
3 0 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"948 162 LINE",
"303 440 LINE",
"303 404 LINE",
"948 682 LINE",
"948 866 LINE",
"78 485 LINE",
"78 356 LINE",
"948 -23 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
5 2 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = less;
unicode = 003C;
},
{
glyphname = logicalnot;
lastChange = "2018-08-15 14:38:00 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1366 0 LINE",
"1366 657 LINE",
"0 657 LINE",
"0 537 LINE",
"1243 537 LINE",
"1243 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 2 0 1 0 2 1 103 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 0 134 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
17 17 16 3 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 1366;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1366 0 LINE",
"1366 657 LINE",
"0 657 LINE",
"0 483 LINE",
"1180 483 LINE",
"1180 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 1 0 0 2 1 0 103 3 1 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 22 values pushed */
3 1 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1363;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = backslash.ss10;
lastChange = "2018-08-16 16:16:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"106 1475 LINE",
"4 1432 LINE",
"734 -302 LINE",
"834 -265 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
9 1 1 73 0 0 1 0 136 0 1 1 118 39 37 2 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 895;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"126 1482 LINE",
"-6 1422 LINE",
"724 -312 LINE",
"854 -258 LINE"
);
}
);
width = 895;
}
);
note = longbackslash;
},
{
glyphname = longs;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-14 -220 LINE",
"88 -220 LINE",
"480 1241 LINE",
"378 1241 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"567 1403 OFFCURVE",
"601 1355 OFFCURVE",
"608 1274 CURVE SMOOTH",
"612 1231 OFFCURVE",
"647 1202 OFFCURVE",
"683 1202 CURVE SMOOTH",
"718 1202 OFFCURVE",
"735 1226 OFFCURVE",
"735 1275 CURVE SMOOTH",
"735 1389 OFFCURVE",
"654 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 1 5 4 1 128 0 1 2 2 1 112 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 36 39 34 38 37 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 259;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"50 0 LINE",
"244 0 LINE",
"626 1423 LINE",
"432 1423 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"655 1382 OFFCURVE",
"660 1339 OFFCURVE",
"668 1243 CURVE SMOOTH",
"673 1189 OFFCURVE",
"717 1149 OFFCURVE",
"779 1149 CURVE SMOOTH",
"837 1149 OFFCURVE",
"864 1188 OFFCURVE",
"864 1249 CURVE SMOOTH",
"864 1376 OFFCURVE",
"757 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 0 1 3 1 0 3 128 0 3 4 4 3 112 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 2 2 4 89 0 4 4 2 98 0 2 4 2 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
41 36 38 44 25 35 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 373;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"14 -220 LINE",
"116 -220 LINE",
"508 1241 LINE",
"406 1241 LINE"
);
}
);
};
layerId = "79F4CB89-ABBE-4CF6-AAD1-DDC0C06AE466";
name = "Aug 13 18, 17:25";
paths = (
{
closed = 1;
nodes = (
"-135 -551 OFFCURVE",
"-73 -530 OFFCURVE",
"-24 -488 CURVE SMOOTH",
"24 -446 OFFCURVE",
"61 -392 OFFCURVE",
"86 -326 CURVE SMOOTH",
"111 -259 OFFCURVE",
"124 -188 OFFCURVE",
"145 -111 CURVE SMOOTH",
"392 807 LINE SMOOTH",
"442 993 OFFCURVE",
"454 1111 OFFCURVE",
"471 1162 CURVE SMOOTH",
"488 1212 OFFCURVE",
"515 1263 OFFCURVE",
"553 1316 CURVE SMOOTH",
"591 1369 OFFCURVE",
"641 1395 OFFCURVE",
"701 1395 CURVE SMOOTH",
"770 1395 OFFCURVE",
"804 1355 OFFCURVE",
"804 1274 CURVE SMOOTH",
"804 1250 OFFCURVE",
"812 1232 OFFCURVE",
"829 1220 CURVE SMOOTH",
"846 1208 OFFCURVE",
"863 1202 OFFCURVE",
"879 1202 CURVE SMOOTH",
"923 1202 OFFCURVE",
"945 1234 OFFCURVE",
"945 1298 CURVE SMOOTH",
"945 1345 OFFCURVE",
"928 1385 OFFCURVE",
"893 1416 CURVE SMOOTH",
"858 1447 OFFCURVE",
"813 1464 OFFCURVE",
"756 1464 CURVE SMOOTH",
"641 1464 OFFCURVE",
"546 1426 OFFCURVE",
"469 1350 CURVE SMOOTH",
"392 1274 OFFCURVE",
"343 1089 OFFCURVE",
"271 807 CURVE SMOOTH",
"-11 -297 LINE SMOOTH",
"-21 -336 OFFCURVE",
"-36 -375 OFFCURVE",
"-65 -412 CURVE SMOOTH",
"-94 -449 OFFCURVE",
"-121 -467 OFFCURVE",
"-146 -467 CURVE SMOOTH",
"-171 -467 OFFCURVE",
"-193 -450 OFFCURVE",
"-212 -417 CURVE SMOOTH",
"-231 -384 OFFCURVE",
"-259 -367 OFFCURVE",
"-298 -367 CURVE SMOOTH",
"-313 -367 OFFCURVE",
"-328 -375 OFFCURVE",
"-341 -390 CURVE SMOOTH",
"-355 -406 OFFCURVE",
"-361 -425 OFFCURVE",
"-361 -446 CURVE SMOOTH",
"-361 -467 OFFCURVE",
"-347 -490 OFFCURVE",
"-318 -514 CURVE SMOOTH",
"-289 -538 OFFCURVE",
"-253 -551 OFFCURVE",
"-210 -551 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 1 5 4 1 128 0 1 2 2 1 112 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 36 39 34 38 37 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 496;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"50 0 LINE",
"244 0 LINE",
"626 1423 LINE",
"432 1423 LINE"
);
}
);
};
layerId = "322ED008-9298-43A6-84D6-8DD1B8531019";
name = "Aug 13 18, 17:30";
paths = (
{
closed = 1;
nodes = (
"977 1312 OFFCURVE",
"964 1350 OFFCURVE",
"938 1382 CURVE",
"897 1437 OFFCURVE",
"835 1464 OFFCURVE",
"750 1464 CURVE SMOOTH",
"597 1464 OFFCURVE",
"476 1405 OFFCURVE",
"389 1286 CURVE SMOOTH",
"370 1260 OFFCURVE",
"353 1228 OFFCURVE",
"336 1190 CURVE SMOOTH",
"301 1113 OFFCURVE",
"266 984 OFFCURVE",
"229 801 CURVE SMOOTH",
"16 -250 LINE SMOOTH",
"5 -307 OFFCURVE",
"-2 -342 OFFCURVE",
"-6 -354 CURVE SMOOTH",
"-25 -415 OFFCURVE",
"-54 -446 OFFCURVE",
"-92 -446 CURVE SMOOTH",
"-103 -446 OFFCURVE",
"-113 -443 OFFCURVE",
"-121 -436 CURVE",
"-128 -428 OFFCURVE",
"-140 -408 OFFCURVE",
"-158 -375 CURVE",
"-176 -338 OFFCURVE",
"-205 -319 OFFCURVE",
"-244 -319 CURVE",
"-261 -320 OFFCURVE",
"-276 -324 OFFCURVE",
"-289 -332 CURVE",
"-320 -353 OFFCURVE",
"-336 -383 OFFCURVE",
"-336 -424 CURVE SMOOTH",
"-336 -444 OFFCURVE",
"-327 -464 OFFCURVE",
"-309 -485 CURVE",
"-274 -529 OFFCURVE",
"-219 -551 OFFCURVE",
"-145 -551 CURVE SMOOTH",
"-54 -551 OFFCURVE",
"29 -514 OFFCURVE",
"106 -440 CURVE SMOOTH",
"119 -428 OFFCURVE",
"133 -406 OFFCURVE",
"150 -375 CURVE SMOOTH",
"192 -293 OFFCURVE",
"224 -200 OFFCURVE",
"246 -96 CURVE SMOOTH",
"424 786 LINE",
"461 977 LINE SMOOTH",
"488 1119 OFFCURVE",
"521 1219 OFFCURVE",
"559 1278 CURVE SMOOTH",
"563 1285 OFFCURVE",
"567 1291 OFFCURVE",
"571 1296 CURVE",
"610 1353 OFFCURVE",
"653 1382 OFFCURVE",
"698 1382 CURVE SMOOTH",
"708 1382 OFFCURVE",
"716 1381 OFFCURVE",
"723 1380 CURVE SMOOTH",
"753 1375 OFFCURVE",
"771 1356 OFFCURVE",
"778 1323 CURVE",
"779 1315 OFFCURVE",
"780 1288 OFFCURVE",
"780 1243 CURVE SMOOTH",
"781 1220 OFFCURVE",
"787 1201 OFFCURVE",
"799 1186 CURVE SMOOTH",
"818 1161 OFFCURVE",
"846 1149 OFFCURVE",
"883 1149 CURVE SMOOTH",
"885 1149 LINE",
"911 1153 LINE",
"955 1167 OFFCURVE",
"977 1205 OFFCURVE",
"977 1268 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 0 1 3 1 0 3 128 0 3 4 4 3 112 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 2 2 4 89 0 4 4 2 98 0 2 4 2 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
41 36 38 44 25 35 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 483;
}
);
leftMetricsKey = germandbls;
note = longs;
rightKerningGroup = longs;
unicode = 017F;
},
{
glyphname = slash.ss10;
lastChange = "2018-08-16 16:16:05 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"768 1430 LINE",
"668 1473 LINE",
"-63 -252 LINE",
"35 -297 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 1 0 136 0 1 1 118 38 33 2 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 607;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"788 1420 LINE",
"658 1473 LINE",
"-73 -252 LINE",
"55 -307 LINE"
);
}
);
width = 630;
}
);
note = longslash;
},
{
glyphname = lslash;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
components = (
{
name = l;
transform = "{1, 0, 0, 1, 59, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"691 906 LINE",
"648 963 LINE",
"-34 530 LINE",
"9 474 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
36 1 2 3 45 19 2 0 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 4 94 77 0 2 2 3 97 0 3 3 98 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 0 3 2 105 0 4 4 94 77 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
43 41 39 37 34 33 40 35 5 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 595;
},
{
components = (
{
name = l;
transform = "{1, 0, 0, 1, 114, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"771 894 LINE",
"719 982 LINE",
"-12 540 LINE",
"41 453 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
41 1 4 5 59 52 25 3 3 7 14 3 2 3 0 1 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 7 4 3 4 7 3 128 0 3 1 4 3 1 126 0 1 0 4 1 0 126 0 0 2 4 0 2 126 0 6 6 33 77 0 4 4 5 97 0 5 5 37 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 7 4 3 4 7 3 128 0 3 1 4 3 1 126 0 1 0 4 1 0 126 0 0 2 4 0 2 126 0 5 0 4 7 5 4 105 0 6 6 33 77 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 34 36 26 39 38 20 36 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 657;
}
);
note = lslash;
unicode = 0142;
},
{
glyphname = m;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
guideLines = (
{
position = "{845, 327}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1277 567 LINE SMOOTH",
"1285 610 OFFCURVE",
"1290 656 OFFCURVE",
"1290 697 CURVE SMOOTH",
"1290 788 OFFCURVE",
"1256 852 OFFCURVE",
"1178 852 CURVE SMOOTH",
"1044 852 OFFCURVE",
"883 724 OFFCURVE",
"666 137 CURVE",
"713 173 LINE",
"790 596 LINE SMOOTH",
"797 633 OFFCURVE",
"801 670 OFFCURVE",
"801 704 CURVE SMOOTH",
"801 793 OFFCURVE",
"773 852 OFFCURVE",
"688 852 CURVE SMOOTH",
"554 852 OFFCURVE",
"393 724 OFFCURVE",
"176 137 CURVE",
"211 102 LINE",
"316 690 LINE SMOOTH",
"319 707 OFFCURVE",
"321 726 OFFCURVE",
"321 744 CURVE SMOOTH",
"321 800 OFFCURVE",
"306 852 OFFCURVE",
"261 852 CURVE SMOOTH",
"185 852 OFFCURVE",
"117 789 OFFCURVE",
"25 662 CURVE",
"69 625 LINE",
"119 682 OFFCURVE",
"153 711 OFFCURVE",
"172 711 CURVE SMOOTH",
"204 711 OFFCURVE",
"209 662 OFFCURVE",
"202 625 CURVE SMOOTH",
"90 0 LINE",
"192 0 LINE",
"280 273 OFFCURVE",
"389 536 OFFCURVE",
"510 677 CURVE SMOOTH",
"565 741 OFFCURVE",
"625 772 OFFCURVE",
"655 772 CURVE SMOOTH",
"686 772 OFFCURVE",
"701 751 OFFCURVE",
"701 707 CURVE SMOOTH",
"701 666 OFFCURVE",
"691 601 OFFCURVE",
"678 532 CURVE SMOOTH",
"581 0 LINE",
"683 0 LINE",
"771 273 OFFCURVE",
"906 561 OFFCURVE",
"1030 701 CURVE SMOOTH",
"1072 748 OFFCURVE",
"1111 772 OFFCURVE",
"1145 772 CURVE SMOOTH",
"1180 772 OFFCURVE",
"1197 752 OFFCURVE",
"1197 719 CURVE SMOOTH",
"1197 691 OFFCURVE",
"1189 643 OFFCURVE",
"1178 582 CURVE SMOOTH",
"1098 137 LINE SMOOTH",
"1094 115 OFFCURVE",
"1090 90 OFFCURVE",
"1090 66 CURVE SMOOTH",
"1090 16 OFFCURVE",
"1105 -27 OFFCURVE",
"1153 -27 CURVE SMOOTH",
"1226 -27 OFFCURVE",
"1306 34 OFFCURVE",
"1401 156 CURVE",
"1357 195 LINE",
"1301 133 OFFCURVE",
"1263 102 OFFCURVE",
"1242 102 CURVE SMOOTH",
"1205 102 OFFCURVE",
"1201 147 OFFCURVE",
"1211 203 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 59 values pushed */
71 62 2 0 6 1 76 4 1 2 2 7 97 9 8 2 7 7 95 77 0 6 6 7 97 9 8 2 7 7 95 77 0 0 0 1 97 5 3 2 1 1 93 1 78 75 73 39 41 21 20 37 20 39 41 19 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1450;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"550 -131 LINE",
"744 -131 LINE",
"1038 969 LINE",
"844 969 LINE"
);
},
{
closed = 0;
nodes = (
"1068 463 LINE"
);
},
{
closed = 1;
nodes = (
"1050 -131 LINE",
"1244 -131 LINE",
"1538 969 LINE",
"1344 969 LINE"
);
},
{
closed = 1;
nodes = (
"58 -131 LINE",
"252 -131 LINE",
"546 969 LINE",
"352 969 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1360 547 LINE SMOOTH",
"1370 607 OFFCURVE",
"1376 655 OFFCURVE",
"1376 695 CURVE SMOOTH",
"1376 806 OFFCURVE",
"1344 852 OFFCURVE",
"1237 852 CURVE SMOOTH",
"1096 852 OFFCURVE",
"942 699 OFFCURVE",
"791 295 CURVE",
"829 286 LINE",
"882 587 LINE SMOOTH",
"889 625 OFFCURVE",
"892 659 OFFCURVE",
"892 688 CURVE SMOOTH",
"892 789 OFFCURVE",
"853 852 OFFCURVE",
"747 852 CURVE SMOOTH",
"606 852 OFFCURVE",
"452 699 OFFCURVE",
"301 295 CURVE",
"338 295 LINE",
"406 676 LINE SMOOTH",
"409 691 OFFCURVE",
"411 706 OFFCURVE",
"411 721 CURVE SMOOTH",
"411 791 OFFCURVE",
"380 852 OFFCURVE",
"307 852 CURVE SMOOTH",
"230 852 OFFCURVE",
"142 786 OFFCURVE",
"44 655 CURVE",
"102 606 LINE",
"140 661 OFFCURVE",
"167 689 OFFCURVE",
"183 689 CURVE SMOOTH",
"210 689 OFFCURVE",
"209 660 OFFCURVE",
"201 614 CURVE SMOOTH",
"91 0 LINE",
"285 0 LINE",
"370 254 OFFCURVE",
"409 368 OFFCURVE",
"448 448 CURVE SMOOTH",
"534 623 OFFCURVE",
"625 743 OFFCURVE",
"680 743 CURVE SMOOTH",
"697 743 OFFCURVE",
"707 731 OFFCURVE",
"707 702 CURVE SMOOTH",
"707 678 OFFCURVE",
"697 623 OFFCURVE",
"681 535 CURVE SMOOTH",
"583 0 LINE",
"777 0 LINE",
"848 220 OFFCURVE",
"910 364 OFFCURVE",
"951 448 CURVE SMOOTH",
"1037 623 OFFCURVE",
"1104 743 OFFCURVE",
"1159 743 CURVE SMOOTH",
"1180 743 OFFCURVE",
"1187 724 OFFCURVE",
"1187 688 CURVE SMOOTH",
"1187 662 OFFCURVE",
"1181 626 OFFCURVE",
"1173 580 CURVE SMOOTH",
"1098 168 LINE SMOOTH",
"1095 149 OFFCURVE",
"1092 130 OFFCURVE",
"1092 112 CURVE SMOOTH",
"1092 34 OFFCURVE",
"1125 -27 OFFCURVE",
"1197 -27 CURVE SMOOTH",
"1280 -27 OFFCURVE",
"1367 41 OFFCURVE",
"1468 178 CURVE",
"1411 227 LINE",
"1364 168 OFFCURVE",
"1332 140 OFFCURVE",
"1316 140 CURVE SMOOTH",
"1287 140 OFFCURVE",
"1294 179 OFFCURVE",
"1303 231 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
71 62 2 0 6 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 6 2 0 2 6 0 128 4 1 2 2 7 97 9 8 2 7 7 34 77 0 0 0 1 97 5 3 2 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 6 2 0 2 6 0 128 4 1 2 2 7 97 9 8 2 7 7 34 77 0 0 0 1 97 5 1 1 1 32 77 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
75 73 39 41 21 20 37 20 39 41 19 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1493;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"1380 567 LINE SMOOTH",
"1398 630 OFFCURVE",
"1407 683 OFFCURVE",
"1407 727 CURVE SMOOTH",
"1407 810 OFFCURVE",
"1371 852 OFFCURVE",
"1300 852 CURVE SMOOTH",
"1161 852 OFFCURVE",
"1010 694 OFFCURVE",
"846 379 CURVE",
"834 383 LINE",
"895 596 LINE SMOOTH",
"908 643 OFFCURVE",
"915 685 OFFCURVE",
"915 723 CURVE SMOOTH",
"915 809 OFFCURVE",
"878 852 OFFCURVE",
"805 852 CURVE SMOOTH",
"661 852 OFFCURVE",
"467 644 OFFCURVE",
"350 379 CURVE",
"342 383 LINE",
"432 690 LINE SMOOTH",
"439 713 OFFCURVE",
"442 737 OFFCURVE",
"442 762 CURVE SMOOTH",
"442 822 OFFCURVE",
"422 852 OFFCURVE",
"383 852 CURVE SMOOTH",
"307 852 OFFCURVE",
"218 789 OFFCURVE",
"115 662 CURVE",
"156 625 LINE",
"211 682 OFFCURVE",
"248 711 OFFCURVE",
"267 711 CURVE SMOOTH",
"286 711 OFFCURVE",
"295 695 OFFCURVE",
"295 664 CURVE SMOOTH",
"295 652 OFFCURVE",
"293 639 OFFCURVE",
"289 625 CURVE SMOOTH",
"113 6 LINE SMOOTH",
"107 -16 OFFCURVE",
"124 -27 OFFCURVE",
"163 -27 CURVE SMOOTH",
"202 -27 OFFCURVE",
"226 -17 OFFCURVE",
"233 2 CURVE SMOOTH",
"340 283 OFFCURVE",
"494 549 OFFCURVE",
"617 677 CURVE",
"490 520 OFFCURVE",
"556 613 OFFCURVE",
"617 677 CURVE SMOOTH",
"678 740 OFFCURVE",
"724 772 OFFCURVE",
"754 772 CURVE SMOOTH",
"781 772 OFFCURVE",
"795 756 OFFCURVE",
"795 725 CURVE SMOOTH",
"795 692 OFFCURVE",
"781 628 OFFCURVE",
"754 532 CURVE SMOOTH",
"604 6 LINE SMOOTH",
"598 -16 OFFCURVE",
"615 -27 OFFCURVE",
"654 -27 CURVE SMOOTH",
"693 -27 OFFCURVE",
"717 -17 OFFCURVE",
"725 2 CURVE SMOOTH",
"877 371 OFFCURVE",
"1049 606 OFFCURVE",
"1141 701 CURVE",
"1033 572 OFFCURVE",
"1095 654 OFFCURVE",
"1141 701 CURVE SMOOTH",
"1186 748 OFFCURVE",
"1226 772 OFFCURVE",
"1260 772 CURVE SMOOTH",
"1281 772 OFFCURVE",
"1292 758 OFFCURVE",
"1292 729 CURVE SMOOTH",
"1292 707 OFFCURVE",
"1281 658 OFFCURVE",
"1260 582 CURVE SMOOTH",
"1135 137 LINE SMOOTH",
"1128 111 OFFCURVE",
"1124 86 OFFCURVE",
"1124 61 CURVE SMOOTH",
"1124 2 OFFCURVE",
"1142 -27 OFFCURVE",
"1178 -27 CURVE SMOOTH",
"1261 -27 OFFCURVE",
"1356 34 OFFCURVE",
"1462 156 CURVE",
"1463 157 OFFCURVE",
"1464 159 OFFCURVE",
"1464 162 CURVE SMOOTH",
"1464 178 OFFCURVE",
"1445 199 OFFCURVE",
"1430 199 CURVE SMOOTH",
"1427 199 OFFCURVE",
"1424 198 OFFCURVE",
"1421 195 CURVE SMOOTH",
"1360 133 OFFCURVE",
"1319 102 OFFCURVE",
"1298 102 CURVE SMOOTH",
"1277 102 OFFCURVE",
"1266 117 OFFCURVE",
"1266 147 CURVE SMOOTH",
"1266 161 OFFCURVE",
"1269 180 OFFCURVE",
"1276 203 CURVE SMOOTH"
);
}
);
};
layerId = "3ABF4A0E-8EE4-44E1-B683-5A2CCD320787";
name = "Aug 12 18, 11:04";
paths = (
{
closed = 1;
nodes = (
"1380 567 LINE SMOOTH",
"1398 630 OFFCURVE",
"1407 683 OFFCURVE",
"1407 727 CURVE SMOOTH",
"1407 810 OFFCURVE",
"1371 852 OFFCURVE",
"1300 852 CURVE SMOOTH",
"1161 852 OFFCURVE",
"1010 694 OFFCURVE",
"846 379 CURVE",
"834 383 LINE",
"895 596 LINE SMOOTH",
"908 643 OFFCURVE",
"915 685 OFFCURVE",
"915 723 CURVE SMOOTH",
"915 809 OFFCURVE",
"878 852 OFFCURVE",
"805 852 CURVE SMOOTH",
"661 852 OFFCURVE",
"467 644 OFFCURVE",
"350 379 CURVE",
"342 383 LINE",
"432 690 LINE SMOOTH",
"439 713 OFFCURVE",
"442 737 OFFCURVE",
"442 762 CURVE SMOOTH",
"442 822 OFFCURVE",
"422 852 OFFCURVE",
"383 852 CURVE SMOOTH",
"307 852 OFFCURVE",
"218 789 OFFCURVE",
"115 662 CURVE",
"156 625 LINE",
"211 682 OFFCURVE",
"248 711 OFFCURVE",
"267 711 CURVE SMOOTH",
"299 711 OFFCURVE",
"300 662 OFFCURVE",
"289 625 CURVE SMOOTH",
"111 0 LINE",
"233 0 LINE",
"332 259 OFFCURVE",
"482 536 OFFCURVE",
"617 677 CURVE SMOOTH",
"678 740 OFFCURVE",
"724 772 OFFCURVE",
"754 772 CURVE SMOOTH",
"781 772 OFFCURVE",
"795 756 OFFCURVE",
"795 725 CURVE SMOOTH",
"795 692 OFFCURVE",
"781 628 OFFCURVE",
"754 532 CURVE SMOOTH",
"602 0 LINE",
"724 0 LINE",
"836 273 OFFCURVE",
"1004 561 OFFCURVE",
"1141 701 CURVE SMOOTH",
"1186 748 OFFCURVE",
"1226 772 OFFCURVE",
"1260 772 CURVE SMOOTH",
"1281 772 OFFCURVE",
"1292 758 OFFCURVE",
"1292 729 CURVE SMOOTH",
"1292 707 OFFCURVE",
"1281 658 OFFCURVE",
"1260 582 CURVE SMOOTH",
"1135 137 LINE SMOOTH",
"1116 67 OFFCURVE",
"1115 -27 OFFCURVE",
"1178 -27 CURVE SMOOTH",
"1261 -27 OFFCURVE",
"1356 34 OFFCURVE",
"1462 156 CURVE",
"1463 157 OFFCURVE",
"1464 159 OFFCURVE",
"1464 162 CURVE SMOOTH",
"1464 178 OFFCURVE",
"1445 199 OFFCURVE",
"1430 199 CURVE SMOOTH",
"1427 199 OFFCURVE",
"1424 198 OFFCURVE",
"1421 195 CURVE SMOOTH",
"1360 133 OFFCURVE",
"1319 102 OFFCURVE",
"1298 102 CURVE SMOOTH",
"1259 102 OFFCURVE",
"1262 153 OFFCURVE",
"1276 203 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 59 values pushed */
71 62 2 0 6 1 76 4 1 2 2 7 97 9 8 2 7 7 95 77 0 6 6 7 97 9 8 2 7 7 95 77 0 0 0 1 97 5 3 2 1 1 93 1 78 75 73 39 41 21 20 37 20 39 41 19 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1507;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"530 -131 LINE",
"724 -131 LINE",
"1018 969 LINE",
"824 969 LINE"
);
},
{
closed = 0;
nodes = (
"1048 463 LINE"
);
},
{
closed = 1;
nodes = (
"1030 -131 LINE",
"1224 -131 LINE",
"1518 969 LINE",
"1324 969 LINE"
);
},
{
closed = 1;
nodes = (
"38 -131 LINE",
"232 -131 LINE",
"526 969 LINE",
"332 969 LINE"
);
}
);
};
layerId = "C35DB568-D52E-438B-A963-D814214B75E3";
name = "Aug 12 18, 11:31";
paths = (
{
closed = 1;
nodes = (
"1405 547 LINE SMOOTH",
"1452 723 OFFCURVE",
"1453 852 OFFCURVE",
"1296 852 CURVE SMOOTH",
"1166 852 OFFCURVE",
"1039 735 OFFCURVE",
"904 500 CURVE",
"894 504 LINE",
"965 760 OFFCURVE",
"937 852 OFFCURVE",
"794 852 CURVE SMOOTH",
"663 852 OFFCURVE",
"519 691 OFFCURVE",
"412 500 CURVE",
"402 504 LINE",
"448 676 LINE SMOOTH",
"471 762 OFFCURVE",
"453 852 OFFCURVE",
"364 852 CURVE SMOOTH",
"287 852 OFFCURVE",
"193 786 OFFCURVE",
"84 655 CURVE",
"137 606 LINE",
"180 661 OFFCURVE",
"210 688 OFFCURVE",
"226 689 CURVE SMOOTH",
"259 691 OFFCURVE",
"248 655 OFFCURVE",
"237 614 CURVE SMOOTH",
"73 0 LINE",
"267 0 LINE",
"378 254 OFFCURVE",
"461 417 OFFCURVE",
"512 496 CURVE SMOOTH",
"607 644 OFFCURVE",
"667 743 OFFCURVE",
"727 743 CURVE SMOOTH",
"743 743 OFFCURVE",
"751 732 OFFCURVE",
"751 707 CURVE SMOOTH",
"751 685 OFFCURVE",
"733 629 OFFCURVE",
"708 535 CURVE SMOOTH",
"565 0 LINE",
"759 0 LINE",
"850 220 OFFCURVE",
"924 364 OFFCURVE",
"973 448 CURVE SMOOTH",
"1077 623 OFFCURVE",
"1151 743 OFFCURVE",
"1218 743 CURVE SMOOTH",
"1236 743 OFFCURVE",
"1245 729 OFFCURVE",
"1245 702 CURVE SMOOTH",
"1245 675 OFFCURVE",
"1235 635 OFFCURVE",
"1220 580 CURVE SMOOTH",
"1110 168 LINE SMOOTH",
"1103 142 OFFCURVE",
"1098 122 OFFCURVE",
"1098 109 CURVE SMOOTH",
"1098 18 OFFCURVE",
"1130 -27 OFFCURVE",
"1194 -27 CURVE SMOOTH",
"1277 -27 OFFCURVE",
"1368 41 OFFCURVE",
"1481 178 CURVE",
"1428 227 LINE",
"1376 168 OFFCURVE",
"1342 139 OFFCURVE",
"1326 140 CURVE SMOOTH",
"1288 142 OFFCURVE",
"1310 189 OFFCURVE",
"1321 231 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
71 62 2 0 6 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 6 2 0 2 6 0 128 4 1 2 2 7 97 9 8 2 7 7 34 77 0 0 0 1 97 5 3 2 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 6 2 0 2 6 0 128 4 1 2 2 7 97 9 8 2 7 7 34 77 0 0 0 1 97 5 1 1 1 32 77 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
75 73 39 41 21 20 37 20 39 41 19 10 8 31 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 1523;
}
);
leftKerningGroup = m;
note = m;
unicode = 006D;
},
{
glyphname = macron;
lastChange = "2018-08-09 03:46:24 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"728 1104 LINE",
"761 1198 LINE",
"310 1198 LINE",
"282 1104 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 6 4 0 9 1 9 3 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 608;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"723 1104 LINE",
"760 1216 LINE",
"309 1216 LINE",
"277 1104 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 29 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 0 1 0 1 79 1 0 5 2 0 7 1 6 3 8 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 606;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = minus;
lastChange = "2018-08-16 15:06:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"944 371 LINE",
"944 486 LINE",
"156 486 LINE",
"156 371 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"944 371 LINE",
"944 502 LINE",
"156 502 LINE",
"156 371 LINE"
);
}
);
width = 1024;
}
);
note = minus;
unicode = 2212;
},
{
glyphname = mu;
lastChange = "2018-08-16 22:18:38 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"372 850 LINE",
"142 -451 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"144 -557 OFFCURVE",
"187 -510 OFFCURVE",
"187 -411 CURVE SMOOTH",
"187 -276 LINE SMOOTH",
"187 -208 OFFCURVE",
"198 -103 OFFCURVE",
"217 -27 CURVE",
"285 -27 OFFCURVE",
"356 33 OFFCURVE",
"477 182 CURVE SMOOTH",
"542 263 OFFCURVE",
"616 367 OFFCURVE",
"677 466 CURVE",
"618 137 LINE SMOOTH",
"614 115 OFFCURVE",
"610 90 OFFCURVE",
"610 66 CURVE SMOOTH",
"610 16 OFFCURVE",
"626 -27 OFFCURVE",
"670 -27 CURVE SMOOTH",
"750 -27 OFFCURVE",
"826 34 OFFCURVE",
"924 156 CURVE",
"880 195 LINE",
"824 133 OFFCURVE",
"786 102 OFFCURVE",
"763 102 CURVE SMOOTH",
"717 102 OFFCURVE",
"724 157 OFFCURVE",
"732 203 CURVE SMOOTH",
"848 848 LINE",
"746 848 LINE",
"713 659 OFFCURVE",
"646 528 OFFCURVE",
"542 363 CURVE SMOOTH",
"484 271 OFFCURVE",
"351 102 OFFCURVE",
"292 102 CURVE SMOOTH",
"267 102 OFFCURVE",
"258 128 OFFCURVE",
"258 169 CURVE SMOOTH",
"258 213 OFFCURVE",
"268 273 OFFCURVE",
"279 334 CURVE SMOOTH",
"334 636 LINE SMOOTH",
"342 680 OFFCURVE",
"350 726 OFFCURVE",
"350 764 CURVE SMOOTH",
"350 814 OFFCURVE",
"337 852 OFFCURVE",
"290 852 CURVE SMOOTH",
"214 852 OFFCURVE",
"137 789 OFFCURVE",
"45 662 CURVE",
"89 625 LINE",
"139 692 OFFCURVE",
"166 711 OFFCURVE",
"200 711 CURVE SMOOTH",
"235 711 OFFCURVE",
"235 655 OFFCURVE",
"230 625 CURVE",
"23 -417 LINE SMOOTH",
"18 -444 OFFCURVE",
"14 -477 OFFCURVE",
"14 -496 CURVE SMOOTH",
"15 -535 OFFCURVE",
"60 -557 OFFCURVE",
"86 -557 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 48 values pushed */
43 17 6 3 0 4 1 76 0 4 4 5 97 7 1 5 5 95 77 6 1 0 0 1 97 2 1 1 1 93 77 0 3 3 97 3 78 38 39 38 39 42 23 38 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 953;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"243 832 LINE",
"13 -469 LINE"
);
},
{
closed = 0;
nodes = (
"440 850 LINE",
"210 -451 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"152 -557 OFFCURVE",
"263 -510 OFFCURVE",
"263 -411 CURVE SMOOTH",
"263 -276 LINE SMOOTH",
"263 -208 OFFCURVE",
"273 -95 OFFCURVE",
"287 -19 CURVE",
"333 -1 OFFCURVE",
"389 41 OFFCURVE",
"445 99 CURVE SMOOTH",
"506 161 OFFCURVE",
"568 240 OFFCURVE",
"620 322 CURVE",
"594 170 LINE SMOOTH",
"590 150 OFFCURVE",
"588 130 OFFCURVE",
"588 110 CURVE SMOOTH",
"588 33 OFFCURVE",
"617 -27 OFFCURVE",
"700 -27 CURVE SMOOTH",
"779 -27 OFFCURVE",
"868 41 OFFCURVE",
"967 176 CURVE",
"910 225 LINE",
"866 169 OFFCURVE",
"834 142 OFFCURVE",
"817 142 CURVE SMOOTH",
"782 142 OFFCURVE",
"792 200 OFFCURVE",
"798 231 CURVE SMOOTH",
"909 848 LINE",
"716 848 LINE",
"677 638 OFFCURVE",
"659 545 OFFCURVE",
"558 372 CURVE SMOOTH",
"491 257 OFFCURVE",
"402 133 OFFCURVE",
"351 133 CURVE SMOOTH",
"334 133 OFFCURVE",
"328 155 OFFCURVE",
"328 184 CURVE SMOOTH",
"328 225 OFFCURVE",
"337 278 OFFCURVE",
"347 332 CURVE SMOOTH",
"404 639 LINE SMOOTH",
"409 664 OFFCURVE",
"411 689 OFFCURVE",
"411 712 CURVE SMOOTH",
"411 791 OFFCURVE",
"384 852 OFFCURVE",
"311 852 CURVE SMOOTH",
"222 852 OFFCURVE",
"134 780 OFFCURVE",
"42 646 CURVE",
"100 599 LINE",
"124 636 OFFCURVE",
"161 688 OFFCURVE",
"192 688 CURVE SMOOTH",
"219 688 OFFCURVE",
"213 654 OFFCURVE",
"206 616 CURVE SMOOTH",
"13 -459 LINE SMOOTH",
"8 -486 OFFCURVE",
"4 -509 OFFCURVE",
"4 -528 CURVE SMOOTH",
"4 -547 OFFCURVE",
"37 -557 OFFCURVE",
"72 -557 CURVE SMOOTH"
);
}
);
width = 992;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "BAFC64C2-61D7-4ACB-BA92-272B0955F108";
name = "Aug 16 18, 18:04";
paths = (
{
closed = 1;
nodes = (
"148 130 LINE",
"-20 -459 LINE SMOOTH",
"-28 -486 OFFCURVE",
"-32 -509 OFFCURVE",
"-32 -528 CURVE SMOOTH",
"-32 -547 OFFCURVE",
"-19 -556 OFFCURVE",
"8 -557 CURVE SMOOTH",
"105 -557 OFFCURVE",
"154 -504 OFFCURVE",
"154 -397 CURVE SMOOTH",
"154 -352 OFFCURVE",
"149 -311 OFFCURVE",
"149 -276 CURVE SMOOTH",
"149 -208 OFFCURVE",
"168 -99 OFFCURVE",
"202 -23 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 48 values pushed */
43 17 6 3 0 4 1 76 0 4 4 5 97 7 1 5 5 95 77 6 1 0 0 1 97 2 1 1 1 93 77 0 3 3 97 3 78 38 39 38 39 42 23 38 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 991;
}
);
note = mu;
unicode = 00B5;
},
{
glyphname = multiply;
lastChange = "2018-08-15 14:34:37 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"543 334 LINE",
"848 23 LINE",
"924 104 LINE",
"621 412 LINE",
"924 721 LINE",
"848 801 LINE",
"543 489 LINE",
"240 797 LINE",
"164 715 LINE",
"465 412 LINE",
"164 104 LINE",
"240 23 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
11 3 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 973;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"444 203 LINE",
"688 -39 LINE",
"825 98 LINE",
"582 342 LINE",
"825 584 LINE",
"688 721 LINE",
"444 479 LINE",
"203 721 LINE",
"66 584 LINE",
"307 342 LINE",
"66 98 LINE",
"203 -39 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 831;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = n;
lastChange = "2018-08-17 12:46:58 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{394, 0}";
},
{
name = top;
position = "{504, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"643 -207 LINE",
"1035 1254 LINE",
"933 1254 LINE",
"541 -207 LINE"
);
},
{
closed = 1;
nodes = (
"168 -165 LINE",
"560 1296 LINE",
"458 1296 LINE",
"66 -165 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"703 -27 OFFCURVE",
"793 34 OFFCURVE",
"889 156 CURVE",
"845 195 LINE",
"790 133 OFFCURVE",
"752 102 OFFCURVE",
"729 102 CURVE SMOOTH",
"688 102 OFFCURVE",
"686 149 OFFCURVE",
"696 203 CURVE SMOOTH",
"762 567 LINE SMOOTH",
"773 626 OFFCURVE",
"786 697 OFFCURVE",
"786 746 CURVE SMOOTH",
"786 812 OFFCURVE",
"760 852 OFFCURVE",
"675 852 CURVE SMOOTH",
"540 852 OFFCURVE",
"371 673 OFFCURVE",
"210 231 CURVE",
"233 243 LINE",
"303 624 LINE SMOOTH",
"311 670 OFFCURVE",
"319 718 OFFCURVE",
"319 757 CURVE SMOOTH",
"319 812 OFFCURVE",
"305 852 OFFCURVE",
"259 852 CURVE SMOOTH",
"183 852 OFFCURVE",
"117 789 OFFCURVE",
"25 662 CURVE",
"69 625 LINE",
"114 682 OFFCURVE",
"147 711 OFFCURVE",
"168 711 CURVE SMOOTH",
"203 711 OFFCURVE",
"209 665 OFFCURVE",
"202 626 CURVE SMOOTH",
"88 0 LINE",
"190 0 LINE",
"253 205 OFFCURVE",
"326 387 OFFCURVE",
"417 541 CURVE SMOOTH",
"509 696 OFFCURVE",
"584 772 OFFCURVE",
"641 772 CURVE SMOOTH",
"666 772 OFFCURVE",
"676 749 OFFCURVE",
"676 704 CURVE SMOOTH",
"676 676 OFFCURVE",
"673 636 OFFCURVE",
"663 582 CURVE SMOOTH",
"581 137 LINE SMOOTH",
"576 108 OFFCURVE",
"570 73 OFFCURVE",
"570 44 CURVE SMOOTH",
"570 3 OFFCURVE",
"582 -27 OFFCURVE",
"620 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 50 values pushed */
49 1 0 4 1 76 0 2 2 5 97 6 1 5 5 95 77 0 4 4 5 97 6 1 5 5 95 77 0 0 0 1 97 3 1 1 1 93 1 78 38 41 21 19 39 41 19 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 938;
},
{
anchors = (
{
name = bottom;
position = "{425, 0}";
},
{
name = top;
position = "{575, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"532 -182 LINE",
"726 -182 LINE",
"1108 1241 LINE",
"914 1241 LINE"
);
},
{
closed = 1;
nodes = (
"43 -192 LINE",
"237 -192 LINE",
"619 1231 LINE",
"425 1231 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"796 -27 OFFCURVE",
"879 41 OFFCURVE",
"975 176 CURVE",
"916 225 LINE",
"870 169 OFFCURVE",
"840 142 OFFCURVE",
"825 142 CURVE SMOOTH",
"799 142 OFFCURVE",
"806 185 OFFCURVE",
"814 231 CURVE SMOOTH",
"872 547 LINE SMOOTH",
"882 602 OFFCURVE",
"889 654 OFFCURVE",
"889 698 CURVE SMOOTH",
"889 791 OFFCURVE",
"855 852 OFFCURVE",
"741 852 CURVE SMOOTH",
"624 852 OFFCURVE",
"474 740 OFFCURVE",
"326 369 CURVE",
"347 335 LINE",
"407 666 LINE SMOOTH",
"411 686 OFFCURVE",
"413 706 OFFCURVE",
"413 725 CURVE SMOOTH",
"413 793 OFFCURVE",
"389 852 OFFCURVE",
"316 852 CURVE SMOOTH",
"241 852 OFFCURVE",
"146 786 OFFCURVE",
"44 655 CURVE",
"102 606 LINE",
"143 661 OFFCURVE",
"167 689 OFFCURVE",
"182 689 CURVE SMOOTH",
"211 689 OFFCURVE",
"212 664 OFFCURVE",
"204 621 CURVE SMOOTH",
"93 0 LINE",
"287 0 LINE",
"316 165 OFFCURVE",
"399 383 OFFCURVE",
"487 541 CURVE SMOOTH",
"553 659 OFFCURVE",
"623 743 OFFCURVE",
"675 743 CURVE SMOOTH",
"695 743 OFFCURVE",
"701 724 OFFCURVE",
"701 699 CURVE SMOOTH",
"701 668 OFFCURVE",
"693 621 OFFCURVE",
"685 580 CURVE SMOOTH",
"609 168 LINE SMOOTH",
"606 150 OFFCURVE",
"604 132 OFFCURVE",
"604 114 CURVE SMOOTH",
"604 42 OFFCURVE",
"635 -27 OFFCURVE",
"706 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
49 1 0 4 1 76 0 4 2 0 2 4 0 128 0 2 2 5 97 6 1 5 5 34 77 0 0 0 1 97 3 1 1 1 32 1 78 38 41 21 19 39 41 19 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 1000;
}
);
leftKerningGroup = m;
note = n;
unicode = 006E;
},
{
glyphname = nine;
lastChange = "2018-08-16 01:45:51 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1028 1215.667 OFFCURVE",
"931.333 1333 OFFCURVE",
"750 1333 CURVE SMOOTH",
"528.667 1333 OFFCURVE",
"359 1163 OFFCURVE",
"291 1015 CURVE SMOOTH",
"257 941 OFFCURVE",
"240 866 OFFCURVE",
"240 790 CURVE SMOOTH",
"240 670 OFFCURVE",
"333.333 551 OFFCURVE",
"480 551 CURVE SMOOTH",
"569.333 551 OFFCURVE",
"668 596 OFFCURVE",
"776 686 CURVE",
"653.333 419.333 OFFCURVE",
"486.333 220.333 OFFCURVE",
"105 27 CURVE",
"93 20.333 OFFCURVE",
"93 -25.667 OFFCURVE",
"113 -35 CURVE",
"122 -35 LINE",
"535.333 149 OFFCURVE",
"835.5 457.5 OFFCURVE",
"945.5 699.5 CURVE SMOOTH",
"1000.5 820.5 OFFCURVE",
"1028 933 OFFCURVE",
"1028 1037 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"867 961 OFFCURVE",
"847.667 868 OFFCURVE",
"809 774 CURVE",
"727.667 699.333 OFFCURVE",
"650 662 OFFCURVE",
"576 662 CURVE SMOOTH",
"477.333 662 OFFCURVE",
"413 737.667 OFFCURVE",
"413 871 CURVE SMOOTH",
"413 1043 OFFCURVE",
"540.667 1251 OFFCURVE",
"706 1251 CURVE SMOOTH",
"813.333 1251 OFFCURVE",
"867 1185 OFFCURVE",
"867 1053 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"227 52 OFFCURVE",
"383 148 OFFCURVE",
"519 278 CURVE SMOOTH",
"767 515 OFFCURVE",
"855 786 OFFCURVE",
"855 994 CURVE SMOOTH",
"855 1190 OFFCURVE",
"764 1333 OFFCURVE",
"568 1333 CURVE SMOOTH",
"269 1333 OFFCURVE",
"108 1058 OFFCURVE",
"108 833 CURVE SMOOTH",
"108 675 OFFCURVE",
"203 551 OFFCURVE",
"363 551 CURVE SMOOTH",
"470 551 OFFCURVE",
"573 600 OFFCURVE",
"664 690 CURVE",
"539 350 OFFCURVE",
"317 168 OFFCURVE",
"37 20 CURVE",
"56 -28 LINE"
);
},
{
closed = 1;
nodes = (
"332 642 OFFCURVE",
"253 754 OFFCURVE",
"253 900 CURVE SMOOTH",
"253 1020 OFFCURVE",
"340 1272 OFFCURVE",
"527 1272 CURVE SMOOTH",
"664 1272 OFFCURVE",
"721 1147 OFFCURVE",
"721 991 CURVE SMOOTH",
"721 918 OFFCURVE",
"707 831 OFFCURVE",
"688 770 CURVE",
"613 695 OFFCURVE",
"519 642 OFFCURVE",
"444 642 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
11 1 3 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 92 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 35 37 44 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1061 694 OFFCURVE",
"1061 1014 QCURVE SMOOTH",
"1061 1153 OFFCURVE",
"912 1333 OFFCURVE",
"758 1333 QCURVE SMOOTH",
"553 1333 OFFCURVE",
"395 1192 QCURVE SMOOTH",
"313 1118 OFFCURVE",
"201 901 OFFCURVE",
"201 797 QCURVE SMOOTH",
"201 686 OFFCURVE",
"348 535 OFFCURVE",
"477 535 QCURVE SMOOTH",
"528 535 OFFCURVE",
"668 594 OFFCURVE",
"711 627 QCURVE",
"588 410 OFFCURVE",
"325 152 OFFCURVE",
"102 43 QCURVE SMOOTH",
"90 37 OFFCURVE",
"90 -10 OFFCURVE",
"109 -47 OFFCURVE",
"123 -41 QCURVE SMOOTH",
"500 119 OFFCURVE",
"752 377 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"834 991 OFFCURVE",
"789 796 OFFCURVE",
"756 733 QCURVE",
"676 674 OFFCURVE",
"580 674 QCURVE SMOOTH",
"516 674 OFFCURVE",
"446 782 OFFCURVE",
"446 860 QCURVE SMOOTH",
"446 979 OFFCURVE",
"591 1227 OFFCURVE",
"700 1227 QCURVE SMOOTH",
"834 1227 OFFCURVE",
"834 1063 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"285 42 OFFCURVE",
"452 150 OFFCURVE",
"593 283 CURVE SMOOTH",
"833 509 OFFCURVE",
"940 755 OFFCURVE",
"940 965 CURVE SMOOTH",
"940 1175 OFFCURVE",
"825 1333 OFFCURVE",
"604 1333 CURVE SMOOTH",
"230 1333 OFFCURVE",
"93 989 OFFCURVE",
"93 826 CURVE SMOOTH",
"93 660 OFFCURVE",
"213 535 OFFCURVE",
"396 535 CURVE SMOOTH",
"465 535 OFFCURVE",
"564 578 OFFCURVE",
"622 627 CURVE",
"486 342 OFFCURVE",
"344 184 OFFCURVE",
"66 43 CURVE",
"94 -41 LINE"
);
},
{
closed = 1;
nodes = (
"388 674 OFFCURVE",
"335 784 OFFCURVE",
"335 897 CURVE SMOOTH",
"335 1003 OFFCURVE",
"397 1227 OFFCURVE",
"555 1227 CURVE SMOOTH",
"655 1227 OFFCURVE",
"705 1156 OFFCURVE",
"705 1015 CURVE SMOOTH",
"705 938 OFFCURVE",
"687 800 OFFCURVE",
"656 733 CURVE",
"609 694 OFFCURVE",
"553 674 OFFCURVE",
"486 674 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
9 1 0 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 31 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 37 38 43 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = nine.oldstyle;
lastChange = "2018-08-16 01:47:30 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1034 765.333 OFFCURVE",
"944 852 OFFCURVE",
"764 852 CURVE SMOOTH",
"449.333 852 OFFCURVE",
"209 588.333 OFFCURVE",
"209 315 CURVE SMOOTH",
"209 175 OFFCURVE",
"291.667 84 OFFCURVE",
"457 84 CURVE SMOOTH",
"525 84 OFFCURVE",
"597.333 110 OFFCURVE",
"674 162 CURVE SMOOTH",
"686 170 OFFCURVE",
"695.667 174 OFFCURVE",
"703 174 CURVE SMOOTH",
"719 174 OFFCURVE",
"720.333 165 OFFCURVE",
"707 147 CURVE SMOOTH",
"571 -37 OFFCURVE",
"431.667 -154.167 OFFCURVE",
"257 -269.5 CURVE SMOOTH",
"169.667 -327.167 OFFCURVE",
"74.333 -376.667 OFFCURVE",
"-29 -418 CURVE SMOOTH",
"-41.667 -422.667 OFFCURVE",
"-48 -430.333 OFFCURVE",
"-48 -441 CURVE SMOOTH",
"-48 -451.667 OFFCURVE",
"-44.667 -458.333 OFFCURVE",
"-38 -461 CURVE",
"-29 -461 LINE",
"221.667 -382.333 OFFCURVE",
"395.833 -313.333 OFFCURVE",
"640.5 -112 CURVE SMOOTH",
"885.167 89.333 OFFCURVE",
"1034 345.333 OFFCURVE",
"1034 592 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"874 377.333 OFFCURVE",
"716.667 197 OFFCURVE",
"526 197 CURVE SMOOTH",
"423.333 197 OFFCURVE",
"379 271 OFFCURVE",
"379 383 CURVE SMOOTH",
"379 612.333 OFFCURVE",
"549.333 784 OFFCURVE",
"692 784 CURVE SMOOTH",
"810.667 784 OFFCURVE",
"874 712 OFFCURVE",
"874 584 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"247 -365 OFFCURVE",
"386 -284 OFFCURVE",
"571 -117 CURVE SMOOTH",
"807 97 OFFCURVE",
"896 362 OFFCURVE",
"896 552 CURVE SMOOTH",
"896 739 OFFCURVE",
"813 868 OFFCURVE",
"607 868 CURVE SMOOTH",
"305 868 OFFCURVE",
"116 607 OFFCURVE",
"116 367 CURVE SMOOTH",
"116 186 OFFCURVE",
"228 84 OFFCURVE",
"381 84 CURVE SMOOTH",
"452 84 OFFCURVE",
"582 100 OFFCURVE",
"741 271 CURVE",
"700 280 LINE",
"665 127 OFFCURVE",
"475 -77 OFFCURVE",
"355 -178 CURVE SMOOTH",
"237 -277 OFFCURVE",
"91 -361 OFFCURVE",
"-52 -420 CURVE",
"-43 -461 LINE"
);
},
{
closed = 1;
nodes = (
"327 185 OFFCURVE",
"259 304 OFFCURVE",
"259 441 CURVE SMOOTH",
"259 577 OFFCURVE",
"357 808 OFFCURVE",
"550 808 CURVE SMOOTH",
"711 808 OFFCURVE",
"773 719 OFFCURVE",
"773 585 CURVE SMOOTH",
"773 409 OFFCURVE",
"660 185 OFFCURVE",
"438 185 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
0 0 1 4 1 0 4 131 0 1 0 4 3 1 4 109 0 3 2 2 3 93 0 3 3 2 98 0 2 3 2 82 36 35 36 35 30 5 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 972;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1092 610 OFFCURVE",
"1085 641 QCURVE",
"1048 852 OFFCURVE",
"788 852 QCURVE SMOOTH",
"534 852 OFFCURVE",
"354 668 QCURVE SMOOTH",
"305 618 OFFCURVE",
"266 555 QCURVE SMOOTH",
"193 434 OFFCURVE",
"193 348 QCURVE SMOOTH",
"192 240 OFFCURVE",
"258 170 QCURVE SMOOTH",
"338 84 OFFCURVE",
"475 84 QCURVE SMOOTH",
"549 84 OFFCURVE",
"625 123 QCURVE",
"639 129 OFFCURVE",
"649 129 QCURVE",
"657 127 LINE",
"662 119 LINE",
"659 110 OFFCURVE",
"649 96 QCURVE",
"643 90 LINE",
"583 18 OFFCURVE",
"575 10 QCURVE",
"567 4 OFFCURVE",
"561 -4 QCURVE",
"364 -207 OFFCURVE",
"-27 -412 QCURVE",
"-31 -416 LINE",
"-33 -420 OFFCURVE",
"-33 -428 QCURVE",
"-32 -455 OFFCURVE",
"-20 -461 QCURVE",
"-10 -461 LINE",
"127 -422 OFFCURVE",
"231 -381 QCURVE SMOOTH",
"471 -287 OFFCURVE",
"690 -115 QCURVE SMOOTH",
"842 2 OFFCURVE",
"942 145 QCURVE SMOOTH",
"1092 360 OFFCURVE",
"1092 571 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"856 436 OFFCURVE",
"788 338 QCURVE SMOOTH",
"706 215 OFFCURVE",
"571 215 QCURVE SMOOTH",
"434 215 OFFCURVE",
"434 393 QCURVE SMOOTH",
"434 417 OFFCURVE",
"436 444 QCURVE",
"455 582 OFFCURVE",
"543 682 QCURVE SMOOTH",
"618 770 OFFCURVE",
"700 770 QCURVE SMOOTH",
"856 770 OFFCURVE",
"856 563 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"265 -380 OFFCURVE",
"455 -295 OFFCURVE",
"669 -113 CURVE SMOOTH",
"871 58 OFFCURVE",
"990 319 OFFCURVE",
"990 527 CURVE SMOOTH",
"990 734 OFFCURVE",
"885 870 OFFCURVE",
"657 870 CURVE SMOOTH",
"276 870 OFFCURVE",
"114 547 OFFCURVE",
"114 371 CURVE SMOOTH",
"114 196 OFFCURVE",
"240 84 OFFCURVE",
"430 84 CURVE SMOOTH",
"486 84 OFFCURVE",
"604 106 OFFCURVE",
"732 181 CURVE",
"734 268 LINE",
"675 130 OFFCURVE",
"437 -104 OFFCURVE",
"355 -177 CURVE SMOOTH",
"241 -279 OFFCURVE",
"97 -362 OFFCURVE",
"-30 -408 CURVE",
"-7 -464 LINE"
);
},
{
closed = 1;
nodes = (
"396 215 OFFCURVE",
"351 304 OFFCURVE",
"351 415 CURVE SMOOTH",
"351 536 OFFCURVE",
"435 784 OFFCURVE",
"596 784 CURVE SMOOTH",
"715 784 OFFCURVE",
"767 680 OFFCURVE",
"767 554 CURVE SMOOTH",
"767 406 OFFCURVE",
"681 215 OFFCURVE",
"491 215 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 39 values pushed */
25 1 0 3 1 76 11 1 0 73 0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 34 2 78 54 52 46 44 40 38 30 28 4 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1009;
}
);
note = nine.oldstyle;
},
{
glyphname = ntilde;
lastChange = "2018-08-17 12:47:08 +0000";
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 425, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 938;
},
{
components = (
{
alignment = -1;
name = n;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 497, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1000;
}
);
leftMetricsKey = "=n";
widthMetricsKey = n;
note = ntilde;
unicode = 00F1;
},
{
glyphname = numbersign;
lastChange = "2018-08-16 15:33:45 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"112 10 LINE",
"285 397 LINE",
"526 397 LINE",
"356 10 LINE",
"446 10 LINE",
"616 397 LINE",
"836 397 LINE",
"851 483 LINE",
"654 483 LINE",
"810 836 LINE",
"1029 836 LINE",
"1045 922 LINE",
"851 922 LINE",
"994 1249 LINE",
"906 1249 LINE",
"761 922 LINE",
"519 922 LINE",
"664 1249 LINE",
"574 1249 LINE",
"429 922 LINE",
"193 922 LINE",
"177 836 LINE",
"390 836 LINE",
"232 483 LINE",
"-1 483 LINE",
"-16 397 LINE",
"195 397 LINE",
"24 10 LINE"
);
},
{
closed = 1;
nodes = (
"478 836 LINE",
"720 836 LINE",
"566 483 LINE",
"322 483 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 7 6 7 133 10 8 2 6 14 11 2 5 4 6 5 104 16 15 12 3 4 13 3 2 1 0 4 1 103 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 1 7 6 7 133 2 1 0 1 0 134 10 8 2 6 14 11 2 5 4 6 5 104 16 15 12 3 4 1 1 4 87 16 15 12 3 4 4 1 95 13 3 2 1 4 1 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"145 10 LINE",
"308 381 LINE",
"488 381 LINE",
"325 10 LINE",
"460 10 LINE",
"624 381 LINE",
"839 381 LINE",
"863 514 LINE",
"682 514 LINE",
"811 803 LINE",
"1024 803 LINE",
"1047 934 LINE",
"869 934 LINE",
"1008 1249 LINE",
"873 1249 LINE",
"734 934 LINE",
"554 934 LINE",
"693 1249 LINE",
"558 1249 LINE",
"419 934 LINE",
"189 934 LINE",
"166 803 LINE",
"361 803 LINE",
"234 514 LINE",
"5 514 LINE",
"-19 381 LINE",
"175 381 LINE",
"10 10 LINE"
);
},
{
closed = 1;
nodes = (
"496 803 LINE",
"676 803 LINE",
"549 514 LINE",
"369 514 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 7 6 7 133 10 8 2 6 14 11 2 5 4 6 5 104 16 15 12 3 4 13 3 2 1 0 4 1 103 2 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 1 7 6 7 133 2 1 0 1 0 134 10 8 2 6 14 11 2 5 4 6 5 104 16 15 12 3 4 1 1 4 87 16 15 12 3 4 4 1 95 13 3 2 1 4 1 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
28 28 28 31 28 31 30 29 27 26 25 24 23 22 21 20 19 18 17 17 17 17 17 17 17 17 16 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1013;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = o;
lastChange = "2018-08-18 14:13:50 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{327, 0}";
},
{
name = center;
position = "{390, 408}";
},
{
name = ogonek;
position = "{650, 10}";
},
{
name = top;
position = "{437, 856}";
},
{
name = topright;
position = "{859, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"594 -27 OFFCURVE",
"799 253 OFFCURVE",
"799 537 CURVE SMOOTH",
"799 730 OFFCURVE",
"718 852 OFFCURVE",
"558 852 CURVE SMOOTH",
"318 852 OFFCURVE",
"76 565 OFFCURVE",
"76 305 CURVE SMOOTH",
"76 106 OFFCURVE",
"154 -27 OFFCURVE",
"318 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"227 34 OFFCURVE",
"188 108 OFFCURVE",
"188 229 CURVE SMOOTH",
"188 454 OFFCURVE",
"375 791 OFFCURVE",
"565 791 CURVE SMOOTH",
"645 791 OFFCURVE",
"683 718 OFFCURVE",
"683 596 CURVE SMOOTH",
"683 373 OFFCURVE",
"495 34 OFFCURVE",
"308 34 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"556 -27 OFFCURVE",
"732 220 OFFCURVE",
"732 485 CURVE SMOOTH",
"732 680 OFFCURVE",
"650 852 OFFCURVE",
"471 852 CURVE SMOOTH",
"233 852 OFFCURVE",
"25 592 OFFCURVE",
"25 343 CURVE SMOOTH",
"25 153 OFFCURVE",
"113 -27 OFFCURVE",
"288 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"183 34 OFFCURVE",
"144 150 OFFCURVE",
"144 269 CURVE SMOOTH",
"144 492 OFFCURVE",
"294 791 OFFCURVE",
"473 791 CURVE SMOOTH",
"572 791 OFFCURVE",
"610 675 OFFCURVE",
"610 556 CURVE SMOOTH",
"610 335 OFFCURVE",
"459 34 OFFCURVE",
"283 34 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 2 2 1 97 0 1 1 95 77 0 3 3 0 97 0 0 0 93 0 78 35 35 36 34 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 804;
},
{
anchors = (
{
name = bottom;
position = "{364, 0}";
},
{
name = center;
position = "{428, 419}";
},
{
name = ogonek;
position = "{715, 10}";
},
{
name = top;
position = "{534, 856}";
},
{
name = topright;
position = "{932, 856}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"632 -27 OFFCURVE",
"825 219 OFFCURVE",
"825 481 CURVE SMOOTH",
"825 691 OFFCURVE",
"719 852 OFFCURVE",
"517 852 CURVE SMOOTH",
"271 852 OFFCURVE",
"45 592 OFFCURVE",
"45 348 CURVE SMOOTH",
"45 145 OFFCURVE",
"157 -27 OFFCURVE",
"354 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"273 86 OFFCURVE",
"237 134 OFFCURVE",
"237 230 CURVE SMOOTH",
"237 425 OFFCURVE",
"403 748 OFFCURVE",
"536 748 CURVE SMOOTH",
"602 748 OFFCURVE",
"638 700 OFFCURVE",
"638 605 CURVE SMOOTH",
"638 412 OFFCURVE",
"464 86 OFFCURVE",
"344 86 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 2 2 1 97 0 1 1 34 77 0 3 3 0 97 0 0 0 32 0 78 35 35 36 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 877;
}
);
leftKerningGroup = c;
note = o;
unicode = 006F;
},
{
glyphname = oacute;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 374, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = oacute;
unicode = 00F3;
},
{
glyphname = obreve;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 360, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 455, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = obreve;
unicode = 014F;
},
{
glyphname = ocircumflex;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 383, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 490, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = ocircumflex;
unicode = 00F4;
},
{
glyphname = odieresis;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 361, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 457, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = odieresis;
unicode = 00F6;
},
{
glyphname = oe;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"375 -27 OFFCURVE",
"461 12 OFFCURVE",
"539 93 CURVE",
"574 13 OFFCURVE",
"636 -27 OFFCURVE",
"730 -27 CURVE SMOOTH",
"821 -27 OFFCURVE",
"914 36 OFFCURVE",
"1007 164 CURVE",
"977 195 LINE",
"929 147 OFFCURVE",
"848 72 OFFCURVE",
"763 72 CURVE SMOOTH",
"658 72 OFFCURVE",
"633 182 OFFCURVE",
"633 267 CURVE SMOOTH",
"633 292 OFFCURVE",
"635 320 OFFCURVE",
"639 356 CURVE",
"828 390 OFFCURVE",
"1081 543 OFFCURVE",
"1081 721 CURVE SMOOTH",
"1081 808 OFFCURVE",
"1034 852 OFFCURVE",
"949 852 CURVE SMOOTH",
"849 852 OFFCURVE",
"752 790 OFFCURVE",
"659 665 CURVE",
"614 791 OFFCURVE",
"540 852 OFFCURVE",
"434 852 CURVE SMOOTH",
"200 852 OFFCURVE",
"27 598 OFFCURVE",
"27 348 CURVE SMOOTH",
"27 176 OFFCURVE",
"93 -27 OFFCURVE",
"282 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"182 68 OFFCURVE",
"147 172 OFFCURVE",
"147 261 CURVE SMOOTH",
"147 488 OFFCURVE",
"294 768 OFFCURVE",
"451 768 CURVE SMOOTH",
"550 768 OFFCURVE",
"577 650 OFFCURVE",
"577 563 CURVE SMOOTH",
"577 350 OFFCURVE",
"427 68 OFFCURVE",
"278 68 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"677 530 OFFCURVE",
"720 643 OFFCURVE",
"776 708 CURVE SMOOTH",
"814 753 OFFCURVE",
"850 772 OFFCURVE",
"893 772 CURVE SMOOTH",
"933 772 OFFCURVE",
"960 748 OFFCURVE",
"960 694 CURVE SMOOTH",
"960 564 OFFCURVE",
"819 454 OFFCURVE",
"651 419 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 9 values pushed */
41 31 20 14 4 0 5 1 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
41 31 20 14 4 0 6 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
6 1 5 5 3 97 4 1 3 3 95 77 7 1 0 0 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
0 5 5 3 97 4 1 3 3 95 77 0 6 6 3 97 4 1 3 3 95 77 0 0 0 1 97 2 1 1 1 93 77 0 7 7 1 97 2 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 39 34 34 37 34 41 38 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1107;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"421 -27 OFFCURVE",
"504 2 OFFCURVE",
"584 59 CURVE",
"629 2 OFFCURVE",
"697 -27 OFFCURVE",
"790 -27 CURVE SMOOTH",
"901 -27 OFFCURVE",
"998 37 OFFCURVE",
"1081 164 CURVE",
"1034 211 LINE",
"1004 180 OFFCURVE",
"910 104 OFFCURVE",
"836 104 CURVE SMOOTH",
"775 104 OFFCURVE",
"731 154 OFFCURVE",
"731 252 CURVE SMOOTH",
"731 268 OFFCURVE",
"733 303 OFFCURVE",
"739 356 CURVE",
"905 397 OFFCURVE",
"1188 505 OFFCURVE",
"1188 696 CURVE SMOOTH",
"1188 742 OFFCURVE",
"1173 852 OFFCURVE",
"1007 852 CURVE SMOOTH",
"911 852 OFFCURVE",
"818 805 OFFCURVE",
"728 711 CURVE",
"693 774 OFFCURVE",
"617 852 OFFCURVE",
"499 852 CURVE SMOOTH",
"288 852 OFFCURVE",
"46 619 OFFCURVE",
"46 351 CURVE SMOOTH",
"46 175 OFFCURVE",
"136 -27 OFFCURVE",
"335 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"261 86 OFFCURVE",
"236 170 OFFCURVE",
"236 235 CURVE SMOOTH",
"236 365 OFFCURVE",
"357 748 OFFCURVE",
"512 748 CURVE SMOOTH",
"599 748 OFFCURVE",
"604 619 OFFCURVE",
"604 550 CURVE SMOOTH",
"604 454 OFFCURVE",
"482 86 OFFCURVE",
"341 86 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"772 507 OFFCURVE",
"810 635 OFFCURVE",
"859 702 CURVE SMOOTH",
"885 737 OFFCURVE",
"911 754 OFFCURVE",
"939 754 CURVE SMOOTH",
"959 754 OFFCURVE",
"985 733 OFFCURVE",
"985 676 CURVE SMOOTH",
"985 571 OFFCURVE",
"869 486 OFFCURVE",
"757 449 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
53 44 40 3 1 6 17 1 0 1 22 1 2 0 3 76 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
53 44 40 3 1 6 17 1 0 1 22 1 2 8 3 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 16 values pushed */
53 44 40 3 1 7 17 1 0 1 22 1 2 8 3 76 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 1 6 0 6 1 0 128 7 1 6 6 4 97 5 1 4 4 34 77 8 1 0 0 2 97 3 1 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 1 6 0 6 1 0 128 7 1 6 6 4 97 5 1 4 4 34 77 0 0 0 2 97 3 1 2 2 32 77 0 8 8 2 97 3 1 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 1 7 0 7 1 0 128 0 6 6 4 97 5 1 4 4 34 77 0 7 7 4 97 5 1 4 4 34 77 0 0 0 2 97 3 1 2 2 32 77 0 8 8 2 97 3 1 2 2 32 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
25 26 52 38 40 34 37 50 39 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1177;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "D7BA91A8-B877-4360-B4F1-D72AAE50C8E3";
name = "Aug 14 18, 10:29";
paths = (
{
closed = 1;
nodes = (
"1196 814 OFFCURVE",
"1152 852 OFFCURVE",
"1065 852 CURVE SMOOTH",
"964 852 OFFCURVE",
"862 791 OFFCURVE",
"761 670 CURVE",
"727 791 OFFCURVE",
"657 852 OFFCURVE",
"550 852 CURVE SMOOTH",
"443 852 OFFCURVE",
"341 793 OFFCURVE",
"244 676 CURVE SMOOTH",
"145 558 OFFCURVE",
"96 434 OFFCURVE",
"96 305 CURVE SMOOTH",
"96 109 OFFCURVE",
"170 -27 OFFCURVE",
"322 -27 CURVE SMOOTH",
"415 -27 OFFCURVE",
"504 12 OFFCURVE",
"588 90 CURVE",
"616 12 OFFCURVE",
"677 -27 OFFCURVE",
"770 -27 CURVE SMOOTH",
"863 -27 OFFCURVE",
"962 37 OFFCURVE",
"1065 164 CURVE",
"1067 167 OFFCURVE",
"1068 170 OFFCURVE",
"1068 173 CURVE SMOOTH",
"1068 191 OFFCURVE",
"1060 200 OFFCURVE",
"1044 200 CURVE SMOOTH",
"1041 200 OFFCURVE",
"1038 199 OFFCURVE",
"1036 197 CURVE",
"983 148 OFFCURVE",
"895 72 OFFCURVE",
"811 72 CURVE SMOOTH",
"737 72 OFFCURVE",
"700 127 OFFCURVE",
"700 238 CURVE SMOOTH",
"700 267 OFFCURVE",
"705 306 OFFCURVE",
"715 356 CURVE",
"914 393 OFFCURVE",
"1196 554 OFFCURVE",
"1196 737 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1053 574 OFFCURVE",
"908 456 OFFCURVE",
"733 420 CURVE",
"768 531 OFFCURVE",
"821 644 OFFCURVE",
"890 717 CURVE SMOOTH",
"925 754 OFFCURVE",
"961 772 OFFCURVE",
"999 772 CURVE SMOOTH",
"1035 772 OFFCURVE",
"1053 752 OFFCURVE",
"1053 711 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"666 396 OFFCURVE",
"457 68 OFFCURVE",
"326 68 CURVE SMOOTH",
"257 68 OFFCURVE",
"213 130 OFFCURVE",
"213 231 CURVE SMOOTH",
"213 438 OFFCURVE",
"419 768 OFFCURVE",
"560 768 CURVE SMOOTH",
"631 768 OFFCURVE",
"666 708 OFFCURVE",
"666 588 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 9 values pushed */
41 31 20 14 4 0 5 1 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
41 31 20 14 4 0 6 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
6 1 5 5 3 97 4 1 3 3 95 77 7 1 0 0 1 97 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
0 5 5 3 97 4 1 3 3 95 77 0 6 6 3 97 4 1 3 3 95 77 0 0 0 1 97 2 1 1 1 93 77 0 7 7 1 97 2 1 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
36 39 34 34 37 34 41 38 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1169;
}
);
leftKerningGroup = c;
leftMetricsKey = "=o";
note = oe;
rightKerningGroup = ae;
rightMetricsKey = "=e";
unicode = 0153;
},
{
glyphname = ogonek;
lastChange = "2018-08-14 11:39:20 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"415 -488 OFFCURVE",
"482 -458 OFFCURVE",
"525 -398 CURVE",
"509 -373 LINE",
"468 -392 OFFCURVE",
"432 -402 OFFCURVE",
"401 -402 CURVE SMOOTH",
"273 -402 OFFCURVE",
"261 -298 OFFCURVE",
"261 -259 CURVE SMOOTH",
"262 -176 OFFCURVE",
"325 -89 OFFCURVE",
"453 0 CURVE",
"368 0 LINE",
"210 -103 OFFCURVE",
"131 -201 OFFCURVE",
"131 -295 CURVE SMOOTH",
"131 -340 OFFCURVE",
"142 -488 OFFCURVE",
"326 -488 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 33 values pushed */
15 1 2 1 1 76 0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 35 19 33 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"143 -451 OFFCURVE",
"211 -489 OFFCURVE",
"296 -489 CURVE SMOOTH",
"382 -489 OFFCURVE",
"486 -450 OFFCURVE",
"557 -375 CURVE",
"549 -336 LINE",
"514 -357 OFFCURVE",
"477 -367 OFFCURVE",
"436 -367 CURVE SMOOTH",
"372 -367 OFFCURVE",
"340 -342 OFFCURVE",
"340 -293 CURVE SMOOTH",
"340 -206 OFFCURVE",
"423 -94 OFFCURVE",
"590 41 CURVE",
"483 41 LINE",
"256 -108 OFFCURVE",
"143 -246 OFFCURVE",
"143 -373 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"405 -489 OFFCURVE",
"513 -446 OFFCURVE",
"578 -368 CURVE",
"559 -336 LINE",
"526 -357 OFFCURVE",
"490 -367 OFFCURVE",
"449 -367 CURVE SMOOTH",
"380 -367 OFFCURVE",
"345 -338 OFFCURVE",
"345 -280 CURVE SMOOTH",
"345 -195 OFFCURVE",
"420 -87 OFFCURVE",
"567 41 CURVE",
"460 41 LINE",
"257 -101 OFFCURVE",
"155 -232 OFFCURVE",
"155 -354 CURVE SMOOTH",
"155 -415 OFFCURVE",
"190 -489 OFFCURVE",
"319 -489 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 33 values pushed */
9 1 1 0 1 76 0 0 1 0 133 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 20 35 18 3 8 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = ograve;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 359, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 452, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = ograve;
unicode = 00F2;
},
{
glyphname = omacron;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
name = o;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 364, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
name = o;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 454, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = omacron;
unicode = 014D;
},
{
glyphname = one;
lastChange = "2018-08-18 21:54:52 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"798 1188 LINE SMOOTH",
"812 1240 OFFCURVE",
"831 1299 OFFCURVE",
"854 1364 CURVE",
"854 1371 OFFCURVE",
"851 1374 OFFCURVE",
"845 1374 CURVE SMOOTH",
"838 1374 OFFCURVE",
"830 1371 OFFCURVE",
"821 1366 CURVE",
"677 1273 OFFCURVE",
"551 1204 OFFCURVE",
"444 1157 CURVE SMOOTH",
"427 1149 OFFCURVE",
"433 1104 OFFCURVE",
"452 1112 CURVE SMOOTH",
"594 1169 LINE",
"604 1174 OFFCURVE",
"613 1176 OFFCURVE",
"622 1176 CURVE SMOOTH",
"630 1176 OFFCURVE",
"634 1170 OFFCURVE",
"634 1158 CURVE SMOOTH",
"634 1152 OFFCURVE",
"632 1143 OFFCURVE",
"629 1131 CURVE SMOOTH",
"396 260 LINE SMOOTH",
"345 69 OFFCURVE",
"313 49 OFFCURVE",
"145 49 CURVE SMOOTH",
"119 49 OFFCURVE",
"108 -8 OFFCURVE",
"129 -8 CURVE",
"186 -3 OFFCURVE",
"274 0 OFFCURVE",
"393 0 CURVE SMOOTH",
"512 0 OFFCURVE",
"599 -3 OFFCURVE",
"656 -8 CURVE",
"681 -8 OFFCURVE",
"692 49 OFFCURVE",
"671 49 CURVE SMOOTH",
"571 49 OFFCURVE",
"523 54 OFFCURVE",
"523 118 CURVE SMOOTH",
"523 147 OFFCURVE",
"532 195 OFFCURVE",
"550 262 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"550 0 LINE",
"559 49 LINE",
"463 49 OFFCURVE",
"408 58 OFFCURVE",
"408 164 CURVE SMOOTH",
"408 190 OFFCURVE",
"411 223 OFFCURVE",
"418 262 CURVE SMOOTH",
"581 1188 LINE SMOOTH",
"589 1232 OFFCURVE",
"598 1277 OFFCURVE",
"619 1360 CURVE",
"596 1373 LINE",
"509 1296 OFFCURVE",
"424 1228 OFFCURVE",
"266 1157 CURVE",
"277 1110 LINE",
"486 1199 LINE",
"470 1220 LINE",
"301 260 LINE SMOOTH",
"269 81 OFFCURVE",
"238 49 OFFCURVE",
"69 49 CURVE",
"60 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
0 3 0 3 133 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 3 0 3 133 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
22 36 21 19 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 712;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"708 -8 OFFCURVE",
"729 68 OFFCURVE",
"713 68 QCURVE SMOOTH",
"614 68 OFFCURVE",
"594 123 QCURVE SMOOTH",
"586 143 OFFCURVE",
"586 170 QCURVE",
"585 215 OFFCURVE",
"608 283 QCURVE",
"844 1161 LINE SMOOTH",
"864 1247 OFFCURVE",
"893 1321 QCURVE",
"897 1333 OFFCURVE",
"897 1341 QCURVE SMOOTH",
"897 1352 OFFCURVE",
"891 1360 QCURVE",
"878 1374 OFFCURVE",
"858 1374 QCURVE SMOOTH",
"844 1374 OFFCURVE",
"811 1354 QCURVE SMOOTH",
"594 1213 OFFCURVE",
"406 1141 QCURVE SMOOTH",
"383 1133 OFFCURVE",
"394 1075 OFFCURVE",
"412 1081 QCURVE",
"446 1094 OFFCURVE",
"575 1141 QCURVE SMOOTH",
"598 1149 OFFCURVE",
"606 1120 OFFCURVE",
"596 1087 QCURVE SMOOTH",
"381 281 LINE SMOOTH",
"346 158 OFFCURVE",
"249 68 OFFCURVE",
"145 68 QCURVE",
"131 70 OFFCURVE",
"121 31 QCURVE SMOOTH",
"117 14 OFFCURVE",
"117 4 QCURVE SMOOTH",
"117 -8 OFFCURVE",
"125 -8 QCURVE",
"207 0 OFFCURVE",
"412 0 QCURVE SMOOTH",
"610 0 OFFCURVE",
"692 -8 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"655 0 LINE",
"667 68 LINE",
"567 69 OFFCURVE",
"532 105 OFFCURVE",
"532 186 CURVE SMOOTH",
"532 213 OFFCURVE",
"536 245 OFFCURVE",
"543 283 CURVE SMOOTH",
"698 1161 LINE SMOOTH",
"708 1220 OFFCURVE",
"722 1283 OFFCURVE",
"735 1331 CURVE",
"657 1372 LINE",
"550 1295 OFFCURVE",
"453 1227 OFFCURVE",
"262 1141 CURVE",
"275 1081 LINE",
"492 1162 LINE",
"475 1187 LINE",
"316 281 LINE SMOOTH",
"289 126 OFFCURVE",
"243 68 OFFCURVE",
"100 68 CURVE",
"88 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
6 1 0 1 1 76 4 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
0 2 2 37 77 3 1 1 1 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
3 1 1 0 0 1 0 101 0 2 2 37 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 2 1 2 133 3 1 1 0 0 1 89 3 1 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
29 46 38 33 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = one;
unicode = 0031;
},
{
glyphname = one.oldstyle;
lastChange = "2018-08-16 01:50:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"618 721 LINE SMOOTH",
"633.333 774.333 OFFCURVE",
"680.667 801 OFFCURVE",
"760 801 CURVE SMOOTH",
"785.19 801 OFFCURVE",
"795.128 856 OFFCURVE",
"776 856 CURVE",
"735.333 852 OFFCURVE",
"670.167 850 OFFCURVE",
"580.5 850 CURVE SMOOTH",
"490.833 850 OFFCURVE",
"425.667 852 OFFCURVE",
"385 856 CURVE",
"362.921 856 OFFCURVE",
"348.903 801 OFFCURVE",
"369 801 CURVE SMOOTH",
"434.333 801 OFFCURVE",
"467 783.667 OFFCURVE",
"467 749 CURVE SMOOTH",
"467 741 OFFCURVE",
"465.667 732.333 OFFCURVE",
"463 723 CURVE SMOOTH",
"293 125 LINE SMOOTH",
"277 74.333 OFFCURVE",
"230.667 49 OFFCURVE",
"154 49 CURVE SMOOTH",
"130.603 49 OFFCURVE",
"118.719 -8 OFFCURVE",
"137 -8 CURVE",
"191.667 -2.667 OFFCURVE",
"256.833 0 OFFCURVE",
"332.5 0 CURVE SMOOTH",
"408.167 0 OFFCURVE",
"473.333 -2.667 OFFCURVE",
"528 -8 CURVE",
"550.241 -8 OFFCURVE",
"562.537 49 OFFCURVE",
"543 49 CURVE SMOOTH",
"475.667 49 OFFCURVE",
"442 66.333 OFFCURVE",
"442 101 CURVE SMOOTH",
"442 109 OFFCURVE",
"443.333 117.667 OFFCURVE",
"446 127 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"426 0 LINE",
"435 49 LINE",
"368 49 OFFCURVE",
"311 70 OFFCURVE",
"321 127 CURVE SMOOTH",
"426 723 LINE SMOOTH",
"436 780 OFFCURVE",
"496 803 OFFCURVE",
"568 803 CURVE",
"576 848 LINE",
"204 848 LINE",
"196 803 LINE",
"284 803 OFFCURVE",
"318 776 OFFCURVE",
"309 723 CURVE SMOOTH",
"204 127 LINE SMOOTH",
"194 75 OFFCURVE",
"151 49 OFFCURVE",
"63 49 CURVE",
"54 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
29 1 1 74 20 11 2 3 4 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
56 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
5 1 3 0 4 3 4 101 2 1 0 0 1 97 0 1 1 37 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 1 2 1 0 3 1 0 109 5 1 3 4 4 3 93 5 1 3 3 4 97 0 4 3 4 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 21 21 36 21 19 6 7 28 
CALL[ ]\011/* CallFunction */";
};
width = 651;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"811 854 LINE",
"604 848 LINE",
"602 848 LINE",
"385 854 LINE SMOOTH",
"379 854 OFFCURVE",
"373 846 QCURVE",
"354 826 OFFCURVE",
"354 795 QCURVE SMOOTH",
"354 780 OFFCURVE",
"362 780 QCURVE SMOOTH",
"392 780 OFFCURVE",
"406 778 QCURVE",
"449 770 OFFCURVE",
"449 733 QCURVE",
"448 719 OFFCURVE",
"444 705 QCURVE SMOOTH",
"270 141 LINE SMOOTH",
"258 102 OFFCURVE",
"233 84 QCURVE SMOOTH",
"211 68 OFFCURVE",
"156 68 QCURVE",
"141 70 OFFCURVE",
"131 35 QCURVE",
"127 8 LINE",
"127 -8 OFFCURVE",
"137 -8 QCURVE",
"360 0 LINE",
"565 -8 LINE",
"580 -8 OFFCURVE",
"590 25 QCURVE",
"594 51 LINE",
"592 68 OFFCURVE",
"584 68 QCURVE SMOOTH",
"520 67 OFFCURVE",
"500 100 QCURVE",
"498 119 LINE",
"498 131 OFFCURVE",
"502 145 QCURVE SMOOTH",
"676 702 LINE SMOOTH",
"687 738 OFFCURVE",
"707 756 QCURVE",
"736 780 OFFCURVE",
"791 780 QCURVE SMOOTH",
"797 780 OFFCURVE",
"803 788 QCURVE SMOOTH",
"821 811 OFFCURVE",
"821 840 QCURVE SMOOTH",
"821 854 OFFCURVE",
"813 854 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"502 0 LINE",
"514 68 LINE",
"437 68 OFFCURVE",
"407 86 OFFCURVE",
"418 145 CURVE SMOOTH",
"516 702 LINE SMOOTH",
"527 767 OFFCURVE",
"565 780 OFFCURVE",
"640 780 CURVE",
"652 848 LINE",
"204 848 LINE",
"192 780 LINE",
"264 780 OFFCURVE",
"299 768 OFFCURVE",
"288 705 CURVE SMOOTH",
"188 143 LINE SMOOTH",
"178 85 OFFCURVE",
"146 68 OFFCURVE",
"66 68 CURVE",
"54 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
41 35 25 18 2 5 5 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
68 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
4 1 0 0 5 0 5 99 3 1 1 1 2 95 0 2 2 24 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 2 3 1 1 0 2 1 109 4 1 0 5 5 0 93 4 1 0 0 5 95 0 5 0 5 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
54 40 36 52 24 22 6 7 28 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
note = one.oldstyle;
},
{
glyphname = oneeighth;
lastChange = "2018-08-16 04:16:31 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1215 1428 LINE",
"198 -71 LINE",
"276 -111 LINE",
"1295 1391 LINE"
);
},
{
closed = 1;
nodes = (
"103 520 LINE",
"432 520 LINE",
"438 558 LINE",
"362 558 OFFCURVE",
"341 582 OFFCURVE",
"359 686 CURVE SMOOTH",
"454 1227 LINE SMOOTH",
"459 1255 OFFCURVE",
"467 1291 OFFCURVE",
"475 1330 CURVE",
"446 1346 LINE",
"389 1302 OFFCURVE",
"323 1259 OFFCURVE",
"218 1212 CURVE",
"225 1180 LINE",
"339 1225 LINE",
"244 685 LINE SMOOTH",
"226 585 OFFCURVE",
"204 558 OFFCURVE",
"109 558 CURVE"
);
},
{
closed = 1;
nodes = (
"1297 493 OFFCURVE",
"1354 557 OFFCURVE",
"1368 638 CURVE SMOOTH",
"1388 752 OFFCURVE",
"1320 826 OFFCURVE",
"1184 826 CURVE SMOOTH",
"1060 826 OFFCURVE",
"948 737 OFFCURVE",
"927 619 CURVE SMOOTH",
"912 532 OFFCURVE",
"952 469 OFFCURVE",
"1032 412 CURVE",
"912 352 OFFCURVE",
"844 281 OFFCURVE",
"830 201 CURVE SMOOTH",
"808 75 OFFCURVE",
"895 -10 OFFCURVE",
"1036 -10 CURVE SMOOTH",
"1168 -10 OFFCURVE",
"1296 79 OFFCURVE",
"1319 211 CURVE SMOOTH",
"1335 299 OFFCURVE",
"1293 376 OFFCURVE",
"1198 443 CURVE"
);
},
{
closed = 1;
nodes = (
"1040 715 OFFCURVE",
"1086 772 OFFCURVE",
"1159 772 CURVE SMOOTH",
"1236 772 OFFCURVE",
"1271 707 OFFCURVE",
"1254 613 CURVE SMOOTH",
"1244 555 OFFCURVE",
"1210 510 OFFCURVE",
"1152 476 CURVE",
"1069 534 OFFCURVE",
"1018 590 OFFCURVE",
"1030 660 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"979 40 OFFCURVE",
"936 122 OFFCURVE",
"952 213 CURVE SMOOTH",
"965 287 OFFCURVE",
"1006 342 OFFCURVE",
"1076 379 CURVE",
"1176 305 OFFCURVE",
"1214 245 OFFCURVE",
"1201 168 CURVE SMOOTH",
"1189 105 OFFCURVE",
"1139 40 OFFCURVE",
"1064 40 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1215 1428 LINE",
"198 -71 LINE",
"276 -111 LINE",
"1295 1391 LINE"
);
},
{
closed = 1;
nodes = (
"103 520 LINE",
"432 520 LINE",
"438 558 LINE",
"362 558 OFFCURVE",
"341 582 OFFCURVE",
"359 686 CURVE SMOOTH",
"454 1227 LINE SMOOTH",
"459 1255 OFFCURVE",
"467 1291 OFFCURVE",
"475 1330 CURVE",
"446 1346 LINE",
"389 1302 OFFCURVE",
"323 1259 OFFCURVE",
"218 1212 CURVE",
"225 1180 LINE",
"339 1225 LINE",
"244 685 LINE SMOOTH",
"226 585 OFFCURVE",
"204 558 OFFCURVE",
"109 558 CURVE"
);
},
{
closed = 1;
nodes = (
"991 40 OFFCURVE",
"949 101 OFFCURVE",
"949 176 CURVE SMOOTH",
"949 250 OFFCURVE",
"983 330 OFFCURVE",
"1076 379 CURVE",
"1163 314 OFFCURVE",
"1203 260 OFFCURVE",
"1203 196 CURVE SMOOTH",
"1203 126 OFFCURVE",
"1150 40 OFFCURVE",
"1064 40 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1231 -10 OFFCURVE",
"1322 149 OFFCURVE",
"1322 247 CURVE SMOOTH",
"1322 320 OFFCURVE",
"1280 385 OFFCURVE",
"1198 443 CURVE",
"1322 506 OFFCURVE",
"1371 587 OFFCURVE",
"1371 676 CURVE SMOOTH",
"1371 768 OFFCURVE",
"1304 826 OFFCURVE",
"1184 826 CURVE SMOOTH",
"1003 826 OFFCURVE",
"924 670 OFFCURVE",
"924 584 CURVE SMOOTH",
"924 515 OFFCURVE",
"963 461 OFFCURVE",
"1032 412 CURVE",
"860 326 OFFCURVE",
"827 235 OFFCURVE",
"827 163 CURVE SMOOTH",
"827 58 OFFCURVE",
"910 -10 OFFCURVE",
"1036 -10 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1077 528 OFFCURVE",
"1028 579 OFFCURVE",
"1028 640 CURVE SMOOTH",
"1028 700 OFFCURVE",
"1077 772 OFFCURVE",
"1159 772 CURVE SMOOTH",
"1223 772 OFFCURVE",
"1258 727 OFFCURVE",
"1258 657 CURVE SMOOTH",
"1258 589 OFFCURVE",
"1233 524 OFFCURVE",
"1152 476 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
69 65 48 38 12 5 6 1 1 76 26 1 4 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 4 0 5 0 4 5 105 2 1 0 0 1 6 0 1 105 0 6 6 3 97 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 0 5 0 4 5 105 2 1 0 0 1 6 0 1 105 0 6 3 3 6 89 0 6 6 3 97 0 3 6 3 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
76 74 60 58 54 52 44 42 36 21 20 7 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 1437;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1087 1424 LINE",
"292 -89 LINE",
"397 -131 LINE",
"1195 1387 LINE"
);
},
{
closed = 1;
nodes = (
"113 521 LINE",
"453 521 LINE",
"460 562 LINE",
"381 563 OFFCURVE",
"370 600 OFFCURVE",
"386 691 CURVE SMOOTH",
"479 1217 LINE SMOOTH",
"485 1253 OFFCURVE",
"494 1291 OFFCURVE",
"501 1319 CURVE",
"454 1344 LINE",
"391 1298 OFFCURVE",
"333 1257 OFFCURVE",
"217 1205 CURVE",
"225 1169 LINE",
"342 1213 LINE",
"250 690 LINE SMOOTH",
"233 597 OFFCURVE",
"206 562 OFFCURVE",
"120 562 CURVE"
);
},
{
closed = 1;
nodes = (
"1323 495 OFFCURVE",
"1378 557 OFFCURVE",
"1391 631 CURVE SMOOTH",
"1414 758 OFFCURVE",
"1330 826 OFFCURVE",
"1197 826 CURVE SMOOTH",
"1067 826 OFFCURVE",
"949 738 OFFCURVE",
"927 613 CURVE SMOOTH",
"913 533 OFFCURVE",
"947 466 OFFCURVE",
"1027 410 CURVE",
"911 348 OFFCURVE",
"847 281 OFFCURVE",
"834 207 CURVE SMOOTH",
"810 72 OFFCURVE",
"909 -10 OFFCURVE",
"1049 -10 CURVE SMOOTH",
"1185 -10 OFFCURVE",
"1320 79 OFFCURVE",
"1344 216 CURVE SMOOTH",
"1360 306 OFFCURVE",
"1320 382 OFFCURVE",
"1227 445 CURVE"
);
},
{
closed = 1;
nodes = (
"1063 711 OFFCURVE",
"1109 764 OFFCURVE",
"1171 764 CURVE SMOOTH",
"1246 764 OFFCURVE",
"1270 695 OFFCURVE",
"1254 607 CURVE SMOOTH",
"1244 551 OFFCURVE",
"1215 510 OFFCURVE",
"1165 484 CURVE",
"1080 541 OFFCURVE",
"1043 597 OFFCURVE",
"1053 653 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"997 47 OFFCURVE",
"962 128 OFFCURVE",
"977 218 CURVE SMOOTH",
"990 288 OFFCURVE",
"1026 338 OFFCURVE",
"1084 370 CURVE",
"1175 308 OFFCURVE",
"1215 243 OFFCURVE",
"1203 174 CURVE SMOOTH",
"1191 110 OFFCURVE",
"1143 47 OFFCURVE",
"1078 47 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1087 1424 LINE",
"292 -89 LINE",
"397 -131 LINE",
"1195 1387 LINE"
);
},
{
closed = 1;
nodes = (
"113 521 LINE",
"453 521 LINE",
"460 562 LINE",
"381 563 OFFCURVE",
"370 600 OFFCURVE",
"386 691 CURVE SMOOTH",
"479 1217 LINE SMOOTH",
"485 1253 OFFCURVE",
"494 1291 OFFCURVE",
"501 1319 CURVE",
"454 1344 LINE",
"391 1298 OFFCURVE",
"333 1257 OFFCURVE",
"217 1205 CURVE",
"225 1169 LINE",
"342 1213 LINE",
"250 690 LINE SMOOTH",
"233 597 OFFCURVE",
"206 562 OFFCURVE",
"120 562 CURVE"
);
},
{
closed = 1;
nodes = (
"1009 47 OFFCURVE",
"974 105 OFFCURVE",
"974 178 CURVE SMOOTH",
"974 248 OFFCURVE",
"1003 325 OFFCURVE",
"1084 370 CURVE",
"1164 315 OFFCURVE",
"1205 258 OFFCURVE",
"1205 198 CURVE SMOOTH",
"1205 142 OFFCURVE",
"1161 47 OFFCURVE",
"1078 47 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1253 -10 OFFCURVE",
"1347 151 OFFCURVE",
"1347 254 CURVE SMOOTH",
"1347 328 OFFCURVE",
"1307 391 OFFCURVE",
"1227 445 CURVE",
"1345 507 OFFCURVE",
"1395 583 OFFCURVE",
"1395 671 CURVE SMOOTH",
"1395 772 OFFCURVE",
"1315 826 OFFCURVE",
"1197 826 CURVE SMOOTH",
"1005 826 OFFCURVE",
"924 667 OFFCURVE",
"924 579 CURVE SMOOTH",
"924 514 OFFCURVE",
"959 458 OFFCURVE",
"1027 410 CURVE",
"866 324 OFFCURVE",
"830 241 OFFCURVE",
"830 168 CURVE SMOOTH",
"830 56 OFFCURVE",
"923 -10 OFFCURVE",
"1049 -10 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1089 535 OFFCURVE",
"1051 585 OFFCURVE",
"1051 635 CURVE SMOOTH",
"1051 671 OFFCURVE",
"1084 764 OFFCURVE",
"1171 764 CURVE SMOOTH",
"1231 764 OFFCURVE",
"1259 719 OFFCURVE",
"1259 656 CURVE SMOOTH",
"1259 598 OFFCURVE",
"1242 524 OFFCURVE",
"1165 484 CURVE"
);
}
);
width = 1461;
}
);
note = oneeighth;
unicode = 215B;
},
{
glyphname = onehalf;
lastChange = "2018-08-16 04:17:59 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1190 1428 LINE",
"173 -71 LINE",
"251 -111 LINE",
"1270 1391 LINE"
);
},
{
closed = 1;
nodes = (
"103 520 LINE",
"432 520 LINE",
"438 558 LINE",
"346 558 OFFCURVE",
"345 604 OFFCURVE",
"359 686 CURVE SMOOTH",
"454 1227 LINE SMOOTH",
"459 1255 OFFCURVE",
"467 1291 OFFCURVE",
"475 1330 CURVE",
"446 1346 LINE",
"389 1302 OFFCURVE",
"323 1259 OFFCURVE",
"218 1212 CURVE",
"225 1180 LINE",
"339 1225 LINE",
"244 685 LINE SMOOTH",
"226 585 OFFCURVE",
"204 558 OFFCURVE",
"109 558 CURVE"
);
},
{
closed = 1;
nodes = (
"1298 177 LINE",
"1258 115 OFFCURVE",
"1207 105 OFFCURVE",
"1123 105 CURVE SMOOTH",
"917 105 LINE",
"1149 314 LINE SMOOTH",
"1338 481 OFFCURVE",
"1386 591 OFFCURVE",
"1386 678 CURVE SMOOTH",
"1386 776 OFFCURVE",
"1323 846 OFFCURVE",
"1210 846 CURVE SMOOTH",
"1103 846 OFFCURVE",
"1004 772 OFFCURVE",
"935 670 CURVE",
"969 649 LINE",
"1023 722 OFFCURVE",
"1082 759 OFFCURVE",
"1144 759 CURVE SMOOTH",
"1204 759 OFFCURVE",
"1246 726 OFFCURVE",
"1246 658 CURVE SMOOTH",
"1246 623 OFFCURVE",
"1230 569 OFFCURVE",
"1200 519 CURVE SMOOTH",
"1121 385 OFFCURVE",
"949 201 OFFCURVE",
"764 41 CURVE",
"777 0 LINE",
"1239 0 LINE",
"1338 162 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 53 values pushed */
57 1 0 5 1 76 71 1 3 74 0 3 0 2 4 3 2 105 6 1 4 0 5 0 4 5 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 36 21 24 40 41 90 35 7 12 29 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1465;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1087 1424 LINE",
"292 -89 LINE",
"397 -131 LINE",
"1195 1387 LINE"
);
},
{
closed = 1;
nodes = (
"113 521 LINE",
"453 521 LINE",
"460 562 LINE",
"372 563 OFFCURVE",
"373 616 OFFCURVE",
"386 691 CURVE SMOOTH",
"479 1217 LINE SMOOTH",
"485 1253 OFFCURVE",
"494 1291 OFFCURVE",
"501 1319 CURVE",
"454 1344 LINE",
"391 1298 OFFCURVE",
"333 1257 OFFCURVE",
"217 1205 CURVE",
"225 1169 LINE",
"342 1213 LINE",
"250 690 LINE SMOOTH",
"233 597 OFFCURVE",
"206 562 OFFCURVE",
"120 562 CURVE"
);
},
{
closed = 1;
nodes = (
"1304 184 LINE",
"1264 125 OFFCURVE",
"1226 120 OFFCURVE",
"1145 120 CURVE SMOOTH",
"961 120 LINE",
"1173 303 LINE SMOOTH",
"1366 469 OFFCURVE",
"1402 588 OFFCURVE",
"1402 655 CURVE SMOOTH",
"1402 756 OFFCURVE",
"1333 826 OFFCURVE",
"1221 826 CURVE SMOOTH",
"1116 826 OFFCURVE",
"1020 754 OFFCURVE",
"950 654 CURVE",
"986 632 LINE",
"1036 700 OFFCURVE",
"1092 734 OFFCURVE",
"1154 734 CURVE SMOOTH",
"1212 734 OFFCURVE",
"1242 704 OFFCURVE",
"1242 645 CURVE SMOOTH",
"1242 601 OFFCURVE",
"1230 563 OFFCURVE",
"1200 510 CURVE SMOOTH",
"1124 373 OFFCURVE",
"930 171 OFFCURVE",
"787 50 CURVE",
"799 0 LINE",
"1254 0 LINE",
"1352 165 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 10 values pushed */
28 1 8 1 16 1 5 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
9 1 1 8 1 133 0 8 0 7 2 8 7 106 4 1 2 0 3 5 2 3 105 0 5 0 0 5 87 0 5 5 0 95 6 1 0 5 0 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
9 1 1 8 1 133 0 0 5 6 5 0 6 128 0 8 0 7 2 8 7 106 4 1 2 0 3 5 2 3 105 0 5 0 6 5 87 0 5 5 6 95 0 6 5 6 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
0 0 72 70 65 63 56 49 42 40 20 18 15 14 10 9 0 3 0 3 17 10 8 23 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1478;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
lastChange = "2018-08-16 04:11:48 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1225 1428 LINE",
"208 -71 LINE",
"286 -111 LINE",
"1305 1391 LINE"
);
},
{
closed = 1;
nodes = (
"103 520 LINE",
"432 520 LINE",
"438 558 LINE",
"362 558 OFFCURVE",
"341 582 OFFCURVE",
"359 686 CURVE SMOOTH",
"454 1227 LINE SMOOTH",
"459 1255 OFFCURVE",
"467 1291 OFFCURVE",
"475 1330 CURVE",
"446 1346 LINE",
"389 1302 OFFCURVE",
"323 1259 OFFCURVE",
"218 1212 CURVE",
"225 1180 LINE",
"339 1225 LINE",
"244 685 LINE SMOOTH",
"226 585 OFFCURVE",
"204 558 OFFCURVE",
"109 558 CURVE"
);
},
{
closed = 1;
nodes = (
"1364 248 LINE",
"1376 319 LINE",
"1287 319 LINE",
"1338 609 LINE",
"1215 609 LINE",
"1164 319 LINE",
"888 319 LINE",
"1424 905 LINE",
"1413 922 LINE",
"1350 922 LINE",
"1214 759 OFFCURVE",
"1144 678 OFFCURVE",
"1045 571 CURVE SMOOTH",
"780 284 LINE",
"807 248 LINE",
"1152 248 LINE",
"1124 92 LINE SMOOTH",
"1118 56 OFFCURVE",
"1082 38 OFFCURVE",
"1011 38 CURVE",
"1004 0 LINE",
"1310 0 LINE",
"1317 38 LINE",
"1262 38 OFFCURVE",
"1241 56 OFFCURVE",
"1247 92 CURVE SMOOTH",
"1275 248 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 71 values pushed */
66 1 4 8 18 0 2 0 3 2 76 80 32 2 7 74 11 1 1 73 9 1 7 0 8 4 7 8 105 5 1 4 6 1 3 0 4 3 105 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 71 69 21 22 35 25 45 36 36 21 19 10 12 31 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1476;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1087 1424 LINE",
"292 -89 LINE",
"397 -131 LINE",
"1195 1387 LINE"
);
},
{
closed = 1;
nodes = (
"113 521 LINE",
"453 521 LINE",
"460 562 LINE",
"381 563 OFFCURVE",
"370 600 OFFCURVE",
"386 691 CURVE SMOOTH",
"479 1217 LINE SMOOTH",
"485 1253 OFFCURVE",
"494 1291 OFFCURVE",
"501 1319 CURVE",
"454 1344 LINE",
"391 1298 OFFCURVE",
"333 1257 OFFCURVE",
"217 1205 CURVE",
"225 1169 LINE",
"342 1213 LINE",
"250 690 LINE SMOOTH",
"233 597 OFFCURVE",
"206 562 OFFCURVE",
"120 562 CURVE"
);
},
{
closed = 1;
nodes = (
"1386 241 LINE",
"1402 328 LINE",
"1322 328 LINE",
"1371 606 LINE",
"1224 606 LINE",
"1175 328 LINE",
"917 328 LINE",
"1446 895 LINE",
"1431 918 LINE",
"1360 918 LINE",
"1246 778 OFFCURVE",
"1213 740 OFFCURVE",
"1089 607 CURVE SMOOTH",
"782 278 LINE",
"813 241 LINE",
"1159 241 LINE",
"1135 101 LINE SMOOTH",
"1128 63 OFFCURVE",
"1093 44 OFFCURVE",
"1026 44 CURVE",
"1018 0 LINE",
"1337 0 LINE",
"1345 44 LINE",
"1294 44 OFFCURVE",
"1275 63 OFFCURVE",
"1282 101 CURVE SMOOTH",
"1306 241 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
70 1 1 9 58 1 0 11 2 76 24 1 5 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
70 1 10 9 58 1 0 11 2 76 24 1 5 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
13 1 9 1 9 133 12 10 2 1 0 11 0 1 11 105 2 1 0 7 1 3 4 0 3 106 6 1 4 5 5 4 89 6 1 4 4 5 97 8 1 5 4 5 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
13 1 9 10 9 133 0 1 10 11 10 1 11 128 12 1 10 0 11 0 10 11 105 2 1 0 7 1 3 4 0 3 106 6 1 4 5 5 4 89 6 1 4 4 5 97 8 1 5 4 5 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
42 42 62 60 57 56 52 51 42 45 42 45 26 35 35 20 19 34 18 18 34 14 8 31 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1500;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = onethird;
lastChange = "2018-08-16 04:22:50 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1290 1391 LINE",
"1210 1428 LINE",
"193 -71 LINE",
"271 -111 LINE"
);
},
{
closed = 1;
nodes = (
"432 520 LINE",
"438 558 LINE",
"346 558 OFFCURVE",
"345 604 OFFCURVE",
"359 686 CURVE SMOOTH",
"454 1227 LINE SMOOTH",
"459 1255 OFFCURVE",
"467 1291 OFFCURVE",
"475 1330 CURVE",
"446 1346 LINE",
"389 1302 OFFCURVE",
"323 1259 OFFCURVE",
"218 1212 CURVE",
"225 1180 LINE",
"339 1225 LINE",
"244 685 LINE SMOOTH",
"226 585 OFFCURVE",
"204 558 OFFCURVE",
"109 558 CURVE",
"103 520 LINE"
);
},
{
closed = 1;
nodes = (
"1189 -14 OFFCURVE",
"1334 149 OFFCURVE",
"1334 309 CURVE SMOOTH",
"1334 384 OFFCURVE",
"1298 436 OFFCURVE",
"1202 462 CURVE",
"1341 535 OFFCURVE",
"1358 614 OFFCURVE",
"1358 667 CURVE SMOOTH",
"1358 749 OFFCURVE",
"1297 813 OFFCURVE",
"1208 813 CURVE SMOOTH",
"1121 813 OFFCURVE",
"1050 765 OFFCURVE",
"976 678 CURVE",
"1008 652 LINE",
"1053 707 OFFCURVE",
"1102 741 OFFCURVE",
"1155 741 CURVE SMOOTH",
"1204 741 OFFCURVE",
"1239 706 OFFCURVE",
"1239 649 CURVE SMOOTH",
"1239 539 OFFCURVE",
"1144 463 OFFCURVE",
"1009 463 CURVE",
"1000 406 LINE",
"1022 413 OFFCURVE",
"1044 416 OFFCURVE",
"1070 416 CURVE SMOOTH",
"1155 416 OFFCURVE",
"1203 361 OFFCURVE",
"1203 281 CURVE SMOOTH",
"1203 207 OFFCURVE",
"1147 40 OFFCURVE",
"1038 40 CURVE SMOOTH",
"1005 40 OFFCURVE",
"985 57 OFFCURVE",
"962 89 CURVE SMOOTH",
"943 116 OFFCURVE",
"925 135 OFFCURVE",
"906 135 CURVE SMOOTH",
"863 135 OFFCURVE",
"834 108 OFFCURVE",
"834 71 CURVE SMOOTH",
"834 18 OFFCURVE",
"901 -14 OFFCURVE",
"996 -14 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
65 1 0 8 12 1 7 1 53 1 4 6 3 76 26 1 9 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 4 6 5 5 4 114 2 1 0 0 1 7 0 1 105 0 7 0 6 4 7 6 105 0 8 8 9 97 0 9 9 95 77 0 5 5 3 98 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 6 5 5 4 114 0 9 0 8 0 9 8 105 2 1 0 0 1 7 0 1 105 0 7 0 6 4 7 6 105 0 5 5 3 98 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 4 6 5 6 4 5 128 0 9 0 8 0 9 8 105 2 1 0 0 1 7 0 1 105 0 7 0 6 4 7 6 105 0 5 5 3 98 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 4 6 5 6 4 5 128 0 9 0 8 0 9 8 105 2 1 0 0 1 7 0 1 105 0 7 0 6 4 7 6 105 0 5 3 3 5 89 0 5 5 3 98 0 3 5 3 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
73 71 64 62 58 56 52 50 47 45 44 42 39 38 36 21 20 10 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 1439;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1195 1387 LINE",
"1087 1424 LINE",
"292 -89 LINE",
"397 -131 LINE"
);
},
{
closed = 1;
nodes = (
"453 521 LINE",
"460 562 LINE",
"372 563 OFFCURVE",
"373 616 OFFCURVE",
"386 691 CURVE SMOOTH",
"479 1217 LINE SMOOTH",
"485 1253 OFFCURVE",
"494 1291 OFFCURVE",
"501 1319 CURVE",
"454 1344 LINE",
"391 1298 OFFCURVE",
"333 1257 OFFCURVE",
"217 1205 CURVE",
"225 1169 LINE",
"342 1213 LINE",
"250 690 LINE SMOOTH",
"233 597 OFFCURVE",
"206 562 OFFCURVE",
"120 562 CURVE",
"113 521 LINE"
);
},
{
closed = 1;
nodes = (
"1256 -14 OFFCURVE",
"1369 193 OFFCURVE",
"1369 316 CURVE SMOOTH",
"1369 388 OFFCURVE",
"1337 440 OFFCURVE",
"1254 472 CURVE",
"1355 530 OFFCURVE",
"1391 602 OFFCURVE",
"1391 672 CURVE SMOOTH",
"1391 759 OFFCURVE",
"1325 826 OFFCURVE",
"1229 826 CURVE SMOOTH",
"1130 826 OFFCURVE",
"1060 770 OFFCURVE",
"982 678 CURVE",
"1018 650 LINE",
"1063 704 OFFCURVE",
"1115 746 OFFCURVE",
"1173 746 CURVE SMOOTH",
"1221 746 OFFCURVE",
"1248 708 OFFCURVE",
"1248 656 CURVE SMOOTH",
"1248 579 OFFCURVE",
"1187 474 OFFCURVE",
"1027 474 CURVE",
"1019 407 LINE",
"1040 414 OFFCURVE",
"1063 418 OFFCURVE",
"1088 418 CURVE SMOOTH",
"1166 418 OFFCURVE",
"1212 365 OFFCURVE",
"1212 287 CURVE SMOOTH",
"1212 219 OFFCURVE",
"1160 48 OFFCURVE",
"1057 48 CURVE SMOOTH",
"1021 48 OFFCURVE",
"1009 66 OFFCURVE",
"983 102 CURVE SMOOTH",
"967 125 OFFCURVE",
"948 149 OFFCURVE",
"924 149 CURVE SMOOTH",
"849 149 OFFCURVE",
"838 101 OFFCURVE",
"838 76 CURVE SMOOTH",
"838 12 OFFCURVE",
"929 -14 OFFCURVE",
"1014 -14 CURVE SMOOTH"
);
}
);
width = 1473;
}
);
note = onethird;
unicode = 2153;
},
{
glyphname = ordfeminine;
lastChange = "2018-08-16 21:22:51 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"234 553 OFFCURVE",
"306 608 OFFCURVE",
"395 717 CURVE",
"403 713 LINE",
"382 663 OFFCURVE",
"376 636 OFFCURVE",
"376 613 CURVE SMOOTH",
"376 573 OFFCURVE",
"392 553 OFFCURVE",
"424 553 CURVE SMOOTH",
"468 553 OFFCURVE",
"530 596 OFFCURVE",
"603 675 CURVE",
"569 707 LINE",
"543 679 OFFCURVE",
"523 664 OFFCURVE",
"508 664 CURVE SMOOTH",
"493 664 OFFCURVE",
"492 675 OFFCURVE",
"496 690 CURVE SMOOTH",
"620 1138 LINE",
"506 1138 LINE",
"494 1107 LINE",
"476 1120 OFFCURVE",
"455 1126 OFFCURVE",
"430 1126 CURVE SMOOTH",
"265 1126 OFFCURVE",
"83 864 OFFCURVE",
"83 681 CURVE SMOOTH",
"83 606 OFFCURVE",
"120 553 OFFCURVE",
"179 553 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"225 643 OFFCURVE",
"216 668 OFFCURVE",
"216 720 CURVE SMOOTH",
"216 856 OFFCURVE",
"328 1072 OFFCURVE",
"413 1072 CURVE SMOOTH",
"441 1072 OFFCURVE",
"461 1062 OFFCURVE",
"474 1041 CURVE",
"445 935 LINE SMOOTH",
"424 857 OFFCURVE",
"380 769 OFFCURVE",
"320 697 CURVE SMOOTH",
"290 661 OFFCURVE",
"265 643 OFFCURVE",
"244 643 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 56 values pushed */
31 1 4 3 39 20 6 0 4 0 4 2 76 35 1 3 74 0 0 4 5 4 0 5 128 0 4 4 3 97 0 3 3 127 77 0 5 5 1 97 2 1 1 1 128 1 78 35 42 36 38 41 35 6 14 28 
CALL[ ]\011/* CallFunction */";
};
width = 579;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"289 554 OFFCURVE",
"392 625 OFFCURVE",
"463 718 CURVE",
"472 713 LINE",
"453 671 OFFCURVE",
"443 638 OFFCURVE",
"443 613 CURVE SMOOTH",
"443 585 OFFCURVE",
"455 554 OFFCURVE",
"494 554 CURVE SMOOTH",
"559 554 OFFCURVE",
"625 594 OFFCURVE",
"693 675 CURVE",
"656 707 LINE",
"631 678 OFFCURVE",
"609 664 OFFCURVE",
"588 664 CURVE SMOOTH",
"575 664 OFFCURVE",
"568 673 OFFCURVE",
"574 691 CURVE SMOOTH",
"711 1139 LINE",
"586 1139 LINE",
"572 1107 LINE",
"555 1120 OFFCURVE",
"532 1127 OFFCURVE",
"502 1127 CURVE SMOOTH",
"314 1127 OFFCURVE",
"121 861 OFFCURVE",
"121 681 CURVE SMOOTH",
"121 606 OFFCURVE",
"161 554 OFFCURVE",
"226 554 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"281 644 OFFCURVE",
"267 674 OFFCURVE",
"267 701 CURVE SMOOTH",
"267 819 OFFCURVE",
"366 1072 OFFCURVE",
"484 1072 CURVE SMOOTH",
"515 1072 OFFCURVE",
"537 1062 OFFCURVE",
"549 1041 CURVE",
"519 937 LINE SMOOTH",
"493 846 OFFCURVE",
"435 753 OFFCURVE",
"382 697 CURVE SMOOTH",
"351 664 OFFCURVE",
"321 644 OFFCURVE",
"298 644 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
25 1 4 3 13 5 2 0 4 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
44 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 5 0 1 0 5 1 128 0 0 2 1 1 0 1 101 0 4 4 3 97 0 3 3 47 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 5 0 1 0 5 1 128 0 3 0 4 0 3 4 105 0 0 5 1 0 89 0 0 0 1 97 2 1 1 0 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
37 40 36 37 37 34 6 9 28 
CALL[ ]\011/* CallFunction */";
};
width = 679;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
lastChange = "2018-08-16 21:23:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"461 554 OFFCURVE",
"595 735 OFFCURVE",
"595 920 CURVE SMOOTH",
"595 1046 OFFCURVE",
"540 1133 OFFCURVE",
"429 1133 CURVE SMOOTH",
"274 1133 OFFCURVE",
"118 947 OFFCURVE",
"118 779 CURVE SMOOTH",
"118 651 OFFCURVE",
"173 554 OFFCURVE",
"285 554 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"246 629 OFFCURVE",
"227 654 OFFCURVE",
"227 705 CURVE SMOOTH",
"227 832 OFFCURVE",
"351 1065 OFFCURVE",
"435 1065 CURVE SMOOTH",
"471 1065 OFFCURVE",
"489 1039 OFFCURVE",
"489 986 CURVE SMOOTH",
"489 863 OFFCURVE",
"361 629 OFFCURVE",
"285 629 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 2 2 1 97 0 1 1 81 77 0 3 3 0 97 0 0 0 82 0 78 35 35 36 34 4 11 26 
CALL[ ]\011/* CallFunction */";
};
width = 568;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"512 554 OFFCURVE",
"653 743 OFFCURVE",
"653 920 CURVE SMOOTH",
"653 1048 OFFCURVE",
"593 1133 OFFCURVE",
"468 1133 CURVE SMOOTH",
"299 1133 OFFCURVE",
"126 948 OFFCURVE",
"126 781 CURVE SMOOTH",
"126 650 OFFCURVE",
"188 554 OFFCURVE",
"311 554 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"268 629 OFFCURVE",
"247 654 OFFCURVE",
"247 705 CURVE SMOOTH",
"247 828 OFFCURVE",
"380 1066 OFFCURVE",
"476 1066 CURVE SMOOTH",
"517 1066 OFFCURVE",
"536 1048 OFFCURVE",
"536 980 CURVE SMOOTH",
"536 871 OFFCURVE",
"399 629 OFFCURVE",
"311 629 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 0 3 0 101 0 2 2 1 97 0 1 1 47 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 36 36 34 4 9 26 
CALL[ ]\011/* CallFunction */";
};
width = 645;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = oslash;
lastChange = "2018-08-18 12:57:05 +0000";
layers = (
{
anchors = (
{
name = top;
position = "{477, 856}";
}
);
components = (
{
name = o;
},
{
name = uni0337;
transform = "{1, 0, 0, 1, 394, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 66 values pushed */
33 7 2 3 1 55 44 10 3 2 3 25 16 2 0 2 3 76 4 1 1 74 23 1 0 73 5 1 3 3 1 97 0 1 1 95 77 4 1 2 2 0 97 0 0 0 93 0 78 48 47 37 36 47 57 48 57 36 46 37 46 47 45 6 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 804;
},
{
anchors = (
{
name = top;
position = "{514, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"801 866 LINE",
"741 907 LINE",
"37 -63 LINE",
"96 -104 LINE"
);
},
{
closed = 1;
nodes = (
"632 -27 OFFCURVE",
"825 219 OFFCURVE",
"825 481 CURVE SMOOTH",
"825 691 OFFCURVE",
"719 852 OFFCURVE",
"517 852 CURVE SMOOTH",
"271 852 OFFCURVE",
"45 592 OFFCURVE",
"45 348 CURVE SMOOTH",
"45 145 OFFCURVE",
"157 -27 OFFCURVE",
"354 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"273 86 OFFCURVE",
"237 134 OFFCURVE",
"237 230 CURVE SMOOTH",
"237 425 OFFCURVE",
"403 748 OFFCURVE",
"536 748 CURVE SMOOTH",
"602 748 OFFCURVE",
"638 700 OFFCURVE",
"638 605 CURVE SMOOTH",
"638 412 OFFCURVE",
"464 86 OFFCURVE",
"344 86 CURVE SMOOTH"
);
}
);
};
components = (
{
name = o;
},
{
name = uni0337;
transform = "{1, 0, 0, 1, 432, 17}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 62 values pushed */
33 1 1 2 36 27 2 3 1 47 1 4 3 17 8 2 0 4 4 76 15 1 0 73 0 2 1 2 133 0 3 3 1 97 0 1 1 34 77 0 4 4 0 97 0 0 0 32 0 78 54 52 41 39 31 28 26 24 37 5 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = "=o";
widthMetricsKey = "=o";
note = oslash;
unicode = 00F8;
},
{
glyphname = oslashacute;
lastChange = "2018-08-17 12:52:20 +0000";
layers = (
{
components = (
{
alignment = -1;
name = oslash;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 332, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
alignment = -1;
name = oslash;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 354, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = "=o";
widthMetricsKey = "=o";
note = oslashacute;
unicode = 01FF;
},
{
glyphname = otilde;
lastChange = "2018-08-18 14:13:52 +0000";
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 358, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 804;
},
{
components = (
{
alignment = -1;
name = o;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 456, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 877;
}
);
leftKerningGroup = c;
leftMetricsKey = o;
widthMetricsKey = "=o";
note = otilde;
unicode = 00F5;
},
{
glyphname = p;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"62 -607 LINE",
"523 1113 LINE",
"421 1113 LINE",
"-40 -607 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"212 -551 LINE",
"208 -504 LINE",
"121 -504 OFFCURVE",
"79 -483 OFFCURVE",
"79 -442 CURVE SMOOTH",
"79 -436 OFFCURVE",
"80 -428 OFFCURVE",
"81 -420 CURVE SMOOTH",
"349 1068 LINE",
"327 1081 LINE",
"241 1031 LINE",
"-23 -428 LINE SMOOTH",
"-32 -479 OFFCURVE",
"-71 -504 OFFCURVE",
"-178 -504 CURVE",
"-174 -551 LINE"
);
},
{
closed = 1;
nodes = (
"515 -27 OFFCURVE",
"745 205 OFFCURVE",
"745 470 CURVE SMOOTH",
"745 676 OFFCURVE",
"628 842 OFFCURVE",
"421 842 CURVE SMOOTH",
"233 842 OFFCURVE",
"113 785 OFFCURVE",
"-23 649 CURVE",
"24 607 LINE",
"184 762 OFFCURVE",
"341 763 OFFCURVE",
"381 763 CURVE SMOOTH",
"534 763 OFFCURVE",
"625 605 OFFCURVE",
"625 437 CURVE SMOOTH",
"625 220 OFFCURVE",
"465 34 OFFCURVE",
"279 34 CURVE SMOOTH",
"219 34 OFFCURVE",
"164 76 OFFCURVE",
"150 159 CURVE",
"110 11 LINE",
"194 -25 OFFCURVE",
"242 -27 OFFCURVE",
"266 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
44 1 6 5 57 26 2 7 6 20 12 2 2 1 3 76 18 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 5 4 133 0 6 6 5 97 0 5 5 95 77 0 7 7 0 97 0 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 0 7 7 0 97 0 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 3 1 1 0 2 1 2 101 0 7 7 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
60 58 53 51 47 45 42 40 37 22 21 34 8 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 807;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-78 -612 LINE",
"116 -612 LINE",
"577 1107 LINE",
"383 1107 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"286 -551 LINE",
"280 -485 LINE",
"202 -484 OFFCURVE",
"161 -465 OFFCURVE",
"158 -430 CURVE SMOOTH",
"158 -421 OFFCURVE",
"158 -412 OFFCURVE",
"160 -401 CURVE SMOOTH",
"422 1053 LINE",
"392 1079 LINE",
"220 1012 LINE",
"-35 -410 LINE SMOOTH",
"-44 -460 OFFCURVE",
"-74 -485 OFFCURVE",
"-169 -485 CURVE",
"-163 -551 LINE"
);
},
{
closed = 1;
nodes = (
"576 -27 OFFCURVE",
"824 215 OFFCURVE",
"824 481 CURVE SMOOTH",
"824 694 OFFCURVE",
"660 844 OFFCURVE",
"444 844 CURVE SMOOTH",
"186 844 OFFCURVE",
"24 674 OFFCURVE",
"-5 639 CURVE",
"48 588 LINE",
"174 706 OFFCURVE",
"294 741 OFFCURVE",
"414 741 CURVE SMOOTH",
"547 741 OFFCURVE",
"607 601 OFFCURVE",
"607 445 CURVE SMOOTH",
"607 255 OFFCURVE",
"483 55 OFFCURVE",
"328 55 CURVE SMOOTH",
"265 55 OFFCURVE",
"254 67 OFFCURVE",
"246 163 CURVE",
"187 -7 LINE",
"226 -23 OFFCURVE",
"279 -27 OFFCURVE",
"331 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
44 1 6 5 26 1 7 6 12 1 2 1 3 76 18 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 5 4 133 0 6 6 5 97 0 5 5 34 77 0 7 7 0 97 0 0 0 32 77 3 1 1 1 2 97 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 3 1 1 0 2 1 2 101 0 7 7 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
60 58 53 51 47 45 42 40 37 22 21 34 8 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 863;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"864 713 OFFCURVE",
"739 842 OFFCURVE",
"563 842 CURVE SMOOTH",
"509 842 OFFCURVE",
"469 838 OFFCURVE",
"444 829 CURVE",
"500 1068 LINE SMOOTH",
"502 1077 OFFCURVE",
"495 1081 OFFCURVE",
"479 1081 CURVE SMOOTH",
"439 1081 OFFCURVE",
"367 1037 OFFCURVE",
"360 1004 CURVE SMOOTH",
"317 795 LINE",
"244 762 OFFCURVE",
"172 713 OFFCURVE",
"102 649 CURVE",
"99 646 OFFCURVE",
"98 643 OFFCURVE",
"98 640 CURVE SMOOTH",
"98 625 OFFCURVE",
"121 603 OFFCURVE",
"141 603 CURVE SMOOTH",
"145 603 OFFCURVE",
"148 604 OFFCURVE",
"150 606 CURVE",
"189 642 OFFCURVE",
"238 675 OFFCURVE",
"297 705 CURVE",
"31 -428 LINE SMOOTH",
"19 -479 OFFCURVE",
"-29 -504 OFFCURVE",
"-113 -504 CURVE SMOOTH",
"-130 -504 OFFCURVE",
"-140 -530 OFFCURVE",
"-140 -546 CURVE SMOOTH",
"-140 -555 OFFCURVE",
"-137 -559 OFFCURVE",
"-131 -559 CURVE",
"-71 -554 OFFCURVE",
"-7 -551 OFFCURVE",
"63 -551 CURVE SMOOTH",
"132 -551 OFFCURVE",
"196 -554 OFFCURVE",
"256 -559 CURVE",
"273 -559 OFFCURVE",
"283 -532 OFFCURVE",
"283 -516 CURVE SMOOTH",
"283 -508 OFFCURVE",
"280 -504 OFFCURVE",
"274 -504 CURVE SMOOTH",
"191 -504 OFFCURVE",
"150 -485 OFFCURVE",
"150 -448 CURVE SMOOTH",
"150 -441 OFFCURVE",
"151 -431 OFFCURVE",
"154 -420 CURVE SMOOTH",
"248 -14 LINE",
"280 -23 OFFCURVE",
"308 -27 OFFCURVE",
"332 -27 CURVE SMOOTH",
"596 -27 OFFCURVE",
"864 239 OFFCURVE",
"864 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"725 253 OFFCURVE",
"545 39 OFFCURVE",
"350 39 CURVE SMOOTH",
"299 39 OFFCURVE",
"274 59 OFFCURVE",
"274 98 CURVE SMOOTH",
"274 101 OFFCURVE",
"275 108 OFFCURVE",
"276 117 CURVE",
"424 743 LINE",
"454 752 OFFCURVE",
"485 756 OFFCURVE",
"516 756 CURVE SMOOTH",
"635 756 OFFCURVE",
"725 634 OFFCURVE",
"725 477 CURVE SMOOTH"
);
}
);
};
layerId = "2C5F4FB5-2AD3-4F28-9BC9-02BC85DFEB7F";
name = "Aug 13 18, 06:10";
paths = (
{
closed = 1;
nodes = (
"864 713 OFFCURVE",
"739 842 OFFCURVE",
"563 842 CURVE SMOOTH",
"509 842 OFFCURVE",
"469 838 OFFCURVE",
"444 829 CURVE",
"500 1068 LINE SMOOTH",
"502 1077 OFFCURVE",
"495 1081 OFFCURVE",
"479 1081 CURVE SMOOTH",
"439 1081 OFFCURVE",
"367 1037 OFFCURVE",
"360 1004 CURVE SMOOTH",
"317 795 LINE",
"244 762 OFFCURVE",
"172 713 OFFCURVE",
"102 649 CURVE",
"99 646 OFFCURVE",
"98 643 OFFCURVE",
"98 640 CURVE SMOOTH",
"98 625 OFFCURVE",
"121 603 OFFCURVE",
"141 603 CURVE SMOOTH",
"145 603 OFFCURVE",
"148 604 OFFCURVE",
"150 606 CURVE",
"189 642 OFFCURVE",
"238 675 OFFCURVE",
"297 705 CURVE",
"31 -428 LINE SMOOTH",
"19 -479 OFFCURVE",
"-29 -504 OFFCURVE",
"-113 -504 CURVE SMOOTH",
"-130 -504 OFFCURVE",
"-140 -530 OFFCURVE",
"-140 -546 CURVE SMOOTH",
"-140 -555 OFFCURVE",
"-137 -559 OFFCURVE",
"-131 -559 CURVE",
"-71 -554 OFFCURVE",
"-7 -551 OFFCURVE",
"63 -551 CURVE SMOOTH",
"132 -551 OFFCURVE",
"196 -554 OFFCURVE",
"256 -559 CURVE",
"273 -559 OFFCURVE",
"283 -532 OFFCURVE",
"283 -516 CURVE SMOOTH",
"283 -508 OFFCURVE",
"280 -504 OFFCURVE",
"274 -504 CURVE SMOOTH",
"191 -504 OFFCURVE",
"150 -485 OFFCURVE",
"150 -448 CURVE SMOOTH",
"150 -441 OFFCURVE",
"151 -431 OFFCURVE",
"154 -420 CURVE SMOOTH",
"248 -14 LINE",
"280 -23 OFFCURVE",
"308 -27 OFFCURVE",
"332 -27 CURVE SMOOTH",
"596 -27 OFFCURVE",
"864 239 OFFCURVE",
"864 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"725 253 OFFCURVE",
"545 39 OFFCURVE",
"350 39 CURVE SMOOTH",
"299 39 OFFCURVE",
"274 59 OFFCURVE",
"274 98 CURVE SMOOTH",
"274 101 OFFCURVE",
"275 108 OFFCURVE",
"276 117 CURVE",
"424 743 LINE",
"454 752 OFFCURVE",
"485 756 OFFCURVE",
"516 756 CURVE SMOOTH",
"635 756 OFFCURVE",
"725 634 OFFCURVE",
"725 477 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
44 1 6 5 57 26 2 7 6 20 12 2 2 1 3 76 18 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 5 4 133 0 6 6 5 97 0 5 5 95 77 0 7 7 0 97 0 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 0 7 7 0 97 0 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 3 1 1 0 2 1 2 101 0 7 7 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
60 58 53 51 47 45 42 40 37 22 21 34 8 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 877;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "D5C3FB55-9AAD-4840-B855-6DED63E12C4D";
name = "Aug 13 18, 06:25";
paths = (
{
closed = 1;
nodes = (
"901 719 OFFCURVE",
"751 844 OFFCURVE",
"555 844 CURVE SMOOTH",
"545 844 OFFCURVE",
"522 843 OFFCURVE",
"487 840 CURVE",
"537 1053 LINE SMOOTH",
"541 1070 OFFCURVE",
"529 1079 OFFCURVE",
"500 1079 CURVE SMOOTH",
"448 1079 OFFCURVE",
"334 1056 OFFCURVE",
"326 1012 CURVE",
"274 776 LINE",
"209 742 OFFCURVE",
"147 696 OFFCURVE",
"88 639 CURVE SMOOTH",
"87 638 OFFCURVE",
"86 636 OFFCURVE",
"86 633 CURVE SMOOTH",
"86 617 OFFCURVE",
"116 586 OFFCURVE",
"129 586 CURVE SMOOTH",
"133 586 OFFCURVE",
"136 587 OFFCURVE",
"137 588 CURVE",
"185 627 OFFCURVE",
"223 655 OFFCURVE",
"252 670 CURVE",
"-10 -410 LINE SMOOTH",
"-23 -460 OFFCURVE",
"-62 -485 OFFCURVE",
"-127 -485 CURVE SMOOTH",
"-146 -485 OFFCURVE",
"-158 -528 OFFCURVE",
"-158 -549 CURVE SMOOTH",
"-158 -556 OFFCURVE",
"-155 -559 OFFCURVE",
"-150 -559 CURVE",
"-95 -554 OFFCURVE",
"-24 -551 OFFCURVE",
"65 -551 CURVE SMOOTH",
"153 -551 OFFCURVE",
"224 -554 OFFCURVE",
"279 -559 CURVE",
"295 -559 OFFCURVE",
"309 -521 OFFCURVE",
"309 -500 CURVE SMOOTH",
"309 -490 OFFCURVE",
"306 -485 OFFCURVE",
"299 -485 CURVE SMOOTH",
"221 -484 OFFCURVE",
"182 -465 OFFCURVE",
"182 -430 CURVE SMOOTH",
"182 -421 OFFCURVE",
"183 -412 OFFCURVE",
"186 -401 CURVE SMOOTH",
"279 -23 LINE",
"304 -26 OFFCURVE",
"323 -27 OFFCURVE",
"336 -27 CURVE SMOOTH",
"612 -27 OFFCURVE",
"901 237 OFFCURVE",
"901 516 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"686 281 OFFCURVE",
"525 55 OFFCURVE",
"340 55 CURVE SMOOTH",
"317 55 OFFCURVE",
"305 63 OFFCURVE",
"305 80 CURVE SMOOTH",
"305 90 OFFCURVE",
"306 101 OFFCURVE",
"309 113 CURVE SMOOTH",
"461 735 LINE",
"481 739 OFFCURVE",
"499 741 OFFCURVE",
"516 741 CURVE SMOOTH",
"639 741 OFFCURVE",
"686 629 OFFCURVE",
"686 481 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
44 1 6 5 26 1 7 6 12 1 2 1 3 76 18 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 5 4 133 0 6 6 5 97 0 5 5 34 77 0 7 7 0 97 0 0 0 32 77 3 1 1 1 2 97 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 4 5 4 133 0 5 0 6 7 5 6 106 3 1 1 0 2 1 2 101 0 7 7 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
60 58 53 51 47 45 42 40 37 22 21 34 8 8 26 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 909;
}
);
leftKerningGroup = p;
note = p;
unicode = 0070;
},
{
glyphname = paragraph;
lastChange = "2018-08-16 18:49:25 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"298 -285 LINE",
"734 1324 LINE SMOOTH",
"747 1373 OFFCURVE",
"783 1398 OFFCURVE",
"842 1398 CURVE SMOOTH",
"881 1398 OFFCURVE",
"901 1381 OFFCURVE",
"901 1348 CURVE SMOOTH",
"901 1339 OFFCURVE",
"900 1331 OFFCURVE",
"898 1324 CURVE SMOOTH",
"462 -285 LINE",
"556 -285 LINE",
"989 1324 LINE SMOOTH",
"1002 1373 OFFCURVE",
"1049 1398 OFFCURVE",
"1128 1398 CURVE",
"1143 1456 LINE",
"654 1456 LINE SMOOTH",
"374 1456 OFFCURVE",
"86 1243 OFFCURVE",
"86 970 CURVE SMOOTH",
"86 794 OFFCURVE",
"192 677 OFFCURVE",
"469 677 CURVE",
"206 -285 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
6 1 2 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 4 1 1 1 3 95 0 3 3 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 0 3 1 1 3 87 0 3 3 1 97 4 1 1 3 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
35 68 22 37 17 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 997;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"391 -285 LINE",
"825 1323 LINE SMOOTH",
"838 1372 OFFCURVE",
"873 1397 OFFCURVE",
"932 1397 CURVE SMOOTH",
"966 1397 OFFCURVE",
"992 1382 OFFCURVE",
"992 1347 CURVE SMOOTH",
"992 1340 OFFCURVE",
"991 1332 OFFCURVE",
"989 1323 CURVE SMOOTH",
"557 -285 LINE",
"711 -285 LINE",
"1141 1323 LINE SMOOTH",
"1156 1379 OFFCURVE",
"1205 1396 OFFCURVE",
"1280 1397 CURVE",
"1298 1473 LINE",
"686 1473 LINE SMOOTH",
"407 1473 OFFCURVE",
"119 1260 OFFCURVE",
"119 987 CURVE SMOOTH",
"119 795 OFFCURVE",
"247 694 OFFCURVE",
"502 694 CURVE",
"240 -285 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
0 1 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 1 134 0 0 0 2 95 0 2 2 33 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 1 134 0 2 0 0 2 87 0 2 2 0 97 0 0 2 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
35 30 26 24 18 16 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1150;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = parenleft;
lastChange = "2018-08-16 15:30:51 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"270 430.667 OFFCURVE",
"368 805.333 OFFCURVE",
"568 1096 CURVE SMOOTH",
"668 1241.333 OFFCURVE",
"782.333 1364 OFFCURVE",
"911 1464 CURVE SMOOTH",
"970.987 1509.59 OFFCURVE",
"918.189 1555.929 OFFCURVE",
"864 1516 CURVE SMOOTH",
"533.333 1276 OFFCURVE",
"279.833 890.833 OFFCURVE",
"196.5 599.5 CURVE SMOOTH",
"154.833 453.833 OFFCURVE",
"134 324.333 OFFCURVE",
"134 211 CURVE SMOOTH",
"134 12.333 OFFCURVE",
"200.667 -170.667 OFFCURVE",
"334 -338 CURVE SMOOTH",
"371.103 -384.379 OFFCURVE",
"439.814 -330.707 OFFCURVE",
"412 -287 CURVE SMOOTH",
"317.333 -148.333 OFFCURVE",
"270 10 OFFCURVE",
"270 188 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"456 -290 LINE",
"322 -116 OFFCURVE",
"257 87 OFFCURVE",
"257 324 CURVE SMOOTH",
"257 407 OFFCURVE",
"265 495 OFFCURVE",
"281 587 CURVE SMOOTH",
"343 940 OFFCURVE",
"501 1229 OFFCURVE",
"766 1464 CURVE",
"713 1516 LINE",
"415 1284 OFFCURVE",
"204 936 OFFCURVE",
"142 587 CURVE SMOOTH",
"129 514 OFFCURVE",
"123 441 OFFCURVE",
"123 370 CURVE SMOOTH",
"123 98 OFFCURVE",
"214 -158 OFFCURVE",
"385 -342 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
0 0 0 94 0 78 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 4 values pushed */
0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 4 values pushed */
30 1 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 676;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"938 1483 OFFCURVE",
"938 1489 QCURVE SMOOTH",
"938 1497 OFFCURVE",
"928 1509 QCURVE SMOOTH",
"913 1526 OFFCURVE",
"901 1526 QCURVE SMOOTH",
"897 1526 OFFCURVE",
"893 1524 QCURVE",
"653 1415 OFFCURVE",
"313 1055 OFFCURVE",
"160 627 OFFCURVE",
"160 420 QCURVE SMOOTH",
"160 193 OFFCURVE",
"314 -221 OFFCURVE",
"459 -350 QCURVE",
"463 -352 OFFCURVE",
"467 -352 QCURVE",
"478 -354 OFFCURVE",
"494 -342 QCURVE",
"514 -323 OFFCURVE",
"506 -307 QCURVE",
"422 -154 OFFCURVE",
"356 144 OFFCURVE",
"356 291 QCURVE SMOOTH",
"356 535 OFFCURVE",
"487 961 OFFCURVE",
"729 1340 OFFCURVE",
"932 1479 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"491 -271 LINE",
"365 -126 OFFCURVE",
"310 68 OFFCURVE",
"310 291 CURVE SMOOTH",
"310 384 OFFCURVE",
"320 483 OFFCURVE",
"338 585 CURVE SMOOTH",
"399 930 OFFCURVE",
"541 1233 OFFCURVE",
"793 1439 CURVE",
"727 1518 LINE",
"409 1274 OFFCURVE",
"182 918 OFFCURVE",
"123 585 CURVE SMOOTH",
"112 523 OFFCURVE",
"107 460 OFFCURVE",
"107 398 CURVE SMOOTH",
"107 124 OFFCURVE",
"210 -149 OFFCURVE",
"397 -348 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
21 10 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 692;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
lastChange = "2018-08-16 15:32:11 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"616 1161.333 OFFCURVE",
"549.333 1347.333 OFFCURVE",
"416 1516 CURVE SMOOTH",
"382.401 1558.762 OFFCURVE",
"307.358 1506.57 OFFCURVE",
"338 1462 CURVE SMOOTH",
"433.333 1321.333 OFFCURVE",
"481 1163 OFFCURVE",
"481 987 CURVE SMOOTH",
"481 736.333 OFFCURVE",
"395.167 411 OFFCURVE",
"206.5 115 CURVE SMOOTH",
"112.167 -33 OFFCURVE",
"-10.667 -167.667 OFFCURVE",
"-162 -289 CURVE",
"-225.601 -335.478 OFFCURVE",
"-165.142 -374.467 OFFCURVE",
"-115 -338 CURVE SMOOTH",
"174.333 -126 OFFCURVE",
"464.333 258.667 OFFCURVE",
"551 560 CURVE SMOOTH",
"594.333 710.667 OFFCURVE",
"616 843.333 OFFCURVE",
"616 958 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"235 -110 OFFCURVE",
"446 238 OFFCURVE",
"508 587 CURVE SMOOTH",
"521 660 OFFCURVE",
"527 733 OFFCURVE",
"527 804 CURVE SMOOTH",
"527 1076 OFFCURVE",
"436 1332 OFFCURVE",
"265 1516 CURVE",
"194 1464 LINE",
"328 1290 OFFCURVE",
"393 1087 OFFCURVE",
"393 850 CURVE SMOOTH",
"393 767 OFFCURVE",
"385 679 OFFCURVE",
"369 587 CURVE SMOOTH",
"307 234 OFFCURVE",
"149 -55 OFFCURVE",
"-116 -290 CURVE",
"-63 -342 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 94 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
27 21 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 676;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"350 1526 OFFCURVE",
"342 1526 QCURVE SMOOTH",
"336 1526 OFFCURVE",
"299 1493 OFFCURVE",
"307 1479 QCURVE",
"459 1239 OFFCURVE",
"459 881 QCURVE SMOOTH",
"459 457 OFFCURVE",
"240 78 QCURVE SMOOTH",
"84 -190 OFFCURVE",
"-121 -307 QCURVE",
"-127 -309 OFFCURVE",
"-127 -317 QCURVE SMOOTH",
"-127 -326 OFFCURVE",
"-98 -356 OFFCURVE",
"-90 -356 QCURVE SMOOTH",
"-82 -356 OFFCURVE",
"-8 -317 OFFCURVE",
"104 -260 OFFCURVE",
"180 -203 QCURVE SMOOTH",
"466 21 OFFCURVE",
"575 332 QCURVE SMOOTH",
"651 549 OFFCURVE",
"651 778 QCURVE SMOOTH",
"651 1006 OFFCURVE",
"485 1403 OFFCURVE",
"354 1522 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"264 -104 OFFCURVE",
"491 252 OFFCURVE",
"550 585 CURVE SMOOTH",
"561 647 OFFCURVE",
"566 710 OFFCURVE",
"566 772 CURVE SMOOTH",
"566 1046 OFFCURVE",
"463 1319 OFFCURVE",
"276 1518 CURVE",
"182 1439 LINE",
"308 1294 OFFCURVE",
"363 1100 OFFCURVE",
"363 877 CURVE SMOOTH",
"363 784 OFFCURVE",
"353 687 OFFCURVE",
"335 585 CURVE SMOOTH",
"274 240 OFFCURVE",
"131 -65 OFFCURVE",
"-120 -271 CURVE",
"-54 -348 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
24 10 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 692;
}
);
leftKerningGroup = parenright;
note = parenright;
unicode = 0029;
},
{
glyphname = percent;
lastChange = "2018-08-16 18:56:23 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"520 -120 LINE",
"1721 1421 LINE",
"1646 1421 LINE",
"1499 1250 OFFCURVE",
"1337 1165 OFFCURVE",
"1158 1165 CURVE SMOOTH",
"1115 1165 OFFCURVE",
"1068 1174 OFFCURVE",
"1018 1191 CURVE",
"992 1302 OFFCURVE",
"914 1357 OFFCURVE",
"783 1357 CURVE SMOOTH",
"555 1357 OFFCURVE",
"288 1069 OFFCURVE",
"288 848 CURVE SMOOTH",
"288 683 OFFCURVE",
"365 560 OFFCURVE",
"564 560 CURVE SMOOTH",
"787 560 OFFCURVE",
"1026 858 OFFCURVE",
"1026 1133 CURVE",
"1073 1118 OFFCURVE",
"1121 1111 OFFCURVE",
"1171 1111 CURVE SMOOTH",
"1250 1111 OFFCURVE",
"1337 1135 OFFCURVE",
"1451 1196 CURVE",
"421 -120 LINE"
);
},
{
closed = 1;
nodes = (
"467 619 OFFCURVE",
"422 669 OFFCURVE",
"422 770 CURVE SMOOTH",
"422 957 OFFCURVE",
"661 1296 OFFCURVE",
"819 1296 CURVE",
"842 1243 OFFCURVE",
"884 1200 OFFCURVE",
"944 1167 CURVE",
"945 1154 OFFCURVE",
"946 1141 OFFCURVE",
"946 1128 CURVE SMOOTH",
"946 924 OFFCURVE",
"751 619 OFFCURVE",
"558 619 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1615 -41 OFFCURVE",
"1842 278 OFFCURVE",
"1842 519 CURVE SMOOTH",
"1842 663 OFFCURVE",
"1763 757 OFFCURVE",
"1592 757 CURVE SMOOTH",
"1373 757 OFFCURVE",
"1104 468 OFFCURVE",
"1104 247 CURVE SMOOTH",
"1104 78 OFFCURVE",
"1187 -41 OFFCURVE",
"1379 -41 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1283 18 OFFCURVE",
"1238 68 OFFCURVE",
"1238 169 CURVE SMOOTH",
"1238 333 OFFCURVE",
"1478 696 OFFCURVE",
"1631 696 CURVE SMOOTH",
"1718 696 OFFCURVE",
"1762 642 OFFCURVE",
"1762 535 CURVE SMOOTH",
"1762 320 OFFCURVE",
"1565 18 OFFCURVE",
"1373 18 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
53 16 2 5 8 21 1 2 5 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 5 0 2 1 5 2 105 0 1 0 6 9 1 6 105 0 9 0 3 7 9 3 105 0 8 8 4 97 0 4 4 92 77 0 7 7 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 0 8 5 4 8 105 0 5 0 2 1 5 2 105 0 1 0 6 9 1 6 105 0 9 0 3 7 9 3 105 0 7 7 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 4 0 8 5 4 8 105 0 5 0 2 1 5 2 105 0 1 0 6 9 1 6 105 0 9 0 3 7 9 3 105 0 7 0 0 7 89 0 7 7 0 97 0 0 7 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
62 60 22 35 38 34 36 36 40 36 34 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1923;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"444 -121 LINE",
"1702 1421 LINE",
"1565 1421 LINE",
"1416 1259 OFFCURVE",
"1253 1178 OFFCURVE",
"1077 1178 CURVE SMOOTH",
"1040 1178 OFFCURVE",
"1006 1182 OFFCURVE",
"973 1190 CURVE",
"943 1297 OFFCURVE",
"860 1350 OFFCURVE",
"725 1350 CURVE SMOOTH",
"474 1350 OFFCURVE",
"195 1075 OFFCURVE",
"195 848 CURVE SMOOTH",
"195 668 OFFCURVE",
"298 539 OFFCURVE",
"498 539 CURVE SMOOTH",
"780 539 OFFCURVE",
"982 871 OFFCURVE",
"985 1102 CURVE",
"1024 1095 OFFCURVE",
"1059 1092 OFFCURVE",
"1092 1092 CURVE SMOOTH",
"1155 1092 OFFCURVE",
"1262 1111 OFFCURVE",
"1309 1135 CURVE",
"279 -121 LINE"
);
},
{
closed = 1;
nodes = (
"443 625 OFFCURVE",
"401 690 OFFCURVE",
"401 774 CURVE SMOOTH",
"401 907 OFFCURVE",
"605 1221 OFFCURVE",
"733 1257 CURVE",
"764 1210 OFFCURVE",
"810 1172 OFFCURVE",
"870 1143 CURVE",
"871 1135 OFFCURVE",
"872 1123 OFFCURVE",
"872 1116 CURVE SMOOTH",
"872 923 OFFCURVE",
"694 625 OFFCURVE",
"514 625 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1574 -45 OFFCURVE",
"1778 294 OFFCURVE",
"1778 524 CURVE SMOOTH",
"1778 671 OFFCURVE",
"1685 766 OFFCURVE",
"1520 766 CURVE SMOOTH",
"1268 766 OFFCURVE",
"987 493 OFFCURVE",
"987 266 CURVE SMOOTH",
"987 83 OFFCURVE",
"1090 -45 OFFCURVE",
"1290 -45 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1237 41 OFFCURVE",
"1194 106 OFFCURVE",
"1194 190 CURVE SMOOTH",
"1194 335 OFFCURVE",
"1427 680 OFFCURVE",
"1550 680 CURVE SMOOTH",
"1628 680 OFFCURVE",
"1665 612 OFFCURVE",
"1665 532 CURVE SMOOTH",
"1665 351 OFFCURVE",
"1495 41 OFFCURVE",
"1309 41 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
59 1 6 5 54 23 18 3 3 6 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
11 1 7 5 7 133 0 2 0 2 134 0 6 0 3 1 6 3 105 0 1 0 8 10 1 8 106 0 10 0 4 9 10 4 106 0 5 5 31 77 0 9 9 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
11 1 7 5 7 133 0 2 0 2 134 0 6 0 3 1 6 3 105 0 1 0 8 10 1 8 106 0 10 0 4 9 10 4 106 0 9 0 0 2 9 0 105 0 5 5 31 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
11 1 7 5 7 133 0 5 6 5 133 0 2 0 2 134 0 6 0 3 1 6 3 105 0 1 0 8 10 1 8 106 0 10 0 4 9 10 4 106 0 9 0 0 9 89 0 9 9 0 97 0 0 9 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
15 15 66 64 51 49 45 43 15 39 15 39 34 36 36 35 20 36 36 12 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 1814;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = period;
lastChange = "2018-08-18 01:22:18 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"286 -24 OFFCURVE",
"332 7 OFFCURVE",
"332 70 CURVE SMOOTH",
"332 137 OFFCURVE",
"273 176 OFFCURVE",
"221 176 CURVE SMOOTH",
"172 176 OFFCURVE",
"128 147 OFFCURVE",
"128 80 CURVE SMOOTH",
"128 13 OFFCURVE",
"185 -24 OFFCURVE",
"239 -24 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"298 -27 OFFCURVE",
"352 8 OFFCURVE",
"352 82 CURVE SMOOTH",
"352 160 OFFCURVE",
"283 204 OFFCURVE",
"223 204 CURVE SMOOTH",
"167 204 OFFCURVE",
"116 171 OFFCURVE",
"116 93 CURVE SMOOTH",
"116 16 OFFCURVE",
"182 -27 OFFCURVE",
"244 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 1 1 0 97 0 0 0 93 0 78 19 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 520;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"340 -27 OFFCURVE",
"406 35 OFFCURVE",
"406 119 CURVE SMOOTH",
"406 208 OFFCURVE",
"339 279 OFFCURVE",
"256 279 CURVE SMOOTH",
"161 279 OFFCURVE",
"92 221 OFFCURVE",
"92 133 CURVE SMOOTH",
"92 32 OFFCURVE",
"158 -27 OFFCURVE",
"256 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 1 1 0 97 0 0 0 32 0 78 38 34 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 555;
}
);
leftKerningGroup = comma;
note = period;
unicode = 002E;
},
{
glyphname = periodcentered;
lastChange = "2018-08-09 15:34:50 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"373 394 OFFCURVE",
"427 448 OFFCURVE",
"427 516 CURVE SMOOTH",
"427 583 OFFCURVE",
"373 637 OFFCURVE",
"306 637 CURVE SMOOTH",
"238 637 OFFCURVE",
"184 583 OFFCURVE",
"184 516 CURVE SMOOTH",
"184 448 OFFCURVE",
"238 394 OFFCURVE",
"306 394 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 19 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 520;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"397 682 OFFCURVE",
"266 682 OFFCURVE",
"174 588 OFFCURVE",
"174 457 OFFCURVE",
"266 365 OFFCURVE",
"397 365 OFFCURVE",
"492 457 OFFCURVE",
"492 588 OFFCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"424 370 OFFCURVE",
"490 432 OFFCURVE",
"490 516 CURVE SMOOTH",
"490 605 OFFCURVE",
"423 676 OFFCURVE",
"340 676 CURVE SMOOTH",
"245 676 OFFCURVE",
"176 618 OFFCURVE",
"176 530 CURVE SMOOTH",
"176 429 OFFCURVE",
"242 370 OFFCURVE",
"340 370 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 19 17 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 569;
}
);
note = periodcentered;
unicode = 00B7;
},
{
glyphname = plus;
lastChange = "2018-08-01 21:48:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"907 471 LINE",
"573 471 LINE",
"573 807 LINE",
"453 807 LINE",
"453 471 LINE",
"119 471 LINE",
"119 371 LINE",
"453 371 LINE",
"453 0 LINE",
"573 0 LINE",
"573 371 LINE",
"907 371 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 4 95 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 4 1 95 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 4 3 1 4 87 5 1 3 2 1 0 1 3 0 103 0 4 4 1 95 0 1 4 1 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
17 17 17 17 17 16 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"944 510 LINE",
"625 510 LINE",
"625 836 LINE",
"444 836 LINE",
"444 510 LINE",
"123 510 LINE",
"123 362 LINE",
"444 362 LINE",
"444 0 LINE",
"625 0 LINE",
"625 362 LINE",
"944 362 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 4 34 77 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
64 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
5 1 3 2 1 0 1 3 0 103 0 1 1 4 95 0 4 4 34 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 4 3 1 4 87 5 1 3 2 1 0 1 3 0 103 0 4 4 1 95 0 1 4 1 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
17 17 17 17 17 16 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1062;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = plusminus;
lastChange = "2018-08-01 21:48:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"907 696 LINE",
"573 696 LINE",
"573 1032 LINE",
"453 1032 LINE",
"453 696 LINE",
"119 696 LINE",
"119 596 LINE",
"453 596 LINE",
"453 225 LINE",
"573 225 LINE",
"573 596 LINE",
"907 596 LINE"
);
},
{
closed = 1;
nodes = (
"907 102 LINE",
"119 102 LINE",
"119 2 LINE",
"907 2 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 0 1 7 4 1 103 0 7 7 6 95 0 6 6 93 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 0 1 7 4 1 103 0 7 6 6 7 87 0 7 7 6 95 0 6 7 6 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
17 17 17 17 17 17 17 16 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"993 776 LINE",
"694 776 LINE",
"694 1081 LINE",
"514 1081 LINE",
"514 776 LINE",
"213 776 LINE",
"213 629 LINE",
"514 629 LINE",
"514 287 LINE",
"694 287 LINE",
"694 629 LINE",
"993 629 LINE"
);
},
{
closed = 1;
nodes = (
"993 141 LINE",
"213 141 LINE",
"213 -6 LINE",
"993 -6 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 0 1 7 4 1 103 0 7 7 6 95 0 6 6 32 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
5 1 3 2 1 0 1 3 0 103 0 4 0 1 7 4 1 103 0 7 6 6 7 87 0 7 7 6 95 0 6 7 6 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1132;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = q;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"479 -563 LINE",
"581 -563 LINE",
"973 898 LINE",
"871 898 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"714 -509 LINE",
"706 -465 LINE",
"638 -473 OFFCURVE",
"581 -452 OFFCURVE",
"593 -387 CURVE SMOOTH",
"822 878 LINE",
"771 895 LINE",
"690 713 LINE",
"490 -391 LINE SMOOTH",
"478 -457 OFFCURVE",
"439 -493 OFFCURVE",
"330 -513 CURVE",
"337 -559 LINE"
);
},
{
closed = 1;
nodes = (
"318 -27 OFFCURVE",
"719 332 OFFCURVE",
"719 603 CURVE",
"717 664 LINE",
"681 812 OFFCURVE",
"625 852 OFFCURVE",
"537 852 CURVE SMOOTH",
"234 852 OFFCURVE",
"23 498 OFFCURVE",
"23 189 CURVE SMOOTH",
"23 67 OFFCURVE",
"58 -27 OFFCURVE",
"160 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"164 63 OFFCURVE",
"147 111 OFFCURVE",
"147 173 CURVE SMOOTH",
"147 405 OFFCURVE",
"341 788 OFFCURVE",
"536 788 CURVE SMOOTH",
"607 788 OFFCURVE",
"632 701 OFFCURVE",
"632 617 CURVE SMOOTH",
"632 543 OFFCURVE",
"606 462 OFFCURVE",
"553 375 CURVE SMOOTH",
"455 214 OFFCURVE",
"278 63 OFFCURVE",
"217 63 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
31 19 2 6 5 6 2 2 0 2 8 1 1 0 3 76 14 12 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 3 4 133 0 5 5 3 97 0 3 3 95 77 0 6 6 2 97 0 2 2 93 77 0 0 0 1 97 0 1 1 97 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 4 133 0 0 0 1 0 1 101 0 5 5 3 97 0 3 3 95 77 0 6 6 2 97 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 36 20 36 43 37 19 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 862;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"509 -515 LINE",
"703 -515 LINE",
"1085 908 LINE",
"891 908 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"838 -500 LINE",
"828 -432 LINE",
"766 -442 OFFCURVE",
"716 -431 OFFCURVE",
"727 -369 CURVE SMOOTH",
"939 844 LINE",
"816 887 LINE",
"730 720 LINE",
"531 -373 LINE SMOOTH",
"520 -437 OFFCURVE",
"503 -472 OFFCURVE",
"395 -491 CURVE",
"404 -553 LINE"
);
},
{
closed = 1;
nodes = (
"508 -27 OFFCURVE",
"797 469 OFFCURVE",
"797 631 CURVE",
"788 742 LINE",
"724 832 OFFCURVE",
"668 852 OFFCURVE",
"586 852 CURVE SMOOTH",
"285 852 OFFCURVE",
"43 487 OFFCURVE",
"43 202 CURVE SMOOTH",
"43 67 OFFCURVE",
"109 -27 OFFCURVE",
"231 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"273 98 OFFCURVE",
"266 130 OFFCURVE",
"266 182 CURVE SMOOTH",
"266 397 OFFCURVE",
"424 770 OFFCURVE",
"583 770 CURVE SMOOTH",
"654 770 OFFCURVE",
"681 686 OFFCURVE",
"681 602 CURVE SMOOTH",
"681 538 OFFCURVE",
"661 467 OFFCURVE",
"619 387 CURVE SMOOTH",
"549 254 OFFCURVE",
"384 98 OFFCURVE",
"321 98 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
31 1 6 4 19 1 7 6 6 2 2 0 3 8 1 2 0 4 76 14 12 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 5 4 5 133 0 2 0 1 0 2 1 128 0 6 6 4 97 0 4 4 34 77 0 7 7 3 97 0 3 3 32 77 0 0 0 1 97 0 1 1 36 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 5 4 5 133 0 2 0 1 0 2 1 128 0 0 0 1 0 1 101 0 6 6 4 97 0 4 4 34 77 0 7 7 3 97 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
35 36 35 36 37 21 36 35 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 965;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "D204D312-815A-44AF-8A83-E0841780EAAD";
name = "Aug 13 18, 06:41";
paths = (
{
closed = 1;
nodes = (
"891 532 LINE",
"976 878 LINE SMOOTH",
"980 895 OFFCURVE",
"967 903 OFFCURVE",
"937 903 CURVE SMOOTH",
"927 903 OFFCURVE",
"921 900 OFFCURVE",
"918 895 CURVE SMOOTH",
"829 729 LINE",
"808 811 OFFCURVE",
"768 852 OFFCURVE",
"707 852 CURVE SMOOTH",
"378 852 OFFCURVE",
"94 433 OFFCURVE",
"94 133 CURVE SMOOTH",
"94 37 OFFCURVE",
"146 -27 OFFCURVE",
"227 -27 CURVE SMOOTH",
"387 -27 OFFCURVE",
"616 197 OFFCURVE",
"723 381 CURVE",
"733 383 LINE",
"557 -391 LINE SMOOTH",
"542 -457 OFFCURVE",
"490 -493 OFFCURVE",
"401 -500 CURVE SMOOTH",
"386 -501 OFFCURVE",
"378 -516 OFFCURVE",
"378 -543 CURVE SMOOTH",
"378 -554 OFFCURVE",
"382 -559 OFFCURVE",
"389 -559 CURVE",
"553 -526 OFFCURVE",
"683 -510 OFFCURVE",
"779 -510 CURVE SMOOTH",
"791 -510 OFFCURVE",
"797 -496 OFFCURVE",
"797 -468 CURVE SMOOTH",
"797 -455 OFFCURVE",
"793 -450 OFFCURVE",
"786 -451 CURVE",
"771 -453 OFFCURVE",
"758 -454 OFFCURVE",
"745 -454 CURVE SMOOTH",
"699 -454 OFFCURVE",
"676 -438 OFFCURVE",
"676 -406 CURVE SMOOTH",
"676 -399 OFFCURVE",
"677 -393 OFFCURVE",
"678 -387 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"756 563 OFFCURVE",
"722 474 OFFCURVE",
"655 375 CURVE SMOOTH",
"543 214 OFFCURVE",
"352 63 OFFCURVE",
"291 63 CURVE SMOOTH",
"258 63 OFFCURVE",
"242 89 OFFCURVE",
"242 141 CURVE SMOOTH",
"242 348 OFFCURVE",
"490 788 OFFCURVE",
"674 788 CURVE SMOOTH",
"729 788 OFFCURVE",
"756 740 OFFCURVE",
"756 643 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
31 19 2 6 5 6 2 2 0 2 8 1 1 0 3 76 14 12 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 3 4 133 0 5 5 3 97 0 3 3 95 77 0 6 6 2 97 0 2 2 93 77 0 0 0 1 97 0 1 1 97 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 4 3 4 133 0 0 0 1 0 1 101 0 5 5 3 97 0 3 3 95 77 0 6 6 2 97 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
35 36 20 36 43 37 19 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 952;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "82DF8B38-3609-4A7A-B4DA-4995B4E614F1";
name = "Aug 13 18, 06:49";
paths = (
{
closed = 1;
nodes = (
"930 516 LINE",
"1016 840 LINE SMOOTH",
"1029 883 OFFCURVE",
"999 905 OFFCURVE",
"926 905 CURVE SMOOTH",
"909 905 OFFCURVE",
"898 899 OFFCURVE",
"891 887 CURVE SMOOTH",
"829 780 LINE",
"796 828 OFFCURVE",
"754 852 OFFCURVE",
"705 852 CURVE SMOOTH",
"349 852 OFFCURVE",
"63 449 OFFCURVE",
"63 160 CURVE SMOOTH",
"63 61 OFFCURVE",
"118 -27 OFFCURVE",
"233 -27 CURVE SMOOTH",
"357 -27 OFFCURVE",
"523 102 OFFCURVE",
"662 266 CURVE",
"672 258 LINE",
"520 -373 LINE SMOOTH",
"504 -438 OFFCURVE",
"467 -473 OFFCURVE",
"410 -477 CURVE",
"381 -480 OFFCURVE",
"367 -502 OFFCURVE",
"367 -543 CURVE SMOOTH",
"367 -554 OFFCURVE",
"370 -559 OFFCURVE",
"377 -559 CURVE",
"545 -526 OFFCURVE",
"683 -510 OFFCURVE",
"791 -510 CURVE SMOOTH",
"812 -510 OFFCURVE",
"823 -490 OFFCURVE",
"823 -451 CURVE SMOOTH",
"823 -437 OFFCURVE",
"820 -431 OFFCURVE",
"813 -432 CURVE",
"795 -435 OFFCURVE",
"779 -436 OFFCURVE",
"766 -436 CURVE SMOOTH",
"732 -436 OFFCURVE",
"715 -422 OFFCURVE",
"715 -393 CURVE SMOOTH",
"715 -385 OFFCURVE",
"716 -377 OFFCURVE",
"717 -369 CURVE"
);
},
{
closed = 1;
nodes = (
"739 556 OFFCURVE",
"712 476 OFFCURVE",
"657 387 CURVE SMOOTH",
"576 254 OFFCURVE",
"397 98 OFFCURVE",
"334 98 CURVE SMOOTH",
"301 99 OFFCURVE",
"285 116 OFFCURVE",
"285 150 CURVE SMOOTH",
"285 357 OFFCURVE",
"488 770 OFFCURVE",
"655 770 CURVE SMOOTH",
"711 770 OFFCURVE",
"739 722 OFFCURVE",
"739 627 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
31 1 6 4 19 1 7 6 6 2 2 0 3 8 1 2 0 4 76 14 12 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 5 4 5 133 0 2 0 1 0 2 1 128 0 6 6 4 97 0 4 4 34 77 0 7 7 3 97 0 3 3 32 77 0 0 0 1 97 0 1 1 36 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 5 4 5 133 0 2 0 1 0 2 1 128 0 0 0 1 0 1 101 0 6 6 4 97 0 4 4 34 77 0 7 7 3 97 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
35 36 35 36 37 21 36 35 8 8 30 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 978;
}
);
leftKerningGroup = c;
note = q;
unicode = 0071;
},
{
glyphname = question;
lastChange = "2018-08-16 15:37:53 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"772 1212.333 OFFCURVE",
"655.333 1362 OFFCURVE",
"518 1362 CURVE SMOOTH",
"464.667 1362 OFFCURVE",
"406 1318.667 OFFCURVE",
"406 1260 CURVE SMOOTH",
"406 1224 OFFCURVE",
"433.667 1194 OFFCURVE",
"455 1194 CURVE SMOOTH",
"617 1194 OFFCURVE",
"698 1147.667 OFFCURVE",
"698 1055 CURVE SMOOTH",
"698 966.333 OFFCURVE",
"641.333 896 OFFCURVE",
"528 844 CURVE SMOOTH",
"408 788 LINE SMOOTH",
"297.333 737.333 OFFCURVE",
"242 666.333 OFFCURVE",
"242 575 CURVE SMOOTH",
"242 534.333 OFFCURVE",
"250 484.667 OFFCURVE",
"266 426 CURVE",
"268.667 412.667 OFFCURVE",
"313 420.667 OFFCURVE",
"313 438 CURVE SMOOTH",
"313.667 491.333 OFFCURVE",
"319.333 533 OFFCURVE",
"330 563 CURVE",
"338 596.333 OFFCURVE",
"371.333 626.333 OFFCURVE",
"430 653 CURVE SMOOTH",
"621 741 LINE SMOOTH",
"682.333 769 OFFCURVE",
"772 905.667 OFFCURVE",
"772 1059 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"290 395 LINE",
"288 416 OFFCURVE",
"287 436 OFFCURVE",
"287 454 CURVE SMOOTH",
"287 530 OFFCURVE",
"292 573 OFFCURVE",
"384 620 CURVE SMOOTH",
"565 712 LINE SMOOTH",
"658 759 OFFCURVE",
"689 903 OFFCURVE",
"689 986 CURVE SMOOTH",
"689 1178 OFFCURVE",
"554 1362 OFFCURVE",
"399 1362 CURVE SMOOTH",
"322 1362 OFFCURVE",
"297 1302 OFFCURVE",
"297 1244 CURVE SMOOTH",
"297 1205 OFFCURVE",
"315 1186 OFFCURVE",
"352 1186 CURVE SMOOTH",
"526 1186 OFFCURVE",
"612 1131 OFFCURVE",
"612 1021 CURVE SMOOTH",
"612 940 OFFCURVE",
"573 876 OFFCURVE",
"464 820 CURVE SMOOTH",
"348 761 LINE SMOOTH",
"239 705 OFFCURVE",
"204 646 OFFCURVE",
"204 567 CURVE SMOOTH",
"204 516 OFFCURVE",
"217 455 OFFCURVE",
"243 382 CURVE"
);
},
{
closed = 1;
nodes = (
"284 -27 OFFCURVE",
"330 26 OFFCURVE",
"330 83 CURVE SMOOTH",
"330 138 OFFCURVE",
"283 169 OFFCURVE",
"236 169 CURVE SMOOTH",
"170 169 OFFCURVE",
"128 117 OFFCURVE",
"128 56 CURVE SMOOTH",
"128 2 OFFCURVE",
"173 -27 OFFCURVE",
"221 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
16 1 1 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 3 97 0 3 3 92 77 0 1 1 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 3 0 2 1 3 2 105 0 1 1 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
35 33 28 27 19 17 4 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 678;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"254 537 OFFCURVE",
"283 426 QCURVE SMOOTH",
"287 410 OFFCURVE",
"350 426 OFFCURVE",
"350 442 QCURVE SMOOTH",
"350 510 OFFCURVE",
"383 586 OFFCURVE",
"471 623 QCURVE SMOOTH",
"647 698 LINE SMOOTH",
"715 727 OFFCURVE",
"809 911 OFFCURVE",
"809 1026 QCURVE SMOOTH",
"809 1169 OFFCURVE",
"662 1376 OFFCURVE",
"547 1376 QCURVE SMOOTH",
"485 1376 OFFCURVE",
"397 1288 OFFCURVE",
"397 1243 QCURVE SMOOTH",
"397 1200 OFFCURVE",
"458 1145 OFFCURVE",
"483 1145 QCURVE SMOOTH",
"713 1144 OFFCURVE",
"713 1042 QCURVE SMOOTH",
"713 942 OFFCURVE",
"539 866 QCURVE SMOOTH",
"418 813 LINE SMOOTH",
"336 778 OFFCURVE",
"254 672 OFFCURVE",
"254 584 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"375 195 OFFCURVE",
"291 289 OFFCURVE",
"156 289 OFFCURVE",
"68 195 OFFCURVE",
"68 57 OFFCURVE",
"158 -27 OFFCURVE",
"289 -27 OFFCURVE",
"375 59 OFFCURVE",
"375 127 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"331 440 LINE",
"329 456 OFFCURVE",
"329 471 OFFCURVE",
"329 486 CURVE SMOOTH",
"329 573 OFFCURVE",
"329 585 OFFCURVE",
"418 625 CURVE SMOOTH",
"599 707 LINE SMOOTH",
"706 756 OFFCURVE",
"746 902 OFFCURVE",
"746 990 CURVE SMOOTH",
"746 1171 OFFCURVE",
"597 1362 OFFCURVE",
"417 1362 CURVE SMOOTH",
"337 1362 OFFCURVE",
"276 1303 OFFCURVE",
"276 1237 CURVE SMOOTH",
"276 1174 OFFCURVE",
"324 1136 OFFCURVE",
"361 1133 CURVE SMOOTH",
"546 1119 OFFCURVE",
"621 1094 OFFCURVE",
"621 1010 CURVE SMOOTH",
"621 962 OFFCURVE",
"605 928 OFFCURVE",
"473 866 CURVE SMOOTH",
"359 813 LINE SMOOTH",
"279 776 OFFCURVE",
"210 692 OFFCURVE",
"210 615 CURVE SMOOTH",
"210 565 OFFCURVE",
"225 501 OFFCURVE",
"253 422 CURVE"
);
},
{
closed = 1;
nodes = (
"319 -24 OFFCURVE",
"398 48 OFFCURVE",
"398 152 CURVE SMOOTH",
"398 237 OFFCURVE",
"335 280 OFFCURVE",
"265 280 CURVE SMOOTH",
"160 280 OFFCURVE",
"79 192 OFFCURVE",
"79 95 CURVE SMOOTH",
"79 16 OFFCURVE",
"145 -24 OFFCURVE",
"217 -24 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 1 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 0 1 97 0 1 1 37 77 0 3 3 2 97 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 3 1 0 105 0 3 3 2 97 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
36 35 32 31 36 39 4 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 692;
}
);
leftKerningGroup = question;
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
lastChange = "2018-08-16 15:40:40 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"262 -384 OFFCURVE",
"234.333 -354 OFFCURVE",
"213 -354 CURVE SMOOTH",
"51 -354 OFFCURVE",
"-30 -307.667 OFFCURVE",
"-30 -215 CURVE SMOOTH",
"-30 -126.333 OFFCURVE",
"26.667 -56 OFFCURVE",
"140 -4 CURVE SMOOTH",
"260 52 LINE SMOOTH",
"370.667 102.667 OFFCURVE",
"426 173.667 OFFCURVE",
"426 265 CURVE SMOOTH",
"426 305.667 OFFCURVE",
"418 355.333 OFFCURVE",
"402 414 CURVE",
"399.333 427.333 OFFCURVE",
"355 419.333 OFFCURVE",
"355 402 CURVE SMOOTH",
"354.333 348.667 OFFCURVE",
"348.667 307 OFFCURVE",
"338 277 CURVE",
"330 243.667 OFFCURVE",
"296.667 213.667 OFFCURVE",
"238 187 CURVE SMOOTH",
"47 99 LINE SMOOTH",
"-14.333 71 OFFCURVE",
"-104 -65.667 OFFCURVE",
"-104 -219 CURVE SMOOTH",
"-104 -372.333 OFFCURVE",
"12.667 -522 OFFCURVE",
"150 -522 CURVE SMOOTH",
"203.333 -522 OFFCURVE",
"262 -478.667 OFFCURVE",
"262 -420 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"286 -533 OFFCURVE",
"311 -473 OFFCURVE",
"311 -415 CURVE SMOOTH",
"311 -376 OFFCURVE",
"293 -357 OFFCURVE",
"256 -357 CURVE SMOOTH",
"82 -357 OFFCURVE",
"-4 -302 OFFCURVE",
"-4 -192 CURVE SMOOTH",
"-4 -111 OFFCURVE",
"35 -47 OFFCURVE",
"144 9 CURVE SMOOTH",
"260 68 LINE SMOOTH",
"369 124 OFFCURVE",
"404 183 OFFCURVE",
"404 262 CURVE SMOOTH",
"404 313 OFFCURVE",
"391 374 OFFCURVE",
"365 447 CURVE",
"318 434 LINE",
"320 413 OFFCURVE",
"321 393 OFFCURVE",
"321 375 CURVE SMOOTH",
"321 299 OFFCURVE",
"316 256 OFFCURVE",
"224 209 CURVE SMOOTH",
"43 117 LINE SMOOTH",
"-50 70 OFFCURVE",
"-81 -74 OFFCURVE",
"-81 -157 CURVE SMOOTH",
"-81 -349 OFFCURVE",
"54 -533 OFFCURVE",
"209 -533 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"438 660 OFFCURVE",
"480 712 OFFCURVE",
"480 773 CURVE SMOOTH",
"480 827 OFFCURVE",
"435 856 OFFCURVE",
"387 856 CURVE SMOOTH",
"324 856 OFFCURVE",
"278 803 OFFCURVE",
"278 746 CURVE SMOOTH",
"278 691 OFFCURVE",
"325 660 OFFCURVE",
"372 660 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
22 1 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 0 1 97 0 1 1 95 77 0 3 3 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 2 3 2 101 0 0 0 1 97 0 1 1 95 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 0 3 1 0 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
34 33 36 19 17 4 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 678;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"696 787 OFFCURVE",
"606 870 OFFCURVE",
"543 870 QCURVE SMOOTH",
"475 870 OFFCURVE",
"389 785 OFFCURVE",
"389 719 QCURVE SMOOTH",
"389 651 OFFCURVE",
"473 555 OFFCURVE",
"608 555 OFFCURVE",
"696 649 OFFCURVE",
"696 719 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"510 307 OFFCURVE",
"481 418 QCURVE SMOOTH",
"477 434 OFFCURVE",
"444 426 QCURVE",
"414 417 OFFCURVE",
"414 401 QCURVE",
"411 324 OFFCURVE",
"395 293 QCURVE",
"381 258 OFFCURVE",
"293 221 QCURVE SMOOTH",
"117 145 LINE SMOOTH",
"49 117 OFFCURVE",
"-45 -67 OFFCURVE",
"-45 -182 QCURVE SMOOTH",
"-45 -326 OFFCURVE",
"29 -428 QCURVE SMOOTH",
"102 -532 OFFCURVE",
"217 -532 QCURVE SMOOTH",
"279 -532 OFFCURVE",
"367 -444 OFFCURVE",
"367 -399 QCURVE SMOOTH",
"367 -357 OFFCURVE",
"336 -330 QCURVE",
"306 -301 OFFCURVE",
"281 -301 QCURVE SMOOTH",
"51 -301 OFFCURVE",
"51 -199 QCURVE SMOOTH",
"51 -99 OFFCURVE",
"225 -23 QCURVE SMOOTH",
"346 31 LINE SMOOTH",
"428 66 OFFCURVE",
"510 172 OFFCURVE",
"510 260 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"361 -530 OFFCURVE",
"422 -471 OFFCURVE",
"422 -405 CURVE SMOOTH",
"422 -342 OFFCURVE",
"374 -304 OFFCURVE",
"337 -301 CURVE SMOOTH",
"152 -286 OFFCURVE",
"77 -262 OFFCURVE",
"77 -178 CURVE SMOOTH",
"77 -130 OFFCURVE",
"93 -95 OFFCURVE",
"225 -34 CURVE SMOOTH",
"339 19 LINE SMOOTH",
"419 56 OFFCURVE",
"488 140 OFFCURVE",
"488 217 CURVE SMOOTH",
"488 267 OFFCURVE",
"473 331 OFFCURVE",
"445 410 CURVE",
"367 392 LINE",
"369 376 OFFCURVE",
"369 361 OFFCURVE",
"369 346 CURVE SMOOTH",
"369 259 OFFCURVE",
"369 247 OFFCURVE",
"280 207 CURVE SMOOTH",
"99 125 LINE SMOOTH",
"-8 76 OFFCURVE",
"-48 -70 OFFCURVE",
"-48 -158 CURVE SMOOTH",
"-48 -339 OFFCURVE",
"101 -530 OFFCURVE",
"281 -530 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"538 552 OFFCURVE",
"619 640 OFFCURVE",
"619 737 CURVE SMOOTH",
"619 816 OFFCURVE",
"553 856 OFFCURVE",
"481 856 CURVE SMOOTH",
"379 856 OFFCURVE",
"300 784 OFFCURVE",
"300 680 CURVE SMOOTH",
"300 595 OFFCURVE",
"363 552 OFFCURVE",
"433 552 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
38 1 2 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 0 1 97 0 1 1 34 77 0 2 2 3 97 0 3 3 36 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 3 2 3 101 0 0 0 1 97 0 1 1 34 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 0 2 1 0 105 0 2 3 3 2 89 0 2 2 3 97 0 3 2 3 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
37 41 36 18 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 724;
}
);
note = questiondown;
unicode = 00BF;
},
{
glyphname = quotedbl;
lastChange = "2018-08-16 17:01:34 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"508 1141.333 OFFCURVE",
"571.333 1292.333 OFFCURVE",
"618 1397 CURVE SMOOTH",
"621.333 1404.333 OFFCURVE",
"623 1414.333 OFFCURVE",
"623 1427 CURVE SMOOTH",
"623 1463 OFFCURVE",
"598.333 1481 OFFCURVE",
"549 1481 CURVE SMOOTH",
"484.333 1481 OFFCURVE",
"444 1452.333 OFFCURVE",
"428 1395 CURVE SMOOTH",
"424 1380.333 OFFCURVE",
"413.667 1310.667 OFFCURVE",
"397 1186 CURVE SMOOTH",
"379.667 1061.333 OFFCURVE",
"366.667 980.667 OFFCURVE",
"358 944 CURVE",
"428 944 LINE"
);
},
{
closed = 1;
nodes = (
"828.667 1130 OFFCURVE",
"892.667 1281 OFFCURVE",
"946 1397 CURVE",
"949.333 1405.667 OFFCURVE",
"951 1415.667 OFFCURVE",
"951 1427 CURVE SMOOTH",
"951 1463 OFFCURVE",
"922.667 1481 OFFCURVE",
"866 1481 CURVE SMOOTH",
"808.667 1481 OFFCURVE",
"772 1452.333 OFFCURVE",
"756 1395 CURVE SMOOTH",
"752 1380.333 OFFCURVE",
"741.667 1310.667 OFFCURVE",
"725 1186 CURVE SMOOTH",
"707.667 1061.333 OFFCURVE",
"694.667 980.667 OFFCURVE",
"686 944 CURVE",
"754 944 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"754 944 LINE",
"797 1052 OFFCURVE",
"837 1147 OFFCURVE",
"871 1223 CURVE SMOOTH",
"920 1333 OFFCURVE",
"949 1396 OFFCURVE",
"949 1426 CURVE SMOOTH",
"949 1463 OFFCURVE",
"924 1481 OFFCURVE",
"873 1481 CURVE SMOOTH",
"810 1481 OFFCURVE",
"770 1455 OFFCURVE",
"754 1395 CURVE SMOOTH",
"748 1373 OFFCURVE",
"731 1239 OFFCURVE",
"723 1170 CURVE SMOOTH",
"713 1085 OFFCURVE",
"699 1010 OFFCURVE",
"686 944 CURVE"
);
},
{
closed = 1;
nodes = (
"424 944 LINE",
"467 1052 OFFCURVE",
"507 1147 OFFCURVE",
"541 1223 CURVE SMOOTH",
"591 1333 OFFCURVE",
"619 1396 OFFCURVE",
"619 1426 CURVE SMOOTH",
"619 1463 OFFCURVE",
"594 1481 OFFCURVE",
"543 1481 CURVE SMOOTH",
"480 1481 OFFCURVE",
"440 1455 OFFCURVE",
"424 1395 CURVE SMOOTH",
"418 1373 OFFCURVE",
"401 1239 OFFCURVE",
"393 1170 CURVE SMOOTH",
"383 1085 OFFCURVE",
"369 1010 OFFCURVE",
"356 944 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 27 values pushed */
22 9 2 0 1 1 76 2 1 0 1 0 134 3 1 1 1 94 1 78 37 21 37 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 758;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"883 1001 OFFCURVE",
"1065 1341 OFFCURVE",
"1081 1391 OFFCURVE",
"1081 1411 QCURVE SMOOTH",
"1081 1481 OFFCURVE",
"850 1480 OFFCURVE",
"813 1380 QCURVE SMOOTH",
"805 1358 OFFCURVE",
"772 973 OFFCURVE",
"768 944 QCURVE",
"856 944 LINE"
);
},
{
closed = 1;
nodes = (
"482 1001 OFFCURVE",
"664 1341 OFFCURVE",
"680 1391 OFFCURVE",
"680 1411 QCURVE SMOOTH",
"680 1481 OFFCURVE",
"449 1480 OFFCURVE",
"412 1380 QCURVE SMOOTH",
"403 1358 OFFCURVE",
"371 973 OFFCURVE",
"367 944 QCURVE",
"455 944 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"860 944 LINE",
"876 985 OFFCURVE",
"914 1063 OFFCURVE",
"975 1176 CURVE SMOOTH",
"1033 1283 OFFCURVE",
"1083 1360 OFFCURVE",
"1083 1409 CURVE SMOOTH",
"1083 1457 OFFCURVE",
"1045 1481 OFFCURVE",
"970 1481 CURVE SMOOTH",
"890 1481 OFFCURVE",
"840 1446 OFFCURVE",
"815 1380 CURVE SMOOTH",
"809 1364 OFFCURVE",
"802 1299 OFFCURVE",
"793 1186 CURVE SMOOTH",
"784 1073 OFFCURVE",
"774 992 OFFCURVE",
"765 944 CURVE"
);
},
{
closed = 1;
nodes = (
"453 944 LINE",
"469 985 OFFCURVE",
"507 1063 OFFCURVE",
"568 1176 CURVE SMOOTH",
"626 1283 OFFCURVE",
"676 1360 OFFCURVE",
"676 1409 CURVE SMOOTH",
"676 1457 OFFCURVE",
"638 1481 OFFCURVE",
"563 1481 CURVE SMOOTH",
"483 1481 OFFCURVE",
"431 1447 OFFCURVE",
"408 1380 CURVE SMOOTH",
"402 1364 OFFCURVE",
"395 1299 OFFCURVE",
"386 1186 CURVE SMOOTH",
"377 1073 OFFCURVE",
"367 992 OFFCURVE",
"358 944 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 0 1 0 134 3 1 1 1 33 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 1 0 1 133 2 1 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
20 21 20 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 792;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = quotedblbase;
lastChange = "2018-08-16 16:25:20 +0000";
layers = (
{
components = (
{
name = quotesinglbase;
},
{
name = quotesinglbase;
transform = "{1, 0, 0, 1, 340, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 770;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"751 60 OFFCURVE",
"752 88 QCURVE",
"750 156 OFFCURVE",
"705 203 QCURVE SMOOTH",
"655 252 OFFCURVE",
"594 252 QCURVE SMOOTH",
"551 251 OFFCURVE",
"514 233 QCURVE SMOOTH",
"446 199 OFFCURVE",
"432 123 QCURVE SMOOTH",
"430 110 OFFCURVE",
"430 100 QCURVE SMOOTH",
"430 74 OFFCURVE",
"444 51 QCURVE",
"469 14 OFFCURVE",
"514 2 QCURVE",
"533 -6 OFFCURVE",
"535 -20 QCURVE",
"532 -37 LINE",
"518 -80 OFFCURVE",
"483 -129 QCURVE SMOOTH",
"422 -218 OFFCURVE",
"332 -281 QCURVE SMOOTH",
"326 -285 OFFCURVE",
"326 -293 QCURVE",
"328 -309 OFFCURVE",
"340 -317 QCURVE",
"350 -322 LINE",
"362 -319 LINE",
"412 -297 OFFCURVE",
"457 -270 QCURVE SMOOTH",
"688 -135 OFFCURVE",
"741 27 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"323 60 OFFCURVE",
"324 88 QCURVE",
"321 156 OFFCURVE",
"276 203 QCURVE SMOOTH",
"227 252 OFFCURVE",
"166 252 QCURVE SMOOTH",
"123 251 OFFCURVE",
"86 233 QCURVE SMOOTH",
"18 199 OFFCURVE",
"4 123 QCURVE SMOOTH",
"2 110 OFFCURVE",
"2 100 QCURVE SMOOTH",
"2 72 OFFCURVE",
"16 49 QCURVE",
"43 14 OFFCURVE",
"86 2 QCURVE",
"104 -6 OFFCURVE",
"106 -20 QCURVE",
"104 -37 LINE",
"90 -80 OFFCURVE",
"55 -129 QCURVE SMOOTH",
"-6 -218 OFFCURVE",
"-96 -281 QCURVE",
"-100 -285 OFFCURVE",
"-100 -289 QCURVE SMOOTH",
"-100 -301 LINE",
"-94 -322 OFFCURVE",
"-78 -322 QCURVE",
"-66 -319 LINE",
"-14 -297 OFFCURVE",
"29 -270 QCURVE SMOOTH",
"260 -135 OFFCURVE",
"313 27 QCURVE SMOOTH"
);
}
);
};
components = (
{
name = quotesinglbase;
},
{
name = quotesinglbase;
transform = "{1, 0, 0, 1, 430, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
54 47 21 15 4 5 0 73 1 1 0 0 118 61 59 28 26 2 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 968;
}
);
leftMetricsKey = quotesinglbase;
note = quotedblbase;
rightMetricsKey = quotesinglbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
lastChange = "2018-08-16 16:31:17 +0000";
layers = (
{
components = (
{
name = quoteleft;
},
{
name = quoteleft;
transform = "{1, 0, 0, 1, 336, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 766;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1077 1448 OFFCURVE",
"1079 1454 QCURVE",
"1077 1468 LINE",
"1071 1489 OFFCURVE",
"1053 1489 QCURVE SMOOTH",
"1046 1489 OFFCURVE",
"1040 1485 QCURVE",
"989 1463 OFFCURVE",
"940 1434 QCURVE SMOOTH",
"715 1301 OFFCURVE",
"664 1139 QCURVE",
"662 1137 OFFCURVE",
"662 1135 QCURVE",
"653 1104 OFFCURVE",
"653 1075 QCURVE SMOOTH",
"653 1010 OFFCURVE",
"700 963 QCURVE SMOOTH",
"750 913 OFFCURVE",
"811 913 QCURVE SMOOTH",
"852 914 OFFCURVE",
"889 934 QCURVE SMOOTH",
"955 968 OFFCURVE",
"973 1044 QCURVE",
"975 1067 LINE",
"975 1132 OFFCURVE",
"891 1165 QCURVE SMOOTH",
"870 1174 OFFCURVE",
"868 1188 QCURVE",
"870 1204 LINE",
"884 1243 OFFCURVE",
"913 1286 QCURVE SMOOTH",
"975 1376 OFFCURVE",
"1073 1446 QCURVE"
);
},
{
closed = 1;
nodes = (
"649 1448 OFFCURVE",
"651 1454 QCURVE",
"649 1468 LINE",
"643 1489 OFFCURVE",
"625 1489 QCURVE SMOOTH",
"618 1489 OFFCURVE",
"612 1485 QCURVE",
"561 1463 OFFCURVE",
"512 1434 QCURVE SMOOTH",
"287 1301 OFFCURVE",
"236 1139 QCURVE SMOOTH",
"225 1106 OFFCURVE",
"225 1075 QCURVE SMOOTH",
"225 1010 OFFCURVE",
"270 963 QCURVE SMOOTH",
"320 913 OFFCURVE",
"381 913 QCURVE SMOOTH",
"424 914 OFFCURVE",
"461 932 QCURVE",
"527 968 OFFCURVE",
"545 1044 QCURVE",
"547 1067 LINE",
"547 1132 OFFCURVE",
"463 1165 QCURVE SMOOTH",
"442 1174 OFFCURVE",
"440 1188 QCURVE",
"442 1204 LINE",
"456 1243 OFFCURVE",
"485 1286 QCURVE SMOOTH",
"547 1376 OFFCURVE",
"645 1446 QCURVE"
);
}
);
};
components = (
{
name = quoteleft;
transform = "{1, 0, 0, 1, 404, 0}";
},
{
name = quoteleft;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
61 42 37 30 9 4 6 0 74 1 1 0 0 118 48 46 45 2 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 983;
}
);
leftMetricsKey = quoteleft;
note = quotedblleft;
rightMetricsKey = quoteleft;
unicode = 201C;
},
{
glyphname = quotedblright;
lastChange = "2018-08-16 16:31:25 +0000";
layers = (
{
components = (
{
name = quoteright;
},
{
name = quoteright;
transform = "{1, 0, 0, 1, 340, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 770;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1100 1290 OFFCURVE",
"1100 1319 QCURVE SMOOTH",
"1100 1368 OFFCURVE",
"1073 1409 QCURVE",
"1053 1434 LINE",
"1003 1483 OFFCURVE",
"942 1483 QCURVE SMOOTH",
"899 1482 OFFCURVE",
"862 1464 QCURVE SMOOTH",
"794 1430 OFFCURVE",
"780 1354 QCURVE SMOOTH",
"778 1341 OFFCURVE",
"778 1331 QCURVE",
"779 1305 OFFCURVE",
"793 1282 QCURVE SMOOTH",
"817 1245 OFFCURVE",
"862 1233 QCURVE",
"881 1224 OFFCURVE",
"883 1210 QCURVE",
"881 1194 LINE",
"869 1149 OFFCURVE",
"834 1102 QCURVE SMOOTH",
"770 1016 OFFCURVE",
"680 950 QCURVE",
"676 946 OFFCURVE",
"676 942 QCURVE SMOOTH",
"676 930 LINE",
"682 907 OFFCURVE",
"698 907 QCURVE",
"711 911 LINE",
"1027 1067 OFFCURVE",
"1090 1257 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"672 1290 OFFCURVE",
"672 1319 QCURVE SMOOTH",
"672 1368 OFFCURVE",
"645 1409 QCURVE",
"625 1434 LINE",
"575 1483 OFFCURVE",
"514 1483 QCURVE SMOOTH",
"471 1482 OFFCURVE",
"434 1464 QCURVE SMOOTH",
"366 1430 OFFCURVE",
"352 1354 QCURVE SMOOTH",
"350 1341 OFFCURVE",
"350 1331 QCURVE",
"351 1305 OFFCURVE",
"365 1282 QCURVE SMOOTH",
"389 1245 OFFCURVE",
"434 1233 QCURVE",
"453 1224 OFFCURVE",
"455 1210 QCURVE",
"453 1194 LINE",
"441 1149 OFFCURVE",
"406 1102 QCURVE SMOOTH",
"342 1016 OFFCURVE",
"252 950 QCURVE",
"246 946 OFFCURVE",
"246 938 QCURVE SMOOTH",
"246 921 OFFCURVE",
"260 913 QCURVE SMOOTH",
"270 907 LINE",
"283 911 LINE",
"599 1067 OFFCURVE",
"662 1257 QCURVE SMOOTH"
);
}
);
};
components = (
{
name = quoteright;
transform = "{1, 0, 0, 1, 433, 0}";
},
{
name = quoteright;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
51 44 19 12 4 0 73 1 1 0 0 33 0 78 58 56 26 24 2 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1012;
}
);
leftKerningGroup = afii57929;
leftMetricsKey = quoteright;
note = quotedblright;
rightMetricsKey = quoteright;
unicode = 201D;
},
{
glyphname = quoteleft;
lastChange = "2018-08-16 16:50:26 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"462 1136.704 OFFCURVE",
"368 1125.955 OFFCURVE",
"368 1188 CURVE SMOOTH",
"368 1251.333 OFFCURVE",
"442.667 1340.667 OFFCURVE",
"592 1456 CURVE",
"601.123 1465.123 OFFCURVE",
"579.266 1491.266 OFFCURVE",
"571 1483 CURVE",
"457.667 1423 OFFCURVE",
"344 1345.667 OFFCURVE",
"268 1223 CURVE SMOOTH",
"230 1161.667 OFFCURVE",
"211 1109.667 OFFCURVE",
"211 1067 CURVE SMOOTH",
"211 991 OFFCURVE",
"270 942 OFFCURVE",
"334 942 CURVE SMOOTH",
"398 942 OFFCURVE",
"462 992.667 OFFCURVE",
"462 1062 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"400 942 OFFCURVE",
"457 986 OFFCURVE",
"457 1052 CURVE SMOOTH",
"457 1124 OFFCURVE",
"385 1166 OFFCURVE",
"317 1177 CURVE",
"349 1156 LINE",
"333 1216 OFFCURVE",
"426 1332 OFFCURVE",
"587 1456 CURVE",
"567 1483 LINE",
"512 1454 OFFCURVE",
"455 1417 OFFCURVE",
"403 1375 CURVE SMOOTH",
"294 1287 OFFCURVE",
"207 1177 OFFCURVE",
"207 1067 CURVE SMOOTH",
"207 991 OFFCURVE",
"272 942 OFFCURVE",
"336 942 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
0 0 0 118 34 1 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 430;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"670 1448 OFFCURVE",
"672 1454 QCURVE",
"670 1468 LINE",
"661 1489 OFFCURVE",
"645 1489 QCURVE SMOOTH",
"639 1489 OFFCURVE",
"633 1485 QCURVE",
"581 1463 OFFCURVE",
"530 1432 QCURVE SMOOTH",
"307 1299 OFFCURVE",
"256 1139 QCURVE SMOOTH",
"246 1106 OFFCURVE",
"246 1075 QCURVE SMOOTH",
"246 1010 OFFCURVE",
"291 963 QCURVE SMOOTH",
"340 913 OFFCURVE",
"401 913 QCURVE SMOOTH",
"444 914 OFFCURVE",
"483 934 QCURVE SMOOTH",
"549 970 OFFCURVE",
"565 1044 QCURVE",
"567 1067 LINE",
"567 1132 OFFCURVE",
"483 1165 QCURVE",
"465 1174 OFFCURVE",
"463 1188 QCURVE",
"463 1204 LINE",
"477 1245 OFFCURVE",
"508 1288 QCURVE SMOOTH",
"572 1378 OFFCURVE",
"666 1446 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"493 913 OFFCURVE",
"569 977 OFFCURVE",
"569 1053 CURVE SMOOTH",
"569 1128 OFFCURVE",
"515 1184 OFFCURVE",
"379 1186 CURVE",
"459 1143 LINE",
"443 1204 OFFCURVE",
"512 1334 OFFCURVE",
"667 1451 CURVE",
"652 1496 LINE",
"573 1457 OFFCURVE",
"499 1412 OFFCURVE",
"440 1367 CURVE SMOOTH",
"322 1277 OFFCURVE",
"247 1181 OFFCURVE",
"247 1052 CURVE SMOOTH",
"247 978 OFFCURVE",
"307 913 OFFCURVE",
"402 913 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
28 9 4 3 0 74 0 0 0 118 45 1 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 579;
}
);
note = quoteleft;
unicode = 2018;
},
{
glyphname = quotereversed;
lastChange = "2018-08-16 16:56:50 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"433 940 LINE",
"385 1018 OFFCURVE",
"369 1095 OFFCURVE",
"369 1160 CURVE SMOOTH",
"369 1183 OFFCURVE",
"372 1205 OFFCURVE",
"375 1225 CURVE SMOOTH",
"380 1254 OFFCURVE",
"391 1272 OFFCURVE",
"410 1279 CURVE SMOOTH",
"504 1313 OFFCURVE",
"524 1384 OFFCURVE",
"524 1418 CURVE SMOOTH",
"524 1462 OFFCURVE",
"490 1485 OFFCURVE",
"449 1485 CURVE SMOOTH",
"306 1485 OFFCURVE",
"273 1327 OFFCURVE",
"273 1226 CURVE SMOOTH",
"273 1128 OFFCURVE",
"302 1014 OFFCURVE",
"394 907 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"383 940 LINE",
"335 1018 OFFCURVE",
"319 1095 OFFCURVE",
"319 1160 CURVE SMOOTH",
"319 1183 OFFCURVE",
"335 1322 OFFCURVE",
"348 1342 CURVE",
"302 1254 LINE",
"440 1263 OFFCURVE",
"474 1344 OFFCURVE",
"474 1398 CURVE SMOOTH",
"474 1462 OFFCURVE",
"440 1485 OFFCURVE",
"399 1485 CURVE SMOOTH",
"256 1485 OFFCURVE",
"223 1327 OFFCURVE",
"223 1226 CURVE SMOOTH",
"223 1128 OFFCURVE",
"252 1014 OFFCURVE",
"344 907 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
7 1 0 73 0 0 0 94 0 78 19 17 1 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 389;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"351 963 LINE",
"292 1026 OFFCURVE",
"272 1098 OFFCURVE",
"272 1159 CURVE SMOOTH",
"272 1175 OFFCURVE",
"278 1291 OFFCURVE",
"292 1326 CURVE",
"199 1198 LINE",
"374 1214 OFFCURVE",
"429 1304 OFFCURVE",
"429 1380 CURVE SMOOTH",
"429 1448 OFFCURVE",
"373 1483 OFFCURVE",
"304 1483 CURVE SMOOTH",
"185 1483 OFFCURVE",
"96 1344 OFFCURVE",
"96 1234 CURVE SMOOTH",
"96 1104 OFFCURVE",
"190 988 OFFCURVE",
"312 930 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"541 933 LINE",
"456 996 OFFCURVE",
"432 1098 OFFCURVE",
"432 1159 CURVE SMOOTH",
"432 1175 OFFCURVE",
"438 1291 OFFCURVE",
"452 1326 CURVE",
"359 1198 LINE",
"534 1214 OFFCURVE",
"589 1304 OFFCURVE",
"589 1380 CURVE SMOOTH",
"589 1448 OFFCURVE",
"533 1483 OFFCURVE",
"464 1483 CURVE SMOOTH",
"345 1483 OFFCURVE",
"256 1354 OFFCURVE",
"256 1234 CURVE SMOOTH",
"256 1104 OFFCURVE",
"361 960 OFFCURVE",
"502 900 CURVE"
);
}
);
width = 600;
}
);
note = quotereversed;
unicode = 201B;
},
{
glyphname = quoteright;
lastChange = "2018-08-16 16:26:56 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"568 1432 OFFCURVE",
"510 1481 OFFCURVE",
"446 1481 CURVE SMOOTH",
"414 1481 OFFCURVE",
"384.333 1469.333 OFFCURVE",
"357 1446 CURVE SMOOTH",
"330.333 1423.333 OFFCURVE",
"317 1394.667 OFFCURVE",
"317 1360 CURVE SMOOTH",
"317 1338.667 OFFCURVE",
"324.667 1321.333 OFFCURVE",
"340 1308 CURVE SMOOTH",
"355.333 1294.667 OFFCURVE",
"371 1284.5 OFFCURVE",
"387 1277.5 CURVE SMOOTH",
"403 1270.5 OFFCURVE",
"411 1256.333 OFFCURVE",
"411 1235 CURVE SMOOTH",
"411 1171.667 OFFCURVE",
"336.333 1082.333 OFFCURVE",
"187 967 CURVE",
"177.877 957.877 OFFCURVE",
"199.734 931.734 OFFCURVE",
"208 940 CURVE",
"321.333 1000 OFFCURVE",
"435 1077.333 OFFCURVE",
"511 1200 CURVE SMOOTH",
"549 1261.333 OFFCURVE",
"568 1313.333 OFFCURVE",
"568 1356 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"264 970 OFFCURVE",
"319 1006 OFFCURVE",
"374 1047 CURVE SMOOTH",
"482 1127 OFFCURVE",
"568 1271 OFFCURVE",
"568 1356 CURVE SMOOTH",
"568 1432 OFFCURVE",
"503 1481 OFFCURVE",
"439 1481 CURVE SMOOTH",
"375 1481 OFFCURVE",
"318 1437 OFFCURVE",
"318 1371 CURVE SMOOTH",
"318 1299 OFFCURVE",
"390 1257 OFFCURVE",
"458 1246 CURVE",
"426 1267 LINE",
"442 1207 OFFCURVE",
"349 1091 OFFCURVE",
"188 967 CURVE",
"208 940 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
0 0 0 94 0 78 21 19 1 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 430;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"672 1290 OFFCURVE",
"672 1319 QCURVE SMOOTH",
"672 1368 OFFCURVE",
"645 1409 QCURVE",
"625 1434 LINE",
"575 1483 OFFCURVE",
"514 1483 QCURVE SMOOTH",
"471 1482 OFFCURVE",
"434 1464 QCURVE SMOOTH",
"366 1430 OFFCURVE",
"352 1354 QCURVE SMOOTH",
"350 1341 OFFCURVE",
"350 1331 QCURVE",
"351 1305 OFFCURVE",
"365 1282 QCURVE SMOOTH",
"389 1245 OFFCURVE",
"434 1233 QCURVE",
"453 1224 OFFCURVE",
"455 1210 QCURVE",
"453 1194 LINE",
"441 1149 OFFCURVE",
"406 1102 QCURVE SMOOTH",
"342 1016 OFFCURVE",
"252 950 QCURVE",
"246 946 OFFCURVE",
"246 938 QCURVE SMOOTH",
"246 921 OFFCURVE",
"260 913 QCURVE SMOOTH",
"270 907 LINE",
"283 911 LINE",
"599 1067 OFFCURVE",
"662 1257 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"345 939 OFFCURVE",
"419 984 OFFCURVE",
"478 1029 CURVE SMOOTH",
"596 1119 OFFCURVE",
"671 1215 OFFCURVE",
"671 1344 CURVE SMOOTH",
"671 1418 OFFCURVE",
"611 1483 OFFCURVE",
"516 1483 CURVE SMOOTH",
"425 1483 OFFCURVE",
"349 1419 OFFCURVE",
"349 1343 CURVE SMOOTH",
"349 1268 OFFCURVE",
"403 1212 OFFCURVE",
"539 1210 CURVE",
"459 1253 LINE",
"475 1192 OFFCURVE",
"406 1062 OFFCURVE",
"251 945 CURVE",
"266 900 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
19 12 2 0 73 0 0 0 33 0 78 26 24 1 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 579;
}
);
leftKerningGroup = afii57929;
note = quoteright;
rightKerningGroup = quoteright;
unicode = 2019;
},
{
glyphname = quotesinglbase;
lastChange = "2018-08-16 16:23:28 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"224 189 OFFCURVE",
"166 238 OFFCURVE",
"102 238 CURVE SMOOTH",
"38 238 OFFCURVE",
"-26 187 OFFCURVE",
"-26 118 CURVE SMOOTH",
"-26 43 OFFCURVE",
"68 54 OFFCURVE",
"68 -8 CURVE SMOOTH",
"68 -71 OFFCURVE",
"-7 -161 OFFCURVE",
"-156 -276 CURVE",
"-136 -303 LINE",
"-80 -273 OFFCURVE",
"-25 -237 OFFCURVE",
"30 -196 CURVE SMOOTH",
"137 -115 OFFCURVE",
"224 28 OFFCURVE",
"224 113 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-80 -273 OFFCURVE",
"-25 -237 OFFCURVE",
"30 -196 CURVE SMOOTH",
"137 -115 OFFCURVE",
"224 28 OFFCURVE",
"224 113 CURVE SMOOTH",
"224 189 OFFCURVE",
"159 238 OFFCURVE",
"95 238 CURVE SMOOTH",
"31 238 OFFCURVE",
"-26 194 OFFCURVE",
"-26 128 CURVE SMOOTH",
"-26 56 OFFCURVE",
"46 14 OFFCURVE",
"114 3 CURVE",
"82 24 LINE",
"98 -36 OFFCURVE",
"5 -152 OFFCURVE",
"-156 -276 CURVE",
"-136 -303 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
0 0 0 118 20 18 1 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 430;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"320 49 OFFCURVE",
"323 69 OFFCURVE",
"324 88 CURVE",
"322 133 OFFCURVE",
"306 172 OFFCURVE",
"276 203 CURVE SMOOTH",
"243 236 OFFCURVE",
"207 252 OFFCURVE",
"166 252 CURVE SMOOTH",
"137 251 OFFCURVE",
"111 245 OFFCURVE",
"86 233 CURVE SMOOTH",
"41 210 OFFCURVE",
"13 174 OFFCURVE",
"4 123 CURVE SMOOTH",
"3 114 OFFCURVE",
"2 107 OFFCURVE",
"2 100 CURVE SMOOTH",
"2 81 OFFCURVE",
"7 64 OFFCURVE",
"16 49 CURVE",
"34 26 OFFCURVE",
"57 10 OFFCURVE",
"86 2 CURVE",
"98 -3 OFFCURVE",
"105 -11 OFFCURVE",
"106 -20 CURVE",
"104 -37 LINE",
"95 -66 OFFCURVE",
"78 -96 OFFCURVE",
"55 -129 CURVE SMOOTH",
"14 -188 OFFCURVE",
"-36 -239 OFFCURVE",
"-96 -281 CURVE",
"-99 -284 OFFCURVE",
"-100 -286 OFFCURVE",
"-100 -289 CURVE SMOOTH",
"-100 -301 LINE",
"-96 -315 OFFCURVE",
"-89 -322 OFFCURVE",
"-78 -322 CURVE",
"-66 -319 LINE",
"-31 -304 OFFCURVE",
"0 -288 OFFCURVE",
"29 -270 CURVE SMOOTH",
"183 -180 OFFCURVE",
"278 -81 OFFCURVE",
"313 27 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-6 -292 OFFCURVE",
"68 -247 OFFCURVE",
"127 -202 CURVE SMOOTH",
"247 -114 OFFCURVE",
"320 -16 OFFCURVE",
"320 113 CURVE SMOOTH",
"320 187 OFFCURVE",
"260 252 OFFCURVE",
"165 252 CURVE SMOOTH",
"74 252 OFFCURVE",
"-2 188 OFFCURVE",
"-2 112 CURVE SMOOTH",
"-2 37 OFFCURVE",
"52 -19 OFFCURVE",
"188 -21 CURVE",
"108 22 LINE",
"124 -39 OFFCURVE",
"55 -169 OFFCURVE",
"-100 -286 CURVE",
"-85 -331 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
21 14 2 0 73 0 0 0 118 28 26 1 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 538;
}
);
note = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotesingle;
lastChange = "2018-08-16 17:01:19 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"424 944 LINE",
"467 1052 OFFCURVE",
"507 1147 OFFCURVE",
"541 1223 CURVE SMOOTH",
"591 1333 OFFCURVE",
"619 1396 OFFCURVE",
"619 1426 CURVE SMOOTH",
"619 1463 OFFCURVE",
"594 1481 OFFCURVE",
"543 1481 CURVE SMOOTH",
"480 1481 OFFCURVE",
"440 1455 OFFCURVE",
"424 1395 CURVE SMOOTH",
"418 1373 OFFCURVE",
"401 1239 OFFCURVE",
"393 1170 CURVE SMOOTH",
"383 1085 OFFCURVE",
"369 1010 OFFCURVE",
"356 944 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
7 1 0 1 1 76 0 0 1 0 134 0 1 1 94 1 78 35 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 422;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"453 944 LINE",
"469 985 OFFCURVE",
"507 1063 OFFCURVE",
"568 1176 CURVE SMOOTH",
"626 1283 OFFCURVE",
"676 1360 OFFCURVE",
"676 1409 CURVE SMOOTH",
"676 1457 OFFCURVE",
"638 1481 OFFCURVE",
"563 1481 CURVE SMOOTH",
"483 1481 OFFCURVE",
"431 1447 OFFCURVE",
"408 1380 CURVE SMOOTH",
"402 1364 OFFCURVE",
"395 1299 OFFCURVE",
"386 1186 CURVE SMOOTH",
"377 1073 OFFCURVE",
"367 992 OFFCURVE",
"358 944 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
12 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 1 97 0 1 1 33 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
36 20 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 438;
}
);
leftKerningGroup = quotesingle;
note = quotesingle;
unicode = 0027;
},
{
glyphname = r;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"67 -150 LINE",
"169 -150 LINE",
"561 1311 LINE",
"459 1311 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"189 0 LINE",
"215 142 OFFCURVE",
"270 300 OFFCURVE",
"330 433 CURVE SMOOTH",
"407 604 OFFCURVE",
"493 733 OFFCURVE",
"538 733 CURVE SMOOTH",
"558 733 OFFCURVE",
"574 728 OFFCURVE",
"586 719 CURVE SMOOTH",
"599 710 OFFCURVE",
"616 704 OFFCURVE",
"640 704 CURVE SMOOTH",
"678 704 OFFCURVE",
"720 731 OFFCURVE",
"720 776 CURVE SMOOTH",
"720 818 OFFCURVE",
"691 852 OFFCURVE",
"620 852 CURVE SMOOTH",
"511 852 OFFCURVE",
"386 738 OFFCURVE",
"214 301 CURVE",
"250 339 LINE",
"302 627 LINE SMOOTH",
"312 684 OFFCURVE",
"321 737 OFFCURVE",
"321 778 CURVE SMOOTH",
"321 823 OFFCURVE",
"306 852 OFFCURVE",
"272 852 CURVE SMOOTH",
"186 852 OFFCURVE",
"103 752 OFFCURVE",
"22 644 CURVE",
"63 607 LINE",
"119 668 OFFCURVE",
"160 705 OFFCURVE",
"176 705 CURVE SMOOTH",
"203 705 OFFCURVE",
"207 664 OFFCURVE",
"200 627 CURVE SMOOTH",
"87 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
33 1 1 4 36 12 2 2 0 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 0 1 2 1 0 114 3 1 1 1 4 97 5 1 4 4 95 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
88 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 1 0 1 3 0 128 0 0 2 1 0 112 0 1 1 4 97 5 1 4 4 95 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 3 1 0 1 3 0 128 0 0 2 1 0 2 126 0 1 1 4 97 5 1 4 4 95 77 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
38 43 23 19 33 34 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"51 -163 LINE",
"245 -163 LINE",
"627 1260 LINE",
"433 1260 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"289 0 LINE",
"324 203 OFFCURVE",
"367 366 OFFCURVE",
"418 497 CURVE SMOOTH",
"468 626 OFFCURVE",
"561 692 OFFCURVE",
"599 692 CURVE SMOOTH",
"615 692 OFFCURVE",
"635 683 OFFCURVE",
"658 664 CURVE SMOOTH",
"681 645 OFFCURVE",
"707 635 OFFCURVE",
"737 635 CURVE SMOOTH",
"788 635 OFFCURVE",
"819 668 OFFCURVE",
"819 724 CURVE SMOOTH",
"819 801 OFFCURVE",
"748 852 OFFCURVE",
"671 852 CURVE SMOOTH",
"571 852 OFFCURVE",
"457 747 OFFCURVE",
"324 440 CURVE",
"377 483 LINE",
"412 684 LINE SMOOTH",
"415 700 OFFCURVE",
"416 715 OFFCURVE",
"416 730 CURVE SMOOTH",
"416 800 OFFCURVE",
"386 852 OFFCURVE",
"316 852 CURVE SMOOTH",
"240 852 OFFCURVE",
"147 798 OFFCURVE",
"41 639 CURVE",
"104 596 LINE",
"144 657 OFFCURVE",
"172 688 OFFCURVE",
"187 688 CURVE SMOOTH",
"219 688 OFFCURVE",
"214 651 OFFCURVE",
"204 598 CURVE SMOOTH",
"95 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
35 12 2 2 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 0 1 2 1 0 114 3 1 1 1 4 97 5 1 4 4 34 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 0 1 2 1 0 2 128 3 1 1 1 4 97 5 1 4 4 34 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 3 1 0 1 3 0 128 0 0 2 1 0 2 126 0 1 1 4 97 5 1 4 4 34 77 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
38 43 22 19 33 34 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 819;
}
);
leftKerningGroup = r;
note = r;
rightKerningGroup = r;
unicode = 0072;
},
{
glyphname = registered;
lastChange = "2018-08-16 18:45:54 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1226 27 OFFCURVE",
"1545 347 OFFCURVE",
"1545 748 CURVE SMOOTH",
"1545 1151 OFFCURVE",
"1225 1468 OFFCURVE",
"824 1468 CURVE SMOOTH",
"423 1468 OFFCURVE",
"103 1150 OFFCURVE",
"103 748 CURVE SMOOTH",
"103 346 OFFCURVE",
"423 27 OFFCURVE",
"824 27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"454 96 OFFCURVE",
"173 394 OFFCURVE",
"173 755 CURVE SMOOTH",
"173 1108 OFFCURVE",
"461 1399 OFFCURVE",
"824 1399 CURVE SMOOTH",
"1183 1399 OFFCURVE",
"1475 1114 OFFCURVE",
"1475 748 CURVE SMOOTH",
"1475 389 OFFCURVE",
"1186 96 OFFCURVE",
"817 96 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1187 377 LINE",
"1191 401 LINE",
"1159 401 OFFCURVE",
"1107 432 OFFCURVE",
"1068 475 CURVE SMOOTH",
"1004 547 OFFCURVE",
"923 686 OFFCURVE",
"897 775 CURVE",
"1049 814 OFFCURVE",
"1118 919 OFFCURVE",
"1118 1043 CURVE SMOOTH",
"1118 1161 OFFCURVE",
"1031 1220 OFFCURVE",
"866 1220 CURVE SMOOTH",
"534 1220 LINE",
"534 1184 LINE",
"616 1184 OFFCURVE",
"652 1163 OFFCURVE",
"644 1120 CURVE SMOOTH",
"534 493 LINE SMOOTH",
"527 450 OFFCURVE",
"496 427 OFFCURVE",
"396 427 CURVE",
"396 392 LINE",
"716 392 LINE",
"716 427 LINE",
"646 427 OFFCURVE",
"601 450 OFFCURVE",
"608 493 CURVE SMOOTH",
"655 758 LINE",
"740 758 LINE SMOOTH",
"763 758 OFFCURVE",
"785 752 OFFCURVE",
"795 744 CURVE SMOOTH",
"805 736 OFFCURVE",
"819 706 OFFCURVE",
"843 653 CURVE SMOOTH",
"868 600 OFFCURVE",
"898 549 OFFCURVE",
"922 516 CURVE SMOOTH",
"950 480 OFFCURVE",
"1051 377 OFFCURVE",
"1146 377 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"729 788 OFFCURVE",
"692 788 OFFCURVE",
"662 800 CURVE",
"730 1187 LINE",
"813 1187 LINE SMOOTH",
"950 1187 OFFCURVE",
"1035 1119 OFFCURVE",
"1035 1023 CURVE SMOOTH",
"1035 947 OFFCURVE",
"990 788 OFFCURVE",
"748 788 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
49 1 5 4 1 76 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 6 values pushed */
49 1 5 8 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 1 0 2 11 1 2 105 0 11 12 1 10 13 11 10 105 0 13 0 6 7 13 6 105 9 1 7 4 5 7 89 0 4 8 1 5 3 4 5 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 1 0 2 11 1 2 105 0 11 12 1 10 13 11 10 105 0 13 0 6 7 13 6 105 9 1 7 0 8 5 7 8 105 0 4 0 5 3 4 5 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
0 10 12 13 12 10 114 0 1 0 2 11 1 2 105 0 11 0 12 10 11 12 105 0 13 0 6 7 13 6 105 9 1 7 0 8 5 7 8 105 0 4 0 5 3 4 5 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
74 72 69 68 64 59 57 56 53 51 20 20 22 36 26 19 19 19 17 14 12 31 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1565;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1226 27 OFFCURVE",
"1545 347 OFFCURVE",
"1545 748 CURVE SMOOTH",
"1545 1151 OFFCURVE",
"1225 1468 OFFCURVE",
"824 1468 CURVE SMOOTH",
"423 1468 OFFCURVE",
"103 1150 OFFCURVE",
"103 748 CURVE SMOOTH",
"103 346 OFFCURVE",
"423 27 OFFCURVE",
"824 27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"466 117 OFFCURVE",
"194 406 OFFCURVE",
"194 755 CURVE SMOOTH",
"194 1096 OFFCURVE",
"473 1378 OFFCURVE",
"824 1378 CURVE SMOOTH",
"1171 1378 OFFCURVE",
"1454 1102 OFFCURVE",
"1454 748 CURVE SMOOTH",
"1454 401 OFFCURVE",
"1174 117 OFFCURVE",
"817 117 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1240 369 LINE",
"1247 413 LINE",
"1211 420 OFFCURVE",
"1178 444 OFFCURVE",
"1146 486 CURVE SMOOTH",
"1081 568 OFFCURVE",
"1027 659 OFFCURVE",
"977 773 CURVE",
"1184 831 OFFCURVE",
"1215 948 OFFCURVE",
"1215 1032 CURVE SMOOTH",
"1215 1169 OFFCURVE",
"1084 1230 OFFCURVE",
"910 1230 CURVE SMOOTH",
"534 1230 LINE",
"534 1177 LINE",
"618 1177 OFFCURVE",
"635 1156 OFFCURVE",
"627 1111 CURVE SMOOTH",
"519 506 LINE SMOOTH",
"511 462 OFFCURVE",
"486 439 OFFCURVE",
"399 439 CURVE",
"399 385 LINE",
"768 385 LINE",
"768 439 LINE",
"708 439 OFFCURVE",
"662 462 OFFCURVE",
"671 506 CURVE SMOOTH",
"715 751 LINE",
"768 751 LINE SMOOTH",
"784 751 OFFCURVE",
"797 746 OFFCURVE",
"806 737 CURVE",
"815 727 OFFCURVE",
"843 686 OFFCURVE",
"859 651 CURVE SMOOTH",
"877 611 OFFCURVE",
"916 538 OFFCURVE",
"941 508 CURVE SMOOTH",
"1010 426 OFFCURVE",
"1085 369 OFFCURVE",
"1182 369 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"781 800 OFFCURVE",
"748 801 OFFCURVE",
"725 806 CURVE",
"791 1181 LINE",
"842 1181 LINE SMOOTH",
"963 1181 OFFCURVE",
"1056 1123 OFFCURVE",
"1056 1021 CURVE SMOOTH",
"1056 939 OFFCURVE",
"1009 800 OFFCURVE",
"793 800 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 10 values pushed */
29 1 6 5 39 1 4 6 2 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
29 1 6 5 39 1 4 7 2 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 1 0 2 10 1 2 105 0 10 11 1 9 12 10 9 105 0 12 0 5 6 12 5 105 8 1 6 7 13 2 4 3 6 4 105 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
13 1 4 7 3 7 4 3 128 0 1 0 2 10 1 2 105 0 10 11 1 9 12 10 9 105 0 12 0 5 6 12 5 105 8 1 6 0 7 4 6 7 105 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 9 11 12 11 9 114 13 1 4 7 3 7 4 3 128 0 1 0 2 10 1 2 105 0 10 0 11 9 10 11 105 0 12 0 5 6 12 5 105 8 1 6 0 7 4 6 7 105 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
0 9 11 12 11 9 114 0 6 5 8 5 6 8 128 13 1 4 7 3 7 4 3 128 0 1 0 2 10 1 2 105 0 10 0 11 9 10 11 105 0 12 0 5 6 12 5 105 0 8 0 7 4 8 7 105 0 3 0 0 3 89 0 3 3 0 98 0 0 3 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 29 values pushed */
17 16 82 80 74 72 57 49 47 46 43 41 38 37 33 32 27 24 16 69 17 69 19 19 19 17 14 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1609;
}
);
note = registered;
unicode = 00AE;
},
{
glyphname = ring;
lastChange = "2018-08-14 11:40:13 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"676 948 OFFCURVE",
"795 1070 OFFCURVE",
"795 1192 CURVE SMOOTH",
"795 1238 OFFCURVE",
"766 1337 OFFCURVE",
"619 1337 CURVE SMOOTH",
"489 1337 OFFCURVE",
"376 1234 OFFCURVE",
"376 1110 CURVE SMOOTH",
"376 1016 OFFCURVE",
"442 948 OFFCURVE",
"549 948 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"507 1016 OFFCURVE",
"472 1056 OFFCURVE",
"472 1115 CURVE SMOOTH",
"472 1190 OFFCURVE",
"529 1270 OFFCURVE",
"607 1270 CURVE SMOOTH",
"662 1270 OFFCURVE",
"696 1232 OFFCURVE",
"696 1174 CURVE SMOOTH",
"696 1097 OFFCURVE",
"640 1016 OFFCURVE",
"561 1016 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 52 values pushed */
5 1 2 3 1 76 4 1 0 0 3 2 0 3 105 5 1 2 1 1 2 89 5 1 2 2 1 97 0 1 2 1 81 21 20 1 0 30 28 20 36 21 36 13 11 0 19 1 19 6 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 737;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"708 948 OFFCURVE",
"840 1066 OFFCURVE",
"840 1217 CURVE SMOOTH",
"840 1271 OFFCURVE",
"810 1396 OFFCURVE",
"656 1396 CURVE SMOOTH",
"489 1396 OFFCURVE",
"360 1283 OFFCURVE",
"360 1131 CURVE SMOOTH",
"360 1065 OFFCURVE",
"389 948 OFFCURVE",
"558 948 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"540 1034 OFFCURVE",
"503 1089 OFFCURVE",
"503 1155 CURVE SMOOTH",
"503 1233 OFFCURVE",
"549 1317 OFFCURVE",
"621 1317 CURVE SMOOTH",
"702 1317 OFFCURVE",
"705 1237 OFFCURVE",
"705 1203 CURVE SMOOTH",
"705 1134 OFFCURVE",
"659 1034 OFFCURVE",
"582 1034 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 45 values pushed */
6 1 2 3 1 76 0 1 0 3 2 1 3 105 4 1 2 0 0 2 89 4 1 2 2 0 97 0 0 2 0 81 16 15 21 19 15 25 16 25 22 33 5 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 776;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = s;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"296 -27 OFFCURVE",
"418 77 OFFCURVE",
"418 208 CURVE SMOOTH",
"418 284 OFFCURVE",
"371 360 OFFCURVE",
"292 462 CURVE SMOOTH",
"214 562 OFFCURVE",
"182 641 OFFCURVE",
"182 687 CURVE SMOOTH",
"182 732 OFFCURVE",
"208 791 OFFCURVE",
"252 791 CURVE SMOOTH",
"293 791 OFFCURVE",
"323 772 OFFCURVE",
"340 733 CURVE SMOOTH",
"356 694 OFFCURVE",
"381 675 OFFCURVE",
"416 675 CURVE SMOOTH",
"439 675 OFFCURVE",
"466 700 OFFCURVE",
"466 730 CURVE SMOOTH",
"466 785 OFFCURVE",
"396 852 OFFCURVE",
"325 852 CURVE SMOOTH",
"170 852 OFFCURVE",
"92 746 OFFCURVE",
"92 626 CURVE SMOOTH",
"92 539 OFFCURVE",
"136 464 OFFCURVE",
"210 371 CURVE SMOOTH",
"265 303 OFFCURVE",
"311 227 OFFCURVE",
"311 154 CURVE SMOOTH",
"311 84 OFFCURVE",
"281 34 OFFCURVE",
"231 34 CURVE SMOOTH",
"192 34 OFFCURVE",
"171 52 OFFCURVE",
"151 89 CURVE SMOOTH",
"131 125 OFFCURVE",
"99 142 OFFCURVE",
"68 142 CURVE SMOOTH",
"28 142 OFFCURVE",
"4 113 OFFCURVE",
"4 78 CURVE SMOOTH",
"4 15 OFFCURVE",
"73 -27 OFFCURVE",
"148 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 0 1 3 1 0 114 0 3 4 4 3 112 0 1 1 5 97 0 5 5 95 77 0 4 4 2 98 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 5 97 0 5 5 95 77 0 4 4 2 98 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
38 33 36 39 33 34 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 514;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"387 -27 OFFCURVE",
"513 90 OFFCURVE",
"513 230 CURVE SMOOTH",
"513 333 OFFCURVE",
"417 438 OFFCURVE",
"340 521 CURVE SMOOTH",
"277 589 OFFCURVE",
"225 653 OFFCURVE",
"225 700 CURVE SMOOTH",
"225 725 OFFCURVE",
"242 745 OFFCURVE",
"271 745 CURVE SMOOTH",
"312 745 OFFCURVE",
"347 724 OFFCURVE",
"375 682 CURVE SMOOTH",
"403 640 OFFCURVE",
"442 618 OFFCURVE",
"494 618 CURVE SMOOTH",
"531 618 OFFCURVE",
"566 662 OFFCURVE",
"566 702 CURVE SMOOTH",
"566 773 OFFCURVE",
"468 852 OFFCURVE",
"383 852 CURVE SMOOTH",
"226 852 OFFCURVE",
"115 759 OFFCURVE",
"115 605 CURVE SMOOTH",
"115 504 OFFCURVE",
"167 420 OFFCURVE",
"254 332 CURVE SMOOTH",
"311 274 OFFCURVE",
"385 195 OFFCURVE",
"385 154 CURVE SMOOTH",
"385 115 OFFCURVE",
"366 96 OFFCURVE",
"326 96 CURVE SMOOTH",
"289 96 OFFCURVE",
"255 116 OFFCURVE",
"224 156 CURVE SMOOTH",
"193 195 OFFCURVE",
"153 215 OFFCURVE",
"105 215 CURVE SMOOTH",
"47 215 OFFCURVE",
"21 172 OFFCURVE",
"21 120 CURVE SMOOTH",
"21 43 OFFCURVE",
"117 -27 OFFCURVE",
"208 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 0 1 3 1 0 114 0 3 4 4 3 112 0 1 1 5 97 0 5 5 34 77 0 4 4 2 98 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 5 97 0 5 5 34 77 0 4 4 2 98 0 2 2 32 2 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
38 33 36 38 33 34 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 585;
}
);
leftKerningGroup = s;
note = s;
unicode = 0073;
},
{
glyphname = section;
lastChange = "2018-08-16 19:04:32 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"373 -274 OFFCURVE",
"681 -13 OFFCURVE",
"801 172 CURVE SMOOTH",
"842 235 OFFCURVE",
"862 305 OFFCURVE",
"862 384 CURVE SMOOTH",
"862 463 OFFCURVE",
"826 590 OFFCURVE",
"751 767 CURVE SMOOTH",
"676 944 OFFCURVE",
"639 1078 OFFCURVE",
"639 1169 CURVE SMOOTH",
"639 1276 OFFCURVE",
"718 1346 OFFCURVE",
"817 1346 CURVE SMOOTH",
"866 1346 OFFCURVE",
"910 1327 OFFCURVE",
"937 1287 CURVE SMOOTH",
"964 1247 OFFCURVE",
"981 1227 OFFCURVE",
"998 1227 CURVE SMOOTH",
"1022 1227 OFFCURVE",
"1040 1254 OFFCURVE",
"1040 1307 CURVE SMOOTH",
"1040 1382 OFFCURVE",
"972 1442 OFFCURVE",
"895 1442 CURVE SMOOTH",
"768 1442 OFFCURVE",
"513 1266 OFFCURVE",
"363 1064 CURVE SMOOTH",
"288 963 OFFCURVE",
"250 867 OFFCURVE",
"250 776 CURVE SMOOTH",
"250 685 OFFCURVE",
"286 556 OFFCURVE",
"358 388 CURVE SMOOTH",
"430 220 OFFCURVE",
"465 92 OFFCURVE",
"465 4 CURVE SMOOTH",
"465 -103 OFFCURVE",
"385 -170 OFFCURVE",
"286 -170 CURVE SMOOTH",
"237 -170 OFFCURVE",
"187 -154 OFFCURVE",
"136 -123 CURVE SMOOTH",
"85 -92 OFFCURVE",
"56 -76 OFFCURVE",
"49 -76 CURVE SMOOTH",
"26 -76 OFFCURVE",
"14 -89 OFFCURVE",
"14 -115 CURVE SMOOTH",
"14 -208 OFFCURVE",
"95 -274 OFFCURVE",
"192 -274 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"576 68 OFFCURVE",
"576 107 OFFCURVE",
"576 143 CURVE SMOOTH",
"576 201 OFFCURVE",
"541 310 OFFCURVE",
"474 471 CURVE SMOOTH",
"407 632 OFFCURVE",
"373 763 OFFCURVE",
"373 866 CURVE SMOOTH",
"373 969 OFFCURVE",
"429 1073 OFFCURVE",
"541 1178 CURVE",
"537 1152 OFFCURVE",
"530 1087 OFFCURVE",
"530 1041 CURVE SMOOTH",
"530 963 OFFCURVE",
"564 865 OFFCURVE",
"631 698 CURVE SMOOTH",
"698 530 OFFCURVE",
"731 408 OFFCURVE",
"731 332 CURVE SMOOTH",
"731 210 OFFCURVE",
"678 101 OFFCURVE",
"573 6 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
51 43 2 1 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 2 0 0 2 0 101 0 5 5 3 97 0 3 3 94 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
34 19 40 35 19 36 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 989;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"390 -274 OFFCURVE",
"704 -13 OFFCURVE",
"829 170 CURVE SMOOTH",
"873 235 OFFCURVE",
"897 308 OFFCURVE",
"897 389 CURVE SMOOTH",
"897 506 OFFCURVE",
"852 631 OFFCURVE",
"782 779 CURVE SMOOTH",
"722 905 OFFCURVE",
"668 1048 OFFCURVE",
"668 1163 CURVE SMOOTH",
"668 1278 OFFCURVE",
"708 1339 OFFCURVE",
"823 1339 CURVE SMOOTH",
"864 1339 OFFCURVE",
"888 1300 OFFCURVE",
"904 1259 CURVE SMOOTH",
"922 1213 OFFCURVE",
"944 1165 OFFCURVE",
"983 1165 CURVE SMOOTH",
"1044 1165 OFFCURVE",
"1075 1203 OFFCURVE",
"1075 1278 CURVE SMOOTH",
"1075 1371 OFFCURVE",
"986 1442 OFFCURVE",
"893 1442 CURVE SMOOTH",
"741 1442 OFFCURVE",
"466 1239 OFFCURVE",
"349 1090 CURVE SMOOTH",
"267 986 OFFCURVE",
"211 871 OFFCURVE",
"211 760 CURVE SMOOTH",
"211 681 OFFCURVE",
"241 571 OFFCURVE",
"301 431 CURVE SMOOTH",
"371 269 OFFCURVE",
"440 107 OFFCURVE",
"440 2 CURVE SMOOTH",
"440 -110 OFFCURVE",
"388 -166 OFFCURVE",
"281 -166 CURVE SMOOTH",
"229 -166 OFFCURVE",
"179 -137 OFFCURVE",
"148 -95 CURVE SMOOTH",
"125 -64 OFFCURVE",
"85 -14 OFFCURVE",
"47 -14 CURVE SMOOTH",
"0 -14 OFFCURVE",
"-25 -47 OFFCURVE",
"-25 -86 CURVE SMOOTH",
"-25 -198 OFFCURVE",
"75 -274 OFFCURVE",
"190 -274 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"602 57 OFFCURVE",
"610 103 OFFCURVE",
"610 158 CURVE SMOOTH",
"610 272 OFFCURVE",
"526 461 OFFCURVE",
"459 610 CURVE SMOOTH",
"421 695 OFFCURVE",
"408 773 OFFCURVE",
"408 846 CURVE SMOOTH",
"408 961 OFFCURVE",
"443 1063 OFFCURVE",
"514 1153 CURVE",
"505 1116 OFFCURVE",
"500 1058 OFFCURVE",
"500 979 CURVE SMOOTH",
"500 903 OFFCURVE",
"543 805 OFFCURVE",
"594 690 CURVE SMOOTH",
"646 573 OFFCURVE",
"692 427 OFFCURVE",
"692 342 CURVE SMOOTH",
"692 203 OFFCURVE",
"657 95 OFFCURVE",
"586 18 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
61 53 2 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 4 0 2 4 2 101 0 1 1 5 97 0 5 5 33 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 2 2 4 89 0 4 4 2 97 0 2 4 2 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
42 34 36 44 35 33 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1046;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = semicolon;
lastChange = "2018-08-18 02:03:08 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"228 985 LINE",
"14 -223 LINE"
);
},
{
closed = 1;
nodes = (
"97 -263 OFFCURVE",
"226 -142 OFFCURVE",
"281 -34 CURVE SMOOTH",
"309 21 OFFCURVE",
"322 72 OFFCURVE",
"322 119 CURVE SMOOTH",
"322 175 OFFCURVE",
"283 233 OFFCURVE",
"212 233 CURVE SMOOTH",
"144 233 OFFCURVE",
"86 187 OFFCURVE",
"86 123 CURVE SMOOTH",
"86 83 OFFCURVE",
"104 39 OFFCURVE",
"244 -15 CURVE",
"205 62 LINE",
"189 -86 OFFCURVE",
"54 -216 OFFCURVE",
"-42 -293 CURVE",
"-25 -322 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"127 -263 OFFCURVE",
"256 -142 OFFCURVE",
"311 -34 CURVE SMOOTH",
"339 21 OFFCURVE",
"352 72 OFFCURVE",
"352 119 CURVE SMOOTH",
"352 175 OFFCURVE",
"313 233 OFFCURVE",
"242 233 CURVE SMOOTH",
"174 233 OFFCURVE",
"116 187 OFFCURVE",
"116 123 CURVE SMOOTH",
"116 83 OFFCURVE",
"134 39 OFFCURVE",
"274 -15 CURVE",
"235 62 LINE",
"219 -86 OFFCURVE",
"84 -216 OFFCURVE",
"-12 -293 CURVE",
"5 -322 LINE"
);
},
{
closed = 1;
nodes = (
"401 567 OFFCURVE",
"455 602 OFFCURVE",
"455 676 CURVE SMOOTH",
"455 754 OFFCURVE",
"386 798 OFFCURVE",
"326 798 CURVE SMOOTH",
"270 798 OFFCURVE",
"219 765 OFFCURVE",
"219 687 CURVE SMOOTH",
"219 610 OFFCURVE",
"285 567 OFFCURVE",
"347 567 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
14 1 0 73 0 0 1 0 134 0 1 1 2 97 0 2 2 95 1 78 31 30 27 26 23 21 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 561;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"228 985 LINE",
"14 -223 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"45 -282 OFFCURVE",
"141 -222 OFFCURVE",
"241 -138 CURVE SMOOTH",
"341 -54 OFFCURVE",
"420 67 OFFCURVE",
"420 168 CURVE SMOOTH",
"420 279 OFFCURVE",
"338 331 OFFCURVE",
"256 331 CURVE SMOOTH",
"172 331 OFFCURVE",
"88 278 OFFCURVE",
"88 180 CURVE SMOOTH",
"88 125 OFFCURVE",
"116 58 OFFCURVE",
"256 12 CURVE",
"229 99 LINE",
"176 -30 OFFCURVE",
"82 -144 OFFCURVE",
"-43 -244 CURVE",
"-10 -303 LINE"
);
},
{
closed = 1;
nodes = (
"445 541 OFFCURVE",
"515 607 OFFCURVE",
"515 696 CURVE SMOOTH",
"515 790 OFFCURVE",
"444 865 OFFCURVE",
"356 865 CURVE SMOOTH",
"256 865 OFFCURVE",
"183 803 OFFCURVE",
"183 710 CURVE SMOOTH",
"183 604 OFFCURVE",
"253 541 OFFCURVE",
"356 541 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 2 0 2 134 0 0 0 1 97 0 1 1 34 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
30 29 19 17 3 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 591;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = seven;
lastChange = "2018-08-16 03:24:05 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1145 1264 LINE SMOOTH",
"1156.333 1281.333 OFFCURVE",
"1162 1294.5 OFFCURVE",
"1162 1303.5 CURVE SMOOTH",
"1162 1312.5 OFFCURVE",
"1151 1317 OFFCURVE",
"1129 1317 CURVE SMOOTH",
"447 1317 LINE SMOOTH",
"425 1317 OFFCURVE",
"409 1306.667 OFFCURVE",
"399 1286 CURVE SMOOTH",
"280 1038 LINE SMOOTH",
"275.333 1028.667 OFFCURVE",
"282.5 1024 OFFCURVE",
"301.5 1024 CURVE SMOOTH",
"320.5 1024 OFFCURVE",
"333 1028.667 OFFCURVE",
"339 1038 CURVE SMOOTH",
"387 1110 OFFCURVE",
"449.667 1150.5 OFFCURVE",
"519 1168.5 CURVE",
"451.667 1144.5 OFFCURVE",
"484.333 1159.5 OFFCURVE",
"519 1168.5 CURVE SMOOTH",
"553.667 1177.5 OFFCURVE",
"625.667 1182 OFFCURVE",
"735 1182 CURVE SMOOTH",
"949 1182 LINE SMOOTH",
"969 1182 OFFCURVE",
"979 1179.167 OFFCURVE",
"979 1173.5 CURVE SMOOTH",
"979 1167.833 OFFCURVE",
"973.333 1156.333 OFFCURVE",
"962 1139 CURVE",
"324 238 LINE SMOOTH",
"248 131.333 OFFCURVE",
"199.333 64.833 OFFCURVE",
"178 38.5 CURVE SMOOTH",
"156.667 12.167 OFFCURVE",
"146 -1.333 OFFCURVE",
"146 -2 CURVE SMOOTH",
"146 -10.667 OFFCURVE",
"169.333 -15 OFFCURVE",
"216 -15 CURVE SMOOTH",
"262.667 -15 OFFCURVE",
"289.667 -10 OFFCURVE",
"297 0 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"223 0 LINE",
"967 1284 LINE",
"954 1317 LINE",
"231 1317 LINE",
"127 1058 LINE",
"186 1058 LINE",
"225 1126 OFFCURVE",
"281 1169 OFFCURVE",
"356 1189 CURVE SMOOTH",
"389 1198 OFFCURVE",
"460 1202 OFFCURVE",
"569 1202 CURVE SMOOTH",
"874 1202 LINE",
"878 1241 LINE",
"668 889 OFFCURVE",
"370 407 OFFCURVE",
"106 0 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 1 0 1 2 0 128 0 1 1 3 95 0 3 3 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
0 2 1 0 1 2 0 128 0 3 0 1 2 3 1 103 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 1 0 1 2 0 128 0 0 0 132 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
51 20 40 17 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1147 1239 OFFCURVE",
"1182 1282 OFFCURVE",
"1169 1317 OFFCURVE",
"1128 1317 QCURVE SMOOTH",
"446 1317 LINE SMOOTH",
"430 1317 OFFCURVE",
"410 1313 OFFCURVE",
"393 1294 OFFCURVE",
"385 1280 OFFCURVE",
"377 1260 QCURVE",
"260 1018 LINE",
"256 1006 OFFCURVE",
"293 993 OFFCURVE",
"340 1000 OFFCURVE",
"348 1012 QCURVE SMOOTH",
"389 1071 OFFCURVE",
"514 1133 OFFCURVE",
"590 1141 OFFCURVE",
"649 1141 QCURVE SMOOTH",
"946 1141 LINE",
"299 274 LINE SMOOTH",
"227 176 OFFCURVE",
"98 20 QCURVE",
"94 14 OFFCURVE",
"94 10 QCURVE SMOOTH",
"94 4 OFFCURVE",
"104 -2 QCURVE SMOOTH",
"121 -12 OFFCURVE",
"201 -23 OFFCURVE",
"240 -23 QCURVE SMOOTH",
"264 -23 OFFCURVE",
"316 -10 OFFCURVE",
"324 0 QCURVE",
"1135 1219 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"290 0 LINE",
"1016 1264 LINE",
"979 1317 LINE",
"248 1317 LINE",
"131 1012 LINE",
"222 1012 LINE",
"251 1057 OFFCURVE",
"288 1091 OFFCURVE",
"334 1112 CURVE SMOOTH",
"375 1131 OFFCURVE",
"434 1141 OFFCURVE",
"511 1141 CURVE SMOOTH",
"850 1141 LINE",
"833 1178 LINE",
"584 785 OFFCURVE",
"322 393 OFFCURVE",
"48 0 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
9 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 1 1 2 95 0 2 2 31 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 2 0 1 0 2 1 103 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
60 41 35 3 8 25 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = seven.oldstyle;
lastChange = "2018-08-16 03:24:53 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1020 780 LINE SMOOTH",
"1038.982 803.201 OFFCURVE",
"1028.699 834 OFFCURVE",
"989 834 CURVE SMOOTH",
"385 834 LINE SMOOTH",
"355.667 834 OFFCURVE",
"335.333 821.667 OFFCURVE",
"324 797 CURVE SMOOTH",
"290.667 725.667 OFFCURVE",
"259 665.333 OFFCURVE",
"229 616 CURVE",
"227.667 614 OFFCURVE",
"227 611.667 OFFCURVE",
"227 609 CURVE SMOOTH",
"227 592.762 OFFCURVE",
"260.293 582.342 OFFCURVE",
"272 596 CURVE",
"346 676 LINE SMOOTH",
"371.333 702 OFFCURVE",
"408.333 715 OFFCURVE",
"457 715 CURVE SMOOTH",
"815 715 LINE SMOOTH",
"860.333 715 OFFCURVE",
"856.667 678.333 OFFCURVE",
"834 649 CURVE SMOOTH",
"53 -360 LINE",
"38.172 -382.242 OFFCURVE",
"103.185 -416.753 OFFCURVE",
"121 -393 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"914 827 LINE",
"890 854 LINE",
"235 854 LINE",
"199 827 LINE",
"187 776 OFFCURVE",
"161 706 OFFCURVE",
"123 637 CURVE",
"170 616 LINE",
"223 687 OFFCURVE",
"272 735 OFFCURVE",
"343 735 CURVE SMOOTH",
"799 735 LINE",
"793 776 LINE",
"54 -360 LINE",
"126 -393 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 0 1 1 0 91 0 0 0 1 95 0 1 0 1 79 59 56 2 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 843;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1056 788 OFFCURVE",
"1063 801 QCURVE",
"1067 817 LINE",
"1065 844 OFFCURVE",
"1014 844 QCURVE SMOOTH",
"410 844 LINE SMOOTH",
"389 844 OFFCURVE",
"375 834 QCURVE SMOOTH",
"357 821 OFFCURVE",
"330 774 QCURVE",
"279 665 OFFCURVE",
"236 606 QCURVE",
"233 598 LINE",
"235 583 OFFCURVE",
"262 573 QCURVE",
"281 569 LINE",
"287 569 OFFCURVE",
"291 573 QCURVE",
"338 631 LINE",
"381 678 OFFCURVE",
"426 678 QCURVE SMOOTH",
"805 678 LINE",
"830 673 OFFCURVE",
"836 655 QCURVE",
"835 647 OFFCURVE",
"829 639 QCURVE SMOOTH",
"61 -352 LINE",
"59 -356 OFFCURVE",
"59 -358 QCURVE",
"62 -369 OFFCURVE",
"74 -381 QCURVE",
"100 -410 OFFCURVE",
"131 -410 QCURVE",
"146 -409 OFFCURVE",
"152 -401 QCURVE SMOOTH",
"1044 770 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"938 819 LINE",
"899 854 LINE",
"244 854 LINE",
"193 819 LINE",
"165 742 OFFCURVE",
"125 655 OFFCURVE",
"101 614 CURVE",
"174 587 LINE",
"228 654 OFFCURVE",
"243 670 OFFCURVE",
"301 670 CURVE SMOOTH",
"755 670 LINE",
"748 721 LINE",
"52 -349 LINE",
"148 -399 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 37 values pushed */
24 1 3 73 0 0 2 0 136 0 2 1 2 136 0 1 3 3 1 91 0 1 1 3 95 0 3 1 3 79 56 50 42 19 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 878;
}
);
note = seven.oldstyle;
},
{
glyphname = six;
lastChange = "2018-08-16 03:26:43 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"903 660.667 OFFCURVE",
"815.333 766 OFFCURVE",
"682 766 CURVE SMOOTH",
"600.667 766 OFFCURVE",
"496 720.333 OFFCURVE",
"368 629 CURVE",
"473.333 866.333 OFFCURVE",
"602.5 1024.667 OFFCURVE",
"768.5 1154 CURVE SMOOTH",
"851.5 1218.667 OFFCURVE",
"946 1277 OFFCURVE",
"1052 1329 CURVE",
"1073.546 1337.619 OFFCURVE",
"1062.23 1386.447 OFFCURVE",
"1039 1378 CURVE",
"635 1212.667 OFFCURVE",
"300.167 859.667 OFFCURVE",
"195.5 613 CURVE SMOOTH",
"143.167 489.667 OFFCURVE",
"117 381 OFFCURVE",
"117 287 CURVE SMOOTH",
"117 85 OFFCURVE",
"207 -16 OFFCURVE",
"387 -16 CURVE SMOOTH",
"655 -16 OFFCURVE",
"903 239.333 OFFCURVE",
"903 510 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"731 261.333 OFFCURVE",
"601.333 63 OFFCURVE",
"432 63 CURVE SMOOTH",
"328 63 OFFCURVE",
"276 130 OFFCURVE",
"276 264 CURVE SMOOTH",
"276 356 OFFCURVE",
"295.333 449 OFFCURVE",
"334 543 CURVE",
"411.333 616.333 OFFCURVE",
"487.333 653 OFFCURVE",
"562 653 CURVE SMOOTH",
"674.667 653 OFFCURVE",
"731 582 OFFCURVE",
"731 440 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"603 -16 OFFCURVE",
"766 257 OFFCURVE",
"766 469 CURVE SMOOTH",
"766 632 OFFCURVE",
"674 766 OFFCURVE",
"528 766 CURVE SMOOTH",
"431 766 OFFCURVE",
"350 730 OFFCURVE",
"221 629 CURVE",
"254 729 OFFCURVE",
"303 821 OFFCURVE",
"356 902 CURVE SMOOTH",
"470 1076 OFFCURVE",
"641 1223 OFFCURVE",
"856 1329 CURVE",
"839 1378 LINE",
"622 1285 OFFCURVE",
"440 1145 OFFCURVE",
"286 961 CURVE SMOOTH",
"110 750 OFFCURVE",
"29 524 OFFCURVE",
"29 323 CURVE SMOOTH",
"29 123 OFFCURVE",
"118 -16 OFFCURVE",
"314 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"215 45 OFFCURVE",
"161 165 OFFCURVE",
"161 319 CURVE SMOOTH",
"161 400 OFFCURVE",
"174 474 OFFCURVE",
"195 543 CURVE",
"277 629 OFFCURVE",
"357 673 OFFCURVE",
"442 673 CURVE SMOOTH",
"571 673 OFFCURVE",
"641 584 OFFCURVE",
"641 441 CURVE SMOOTH",
"641 291 OFFCURVE",
"541 45 OFFCURVE",
"350 45 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
17 1 3 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 35 46 34 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1083 1331 OFFCURVE",
"1065 1390 OFFCURVE",
"1042 1382 QCURVE SMOOTH",
"731 1270 OFFCURVE",
"183 754 OFFCURVE",
"109 475 QCURVE SMOOTH",
"84 381 OFFCURVE",
"84 305 QCURVE SMOOTH",
"84 162 OFFCURVE",
"227 -16 OFFCURVE",
"387 -16 QCURVE SMOOTH",
"598 -16 OFFCURVE",
"942 307 OFFCURVE",
"942 516 QCURVE SMOOTH",
"942 635 OFFCURVE",
"811 797 OFFCURVE",
"549 797 OFFCURVE",
"432 686 QCURVE",
"524 874 OFFCURVE",
"852 1219 OFFCURVE",
"1065 1321 QCURVE"
);
},
{
closed = 1;
nodes = (
"707 326 OFFCURVE",
"555 88 OFFCURVE",
"438 88 QCURVE SMOOTH",
"311 88 OFFCURVE",
"311 260 QCURVE SMOOTH",
"311 403 OFFCURVE",
"377 565 QCURVE",
"465 643 OFFCURVE",
"559 643 QCURVE SMOOTH",
"629 643 OFFCURVE",
"707 529 OFFCURVE",
"707 451 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"652 -16 OFFCURVE",
"859 245 OFFCURVE",
"859 484 CURVE SMOOTH",
"859 658 OFFCURVE",
"751 797 OFFCURVE",
"569 797 CURVE SMOOTH",
"481 797 OFFCURVE",
"396 755 OFFCURVE",
"330 686 CURVE",
"366 771 OFFCURVE",
"411 853 OFFCURVE",
"466 934 CURVE SMOOTH",
"583 1105 OFFCURVE",
"730 1234 OFFCURVE",
"905 1321 CURVE",
"885 1384 LINE",
"661 1301 OFFCURVE",
"464 1166 OFFCURVE",
"294 977 CURVE SMOOTH",
"98 760 OFFCURVE",
"15 548 OFFCURVE",
"15 349 CURVE SMOOTH",
"15 137 OFFCURVE",
"123 -16 OFFCURVE",
"350 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"296 88 OFFCURVE",
"246 159 OFFCURVE",
"246 301 CURVE SMOOTH",
"246 378 OFFCURVE",
"264 501 OFFCURVE",
"288 565 CURVE",
"344 617 OFFCURVE",
"402 643 OFFCURVE",
"462 643 CURVE SMOOTH",
"572 643 OFFCURVE",
"628 529 OFFCURVE",
"628 411 CURVE SMOOTH",
"628 297 OFFCURVE",
"557 88 OFFCURVE",
"393 88 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
3 1 2 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 44 36 20 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = six;
unicode = 0036;
},
{
glyphname = six.oldstyle;
lastChange = "2018-08-16 03:28:19 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1036 660 OFFCURVE",
"939 754 OFFCURVE",
"799 754 CURVE SMOOTH",
"721 754 OFFCURVE",
"644.333 728 OFFCURVE",
"569 676 CURVE SMOOTH",
"535.251 652.177 OFFCURVE",
"522.713 665.57 OFFCURVE",
"543 696 CURVE SMOOTH",
"596.333 777.333 OFFCURVE",
"672 859.667 OFFCURVE",
"770 943 CURVE SMOOTH",
"951.333 1097 OFFCURVE",
"1137.667 1203.333 OFFCURVE",
"1329 1262 CURVE SMOOTH",
"1341 1266 OFFCURVE",
"1347 1274.167 OFFCURVE",
"1347 1286.5 CURVE SMOOTH",
"1347 1298.833 OFFCURVE",
"1342 1305 OFFCURVE",
"1332 1305 CURVE SMOOTH",
"1330.667 1305 OFFCURVE",
"1329.333 1305 OFFCURVE",
"1328 1305 CURVE",
"1081.333 1237 OFFCURVE",
"861.167 1159.167 OFFCURVE",
"600.5 946.5 CURVE SMOOTH",
"339.833 733.833 OFFCURVE",
"209 444.667 OFFCURVE",
"209 238 CURVE SMOOTH",
"209 58.667 OFFCURVE",
"297.667 -31 OFFCURVE",
"475 -31 CURVE SMOOTH",
"657.667 -31 OFFCURVE",
"830.667 48.667 OFFCURVE",
"948 238 CURVE SMOOTH",
"1006.667 332.667 OFFCURVE",
"1036 420 OFFCURVE",
"1036 500 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"866 217.333 OFFCURVE",
"700.333 37 OFFCURVE",
"551 37 CURVE SMOOTH",
"429.667 37 OFFCURVE",
"369 107.333 OFFCURVE",
"369 248 CURVE SMOOTH",
"369 453.333 OFFCURVE",
"529 641 OFFCURVE",
"717 641 CURVE SMOOTH",
"810.333 641 OFFCURVE",
"866 566.667 OFFCURVE",
"866 444 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"675 -31 OFFCURVE",
"858 238 OFFCURVE",
"858 470 CURVE SMOOTH",
"858 652 OFFCURVE",
"745 754 OFFCURVE",
"592 754 CURVE SMOOTH",
"521 754 OFFCURVE",
"396 747 OFFCURVE",
"155 495 CURVE",
"251 535 LINE",
"372 787 OFFCURVE",
"456 888 OFFCURVE",
"580 996 CURVE SMOOTH",
"738 1134 OFFCURVE",
"916 1211 OFFCURVE",
"1078 1267 CURVE",
"1073 1301 LINE",
"761 1213 OFFCURVE",
"589 1126 OFFCURVE",
"405 955 CURVE SMOOTH",
"175 741 OFFCURVE",
"77 484 OFFCURVE",
"77 284 CURVE SMOOTH",
"77 86 OFFCURVE",
"169 -31 OFFCURVE",
"366 -31 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"276 30 OFFCURVE",
"206 164 OFFCURVE",
"206 295 CURVE SMOOTH",
"206 443 OFFCURVE",
"315 659 OFFCURVE",
"536 659 CURVE SMOOTH",
"660 659 OFFCURVE",
"715 544 OFFCURVE",
"715 413 CURVE SMOOTH",
"715 270 OFFCURVE",
"634 30 OFFCURVE",
"434 30 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 37 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
38 36 33 31 27 25 35 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 1019;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1370 1260 LINE",
"1374 1266 LINE",
"1378 1280 LINE",
"1378 1303 OFFCURVE",
"1362 1307 QCURVE",
"1350 1307 LINE",
"1171 1265 OFFCURVE",
"1034 1212 QCURVE SMOOTH",
"809 1124 OFFCURVE",
"590 954 QCURVE SMOOTH",
"390 801 OFFCURVE",
"281 588 QCURVE SMOOTH",
"190 410 OFFCURVE",
"190 258 QCURVE SMOOTH",
"188 178 OFFCURVE",
"219 117 QCURVE SMOOTH",
"289 -31 OFFCURVE",
"494 -31 QCURVE SMOOTH",
"708 -31 OFFCURVE",
"864 78 QCURVE SMOOTH",
"947 133 OFFCURVE",
"1004 215 QCURVE SMOOTH",
"1094 346 OFFCURVE",
"1094 485 QCURVE SMOOTH",
"1094 596 OFFCURVE",
"1026 668 QCURVE SMOOTH",
"944 754 OFFCURVE",
"807 754 QCURVE SMOOTH",
"742 754 OFFCURVE",
"670 725 QCURVE",
"653 717 OFFCURVE",
"643 717 QCURVE",
"635 721 LINE",
"633 727 LINE",
"635 738 OFFCURVE",
"647 754 QCURVE",
"707 827 OFFCURVE",
"715 831 QCURVE",
"754 874 OFFCURVE",
"797 915 QCURVE SMOOTH",
"1057 1163 OFFCURVE",
"1366 1257 QCURVE"
);
},
{
closed = 1;
nodes = (
"848 293 OFFCURVE",
"778 178 QCURVE SMOOTH",
"703 53 OFFCURVE",
"578 53 QCURVE SMOOTH",
"518 51 OFFCURVE",
"479 94 QCURVE SMOOTH",
"424 153 OFFCURVE",
"424 266 QCURVE SMOOTH",
"424 412 OFFCURVE",
"502 514 QCURVE SMOOTH",
"586 625 OFFCURVE",
"717 625 QCURVE SMOOTH",
"764 625 OFFCURVE",
"799 586 QCURVE SMOOTH",
"848 533 OFFCURVE",
"848 455 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"763 -31 OFFCURVE",
"927 289 OFFCURVE",
"927 469 CURVE SMOOTH",
"927 645 OFFCURVE",
"802 754 OFFCURVE",
"610 754 CURVE SMOOTH",
"566 754 OFFCURVE",
"477 736 OFFCURVE",
"366 678 CURVE",
"389 653 LINE",
"461 796 OFFCURVE",
"602 943 OFFCURVE",
"694 1020 CURVE SMOOTH",
"824 1129 OFFCURVE",
"960 1205 OFFCURVE",
"1103 1249 CURVE",
"1091 1307 LINE",
"809 1237 OFFCURVE",
"597 1143 OFFCURVE",
"372 952 CURVE SMOOTH",
"170 780 OFFCURVE",
"49 519 OFFCURVE",
"49 311 CURVE SMOOTH",
"49 105 OFFCURVE",
"156 -31 OFFCURVE",
"384 -31 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"333 57 OFFCURVE",
"270 160 OFFCURVE",
"270 285 CURVE SMOOTH",
"270 423 OFFCURVE",
"365 625 OFFCURVE",
"549 625 CURVE SMOOTH",
"645 625 OFFCURVE",
"687 529 OFFCURVE",
"687 420 CURVE SMOOTH",
"687 304 OFFCURVE",
"615 57 OFFCURVE",
"457 57 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
39 1 1 74 10 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
84 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 0 2 0 101 0 3 3 1 97 0 1 1 24 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 3 2 1 3 109 0 2 0 0 2 93 0 2 2 0 97 0 0 2 0 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
55 53 47 45 40 45 4 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 1054;
}
);
note = six.oldstyle;
},
{
glyphname = slash;
lastChange = "2018-08-18 02:22:03 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"702 1430 LINE",
"602 1473 LINE",
"-8 33 LINE",
"90 -12 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 1 1 94 77 0 0 0 93 0 78 21 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 541;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"793 1425 LINE",
"664 1481 LINE",
"49 39 LINE",
"178 -16 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
13 3 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 528;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = space;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 559;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 557;
}
);
note = space;
unicode = 0020;
},
{
glyphname = sterling;
lastChange = "2018-08-16 19:17:38 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"729 -53 OFFCURVE",
"807 -33 OFFCURVE",
"869 4 CURVE SMOOTH",
"930 40 OFFCURVE",
"975 93 OFFCURVE",
"975 158 CURVE SMOOTH",
"975 206 OFFCURVE",
"946 250 OFFCURVE",
"899 250 CURVE SMOOTH",
"868 250 OFFCURVE",
"852 225 OFFCURVE",
"852 176 CURVE SMOOTH",
"852 51 OFFCURVE",
"831 35 OFFCURVE",
"764 35 CURVE SMOOTH",
"720 35 OFFCURVE",
"653 55 OFFCURVE",
"562 96 CURVE SMOOTH",
"471 137 OFFCURVE",
"396 158 OFFCURVE",
"336 158 CURVE",
"485 237 OFFCURVE",
"577 381 OFFCURVE",
"612 584 CURVE",
"903 584 LINE",
"915 649 LINE",
"623 649 LINE",
"638 797 OFFCURVE",
"652 915 OFFCURVE",
"669 1004 CURVE SMOOTH",
"697 1153 OFFCURVE",
"735 1255 OFFCURVE",
"849 1255 CURVE SMOOTH",
"923 1255 OFFCURVE",
"961 1218 OFFCURVE",
"962 1145 CURVE SMOOTH",
"963 1090 OFFCURVE",
"988 1063 OFFCURVE",
"1037 1063 CURVE SMOOTH",
"1089 1063 OFFCURVE",
"1103 1109 OFFCURVE",
"1103 1154 CURVE SMOOTH",
"1103 1253 OFFCURVE",
"1038 1323 OFFCURVE",
"907 1323 CURVE SMOOTH",
"738 1323 OFFCURVE",
"574 1173 OFFCURVE",
"518 977 CURVE SMOOTH",
"490 878 OFFCURVE",
"470 769 OFFCURVE",
"457 649 CURVE",
"235 649 LINE",
"217 584 LINE",
"448 584 LINE",
"425 317 OFFCURVE",
"342 180 OFFCURVE",
"227 163 CURVE SMOOTH",
"112 146 OFFCURVE",
"-8 92 OFFCURVE",
"-8 20 CURVE SMOOTH",
"-8 -13 OFFCURVE",
"16 -29 OFFCURVE",
"63 -29 CURVE SMOOTH",
"110 -29 OFFCURVE",
"144 -9 OFFCURVE",
"164 31 CURVE SMOOTH",
"184 70 OFFCURVE",
"208 92 OFFCURVE",
"235 96 CURVE",
"294 73 OFFCURVE",
"361 42 OFFCURVE",
"435 4 CURVE SMOOTH",
"509 -34 OFFCURVE",
"585 -53 OFFCURVE",
"662 -53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
37 1 5 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 0 1 2 1 0 2 128 0 6 3 4 3 6 4 128 0 4 5 3 4 5 126 10 1 2 9 1 3 6 2 3 103 0 1 1 11 97 0 11 11 92 77 0 8 8 93 77 0 5 5 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 0 1 2 1 0 2 128 0 6 3 4 3 6 4 128 0 4 5 3 4 5 126 0 11 0 1 0 11 1 105 10 1 2 9 1 3 6 2 3 103 0 8 8 93 77 0 5 5 7 97 0 7 7 93 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 0 1 2 1 0 2 128 0 6 3 4 3 6 4 128 0 4 5 3 4 5 126 0 11 0 1 0 11 1 105 10 1 2 9 1 3 6 2 3 103 0 5 0 7 5 7 101 0 8 8 93 8 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
58 56 53 51 48 47 36 36 35 34 34 35 18 34 34 12 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1081;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"744 -53 OFFCURVE",
"851 -31 OFFCURVE",
"943 45 CURVE SMOOTH",
"989 83 OFFCURVE",
"1012 129 OFFCURVE",
"1012 182 CURVE SMOOTH",
"1012 242 OFFCURVE",
"972 305 OFFCURVE",
"899 305 CURVE SMOOTH",
"843 305 OFFCURVE",
"815 273 OFFCURVE",
"815 209 CURVE SMOOTH",
"815 150 OFFCURVE",
"810 61 OFFCURVE",
"766 61 CURVE SMOOTH",
"716 61 OFFCURVE",
"619 134 OFFCURVE",
"537 173 CURVE SMOOTH",
"489 196 OFFCURVE",
"441 204 OFFCURVE",
"393 197 CURVE",
"518 286 OFFCURVE",
"624 435 OFFCURVE",
"645 571 CURVE",
"932 571 LINE",
"948 664 LINE",
"659 664 LINE",
"659 729 OFFCURVE",
"676 871 OFFCURVE",
"694 999 CURVE SMOOTH",
"712 1126 OFFCURVE",
"769 1237 OFFCURVE",
"842 1237 CURVE SMOOTH",
"905 1237 OFFCURVE",
"952 1190 OFFCURVE",
"970 1142 CURVE SMOOTH",
"988 1094 OFFCURVE",
"1011 1047 OFFCURVE",
"1042 1047 CURVE SMOOTH",
"1097 1047 OFFCURVE",
"1139 1128 OFFCURVE",
"1139 1167 CURVE SMOOTH",
"1139 1271 OFFCURVE",
"1062 1323 OFFCURVE",
"907 1323 CURVE SMOOTH",
"700 1323 OFFCURVE",
"564 1177 OFFCURVE",
"493 994 CURVE SMOOTH",
"454 896 OFFCURVE",
"436 787 OFFCURVE",
"422 664 CURVE",
"215 664 LINE",
"193 571 LINE",
"410 571 LINE",
"395 404 OFFCURVE",
"331 214 OFFCURVE",
"227 201 CURVE SMOOTH",
"141 192 OFFCURVE",
"-45 143 OFFCURVE",
"-45 51 CURVE SMOOTH",
"-45 -1 OFFCURVE",
"8 -31 OFFCURVE",
"63 -31 CURVE SMOOTH",
"134 -31 OFFCURVE",
"141 1 OFFCURVE",
"156 34 CURVE SMOOTH",
"167 59 OFFCURVE",
"182 84 OFFCURVE",
"233 96 CURVE",
"285 77 OFFCURVE",
"361 38 OFFCURVE",
"433 5 CURVE SMOOTH",
"497 -25 OFFCURVE",
"566 -53 OFFCURVE",
"653 -53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
42 29 21 3 4 5 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 0 1 2 1 0 2 128 0 5 3 4 3 5 4 128 0 4 7 3 4 7 126 9 1 2 8 1 3 5 2 3 103 0 1 1 10 97 0 10 10 31 77 0 7 7 32 77 0 6 6 32 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 0 1 2 1 0 2 128 0 5 3 4 3 5 4 128 0 4 7 3 4 7 126 0 10 0 1 0 10 1 105 9 1 2 8 1 3 5 2 3 103 0 7 7 32 77 0 6 6 32 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
0 0 1 2 1 0 2 128 0 5 3 4 3 5 4 128 0 4 7 3 4 7 126 0 6 7 6 134 0 10 0 1 0 10 1 105 9 1 2 8 1 3 5 2 3 103 0 7 7 32 7 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
70 68 63 61 26 39 37 36 38 34 20 35 34 11 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1079;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = t;
lastChange = "2018-08-18 14:11:35 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{222, 0}";
},
{
name = center;
position = "{297, 428}";
},
{
name = top;
position = "{372, 856}";
},
{
name = topright;
position = "{422, 650}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"80 -120 LINE",
"182 -120 LINE",
"574 1341 LINE",
"472 1341 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"315 -27 OFFCURVE",
"430 121 OFFCURVE",
"514 265 CURVE",
"471 299 LINE",
"376 166 OFFCURVE",
"308 100 OFFCURVE",
"266 100 CURVE SMOOTH",
"221 100 OFFCURVE",
"221 160 OFFCURVE",
"232 223 CURVE SMOOTH",
"374 1008 LINE",
"314 1021 LINE",
"236 808 LINE",
"117 148 LINE SMOOTH",
"113 128 OFFCURVE",
"111 111 OFFCURVE",
"111 93 CURVE SMOOTH",
"111 27 OFFCURVE",
"139 -27 OFFCURVE",
"203 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"548 730 LINE",
"563 798 LINE",
"301 798 LINE",
"285 820 LINE",
"41 775 LINE",
"45 730 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 1 2 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 4 3 133 5 1 2 2 4 95 0 4 4 95 77 0 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
0 3 4 3 133 0 4 5 1 2 0 4 2 104 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
35 20 24 21 41 35 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 593;
},
{
anchors = (
{
name = bottom;
position = "{270, 0}";
},
{
name = center;
position = "{345, 428}";
},
{
name = top;
position = "{420, 856}";
},
{
name = topright;
position = "{536, 650}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"86 -89 LINE",
"280 -89 LINE",
"662 1334 LINE",
"468 1334 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"405 -27 OFFCURVE",
"512 75 OFFCURVE",
"631 266 CURVE",
"576 317 LINE",
"478 189 OFFCURVE",
"408 125 OFFCURVE",
"366 125 CURVE SMOOTH",
"330 125 OFFCURVE",
"332 172 OFFCURVE",
"343 233 CURVE SMOOTH",
"480 988 LINE",
"377 1026 LINE",
"256 822 LINE",
"140 180 LINE SMOOTH",
"136 160 OFFCURVE",
"134 140 OFFCURVE",
"134 121 CURVE SMOOTH",
"134 39 OFFCURVE",
"168 -27 OFFCURVE",
"264 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"677 713 LINE",
"690 819 LINE",
"350 819 LINE",
"344 848 LINE",
"64 789 LINE",
"70 713 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
32 1 4 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 4 3 133 5 1 2 2 4 95 0 4 4 34 77 0 0 0 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
0 3 4 3 133 0 4 5 1 2 0 4 2 104 0 0 0 1 97 0 1 1 32 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
35 20 24 21 41 35 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 690;
}
);
leftKerningGroup = t;
note = t;
rightKerningGroup = f_f_t;
unicode = 0074;
},
{
glyphname = tcaron;
lastChange = "2018-08-18 14:11:37 +0000";
layers = (
{
components = (
{
name = t;
},
{
name = uni030C.alt;
transform = "{1, 0, 0, 1, 235, -206}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 593;
},
{
components = (
{
alignment = -1;
name = t;
},
{
name = uni030C.alt;
transform = "{1, 0, 0, 1, 349, -206}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 682;
}
);
leftKerningGroup = t;
note = tcaron;
unicode = 0165;
},
{
glyphname = therefore;
lastChange = "2018-08-16 19:06:42 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"927 754 OFFCURVE",
"989 795 OFFCURVE",
"989 907 CURVE SMOOTH",
"989 952 OFFCURVE",
"925 992 OFFCURVE",
"862 992 CURVE SMOOTH",
"802 992 OFFCURVE",
"742 954 OFFCURVE",
"742 846 CURVE SMOOTH",
"742 795 OFFCURVE",
"804 754 OFFCURVE",
"865 754 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"293 -26 OFFCURVE",
"355 15 OFFCURVE",
"355 127 CURVE SMOOTH",
"355 172 OFFCURVE",
"291 212 OFFCURVE",
"228 212 CURVE SMOOTH",
"168 212 OFFCURVE",
"108 174 OFFCURVE",
"108 66 CURVE SMOOTH",
"108 15 OFFCURVE",
"170 -26 OFFCURVE",
"231 -26 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1201 -26 OFFCURVE",
"1263 15 OFFCURVE",
"1263 127 CURVE SMOOTH",
"1263 172 OFFCURVE",
"1199 212 OFFCURVE",
"1136 212 CURVE SMOOTH",
"1076 212 OFFCURVE",
"1016 174 OFFCURVE",
"1016 66 CURVE SMOOTH",
"1016 15 OFFCURVE",
"1078 -26 OFFCURVE",
"1139 -26 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
0 2 0 3 0 2 3 105 4 1 0 0 1 97 5 1 1 1 93 1 78 20 20 20 20 20 18 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1396;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"940 728 OFFCURVE",
"1016 778 OFFCURVE",
"1016 914 CURVE SMOOTH",
"1016 969 OFFCURVE",
"938 1018 OFFCURVE",
"861 1018 CURVE SMOOTH",
"788 1018 OFFCURVE",
"716 971 OFFCURVE",
"716 840 CURVE SMOOTH",
"716 778 OFFCURVE",
"791 728 OFFCURVE",
"865 728 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"306 -52 OFFCURVE",
"382 -2 OFFCURVE",
"382 134 CURVE SMOOTH",
"382 189 OFFCURVE",
"304 238 OFFCURVE",
"227 238 CURVE SMOOTH",
"154 238 OFFCURVE",
"82 191 OFFCURVE",
"82 60 CURVE SMOOTH",
"82 -2 OFFCURVE",
"157 -52 OFFCURVE",
"231 -52 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1214 -52 OFFCURVE",
"1290 -2 OFFCURVE",
"1290 134 CURVE SMOOTH",
"1290 189 OFFCURVE",
"1212 238 OFFCURVE",
"1135 238 CURVE SMOOTH",
"1062 238 OFFCURVE",
"990 191 OFFCURVE",
"990 60 CURVE SMOOTH",
"990 -2 OFFCURVE",
"1065 -52 OFFCURVE",
"1139 -52 CURVE SMOOTH"
);
}
);
width = 1396;
}
);
note = therefore;
unicode = 2234;
},
{
glyphname = thorn;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-91 -620 LINE",
"11 -620 LINE",
"403 841 LINE",
"301 841 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-1 -512 LINE",
"21 -486 LINE",
"104 -25 LINE",
"293 -15 OFFCURVE",
"411 90 OFFCURVE",
"474 151 CURVE SMOOTH",
"607 281 OFFCURVE",
"699 436 OFFCURVE",
"699 628 CURVE SMOOTH",
"699 764 OFFCURVE",
"659 852 OFFCURVE",
"526 852 CURVE SMOOTH",
"398 852 OFFCURVE",
"292 770 OFFCURVE",
"183 568 CURVE",
"218 608 LINE",
"373 1466 LINE",
"359 1484 LINE",
"280 1439 OFFCURVE",
"188 1412 OFFCURVE",
"114 1412 CURVE",
"118 1359 LINE",
"193 1359 OFFCURVE",
"227 1312 OFFCURVE",
"227 1243 CURVE SMOOTH",
"227 1225 OFFCURVE",
"225 1207 OFFCURVE",
"221 1187 CURVE SMOOTH",
"-76 -456 LINE",
"-191 -512 LINE",
"-179 -559 LINE"
);
},
{
closed = 1;
nodes = (
"213 577 LINE",
"153 433 LINE",
"222 591 OFFCURVE",
"367 782 OFFCURVE",
"476 782 CURVE SMOOTH",
"559 782 OFFCURVE",
"578 707 OFFCURVE",
"578 613 CURVE SMOOTH",
"578 449 OFFCURVE",
"514 321 OFFCURVE",
"420 203 CURVE SMOOTH",
"363 132 OFFCURVE",
"264 41 OFFCURVE",
"114 31 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
33 1 6 5 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 3 3 94 77 0 1 1 2 97 0 2 2 98 77 0 5 5 4 97 0 4 4 95 77 0 6 6 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 1 4 2 1 105 0 3 3 94 77 0 5 5 4 97 0 4 4 95 77 0 6 6 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
44 43 40 38 36 34 31 29 28 26 24 23 20 7 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 746;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-137 -687 LINE",
"57 -687 LINE",
"439 736 LINE",
"245 736 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"59 -494 LINE",
"111 -451 LINE",
"188 -27 LINE",
"308 -11 OFFCURVE",
"418 48 OFFCURVE",
"526 132 CURVE SMOOTH",
"686 257 OFFCURVE",
"789 415 OFFCURVE",
"789 615 CURVE SMOOTH",
"789 762 OFFCURVE",
"712 852 OFFCURVE",
"570 852 CURVE SMOOTH",
"470 852 OFFCURVE",
"373 818 OFFCURVE",
"241 627 CURVE",
"316 684 LINE",
"456 1448 LINE",
"435 1487 LINE",
"335 1449 OFFCURVE",
"231 1432 OFFCURVE",
"137 1432 CURVE",
"143 1360 LINE",
"196 1360 OFFCURVE",
"224 1328 OFFCURVE",
"224 1263 CURVE SMOOTH",
"224 1248 OFFCURVE",
"222 1232 OFFCURVE",
"219 1214 CURVE SMOOTH",
"-79 -429 LINE",
"-185 -494 LINE",
"-149 -557 LINE"
);
},
{
closed = 1;
nodes = (
"313 665 LINE",
"223 375 LINE",
"318 663 OFFCURVE",
"390 758 OFFCURVE",
"481 758 CURVE SMOOTH",
"562 758 OFFCURVE",
"583 679 OFFCURVE",
"583 590 CURVE SMOOTH",
"583 495 OFFCURVE",
"552 333 OFFCURVE",
"459 220 CURVE SMOOTH",
"397 144 OFFCURVE",
"316 75 OFFCURVE",
"201 45 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
38 26 2 4 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 33 77 0 0 0 1 97 0 1 1 37 77 0 4 4 3 97 0 3 3 34 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 0 3 1 0 105 0 2 2 33 77 0 4 4 3 97 0 3 3 34 4 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
35 33 29 27 24 22 21 19 18 16 5 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 818;
}
);
note = thorn;
unicode = 00FE;
},
{
glyphname = thorn.nordic;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"8 -202 LINE",
"110 -202 LINE",
"502 1259 LINE",
"400 1259 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"164 -555 LINE",
"160 -504 LINE",
"78 -504 OFFCURVE",
"19 -490 OFFCURVE",
"32 -420 CURVE SMOOTH",
"375 1471 LINE",
"362 1484 LINE",
"274 1444 OFFCURVE",
"216 1429 OFFCURVE",
"130 1429 CURVE",
"135 1377 LINE",
"204 1377 OFFCURVE",
"231 1340 OFFCURVE",
"231 1274 CURVE SMOOTH",
"231 1252 OFFCURVE",
"228 1226 OFFCURVE",
"223 1197 CURVE SMOOTH",
"-71 -428 LINE SMOOTH",
"-80 -479 OFFCURVE",
"-141 -504 OFFCURVE",
"-225 -504 CURVE",
"-221 -555 LINE"
);
},
{
closed = 1;
nodes = (
"479 -29 OFFCURVE",
"700 196 OFFCURVE",
"700 460 CURVE SMOOTH",
"700 668 OFFCURVE",
"579 842 OFFCURVE",
"374 842 CURVE SMOOTH",
"320 842 OFFCURVE",
"256 833 OFFCURVE",
"211 812 CURVE",
"203 729 LINE",
"246 750 OFFCURVE",
"303 756 OFFCURVE",
"334 756 CURVE SMOOTH",
"473 756 OFFCURVE",
"579 600 OFFCURVE",
"579 441 CURVE SMOOTH",
"579 226 OFFCURVE",
"411 32 OFFCURVE",
"231 32 CURVE SMOOTH",
"160 32 OFFCURVE",
"121 52 OFFCURVE",
"99 91 CURVE",
"78 5 LINE",
"125 -21 OFFCURVE",
"174 -29 OFFCURVE",
"228 -29 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
50 37 19 17 12 5 6 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 6 5 6 137 0 2 3 1 1 0 2 1 109 0 8 0 7 4 8 7 109 0 4 0 5 6 4 5 109 0 9 9 0 97 0 0 0 37 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 6 5 6 137 0 2 3 1 1 0 2 1 109 0 0 0 9 8 0 9 109 0 8 0 7 4 8 7 109 0 4 5 5 4 93 0 4 4 5 97 0 5 4 5 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
53 51 36 35 33 34 21 36 21 21 34 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 764;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-29 -383 LINE",
"165 -383 LINE",
"547 1040 LINE",
"353 1040 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"273 -559 LINE",
"267 -485 LINE",
"147 -485 OFFCURVE",
"136 -456 OFFCURVE",
"146 -401 CURVE SMOOTH",
"485 1468 LINE",
"468 1489 LINE",
"350 1454 OFFCURVE",
"249 1432 OFFCURVE",
"164 1432 CURVE",
"170 1360 LINE",
"228 1360 OFFCURVE",
"249 1327 OFFCURVE",
"249 1261 CURVE SMOOTH",
"249 1246 OFFCURVE",
"247 1228 OFFCURVE",
"244 1210 CURVE SMOOTH",
"-49 -410 LINE SMOOTH",
"-61 -478 OFFCURVE",
"-103 -485 OFFCURVE",
"-182 -485 CURVE",
"-176 -559 LINE"
);
},
{
closed = 1;
nodes = (
"559 -27 OFFCURVE",
"809 223 OFFCURVE",
"809 481 CURVE SMOOTH",
"809 692 OFFCURVE",
"653 844 OFFCURVE",
"432 844 CURVE SMOOTH",
"382 844 OFFCURVE",
"327 831 OFFCURVE",
"283 815 CURVE",
"279 712 LINE",
"327 733 OFFCURVE",
"392 741 OFFCURVE",
"414 741 CURVE SMOOTH",
"535 741 OFFCURVE",
"596 593 OFFCURVE",
"596 447 CURVE SMOOTH",
"596 258 OFFCURVE",
"465 55 OFFCURVE",
"286 55 CURVE SMOOTH",
"261 55 OFFCURVE",
"224 74 OFFCURVE",
"208 96 CURVE",
"180 -8 LINE",
"227 -23 OFFCURVE",
"276 -27 OFFCURVE",
"289 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
67 52 28 22 18 5 6 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 6 5 6 137 0 2 3 1 1 0 2 1 109 0 8 0 7 4 8 7 109 0 4 0 5 6 4 5 109 0 9 9 0 97 0 0 0 24 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 6 5 6 137 0 2 3 1 1 0 2 1 109 0 0 0 9 8 0 9 109 0 8 0 7 4 8 7 109 0 4 5 5 4 93 0 4 4 5 97 0 5 4 5 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
70 69 38 36 34 33 39 37 55 39 37 10 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 848;
}
);
note = thorn.nordic;
rightMetricsKey = "=p";
},
{
glyphname = three;
lastChange = "2018-08-18 21:55:17 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"870 642 OFFCURVE",
"809 715 OFFCURVE",
"688 742 CURVE SMOOTH",
"671 746 OFFCURVE",
"663 751 OFFCURVE",
"663 756 CURVE SMOOTH",
"663 761 OFFCURVE",
"676 769 OFFCURVE",
"703 782 CURVE SMOOTH",
"880 867 OFFCURVE",
"968 984 OFFCURVE",
"968 1133 CURVE SMOOTH",
"968 1249 OFFCURVE",
"889 1333 OFFCURVE",
"760 1333 CURVE SMOOTH",
"633 1333 OFFCURVE",
"507 1266 OFFCURVE",
"380 1131 CURVE",
"368 1111 OFFCURVE",
"406 1075 OFFCURVE",
"421 1090 CURVE",
"504 1181 OFFCURVE",
"586 1227 OFFCURVE",
"665 1227 CURVE SMOOTH",
"746 1227 OFFCURVE",
"807 1180 OFFCURVE",
"807 1085 CURVE SMOOTH",
"807 886 OFFCURVE",
"599 754 OFFCURVE",
"380 754 CURVE SMOOTH",
"360 754 OFFCURVE",
"337 674 OFFCURVE",
"359 674 CURVE",
"393 685 OFFCURVE",
"432 690 OFFCURVE",
"476 690 CURVE SMOOTH",
"619 690 OFFCURVE",
"691 621 OFFCURVE",
"691 483 CURVE SMOOTH",
"691 300 OFFCURVE",
"531 53 OFFCURVE",
"362 53 CURVE SMOOTH",
"310 53 OFFCURVE",
"268 78 OFFCURVE",
"237 127 CURVE SMOOTH",
"205 176 OFFCURVE",
"178 201 OFFCURVE",
"157 201 CURVE SMOOTH",
"114 201 OFFCURVE",
"50 165 OFFCURVE",
"50 102 CURVE SMOOTH",
"50 19 OFFCURVE",
"126 -23 OFFCURVE",
"278 -23 CURVE SMOOTH",
"429 -23 OFFCURVE",
"566 33 OFFCURVE",
"688 145 CURVE",
"581 -23 OFFCURVE",
"870 241 OFFCURVE",
"870 524 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"546 -23 OFFCURVE",
"754 260 OFFCURVE",
"754 501 CURVE SMOOTH",
"754 620 OFFCURVE",
"694 701 OFFCURVE",
"503 754 CURVE",
"501 741 LINE",
"794 876 OFFCURVE",
"808 1025 OFFCURVE",
"808 1116 CURVE SMOOTH",
"808 1242 OFFCURVE",
"732 1333 OFFCURVE",
"587 1333 CURVE SMOOTH",
"462 1333 OFFCURVE",
"345 1261 OFFCURVE",
"230 1126 CURVE",
"265 1094 LINE",
"340 1185 OFFCURVE",
"424 1237 OFFCURVE",
"503 1237 CURVE SMOOTH",
"593 1237 OFFCURVE",
"668 1178 OFFCURVE",
"668 1071 CURVE SMOOTH",
"668 977 OFFCURVE",
"590 744 OFFCURVE",
"258 744 CURVE",
"247 684 LINE",
"281 693 OFFCURVE",
"319 695 OFFCURVE",
"362 695 CURVE SMOOTH",
"525 695 OFFCURVE",
"614 592 OFFCURVE",
"614 451 CURVE SMOOTH",
"614 314 OFFCURVE",
"503 43 OFFCURVE",
"304 43 CURVE SMOOTH",
"253 43 OFFCURVE",
"210 72 OFFCURVE",
"173 118 CURVE SMOOTH",
"136 164 OFFCURVE",
"105 187 OFFCURVE",
"81 187 CURVE SMOOTH",
"40 187 OFFCURVE",
"-4 155 OFFCURVE",
"-11 118 CURVE SMOOTH",
"-12 113 OFFCURVE",
"-12 107 OFFCURVE",
"-12 102 CURVE SMOOTH",
"-12 35 OFFCURVE",
"65 -23 OFFCURVE",
"239 -23 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
17 1 1 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 6 97 0 6 6 92 77 0 2 2 0 98 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 4 6 5 105 0 4 0 3 1 4 3 105 0 2 2 0 98 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
39 36 36 35 33 35 18 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 742;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"426 -23 OFFCURVE",
"713 123 OFFCURVE",
"903 383 OFFCURVE",
"903 530 QCURVE SMOOTH",
"903 707 OFFCURVE",
"737 760 QCURVE",
"850 817 OFFCURVE",
"993 995 OFFCURVE",
"993 1108 QCURVE SMOOTH",
"993 1206 OFFCURVE",
"865 1333 OFFCURVE",
"754 1333 QCURVE SMOOTH",
"641 1333 OFFCURVE",
"449 1213 OFFCURVE",
"334 1094 QCURVE SMOOTH",
"317 1077 OFFCURVE",
"369 1029 OFFCURVE",
"387 1049 QCURVE SMOOTH",
"467 1133 OFFCURVE",
"585 1204 OFFCURVE",
"653 1204 QCURVE SMOOTH",
"707 1204 OFFCURVE",
"762 1134 OFFCURVE",
"762 1079 QCURVE SMOOTH",
"762 971 OFFCURVE",
"684 887 QCURVE SMOOTH",
"572 764 OFFCURVE",
"377 764 QCURVE SMOOTH",
"352 764 OFFCURVE",
"327 657 OFFCURVE",
"354 657 QCURVE",
"410 674 OFFCURVE",
"465 674 QCURVE SMOOTH",
"557 674 OFFCURVE",
"649 571 OFFCURVE",
"649 485 QCURVE SMOOTH",
"649 367 OFFCURVE",
"468 78 OFFCURVE",
"362 78 QCURVE SMOOTH",
"322 78 OFFCURVE",
"266 129 OFFCURVE",
"244 188 OFFCURVE",
"195 240 OFFCURVE",
"158 240 QCURVE SMOOTH",
"102 240 OFFCURVE",
"12 170 OFFCURVE",
"12 117 QCURVE SMOOTH",
"12 41 OFFCURVE",
"183 -23 OFFCURVE",
"283 -23 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"582 -23 OFFCURVE",
"824 248 OFFCURVE",
"824 511 CURVE SMOOTH",
"824 634 OFFCURVE",
"765 723 OFFCURVE",
"609 772 CURVE",
"595 737 LINE",
"824 853 OFFCURVE",
"859 993 OFFCURVE",
"859 1084 CURVE SMOOTH",
"859 1224 OFFCURVE",
"754 1333 OFFCURVE",
"599 1333 CURVE SMOOTH",
"439 1333 OFFCURVE",
"326 1242 OFFCURVE",
"200 1094 CURVE",
"257 1049 LINE",
"331 1135 OFFCURVE",
"414 1204 OFFCURVE",
"509 1204 CURVE SMOOTH",
"586 1204 OFFCURVE",
"630 1143 OFFCURVE",
"630 1059 CURVE SMOOTH",
"630 932 OFFCURVE",
"530 764 OFFCURVE",
"273 764 CURVE",
"260 657 LINE",
"294 668 OFFCURVE",
"331 674 OFFCURVE",
"370 674 CURVE SMOOTH",
"496 674 OFFCURVE",
"573 589 OFFCURVE",
"573 462 CURVE SMOOTH",
"573 354 OFFCURVE",
"487 78 OFFCURVE",
"322 78 CURVE SMOOTH",
"264 78 OFFCURVE",
"243 107 OFFCURVE",
"202 164 CURVE SMOOTH",
"176 201 OFFCURVE",
"147 240 OFFCURVE",
"107 240 CURVE SMOOTH",
"26 240 OFFCURVE",
"-20 207 OFFCURVE",
"-31 143 CURVE SMOOTH",
"-32 136 OFFCURVE",
"-33 129 OFFCURVE",
"-33 122 CURVE SMOOTH",
"-33 19 OFFCURVE",
"113 -23 OFFCURVE",
"251 -23 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
44 1 3 5 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 1 3 2 3 1 2 128 0 5 4 1 3 1 5 3 105 0 6 6 7 97 0 7 7 31 77 0 2 2 0 98 8 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 5 0 3 4 5 3 105 0 6 6 7 97 0 7 7 31 77 0 2 2 0 98 8 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 7 0 6 5 7 6 105 0 5 0 3 4 5 3 105 0 2 2 0 98 8 1 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
1 0 39 37 30 28 23 21 20 19 18 16 12 10 7 5 0 49 1 49 9 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = three;
unicode = 0033;
},
{
glyphname = three.oldstyle;
lastChange = "2018-08-16 03:37:30 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"721 297 OFFCURVE",
"670.333 361 OFFCURVE",
"569 395 CURVE",
"563 397.667 OFFCURVE",
"560 400.667 OFFCURVE",
"560 404 CURVE SMOOTH",
"560 407.333 OFFCURVE",
"563.333 412 OFFCURVE",
"570 418 CURVE SMOOTH",
"579.333 426.667 OFFCURVE",
"595.333 437.667 OFFCURVE",
"618 451 CURVE SMOOTH",
"756 533.667 OFFCURVE",
"825 616 OFFCURVE",
"825 698 CURVE SMOOTH",
"825 758 OFFCURVE",
"807 798.667 OFFCURVE",
"771 820 CURVE SMOOTH",
"735 841.333 OFFCURVE",
"697 852 OFFCURVE",
"657 852 CURVE SMOOTH",
"521 852 OFFCURVE",
"363.667 781.333 OFFCURVE",
"297 688 CURVE SMOOTH",
"287.654 673.982 OFFCURVE",
"312.54 650.54 OFFCURVE",
"326 664 CURVE",
"391.333 722.667 OFFCURVE",
"464 752 OFFCURVE",
"544 752 CURVE SMOOTH",
"618.667 752 OFFCURVE",
"656.333 720.333 OFFCURVE",
"657 657 CURVE SMOOTH",
"657 586.333 OFFCURVE",
"614 518.333 OFFCURVE",
"528 453 CURVE SMOOTH",
"498 430.333 OFFCURVE",
"472 413 OFFCURVE",
"450 401 CURVE SMOOTH",
"421.333 385 OFFCURVE",
"354.667 352.333 OFFCURVE",
"250 303 CURVE SMOOTH",
"242.667 299.667 OFFCURVE",
"239 289.167 OFFCURVE",
"239 271.5 CURVE SMOOTH",
"239 253.833 OFFCURVE",
"247.333 246 OFFCURVE",
"264 248 CURVE",
"270.667 251.333 OFFCURVE",
"289.667 261 OFFCURVE",
"321 277 CURVE SMOOTH",
"352.333 293 OFFCURVE",
"378.333 301 OFFCURVE",
"399 301 CURVE SMOOTH",
"488.333 301 OFFCURVE",
"539 248 OFFCURVE",
"539 156 CURVE SMOOTH",
"539 30.667 OFFCURVE",
"463 -103.667 OFFCURVE",
"335 -201 CURVE SMOOTH",
"271 -249.667 OFFCURVE",
"207 -274 OFFCURVE",
"143 -274 CURVE SMOOTH",
"128.333 -274 OFFCURVE",
"112.167 -270 OFFCURVE",
"94.5 -262 CURVE SMOOTH",
"76.833 -254 OFFCURVE",
"63.333 -250 OFFCURVE",
"54 -250 CURVE SMOOTH",
"14 -250 OFFCURVE",
"-20 -281 OFFCURVE",
"-20 -309 CURVE SMOOTH",
"-20 -349 OFFCURVE",
"1 -377 OFFCURVE",
"49 -377 CURVE SMOOTH",
"109 -377 OFFCURVE",
"266.5 -317 OFFCURVE",
"428.5 -205 CURVE SMOOTH",
"590.5 -93 OFFCURVE",
"721 69.667 OFFCURVE",
"721 203 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"111 -377 OFFCURVE",
"276 -304 OFFCURVE",
"401 -207 CURVE SMOOTH",
"562 -83 OFFCURVE",
"640 71 OFFCURVE",
"640 206 CURVE SMOOTH",
"640 307 OFFCURVE",
"585 389 OFFCURVE",
"425 429 CURVE",
"383 374 LINE",
"693 527 OFFCURVE",
"693 659 OFFCURVE",
"693 711 CURVE SMOOTH",
"693 818 OFFCURVE",
"617 870 OFFCURVE",
"503 870 CURVE SMOOTH",
"378 870 OFFCURVE",
"230 776 OFFCURVE",
"176 688 CURVE",
"209 664 LINE",
"280 735 OFFCURVE",
"370 790 OFFCURVE",
"433 790 CURVE SMOOTH",
"513 790 OFFCURVE",
"553 750 OFFCURVE",
"553 675 CURVE SMOOTH",
"553 577 OFFCURVE",
"498 498 OFFCURVE",
"393 434 CURVE SMOOTH",
"320 390 OFFCURVE",
"224 338 OFFCURVE",
"162 310 CURVE",
"183 253 LINE",
"230 289 OFFCURVE",
"290 327 OFFCURVE",
"345 327 CURVE SMOOTH",
"457 327 OFFCURVE",
"496 250 OFFCURVE",
"496 153 CURVE SMOOTH",
"496 -50 OFFCURVE",
"332 -274 OFFCURVE",
"129 -274 CURVE SMOOTH",
"114 -274 OFFCURVE",
"98 -270 OFFCURVE",
"79 -262 CURVE SMOOTH",
"61 -254 OFFCURVE",
"45 -250 OFFCURVE",
"33 -250 CURVE SMOOTH",
"2 -250 OFFCURVE",
"-29 -283 OFFCURVE",
"-29 -319 CURVE SMOOTH",
"-29 -349 OFFCURVE",
"-5 -377 OFFCURVE",
"46 -377 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 49 values pushed */
0 2 0 1 0 2 1 131 0 3 1 4 1 3 4 131 0 0 0 1 3 0 1 109 0 4 5 5 4 93 0 4 4 5 97 0 5 4 5 81 40 44 37 34 20 36 6 7 28 
CALL[ ]\011/* CallFunction */";
};
width = 778;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"881 711 OFFCURVE",
"872 735 QCURVE",
"858 764 LINE",
"842 788 LINE",
"783 852 OFFCURVE",
"662 852 QCURVE SMOOTH",
"569 852 OFFCURVE",
"469 801 QCURVE SMOOTH",
"362 746 OFFCURVE",
"307 672 QCURVE",
"305 670 LINE",
"303 659 LINE",
"306 643 OFFCURVE",
"326 633 QCURVE",
"340 629 LINE",
"348 633 LINE",
"465 729 OFFCURVE",
"551 729 QCURVE SMOOTH",
"568 729 OFFCURVE",
"580 725 QCURVE",
"600 715 LINE",
"639 690 OFFCURVE",
"639 647 QCURVE SMOOTH",
"639 525 OFFCURVE",
"537 451 QCURVE SMOOTH",
"446 383 OFFCURVE",
"262 303 QCURVE SMOOTH",
"252 299 OFFCURVE",
"252 287 QCURVE",
"254 268 LINE",
"265 240 OFFCURVE",
"281 236 QCURVE",
"289 238 LINE",
"293 242 OFFCURVE",
"303 246 QCURVE",
"377 281 OFFCURVE",
"416 281 QCURVE SMOOTH",
"452 281 OFFCURVE",
"477 258 QCURVE",
"520 224 OFFCURVE",
"520 154 QCURVE",
"518 139 OFFCURVE",
"518 125 QCURVE",
"510 -10 OFFCURVE",
"434 -96 QCURVE SMOOTH",
"293 -256 OFFCURVE",
"195 -256 QCURVE SMOOTH",
"172 -256 OFFCURVE",
"131 -233 QCURVE SMOOTH",
"84 -207 OFFCURVE",
"66 -207 QCURVE SMOOTH",
"37 -207 OFFCURVE",
"8 -225 QCURVE SMOOTH",
"-39 -252 OFFCURVE",
"-39 -291 QCURVE SMOOTH",
"-38 -377 OFFCURVE",
"68 -377 QCURVE SMOOTH",
"97 -376 OFFCURVE",
"150 -360 QCURVE SMOOTH",
"305 -313 OFFCURVE",
"469 -207 QCURVE SMOOTH",
"555 -152 OFFCURVE",
"625 -82 QCURVE SMOOTH",
"776 72 OFFCURVE",
"776 207 QCURVE SMOOTH",
"777 250 OFFCURVE",
"752 291 QCURVE SMOOTH",
"713 358 OFFCURVE",
"637 389 QCURVE",
"633 389 OFFCURVE",
"631 391 QCURVE",
"616 397 OFFCURVE",
"617 416 OFFCURVE",
"633 424 QCURVE SMOOTH",
"641 428 OFFCURVE",
"647 430 QCURVE",
"881 561 OFFCURVE",
"881 682 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"126 -377 OFFCURVE",
"323 -282 OFFCURVE",
"426 -205 CURVE SMOOTH",
"636 -49 OFFCURVE",
"683 110 OFFCURVE",
"683 191 CURVE SMOOTH",
"683 284 OFFCURVE",
"620 377 OFFCURVE",
"456 451 CURVE",
"441 402 LINE",
"711 511 OFFCURVE",
"728 622 OFFCURVE",
"728 682 CURVE SMOOTH",
"728 804 OFFCURVE",
"633 870 OFFCURVE",
"495 870 CURVE SMOOTH",
"368 870 OFFCURVE",
"220 793 OFFCURVE",
"152 684 CURVE",
"195 642 LINE",
"270 717 OFFCURVE",
"330 752 OFFCURVE",
"382 752 CURVE SMOOTH",
"458 752 OFFCURVE",
"493 711 OFFCURVE",
"493 644 CURVE SMOOTH",
"493 567 OFFCURVE",
"454 497 OFFCURVE",
"351 426 CURVE SMOOTH",
"316 402 OFFCURVE",
"240 362 OFFCURVE",
"147 317 CURVE",
"171 242 LINE",
"234 278 OFFCURVE",
"280 293 OFFCURVE",
"307 293 CURVE SMOOTH",
"392 293 OFFCURVE",
"436 221 OFFCURVE",
"436 132 CURVE SMOOTH",
"436 -11 OFFCURVE",
"307 -254 OFFCURVE",
"145 -254 CURVE SMOOTH",
"128 -254 OFFCURVE",
"109 -245 OFFCURVE",
"88 -231 CURVE SMOOTH",
"65 -216 OFFCURVE",
"48 -209 OFFCURVE",
"37 -209 CURVE SMOOTH",
"-29 -209 OFFCURVE",
"-64 -252 OFFCURVE",
"-64 -304 CURVE SMOOTH",
"-64 -352 OFFCURVE",
"-24 -377 OFFCURVE",
"40 -377 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 73 values pushed */
67 49 45 3 6 73 0 2 0 1 0 2 1 131 0 3 1 5 1 3 5 131 0 5 4 1 5 4 129 0 4 6 1 4 6 129 0 6 6 132 0 0 2 1 0 93 0 0 0 1 97 0 1 0 1 81 73 71 64 62 61 60 42 40 32 30 27 26 22 20 7 7 22 
CALL[ ]\011/* CallFunction */";
};
width = 813;
}
);
note = three.oldstyle;
},
{
glyphname = threequarters;
lastChange = "2018-08-16 04:22:35 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1316 1428 LINE",
"300 -71 LINE",
"377 -111 LINE",
"1396 1391 LINE"
);
},
{
closed = 1;
nodes = (
"643 674 OFFCURVE",
"643 844 CURVE SMOOTH",
"643 923 OFFCURVE",
"605 979 OFFCURVE",
"504 1007 CURVE",
"650 1085 OFFCURVE",
"668 1170 OFFCURVE",
"668 1224 CURVE SMOOTH",
"668 1312 OFFCURVE",
"604 1381 OFFCURVE",
"509 1381 CURVE SMOOTH",
"416 1381 OFFCURVE",
"340 1329 OFFCURVE",
"263 1237 CURVE",
"295 1210 LINE",
"344 1268 OFFCURVE",
"396 1305 OFFCURVE",
"453 1305 CURVE SMOOTH",
"505 1305 OFFCURVE",
"543 1268 OFFCURVE",
"543 1206 CURVE SMOOTH",
"543 1139 OFFCURVE",
"491 1008 OFFCURVE",
"298 1008 CURVE",
"289 947 LINE",
"311 954 OFFCURVE",
"336 958 OFFCURVE",
"363 958 CURVE SMOOTH",
"453 958 OFFCURVE",
"505 899 OFFCURVE",
"505 813 CURVE SMOOTH",
"505 733 OFFCURVE",
"443 557 OFFCURVE",
"329 557 CURVE SMOOTH",
"293 557 OFFCURVE",
"271 575 OFFCURVE",
"247 610 CURVE SMOOTH",
"228 638 OFFCURVE",
"207 658 OFFCURVE",
"186 658 CURVE SMOOTH",
"143 658 OFFCURVE",
"110 632 OFFCURVE",
"110 591 CURVE SMOOTH",
"110 534 OFFCURVE",
"182 500 OFFCURVE",
"284 500 CURVE SMOOTH",
"491 500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1458 248 LINE",
"1470 319 LINE",
"1381 319 LINE",
"1432 609 LINE",
"1309 609 LINE",
"1258 319 LINE",
"982 319 LINE",
"1518 905 LINE",
"1507 922 LINE",
"1444 922 LINE",
"1308 759 OFFCURVE",
"1238 678 OFFCURVE",
"1139 571 CURVE SMOOTH",
"874 284 LINE",
"901 248 LINE",
"1246 248 LINE",
"1218 92 LINE SMOOTH",
"1212 56 OFFCURVE",
"1176 38 OFFCURVE",
"1105 38 CURVE",
"1098 0 LINE",
"1404 0 LINE",
"1411 38 LINE",
"1362 38 OFFCURVE",
"1340 52 OFFCURVE",
"1340 81 CURVE SMOOTH",
"1340 84 OFFCURVE",
"1340 88 OFFCURVE",
"1341 92 CURVE SMOOTH",
"1369 248 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 20 values pushed */
90 29 2 4 5 17 1 1 3 76 58 2 7 10 3 76 69 1 8 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 1 3 2 2 1 114 0 6 0 5 4 6 5 105 0 4 0 3 1 4 3 105 0 2 0 0 11 2 0 106 12 1 11 13 1 10 7 11 10 105 9 1 7 8 8 7 89 9 1 7 7 8 97 0 8 7 8 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 1 3 2 3 1 2 128 0 6 0 5 4 6 5 105 0 4 0 3 1 4 3 105 0 2 0 0 11 2 0 106 12 1 11 13 1 10 7 11 10 105 9 1 7 8 8 7 89 9 1 7 7 8 97 0 8 7 8 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 24 values pushed */
110 108 105 104 95 93 80 78 74 72 68 67 62 61 39 36 36 35 33 35 18 14 12 29 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1570;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1188 1424 LINE",
"393 -89 LINE",
"498 -131 LINE",
"1296 1387 LINE"
);
},
{
closed = 1;
nodes = (
"665 701 OFFCURVE",
"665 830 CURVE SMOOTH",
"665 905 OFFCURVE",
"632 960 OFFCURVE",
"546 993 CURVE",
"654 1055 OFFCURVE",
"688 1132 OFFCURVE",
"688 1203 CURVE SMOOTH",
"688 1293 OFFCURVE",
"620 1364 OFFCURVE",
"519 1364 CURVE SMOOTH",
"415 1364 OFFCURVE",
"341 1305 OFFCURVE",
"260 1209 CURVE",
"297 1180 LINE",
"345 1236 OFFCURVE",
"399 1281 OFFCURVE",
"461 1281 CURVE SMOOTH",
"511 1281 OFFCURVE",
"539 1242 OFFCURVE",
"539 1186 CURVE SMOOTH",
"539 1105 OFFCURVE",
"477 995 OFFCURVE",
"307 995 CURVE",
"299 925 LINE",
"321 932 OFFCURVE",
"345 936 OFFCURVE",
"371 936 CURVE SMOOTH",
"453 936 OFFCURVE",
"503 880 OFFCURVE",
"503 798 CURVE SMOOTH",
"503 730 OFFCURVE",
"446 549 OFFCURVE",
"340 549 CURVE SMOOTH",
"302 549 OFFCURVE",
"288 568 OFFCURVE",
"262 605 CURVE SMOOTH",
"244 629 OFFCURVE",
"225 654 OFFCURVE",
"199 654 CURVE SMOOTH",
"121 654 OFFCURVE",
"108 605 OFFCURVE",
"108 578 CURVE SMOOTH",
"108 510 OFFCURVE",
"204 483 OFFCURVE",
"293 483 CURVE SMOOTH",
"547 483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1474 241 LINE",
"1490 328 LINE",
"1410 328 LINE",
"1459 606 LINE",
"1312 606 LINE",
"1263 328 LINE",
"1005 328 LINE",
"1534 895 LINE",
"1519 918 LINE",
"1448 918 LINE",
"1334 778 OFFCURVE",
"1301 740 OFFCURVE",
"1177 607 CURVE SMOOTH",
"870 278 LINE",
"901 241 LINE",
"1247 241 LINE",
"1223 101 LINE SMOOTH",
"1216 63 OFFCURVE",
"1181 44 OFFCURVE",
"1114 44 CURVE",
"1106 0 LINE",
"1425 0 LINE",
"1433 44 LINE",
"1389 44 OFFCURVE",
"1369 58 OFFCURVE",
"1369 87 CURVE SMOOTH",
"1369 91 OFFCURVE",
"1369 96 OFFCURVE",
"1370 101 CURVE SMOOTH",
"1394 241 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 121 values pushed */
29 1 3 5 1 76 73 1 0 73 17 1 1 8 7 8 1 7 128 0 3 5 4 5 3 4 128 0 8 0 7 6 8 7 105 0 6 0 5 3 6 5 105 10 1 4 0 2 9 4 2 105 11 1 9 16 1 12 13 9 12 106 15 1 13 0 0 13 89 15 1 13 13 0 97 14 1 0 13 0 81 0 0 82 80 77 75 72 71 67 66 63 61 59 58 56 55 53 51 45 43 38 36 33 31 28 26 22 20 17 15 11 9 0 3 0 3 17 18 8 23 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1588;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = tilde;
lastChange = "2018-08-14 11:40:40 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"728 1028 OFFCURVE",
"786 1130 OFFCURVE",
"803 1243 CURVE",
"750 1243 LINE",
"749 1198 OFFCURVE",
"708 1142 OFFCURVE",
"655 1142 CURVE SMOOTH",
"580 1142 OFFCURVE",
"432 1235 OFFCURVE",
"343 1235 CURVE SMOOTH",
"242 1235 OFFCURVE",
"183 1165 OFFCURVE",
"168 1024 CURVE",
"221 1024 LINE",
"227 1089 OFFCURVE",
"261 1122 OFFCURVE",
"314 1122 CURVE SMOOTH",
"406 1122 OFFCURVE",
"531 1028 OFFCURVE",
"629 1028 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 40 values pushed */
0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 4 1 0 3 0 81 1 0 13 12 11 9 3 2 0 20 1 20 5 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 569;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"729 1018 OFFCURVE",
"785 1140 OFFCURVE",
"803 1253 CURVE",
"750 1253 LINE",
"748 1208 OFFCURVE",
"707 1154 OFFCURVE",
"654 1154 CURVE SMOOTH",
"579 1154 OFFCURVE",
"431 1245 OFFCURVE",
"342 1245 CURVE SMOOTH",
"241 1245 OFFCURVE",
"184 1155 OFFCURVE",
"168 1014 CURVE",
"221 1014 LINE",
"228 1079 OFFCURVE",
"262 1109 OFFCURVE",
"315 1109 CURVE SMOOTH",
"407 1109 OFFCURVE",
"532 1018 OFFCURVE",
"630 1018 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 0 0 3 0 81 33 40 33 38 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 579;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = tildecomb;
lastChange = "2018-08-17 12:07:07 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{79, 856}";
},
{
name = top;
position = "{147, 1243}";
}
);
components = (
{
name = tilde;
transform = "{1, 0, 0, 1, -358, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 40 values pushed */
0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 4 1 0 3 0 81 1 0 13 12 11 9 3 2 0 20 1 20 5 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{78, 856}";
},
{
name = top;
position = "{148, 1253}";
}
);
components = (
{
name = tilde;
transform = "{1, 0, 0, 1, -359, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = tildecomb;
unicode = 0303;
},
{
glyphname = trademark;
lastChange = "2018-08-16 19:44:58 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"2093 1265 LINE",
"2093 1335 OFFCURVE",
"2130 1370 OFFCURVE",
"2205 1370 CURVE",
"2205 1423 LINE",
"2078 1423 LINE SMOOTH",
"2033 1423 OFFCURVE",
"2003 1404 OFFCURVE",
"1988 1374 CURVE SMOOTH",
"1694 769 LINE",
"1692 769 LINE",
"1406 1371 LINE SMOOTH",
"1391 1403 OFFCURVE",
"1355 1423 OFFCURVE",
"1300 1423 CURVE SMOOTH",
"1181 1423 LINE",
"1181 1370 LINE",
"1255 1370 OFFCURVE",
"1292 1346 OFFCURVE",
"1292 1299 CURVE SMOOTH",
"1292 1267 LINE",
"1257 722 LINE SMOOTH",
"1254 672 OFFCURVE",
"1224 649 OFFCURVE",
"1165 649 CURVE",
"1165 600 LINE",
"1407 600 LINE",
"1407 649 LINE",
"1345 649 OFFCURVE",
"1314 672 OFFCURVE",
"1314 722 CURVE",
"1344 1236 LINE",
"1356 1236 LINE",
"1642 600 LINE",
"1672 600 LINE",
"1984 1234 LINE",
"1994 1234 LINE",
"1997 722 LINE SMOOTH",
"1997 676 OFFCURVE",
"1967 649 OFFCURVE",
"1908 649 CURVE",
"1908 600 LINE",
"2191 600 LINE",
"2191 649 LINE",
"2130 649 OFFCURVE",
"2099 676 OFFCURVE",
"2098 722 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"728 1369 LINE",
"918 1369 LINE SMOOTH",
"998 1369 OFFCURVE",
"1069 1295 OFFCURVE",
"1069 1206 CURVE",
"1119 1206 LINE",
"1119 1423 LINE",
"217 1423 LINE",
"217 1206 LINE",
"268 1206 LINE",
"268 1290 OFFCURVE",
"341 1369 OFFCURVE",
"419 1369 CURVE SMOOTH",
"609 1369 LINE",
"609 722 LINE SMOOTH",
"609 676 OFFCURVE",
"570 653 OFFCURVE",
"493 653 CURVE",
"493 600 LINE",
"839 600 LINE",
"839 653 LINE",
"765 653 OFFCURVE",
"728 676 OFFCURVE",
"728 722 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1334 600 LINE",
"1343 649 LINE",
"1281 649 OFFCURVE",
"1254 672 OFFCURVE",
"1263 722 CURVE",
"1394 1281 LINE",
"1384 1280 LINE",
"1569 600 LINE",
"1599 600 LINE",
"2057 1284 LINE",
"2042 1284 LINE",
"1946 722 LINE SMOOTH",
"1938 676 OFFCURVE",
"1903 649 OFFCURVE",
"1844 649 CURVE",
"1835 600 LINE",
"2118 600 LINE",
"2127 649 LINE",
"2066 649 OFFCURVE",
"2040 676 OFFCURVE",
"2047 722 CURVE SMOOTH",
"2138 1265 LINE",
"2150 1335 OFFCURVE",
"2193 1370 OFFCURVE",
"2268 1370 CURVE",
"2278 1423 LINE",
"2151 1423 LINE SMOOTH",
"2106 1423 OFFCURVE",
"2072 1404 OFFCURVE",
"2052 1374 CURVE SMOOTH",
"1634 743 LINE",
"1657 743 LINE",
"1469 1371 LINE SMOOTH",
"1460 1403 OFFCURVE",
"1428 1423 OFFCURVE",
"1373 1423 CURVE SMOOTH",
"1254 1423 LINE",
"1244 1370 LINE",
"1318 1370 OFFCURVE",
"1351 1346 OFFCURVE",
"1343 1299 CURVE SMOOTH",
"1337 1267 LINE",
"1206 722 LINE SMOOTH",
"1194 672 OFFCURVE",
"1160 649 OFFCURVE",
"1101 649 CURVE",
"1092 600 LINE"
);
},
{
closed = 1;
nodes = (
"766 600 LINE",
"776 653 LINE",
"702 653 OFFCURVE",
"669 676 OFFCURVE",
"677 722 CURVE SMOOTH",
"791 1369 LINE",
"981 1369 LINE SMOOTH",
"1061 1369 OFFCURVE",
"1119 1295 OFFCURVE",
"1103 1206 CURVE",
"1153 1206 LINE",
"1192 1423 LINE",
"290 1423 LINE",
"251 1206 LINE",
"302 1206 LINE",
"317 1290 OFFCURVE",
"404 1369 OFFCURVE",
"482 1369 CURVE SMOOTH",
"672 1369 LINE",
"558 722 LINE SMOOTH",
"550 676 OFFCURVE",
"507 653 OFFCURVE",
"430 653 CURVE",
"420 600 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
69 54 2 6 7 112 98 17 3 14 6 61 1 0 14 86 78 44 36 12 4 6 1 0 4 76 84 42 24 10 4 1 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
69 54 2 6 7 112 98 17 3 14 13 61 1 0 14 86 78 44 36 12 4 6 1 0 4 76 84 42 24 10 4 1 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
16 1 14 6 0 6 14 0 128 12 10 5 3 2 5 0 11 4 2 1 0 1 101 17 13 9 3 6 6 7 97 15 8 2 7 7 98 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
16 1 14 6 0 6 14 0 128 15 8 2 7 17 13 9 3 6 14 7 6 105 12 10 5 3 2 5 0 1 1 0 89 12 10 5 3 2 5 0 0 1 97 11 4 2 1 0 1 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
16 1 14 13 0 13 14 0 128 9 1 6 13 7 6 89 15 8 2 7 17 1 13 14 7 13 103 12 10 5 3 2 5 0 1 1 0 89 12 10 5 3 2 5 0 0 1 97 11 4 2 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 36 values pushed */
122 119 115 114 110 104 101 100 95 92 89 87 83 81 76 75 72 70 67 64 59 57 52 51 47 45 41 39 34 33 36 37 17 18 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 2144;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1425 592 LINE",
"1437 658 LINE",
"1369 653 OFFCURVE",
"1346 669 OFFCURVE",
"1355 722 CURVE",
"1474 1228 LINE",
"1450 1228 LINE",
"1624 592 LINE",
"1686 592 LINE",
"2110 1226 LINE",
"2084 1226 LINE",
"1998 722 LINE SMOOTH",
"1989 672 OFFCURVE",
"1958 652 OFFCURVE",
"1898 658 CURVE",
"1886 592 LINE",
"2209 592 LINE",
"2221 658 LINE",
"2157 652 OFFCURVE",
"2131 672 OFFCURVE",
"2139 722 CURVE SMOOTH",
"2230 1265 LINE",
"2243 1339 OFFCURVE",
"2283 1368 OFFCURVE",
"2359 1361 CURVE",
"2371 1431 LINE",
"2224 1431 LINE SMOOTH",
"2175 1431 OFFCURVE",
"2128 1410 OFFCURVE",
"2107 1378 CURVE SMOOTH",
"1709 777 LINE",
"1739 777 LINE",
"1560 1374 LINE SMOOTH",
"1549 1409 OFFCURVE",
"1505 1431 OFFCURVE",
"1446 1431 CURVE SMOOTH",
"1307 1431 LINE",
"1295 1361 LINE",
"1375 1365 OFFCURVE",
"1403 1348 OFFCURVE",
"1395 1299 CURVE SMOOTH",
"1389 1268 LINE",
"1258 723 LINE SMOOTH",
"1245 669 OFFCURVE",
"1218 653 OFFCURVE",
"1155 658 CURVE",
"1143 592 LINE"
);
},
{
closed = 1;
nodes = (
"807 592 LINE",
"819 661 LINE",
"739 658 OFFCURVE",
"710 674 OFFCURVE",
"719 722 CURVE SMOOTH",
"832 1361 LINE",
"1002 1361 LINE SMOOTH",
"1074 1361 OFFCURVE",
"1123 1284 OFFCURVE",
"1104 1198 CURVE",
"1194 1198 LINE",
"1235 1431 LINE",
"293 1431 LINE",
"252 1198 LINE",
"343 1198 LINE",
"353 1280 OFFCURVE",
"434 1361 OFFCURVE",
"503 1361 CURVE SMOOTH",
"673 1361 LINE",
"560 722 LINE SMOOTH",
"552 675 OFFCURVE",
"516 658 OFFCURVE",
"433 661 CURVE",
"421 592 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
85 1 2 3 0 1 76 75 1 1 74 95 1 4 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
85 1 2 3 0 1 76 75 1 7 74 95 1 4 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
15 13 12 10 5 5 3 14 11 2 4 3 4 99 9 6 2 3 0 0 1 97 8 7 2 1 1 31 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
8 7 2 1 9 6 2 3 0 3 1 0 105 15 13 12 10 5 5 3 4 4 3 89 15 13 12 10 5 5 3 3 4 95 14 11 2 4 3 4 79 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 9 0 1 9 89 8 7 2 1 6 2 2 0 3 1 0 105 15 13 12 10 5 5 3 4 4 3 89 15 13 12 10 5 5 3 3 4 95 14 11 2 4 3 4 79 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
9 1 6 0 1 6 89 8 7 2 1 2 1 0 3 1 0 105 15 13 12 10 5 5 3 4 4 3 89 15 13 12 10 5 5 3 3 4 95 14 11 2 4 3 4 79 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 7 1 6 7 89 9 1 6 0 1 6 89 8 1 1 2 1 0 3 1 0 105 15 13 12 10 5 5 3 4 4 3 89 15 13 12 10 5 5 3 3 4 95 14 11 2 4 3 4 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
133 131 128 124 121 120 100 98 94 91 88 87 80 78 41 51 22 35 67 21 43 103 51 16 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 2237;
}
);
note = trademark;
unicode = 2122;
},
{
glyphname = two;
lastChange = "2018-08-18 21:54:20 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"462 495 OFFCURVE",
"690 704 OFFCURVE",
"769 807 CURVE SMOOTH",
"848 909 OFFCURVE",
"887 1007 OFFCURVE",
"887 1102 CURVE SMOOTH",
"887 1237 OFFCURVE",
"800 1333 OFFCURVE",
"657 1333 CURVE SMOOTH",
"482 1333 OFFCURVE",
"310 1210 OFFCURVE",
"191 1054 CURVE",
"177 1040 OFFCURVE",
"222 1006 OFFCURVE",
"240 1024 CURVE",
"339 1145 OFFCURVE",
"438 1206 OFFCURVE",
"535 1206 CURVE SMOOTH",
"627 1206 OFFCURVE",
"696 1157 OFFCURVE",
"696 1048 CURVE SMOOTH",
"696 912 OFFCURVE",
"561 727 OFFCURVE",
"303 473 CURVE SMOOTH",
"174 346 OFFCURVE",
"14 204 OFFCURVE",
"-175 49 CURVE SMOOTH",
"-184 42 OFFCURVE",
"-189 33 OFFCURVE",
"-189 22 CURVE SMOOTH",
"-189 2 OFFCURVE",
"-178 -8 OFFCURVE",
"-155 -8 CURVE",
"-68 -3 OFFCURVE",
"46 0 OFFCURVE",
"188 0 CURVE SMOOTH",
"330 0 OFFCURVE",
"442 -3 OFFCURVE",
"523 -8 CURVE",
"548 -8 OFFCURVE",
"568 3 OFFCURVE",
"584 25 CURVE SMOOTH",
"742 244 LINE",
"743 245 OFFCURVE",
"743 246 OFFCURVE",
"743 248 CURVE SMOOTH",
"743 261 OFFCURVE",
"735 267 OFFCURVE",
"719 267 CURVE SMOOTH",
"702 267 OFFCURVE",
"693 265 OFFCURVE",
"690 260 CURVE",
"670 233 OFFCURVE",
"648 211 OFFCURVE",
"625 194 CURVE SMOOTH",
"573 156 OFFCURVE",
"494 137 OFFCURVE",
"388 137 CURVE SMOOTH",
"91 137 LINE SMOOTH",
"73 137 OFFCURVE",
"64 141 OFFCURVE",
"64 149 CURVE SMOOTH",
"64 156 OFFCURVE",
"72 167 OFFCURVE",
"87 180 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"591 0 LINE",
"745 234 LINE",
"692 250 LINE",
"631 152 OFFCURVE",
"532 117 OFFCURVE",
"398 117 CURVE SMOOTH",
"43 117 LINE",
"428 498 LINE SMOOTH",
"655 722 OFFCURVE",
"791 883 OFFCURVE",
"791 1095 CURVE SMOOTH",
"791 1234 OFFCURVE",
"721 1333 OFFCURVE",
"554 1333 CURVE SMOOTH",
"386 1333 OFFCURVE",
"229 1214 OFFCURVE",
"122 1055 CURVE",
"173 1024 LINE",
"262 1145 OFFCURVE",
"359 1226 OFFCURVE",
"455 1226 CURVE SMOOTH",
"572 1226 OFFCURVE",
"653 1166 OFFCURVE",
"653 1050 CURVE SMOOTH",
"653 986 OFFCURVE",
"627 892 OFFCURVE",
"578 813 CURVE SMOOTH",
"453 612 OFFCURVE",
"215 356 OFFCURVE",
"-134 49 CURVE",
"-121 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
21 1 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 3 97 0 3 3 92 77 0 0 0 1 95 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 3 0 2 0 3 2 105 0 0 0 1 95 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 0 3 2 105 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
40 41 90 50 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 726;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"899 280 OFFCURVE",
"821 311 OFFCURVE",
"807 291 QCURVE SMOOTH",
"758 225 OFFCURVE",
"649 193 OFFCURVE",
"545 193 QCURVE SMOOTH",
"250 193 LINE",
"279 215 OFFCURVE",
"502 391 OFFCURVE",
"678 538 OFFCURVE",
"752 610 QCURVE SMOOTH",
"881 733 OFFCURVE",
"1040 962 OFFCURVE",
"1040 1087 QCURVE SMOOTH",
"1040 1196 OFFCURVE",
"897 1333 OFFCURVE",
"772 1333 QCURVE SMOOTH",
"645 1333 OFFCURVE",
"403 1174 OFFCURVE",
"309 1055 QCURVE SMOOTH",
"293 1036 OFFCURVE",
"351 1000 OFFCURVE",
"365 1020 QCURVE",
"504 1184 OFFCURVE",
"651 1184 QCURVE SMOOTH",
"713 1184 OFFCURVE",
"778 1110 OFFCURVE",
"778 1049 QCURVE SMOOTH",
"779 905 OFFCURVE",
"543 631 QCURVE SMOOTH",
"424 492 OFFCURVE",
"246 328 QCURVE SMOOTH",
"78 174 OFFCURVE",
"-43 80 QCURVE",
"-76 52 OFFCURVE",
"-76 27 QCURVE",
"-74 -8 OFFCURVE",
"-33 -8 QCURVE SMOOTH",
"-16 -8 OFFCURVE",
"182 0 OFFCURVE",
"311 0 QCURVE SMOOTH",
"444 0 OFFCURVE",
"604 -8 OFFCURVE",
"635 -8 QCURVE SMOOTH",
"696 -8 OFFCURVE",
"725 31 QCURVE SMOOTH",
"885 260 LINE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"668 0 LINE",
"826 266 LINE",
"749 297 LINE",
"684 201 OFFCURVE",
"623 193 OFFCURVE",
"492 193 CURVE SMOOTH",
"196 193 LINE",
"538 489 LINE SMOOTH",
"853 762 OFFCURVE",
"907 948 OFFCURVE",
"907 1057 CURVE SMOOTH",
"907 1219 OFFCURVE",
"796 1333 OFFCURVE",
"614 1333 CURVE SMOOTH",
"446 1333 OFFCURVE",
"290 1216 OFFCURVE",
"178 1055 CURVE",
"236 1020 LINE",
"317 1129 OFFCURVE",
"407 1184 OFFCURVE",
"507 1184 CURVE SMOOTH",
"600 1184 OFFCURVE",
"649 1137 OFFCURVE",
"649 1041 CURVE SMOOTH",
"649 975 OFFCURVE",
"629 907 OFFCURVE",
"582 823 CURVE SMOOTH",
"459 602 OFFCURVE",
"145 276 OFFCURVE",
"-85 80 CURVE",
"-67 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 2 97 0 2 2 31 77 0 3 3 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 1 3 2 1 105 0 3 3 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 1 3 2 1 105 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
41 38 43 130 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = two;
unicode = 0032;
},
{
glyphname = two.oldstyle;
lastChange = "2018-08-16 03:41:01 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"882.667 44 OFFCURVE",
"920.5 99.5 OFFCURVE",
"963.5 158.5 CURVE SMOOTH",
"1006.5 217.5 OFFCURVE",
"1028 249.167 OFFCURVE",
"1028 253.5 CURVE SMOOTH",
"1028 257.833 OFFCURVE",
"1024 262 OFFCURVE",
"1016 266 CURVE SMOOTH",
"1008 270 OFFCURVE",
"994.333 269.333 OFFCURVE",
"975 264 CURVE",
"885.667 154.667 OFFCURVE",
"839.333 119 OFFCURVE",
"778 119 CURVE SMOOTH",
"434 119 LINE SMOOTH",
"403.333 119 OFFCURVE",
"388 123.667 OFFCURVE",
"388 133 CURVE SMOOTH",
"388 142.333 OFFCURVE",
"398 155.333 OFFCURVE",
"418 172 CURVE SMOOTH",
"674 389 LINE SMOOTH",
"807.333 502.333 OFFCURVE",
"883 621.667 OFFCURVE",
"883 711 CURVE SMOOTH",
"883 799 OFFCURVE",
"802.667 852 OFFCURVE",
"692 852 CURVE SMOOTH",
"530.667 852 OFFCURVE",
"427 809.667 OFFCURVE",
"283 631 CURVE SMOOTH",
"269.762 613.349 OFFCURVE",
"309.391 585.391 OFFCURVE",
"332 608 CURVE",
"416 706.667 OFFCURVE",
"495.333 733 OFFCURVE",
"594 733 CURVE SMOOTH",
"644.667 733 OFFCURVE",
"690 691.667 OFFCURVE",
"690 621 CURVE SMOOTH",
"690 537 OFFCURVE",
"630 440.667 OFFCURVE",
"510 332 CURVE SMOOTH",
"478 303 LINE SMOOTH",
"365.333 200.333 OFFCURVE",
"251 114.333 OFFCURVE",
"135 45 CURVE SMOOTH",
"117.667 35 OFFCURVE",
"109 24 OFFCURVE",
"109 12 CURVE SMOOTH",
"109 -1.333 OFFCURVE",
"119.667 -8 OFFCURVE",
"141 -8 CURVE",
"195.667 -2.667 OFFCURVE",
"252.333 0 OFFCURVE",
"311 0 CURVE SMOOTH",
"727 0 LINE SMOOTH",
"749 0 OFFCURVE",
"790 -2.667 OFFCURVE",
"850 -8 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"814 68 OFFCURVE",
"864 153 OFFCURVE",
"922 245 CURVE",
"874 270 LINE",
"828 202 OFFCURVE",
"754 94 OFFCURVE",
"676 94 CURVE SMOOTH",
"220 94 LINE",
"217 81 LINE",
"714 468 OFFCURVE",
"715 602 OFFCURVE",
"715 695 CURVE SMOOTH",
"715 789 OFFCURVE",
"631 870 OFFCURVE",
"519 870 CURVE SMOOTH",
"348 870 OFFCURVE",
"242 800 OFFCURVE",
"137 631 CURVE",
"186 602 LINE",
"268 703 OFFCURVE",
"329 777 OFFCURVE",
"442 777 CURVE SMOOTH",
"523 777 OFFCURVE",
"574 723 OFFCURVE",
"574 652 CURVE SMOOTH",
"574 567 OFFCURVE",
"515 417 OFFCURVE",
"272 204 CURVE SMOOTH",
"194 136 OFFCURVE",
"93 67 OFFCURVE",
"31 29 CURVE",
"26 0 LINE",
"651 0 LINE",
"679 0 OFFCURVE",
"720 -3 OFFCURVE",
"775 -8 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
56 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 3 2 3 101 0 4 4 0 97 1 1 0 0 37 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
1 1 0 0 4 2 0 4 107 0 2 3 3 2 93 0 2 2 3 97 0 3 2 3 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
101 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 0 0 4 2 0 4 107 0 2 0 3 2 3 101 0 1 1 37 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 1 0 1 136 0 0 0 4 2 0 4 107 0 2 3 3 2 93 0 2 2 3 97 0 3 2 3 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
56 40 42 17 49 5 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 966;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1067 256 LINE",
"1067 262 OFFCURVE",
"1059 268 QCURVE",
"1037 289 OFFCURVE",
"1010 289 QCURVE SMOOTH",
"1001 289 OFFCURVE",
"997 285 QCURVE",
"973 256 OFFCURVE",
"965 248 QCURVE",
"902 180 OFFCURVE",
"834 180 QCURVE SMOOTH",
"537 180 LINE SMOOTH",
"512 180 OFFCURVE",
"504 188 QCURVE",
"502 193 OFFCURVE",
"502 197 QCURVE",
"501 210 OFFCURVE",
"530 233 QCURVE SMOOTH",
"715 379 LINE SMOOTH",
"723 385 OFFCURVE",
"729 391 QCURVE",
"938 557 OFFCURVE",
"938 684 QCURVE SMOOTH",
"938 752 OFFCURVE",
"883 797 QCURVE SMOOTH",
"815 852 OFFCURVE",
"711 852 QCURVE SMOOTH",
"649 852 OFFCURVE",
"598 842 QCURVE SMOOTH",
"475 815 OFFCURVE",
"375 711 QCURVE",
"293 618 LINE",
"291 610 LINE",
"291 600 OFFCURVE",
"303 590 QCURVE",
"322 573 OFFCURVE",
"340 573 QCURVE",
"348 574 OFFCURVE",
"352 578 QCURVE SMOOTH",
"381 608 LINE SMOOTH",
"477 707 OFFCURVE",
"586 707 QCURVE",
"607 706 OFFCURVE",
"621 700 QCURVE SMOOTH",
"672 678 OFFCURVE",
"672 602 QCURVE SMOOTH",
"672 581 OFFCURVE",
"668 561 QCURVE SMOOTH",
"643 453 OFFCURVE",
"528 344 QCURVE SMOOTH",
"518 334 OFFCURVE",
"504 322 QCURVE SMOOTH",
"297 142 OFFCURVE",
"162 70 QCURVE SMOOTH",
"127 51 OFFCURVE",
"117 31 QCURVE",
"113 18 LINE",
"115 8 OFFCURVE",
"123 2 QCURVE",
"137 -4 LINE",
"164 -6 LINE",
"221 0 OFFCURVE",
"330 0 QCURVE SMOOTH",
"743 0 LINE SMOOTH",
"803 0 OFFCURVE",
"877 -8 QCURVE",
"956 115 OFFCURVE",
"1065 250 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"815 78 OFFCURVE",
"867 167 OFFCURVE",
"920 249 CURVE",
"851 282 LINE",
"789 197 OFFCURVE",
"756 162 OFFCURVE",
"709 162 CURVE SMOOTH",
"279 162 LINE",
"294 136 LINE",
"649 431 OFFCURVE",
"754 571 OFFCURVE",
"754 691 CURVE SMOOTH",
"754 804 OFFCURVE",
"641 870 OFFCURVE",
"513 870 CURVE SMOOTH",
"320 870 OFFCURVE",
"253 810 OFFCURVE",
"121 639 CURVE",
"180 596 LINE",
"258 676 OFFCURVE",
"303 707 OFFCURVE",
"407 707 CURVE SMOOTH",
"465 707 OFFCURVE",
"505 659 OFFCURVE",
"505 593 CURVE SMOOTH",
"505 509 OFFCURVE",
"434 393 OFFCURVE",
"262 232 CURVE SMOOTH",
"187 162 OFFCURVE",
"110 99 OFFCURVE",
"15 42 CURVE",
"8 0 LINE",
"641 0 LINE",
"678 0 OFFCURVE",
"720 -3 OFFCURVE",
"769 -8 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
11 7 2 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 1 3 2 3 1 2 131 0 2 2 132 0 3 3 0 95 0 0 0 24 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 1 3 2 3 1 2 131 0 2 2 132 0 0 3 3 0 91 0 0 0 3 95 0 3 0 3 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
58 56 42 40 27 25 51 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 1001;
}
);
note = two.oldstyle;
},
{
glyphname = u;
lastChange = "2018-08-18 09:50:48 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{402, 0}";
},
{
name = ogonek;
position = "{784, 10}";
},
{
name = top;
position = "{502, 856}";
},
{
name = topright;
position = "{1008, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"541 -204 LINE",
"643 -204 LINE",
"1035 1257 LINE",
"933 1257 LINE"
);
},
{
closed = 1;
nodes = (
"80 -147 LINE",
"182 -147 LINE",
"574 1314 LINE",
"472 1314 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"280 -27 OFFCURVE",
"376 82 OFFCURVE",
"457 182 CURVE SMOOTH",
"522 263 OFFCURVE",
"596 367 OFFCURVE",
"657 466 CURVE",
"598 137 LINE SMOOTH",
"594 115 OFFCURVE",
"590 90 OFFCURVE",
"590 66 CURVE SMOOTH",
"590 16 OFFCURVE",
"606 -27 OFFCURVE",
"650 -27 CURVE SMOOTH",
"730 -27 OFFCURVE",
"806 34 OFFCURVE",
"904 156 CURVE",
"860 195 LINE",
"804 133 OFFCURVE",
"766 102 OFFCURVE",
"743 102 CURVE SMOOTH",
"697 102 OFFCURVE",
"704 157 OFFCURVE",
"712 203 CURVE SMOOTH",
"828 848 LINE",
"726 848 LINE",
"693 659 OFFCURVE",
"626 528 OFFCURVE",
"522 363 CURVE SMOOTH",
"464 271 OFFCURVE",
"331 102 OFFCURVE",
"272 102 CURVE SMOOTH",
"247 102 OFFCURVE",
"238 128 OFFCURVE",
"238 169 CURVE SMOOTH",
"238 213 OFFCURVE",
"248 273 OFFCURVE",
"259 334 CURVE SMOOTH",
"314 636 LINE SMOOTH",
"322 680 OFFCURVE",
"330 726 OFFCURVE",
"330 764 CURVE SMOOTH",
"330 814 OFFCURVE",
"317 852 OFFCURVE",
"270 852 CURVE SMOOTH",
"194 852 OFFCURVE",
"117 789 OFFCURVE",
"25 662 CURVE",
"69 625 LINE",
"119 692 OFFCURVE",
"146 711 OFFCURVE",
"180 711 CURVE SMOOTH",
"215 711 OFFCURVE",
"215 655 OFFCURVE",
"210 625 CURVE SMOOTH",
"130 180 LINE SMOOTH",
"123 142 OFFCURVE",
"119 106 OFFCURVE",
"119 75 CURVE SMOOTH",
"119 14 OFFCURVE",
"141 -27 OFFCURVE",
"202 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 44 values pushed */
62 1 3 4 20 1 0 3 2 76 0 3 3 4 97 6 1 4 4 95 77 5 1 0 0 1 97 2 1 1 1 93 1 78 37 38 44 23 38 42 19 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 953;
},
{
anchors = (
{
name = bottom;
position = "{421, 0}";
},
{
name = ogonek;
position = "{819, 10}";
},
{
name = top;
position = "{571, 856}";
},
{
name = topright;
position = "{1047, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"495 -260 LINE",
"689 -260 LINE",
"1071 1163 LINE",
"877 1163 LINE"
);
},
{
closed = 1;
nodes = (
"36 -225 LINE",
"230 -225 LINE",
"612 1198 LINE",
"418 1198 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"298 -27 OFFCURVE",
"371 23 OFFCURVE",
"445 99 CURVE SMOOTH",
"506 161 OFFCURVE",
"568 240 OFFCURVE",
"620 322 CURVE",
"594 170 LINE SMOOTH",
"590 150 OFFCURVE",
"588 130 OFFCURVE",
"588 110 CURVE SMOOTH",
"588 33 OFFCURVE",
"617 -27 OFFCURVE",
"700 -27 CURVE SMOOTH",
"779 -27 OFFCURVE",
"868 41 OFFCURVE",
"967 176 CURVE",
"910 225 LINE",
"866 169 OFFCURVE",
"834 142 OFFCURVE",
"817 142 CURVE SMOOTH",
"782 142 OFFCURVE",
"792 200 OFFCURVE",
"798 231 CURVE SMOOTH",
"909 848 LINE",
"716 848 LINE",
"677 638 OFFCURVE",
"659 545 OFFCURVE",
"558 372 CURVE SMOOTH",
"491 257 OFFCURVE",
"402 133 OFFCURVE",
"351 133 CURVE SMOOTH",
"334 133 OFFCURVE",
"328 155 OFFCURVE",
"328 184 CURVE SMOOTH",
"328 225 OFFCURVE",
"337 278 OFFCURVE",
"347 332 CURVE SMOOTH",
"404 639 LINE SMOOTH",
"409 664 OFFCURVE",
"411 689 OFFCURVE",
"411 712 CURVE SMOOTH",
"411 791 OFFCURVE",
"384 852 OFFCURVE",
"311 852 CURVE SMOOTH",
"222 852 OFFCURVE",
"134 780 OFFCURVE",
"42 646 CURVE",
"100 599 LINE",
"124 636 OFFCURVE",
"161 688 OFFCURVE",
"192 688 CURVE SMOOTH",
"219 688 OFFCURVE",
"213 654 OFFCURVE",
"206 616 CURVE SMOOTH",
"132 209 LINE SMOOTH",
"125 172 OFFCURVE",
"121 138 OFFCURVE",
"121 108 CURVE SMOOTH",
"121 26 OFFCURVE",
"151 -27 OFFCURVE",
"246 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
20 1 0 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 3 3 4 97 6 1 4 4 34 77 5 1 0 0 1 97 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
0 5 0 1 0 5 1 128 0 3 3 4 97 6 1 4 4 34 77 0 0 0 1 97 2 1 1 1 32 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
37 39 43 23 38 42 19 7 8 29 
CALL[ ]\011/* CallFunction */";
};
width = 992;
}
);
leftKerningGroup = u;
note = u;
unicode = 0075;
},
{
glyphname = uacute;
lastChange = "2018-08-17 12:56:16 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 357, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 411, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = "=u";
widthMetricsKey = "=u";
note = uacute;
unicode = 00FA;
},
{
glyphname = ubreve;
lastChange = "2018-08-17 12:56:16 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 425, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0306;
transform = "{1, 0, 0, 1, 492, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = "=u";
widthMetricsKey = "=u";
note = ubreve;
unicode = 016D;
},
{
glyphname = ucircumflex;
lastChange = "2018-08-17 12:56:16 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 448, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0302;
transform = "{1, 0, 0, 1, 527, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = "=u";
widthMetricsKey = "=u";
note = ucircumflex;
unicode = 00FB;
},
{
glyphname = udieresis;
lastChange = "2018-08-18 03:28:07 +0000";
layers = (
{
components = (
{
name = u;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 426, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 494, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = u;
widthMetricsKey = "=u";
note = udieresis;
unicode = 00FC;
},
{
glyphname = ugrave;
lastChange = "2018-08-17 12:56:16 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 489, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = "=u";
widthMetricsKey = "=u";
note = ugrave;
unicode = 00F9;
},
{
glyphname = umacron;
lastChange = "2018-08-17 12:56:16 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 429, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 491, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
leftMetricsKey = "=u";
widthMetricsKey = "=u";
note = umacron;
unicode = 016B;
},
{
glyphname = underscore;
lastChange = "2018-08-01 21:48:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1024 -154 LINE",
"0 -154 LINE",
"0 -256 LINE",
"1024 -256 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1061 -145 LINE",
"-37 -145 LINE",
"-37 -266 LINE",
"1061 -266 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 1024;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = underscoredbl;
lastChange = "2018-08-16 17:11:32 +0000";
layers = (
{
components = (
{
name = underscore;
},
{
name = underscore;
transform = "{1, 0, 0, 1, 0, -204}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1024;
},
{
components = (
{
name = underscore;
transform = "{1, 0, 0, 1, 0, -210}";
},
{
name = underscore;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1024;
}
);
note = underscoredbl;
unicode = 2017;
},
{
glyphname = uni00AD;
lastChange = "2018-08-16 17:18:21 +0000";
layers = (
{
components = (
{
name = hyphen;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 827;
},
{
components = (
{
name = hyphen;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 862;
}
);
unicode = 00AD;
},
{
glyphname = uni00B2;
lastChange = "2018-08-16 04:23:38 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"533 516 LINE",
"629 667 LINE",
"596 677 LINE",
"559 616 OFFCURVE",
"498 601 OFFCURVE",
"415 601 CURVE SMOOTH",
"199 601 LINE",
"438 825 LINE SMOOTH",
"610 987 OFFCURVE",
"670 1079 OFFCURVE",
"670 1186 CURVE SMOOTH",
"670 1276 OFFCURVE",
"616 1342 OFFCURVE",
"509 1342 CURVE SMOOTH",
"405 1342 OFFCURVE",
"308 1269 OFFCURVE",
"241 1170 CURVE",
"273 1151 LINE",
"328 1226 OFFCURVE",
"386 1264 OFFCURVE",
"446 1264 CURVE SMOOTH",
"503 1264 OFFCURVE",
"555 1231 OFFCURVE",
"555 1162 CURVE SMOOTH",
"555 1130 OFFCURVE",
"539 1069 OFFCURVE",
"509 1020 CURVE SMOOTH",
"433 895 OFFCURVE",
"288 737 OFFCURVE",
"71 546 CURVE",
"85 516 LINE"
);
}
);
width = 637;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"541 516 LINE",
"639 681 LINE",
"592 700 LINE",
"551 641 OFFCURVE",
"513 636 OFFCURVE",
"432 636 CURVE SMOOTH",
"248 636 LINE",
"461 819 LINE SMOOTH",
"654 985 OFFCURVE",
"689 1102 OFFCURVE",
"689 1171 CURVE SMOOTH",
"689 1272 OFFCURVE",
"620 1342 OFFCURVE",
"508 1342 CURVE SMOOTH",
"403 1342 OFFCURVE",
"307 1270 OFFCURVE",
"237 1170 CURVE",
"274 1148 LINE",
"324 1216 OFFCURVE",
"380 1250 OFFCURVE",
"442 1250 CURVE SMOOTH",
"500 1250 OFFCURVE",
"529 1221 OFFCURVE",
"529 1161 CURVE SMOOTH",
"529 1118 OFFCURVE",
"517 1079 OFFCURVE",
"487 1026 CURVE SMOOTH",
"411 889 OFFCURVE",
"217 687 OFFCURVE",
"74 566 CURVE",
"86 516 LINE"
);
}
);
width = 644;
}
);
unicode = 00B2;
},
{
glyphname = uni00B3;
lastChange = "2018-08-16 04:23:48 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"564 668 OFFCURVE",
"564 827 CURVE SMOOTH",
"564 911 OFFCURVE",
"520 966 OFFCURVE",
"397 983 CURVE",
"395 975 LINE",
"580 1065 OFFCURVE",
"590 1151 OFFCURVE",
"590 1198 CURVE SMOOTH",
"590 1278 OFFCURVE",
"533 1342 OFFCURVE",
"448 1342 CURVE SMOOTH",
"370 1342 OFFCURVE",
"296 1300 OFFCURVE",
"224 1217 CURVE",
"252 1192 LINE",
"298 1248 OFFCURVE",
"346 1277 OFFCURVE",
"395 1277 CURVE SMOOTH",
"446 1277 OFFCURVE",
"492 1245 OFFCURVE",
"492 1179 CURVE SMOOTH",
"492 1121 OFFCURVE",
"449 983 OFFCURVE",
"245 983 CURVE",
"236 934 LINE",
"257 941 OFFCURVE",
"282 944 OFFCURVE",
"309 944 CURVE SMOOTH",
"403 944 OFFCURVE",
"454 884 OFFCURVE",
"454 798 CURVE SMOOTH",
"454 714 OFFCURVE",
"391 549 OFFCURVE",
"274 549 CURVE SMOOTH",
"242 549 OFFCURVE",
"216 564 OFFCURVE",
"193 595 CURVE SMOOTH",
"171 625 OFFCURVE",
"151 641 OFFCURVE",
"136 641 CURVE SMOOTH",
"108 641 OFFCURVE",
"78 614 OFFCURVE",
"78 584 CURVE SMOOTH",
"78 541 OFFCURVE",
"125 502 OFFCURVE",
"233 502 CURVE SMOOTH",
"424 502 OFFCURVE"
);
}
);
width = 548;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"611 709 OFFCURVE",
"611 832 CURVE SMOOTH",
"611 909 OFFCURVE",
"574 964 OFFCURVE",
"478 995 CURVE",
"469 973 LINE",
"611 1045 OFFCURVE",
"633 1131 OFFCURVE",
"633 1188 CURVE SMOOTH",
"633 1275 OFFCURVE",
"567 1342 OFFCURVE",
"471 1342 CURVE SMOOTH",
"372 1342 OFFCURVE",
"302 1286 OFFCURVE",
"224 1194 CURVE",
"260 1166 LINE",
"306 1220 OFFCURVE",
"357 1262 OFFCURVE",
"415 1262 CURVE SMOOTH",
"463 1262 OFFCURVE",
"491 1224 OFFCURVE",
"491 1171 CURVE SMOOTH",
"491 1094 OFFCURVE",
"429 990 OFFCURVE",
"269 990 CURVE",
"261 923 LINE",
"282 930 OFFCURVE",
"305 934 OFFCURVE",
"330 934 CURVE SMOOTH",
"408 934 OFFCURVE",
"455 881 OFFCURVE",
"455 804 CURVE SMOOTH",
"455 739 OFFCURVE",
"402 564 OFFCURVE",
"300 564 CURVE SMOOTH",
"264 564 OFFCURVE",
"251 582 OFFCURVE",
"225 618 CURVE SMOOTH",
"209 641 OFFCURVE",
"191 665 OFFCURVE",
"167 665 CURVE SMOOTH",
"92 665 OFFCURVE",
"80 618 OFFCURVE",
"80 592 CURVE SMOOTH",
"80 528 OFFCURVE",
"171 502 OFFCURVE",
"256 502 CURVE SMOOTH",
"498 502 OFFCURVE"
);
}
);
width = 593;
}
);
unicode = 00B3;
},
{
glyphname = uni00B9;
lastChange = "2018-08-16 04:27:20 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"383 519 LINE",
"389 553 LINE",
"317 553 OFFCURVE",
"284 563 OFFCURVE",
"305 681 CURVE SMOOTH",
"402 1236 LINE SMOOTH",
"406 1257 OFFCURVE",
"413 1290 OFFCURVE",
"424 1340 CURVE",
"411 1347 LINE",
"362 1305 OFFCURVE",
"286 1260 OFFCURVE",
"191 1218 CURVE",
"197 1190 LINE",
"317 1240 LINE",
"312 1248 LINE",
"211 680 LINE SMOOTH",
"192 572 OFFCURVE",
"176 553 OFFCURVE",
"72 553 CURVE",
"66 519 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"383 519 LINE",
"389 553 LINE",
"317 553 OFFCURVE",
"284 563 OFFCURVE",
"305 681 CURVE SMOOTH",
"402 1236 LINE SMOOTH",
"406 1257 OFFCURVE",
"413 1290 OFFCURVE",
"424 1340 CURVE",
"411 1347 LINE",
"362 1305 OFFCURVE",
"286 1260 OFFCURVE",
"191 1218 CURVE",
"197 1190 LINE",
"317 1240 LINE",
"312 1248 LINE",
"211 680 LINE SMOOTH",
"192 572 OFFCURVE",
"176 553 OFFCURVE",
"72 553 CURVE",
"66 519 LINE"
);
}
);
width = 417;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"422 521 LINE",
"430 562 LINE",
"351 563 OFFCURVE",
"339 600 OFFCURVE",
"355 691 CURVE SMOOTH",
"448 1217 LINE SMOOTH",
"454 1253 OFFCURVE",
"463 1291 OFFCURVE",
"470 1319 CURVE",
"424 1344 LINE",
"360 1298 OFFCURVE",
"302 1257 OFFCURVE",
"187 1205 CURVE",
"195 1169 LINE",
"325 1218 LINE",
"315 1233 LINE",
"219 690 LINE SMOOTH",
"203 597 OFFCURVE",
"176 562 OFFCURVE",
"90 562 CURVE",
"82 521 LINE"
);
}
);
width = 456;
}
);
unicode = 00B9;
},
{
glyphname = uni0195;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"534 141 LINE",
"528 119 OFFCURVE",
"526 99 OFFCURVE",
"526 80 CURVE SMOOTH",
"526 13 OFFCURVE",
"563 -27 OFFCURVE",
"629 -27 CURVE SMOOTH",
"796 -27 OFFCURVE",
"1007 163 OFFCURVE",
"1113 401 CURVE SMOOTH",
"1166 520 OFFCURVE",
"1189 621 OFFCURVE",
"1189 705 CURVE SMOOTH",
"1189 770 OFFCURVE",
"1160 852 OFFCURVE",
"1096 852 CURVE SMOOTH",
"1053 852 OFFCURVE",
"1030 827 OFFCURVE",
"1030 778 CURVE",
"1054 728 OFFCURVE",
"1066 663 OFFCURVE",
"1066 584 CURVE SMOOTH",
"1066 340 OFFCURVE",
"834 66 OFFCURVE",
"715 66 CURVE SMOOTH",
"665 66 OFFCURVE",
"644 96 OFFCURVE",
"644 143 CURVE SMOOTH",
"644 162 OFFCURVE",
"648 184 OFFCURVE",
"654 207 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"776 -27 OFFCURVE",
"970 163 OFFCURVE",
"1056 401 CURVE SMOOTH",
"1092 501 OFFCURVE",
"1107 588 OFFCURVE",
"1107 663 CURVE SMOOTH",
"1107 723 OFFCURVE",
"1085 852 OFFCURVE",
"999 852 CURVE SMOOTH",
"945 852 OFFCURVE",
"940 821 OFFCURVE",
"940 778 CURVE",
"980 707 OFFCURVE",
"994 610 OFFCURVE",
"994 549 CURVE SMOOTH",
"994 315 OFFCURVE",
"800 66 OFFCURVE",
"687 66 CURVE SMOOTH",
"632 66 OFFCURVE",
"609 101 OFFCURVE",
"609 155 CURVE SMOOTH",
"609 171 OFFCURVE",
"611 188 OFFCURVE",
"614 207 CURVE SMOOTH",
"679 567 LINE SMOOTH",
"690 626 OFFCURVE",
"703 697 OFFCURVE",
"703 746 CURVE SMOOTH",
"703 812 OFFCURVE",
"677 852 OFFCURVE",
"592 852 CURVE SMOOTH",
"468 852 OFFCURVE",
"315 701 OFFCURVE",
"167 336 CURVE",
"372 1466 LINE",
"358 1484 LINE",
"296 1454 OFFCURVE",
"218 1429 OFFCURVE",
"141 1429 CURVE",
"145 1377 LINE",
"203 1377 OFFCURVE",
"230 1346 OFFCURVE",
"230 1282 CURVE SMOOTH",
"230 1261 OFFCURVE",
"228 1234 OFFCURVE",
"222 1201 CURVE SMOOTH",
"6 0 LINE",
"107 0 LINE",
"170 205 OFFCURVE",
"242 387 OFFCURVE",
"334 541 CURVE SMOOTH",
"426 696 OFFCURVE",
"501 772 OFFCURVE",
"558 772 CURVE SMOOTH",
"583 772 OFFCURVE",
"593 749 OFFCURVE",
"593 704 CURVE SMOOTH",
"593 676 OFFCURVE",
"590 636 OFFCURVE",
"580 582 CURVE SMOOTH",
"499 141 LINE SMOOTH",
"496 126 OFFCURVE",
"496 111 OFFCURVE",
"496 96 CURVE SMOOTH",
"496 28 OFFCURVE",
"531 -27 OFFCURVE",
"609 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
53 1 1 6 38 1 7 1 21 1 0 7 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 5 5 94 77 0 3 3 4 97 0 4 4 98 77 0 1 1 6 97 8 1 6 6 95 77 0 7 7 0 97 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 4 0 3 6 4 3 105 0 5 5 94 77 0 1 1 6 97 8 1 6 6 95 77 0 7 7 0 97 2 1 0 0 93 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
37 38 36 33 34 23 21 39 35 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1157;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"549 174 LINE",
"543 153 OFFCURVE",
"540 133 OFFCURVE",
"540 114 CURVE SMOOTH",
"540 34 OFFCURVE",
"591 -27 OFFCURVE",
"687 -27 CURVE SMOOTH",
"862 -27 OFFCURVE",
"1089 149 OFFCURVE",
"1200 390 CURVE SMOOTH",
"1255 510 OFFCURVE",
"1283 616 OFFCURVE",
"1283 707 CURVE SMOOTH",
"1283 786 OFFCURVE",
"1242 852 OFFCURVE",
"1163 852 CURVE SMOOTH",
"1097 852 OFFCURVE",
"1064 818 OFFCURVE",
"1064 750 CURVE",
"1097 689 OFFCURVE",
"1113 628 OFFCURVE",
"1113 567 CURVE SMOOTH",
"1113 371 OFFCURVE",
"919 88 OFFCURVE",
"802 88 CURVE SMOOTH",
"761 88 OFFCURVE",
"746 119 OFFCURVE",
"746 158 CURVE SMOOTH",
"746 176 OFFCURVE",
"750 196 OFFCURVE",
"755 215 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"862 -27 OFFCURVE",
"1074 149 OFFCURVE",
"1164 390 CURVE SMOOTH",
"1202 492 OFFCURVE",
"1221 584 OFFCURVE",
"1221 665 CURVE SMOOTH",
"1221 745 OFFCURVE",
"1194 852 OFFCURVE",
"1086 852 CURVE SMOOTH",
"998 852 OFFCURVE",
"996 791 OFFCURVE",
"996 750 CURVE",
"1040 680 OFFCURVE",
"1062 609 OFFCURVE",
"1062 539 CURVE SMOOTH",
"1062 345 OFFCURVE",
"903 88 OFFCURVE",
"792 88 CURVE SMOOTH",
"749 88 OFFCURVE",
"729 121 OFFCURVE",
"729 171 CURVE SMOOTH",
"729 185 OFFCURVE",
"731 200 OFFCURVE",
"734 215 CURVE SMOOTH",
"793 547 LINE SMOOTH",
"803 602 OFFCURVE",
"810 654 OFFCURVE",
"810 698 CURVE SMOOTH",
"810 791 OFFCURVE",
"776 852 OFFCURVE",
"662 852 CURVE SMOOTH",
"557 852 OFFCURVE",
"426 762 OFFCURVE",
"294 477 CURVE",
"469 1448 LINE",
"440 1487 LINE",
"358 1456 OFFCURVE",
"254 1432 OFFCURVE",
"161 1432 CURVE",
"168 1360 LINE",
"215 1360 OFFCURVE",
"238 1328 OFFCURVE",
"238 1267 CURVE SMOOTH",
"238 1252 OFFCURVE",
"236 1235 OFFCURVE",
"233 1217 CURVE SMOOTH",
"14 0 LINE",
"208 2 LINE",
"238 167 OFFCURVE",
"320 384 OFFCURVE",
"408 541 CURVE SMOOTH",
"474 659 OFFCURVE",
"544 743 OFFCURVE",
"596 743 CURVE SMOOTH",
"616 743 OFFCURVE",
"622 724 OFFCURVE",
"622 699 CURVE SMOOTH",
"622 668 OFFCURVE",
"614 621 OFFCURVE",
"606 580 CURVE SMOOTH",
"531 174 LINE SMOOTH",
"528 160 OFFCURVE",
"527 146 OFFCURVE",
"527 133 CURVE SMOOTH",
"527 43 OFFCURVE",
"585 -27 OFFCURVE",
"687 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
31 1 7 3 23 14 2 4 7 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 2 2 33 77 0 0 0 1 97 0 1 1 37 77 0 7 7 3 97 5 1 3 3 34 77 0 4 4 6 97 8 1 6 6 32 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 1 0 0 3 1 0 105 0 2 2 33 77 0 7 7 3 97 5 1 3 3 34 77 0 4 4 6 97 8 1 6 6 32 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
22 37 37 39 39 36 17 33 36 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1256;
}
);
leftMetricsKey = "=h";
note = uni0195;
rightMetricsKey = "=v";
unicode = 0195;
},
{
glyphname = uni01BF;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-26 -490 LINE",
"76 -490 LINE",
"468 971 LINE",
"366 971 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"29 -512 LINE",
"51 -486 LINE",
"259 664 LINE SMOOTH",
"264 693 OFFCURVE",
"267 719 OFFCURVE",
"267 744 CURVE SMOOTH",
"267 816 OFFCURVE",
"247 852 OFFCURVE",
"206 852 CURVE SMOOTH",
"133 852 OFFCURVE",
"68 788 OFFCURVE",
"-26 659 CURVE",
"19 623 LINE",
"64 682 OFFCURVE",
"97 711 OFFCURVE",
"118 711 CURVE SMOOTH",
"141 711 OFFCURVE",
"154 692 OFFCURVE",
"154 653 CURVE SMOOTH",
"154 646 OFFCURVE",
"153 639 OFFCURVE",
"151 629 CURVE SMOOTH",
"-46 -456 LINE",
"-161 -512 LINE",
"-149 -559 LINE"
);
},
{
closed = 1;
nodes = (
"238 -31 OFFCURVE",
"363 27 OFFCURVE",
"464 111 CURVE SMOOTH",
"626 245 OFFCURVE",
"731 445 OFFCURVE",
"731 624 CURVE SMOOTH",
"731 747 OFFCURVE",
"695 852 OFFCURVE",
"544 852 CURVE SMOOTH",
"474 852 OFFCURVE",
"329 807 OFFCURVE",
"200 570 CURVE",
"200 449 LINE",
"260 635 OFFCURVE",
"404 787 OFFCURVE",
"495 787 CURVE SMOOTH",
"595 787 OFFCURVE",
"609 691 OFFCURVE",
"609 605 CURVE SMOOTH",
"609 492 OFFCURVE",
"576 335 OFFCURVE",
"428 173 CURVE SMOOTH",
"341 78 OFFCURVE",
"258 24 OFFCURVE",
"103 24 CURVE",
"103 -42 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
30 1 4 0 1 76 0 4 0 4 134 0 3 3 1 97 2 1 1 1 95 77 0 0 0 1 97 2 1 1 1 95 0 78 42 41 38 36 34 32 27 25 18 16 5 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 777;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-51 -519 LINE",
"143 -519 LINE",
"525 904 LINE",
"331 904 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"101 -494 LINE",
"153 -451 LINE",
"363 719 LINE SMOOTH",
"365 728 OFFCURVE",
"366 737 OFFCURVE",
"366 745 CURVE SMOOTH",
"366 811 OFFCURVE",
"325 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"162 852 OFFCURVE",
"80 776 OFFCURVE",
"-9 645 CURVE",
"50 602 LINE",
"89 657 OFFCURVE",
"117 685 OFFCURVE",
"136 685 CURVE SMOOTH",
"149 685 OFFCURVE",
"155 676 OFFCURVE",
"155 656 CURVE SMOOTH",
"155 643 OFFCURVE",
"154 625 OFFCURVE",
"150 603 CURVE SMOOTH",
"-37 -429 LINE",
"-143 -494 LINE",
"-107 -557 LINE"
);
},
{
closed = 1;
nodes = (
"303 -37 OFFCURVE",
"440 29 OFFCURVE",
"551 116 CURVE SMOOTH",
"718 246 OFFCURVE",
"822 413 OFFCURVE",
"822 608 CURVE SMOOTH",
"822 768 OFFCURVE",
"755 852 OFFCURVE",
"592 852 CURVE SMOOTH",
"521 852 OFFCURVE",
"431 820 OFFCURVE",
"322 683 CURVE",
"294 506 LINE",
"367 679 OFFCURVE",
"456 764 OFFCURVE",
"535 764 CURVE SMOOTH",
"596 764 OFFCURVE",
"620 683 OFFCURVE",
"620 593 CURVE SMOOTH",
"620 482 OFFCURVE",
"590 344 OFFCURVE",
"472 204 CURVE SMOOTH",
"403 123 OFFCURVE",
"330 58 OFFCURVE",
"153 26 CURVE",
"170 -43 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
25 1 0 3 1 76 36 7 2 0 73 0 0 3 0 134 0 3 3 1 97 2 1 1 1 34 3 78 35 34 38 31 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 852;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "FA65F4FE-E9F7-4894-912B-889C9F9EE89E";
name = "Aug 13 18, 18:54";
paths = (
{
closed = 1;
nodes = (
"881 796 OFFCURVE",
"823 852 OFFCURVE",
"707 852 CURVE SMOOTH",
"630 852 OFFCURVE",
"510 797 OFFCURVE",
"406 664 CURVE",
"417 704 OFFCURVE",
"422 740 OFFCURVE",
"422 772 CURVE SMOOTH",
"422 825 OFFCURVE",
"404 852 OFFCURVE",
"369 852 CURVE SMOOTH",
"296 852 OFFCURVE",
"207 788 OFFCURVE",
"102 659 CURVE",
"90 647 OFFCURVE",
"131 607 OFFCURVE",
"143 623 CURVE",
"194 682 OFFCURVE",
"229 711 OFFCURVE",
"250 711 CURVE SMOOTH",
"271 711 OFFCURVE",
"281 695 OFFCURVE",
"281 662 CURVE SMOOTH",
"281 655 OFFCURVE",
"279 644 OFFCURVE",
"276 629 CURVE SMOOTH",
"41 -379 LINE SMOOTH",
"25 -448 OFFCURVE",
"-23 -491 OFFCURVE",
"-102 -506 CURVE",
"-117 -510 OFFCURVE",
"-101 -557 OFFCURVE",
"-84 -557 CURVE",
"61 -528 OFFCURVE",
"141 -481 OFFCURVE",
"156 -414 CURVE SMOOTH",
"246 -29 LINE",
"561 10 OFFCURVE",
"881 364 OFFCURVE",
"881 684 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"748 549 OFFCURVE",
"722 361 OFFCURVE",
"532 173 CURVE SMOOTH",
"437 78 OFFCURVE",
"346 31 OFFCURVE",
"260 31 CURVE",
"365 483 LINE SMOOTH",
"398 630 OFFCURVE",
"562 782 OFFCURVE",
"653 782 CURVE SMOOTH",
"716 782 OFFCURVE",
"748 749 OFFCURVE",
"748 682 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 47 values pushed */
30 1 4 0 1 76 0 4 0 4 134 0 3 3 1 97 2 1 1 1 95 77 0 0 0 1 97 2 1 1 1 95 0 78 42 41 38 36 34 32 27 25 18 16 5 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 881;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "3F7DE48C-3631-4F93-AD8F-ED88BEAB7B28";
name = "Aug 13 18, 19:03";
paths = (
{
closed = 1;
nodes = (
"924 852 OFFCURVE",
"713 852 QCURVE SMOOTH",
"590 852 OFFCURVE",
"461 719 QCURVE",
"471 852 OFFCURVE",
"367 852 QCURVE SMOOTH",
"295 852 OFFCURVE",
"166 743 OFFCURVE",
"90 645 QCURVE",
"80 633 OFFCURVE",
"135 588 OFFCURVE",
"145 602 QCURVE",
"211 684 OFFCURVE",
"266 686 OFFCURVE",
"256 647 QCURVE SMOOTH",
"10 -344 LINE SMOOTH",
"-4 -406 OFFCURVE",
"-70 -471 OFFCURVE",
"-125 -483 QCURVE",
"-137 -487 OFFCURVE",
"-125 -555 OFFCURVE",
"-111 -553 QCURVE SMOOTH",
"164 -520 OFFCURVE",
"197 -395 QCURVE SMOOTH",
"289 -29 LINE",
"430 -14 OFFCURVE",
"791 254 OFFCURVE",
"924 530 OFFCURVE",
"924 657 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"721 557 OFFCURVE",
"651 326 OFFCURVE",
"422 82 OFFCURVE",
"307 53 QCURVE",
"428 549 LINE SMOOTH",
"451 637 OFFCURVE",
"590 764 OFFCURVE",
"649 764 QCURVE SMOOTH",
"684 764 OFFCURVE",
"721 690 OFFCURVE",
"721 645 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 35 values pushed */
25 1 0 3 1 76 36 7 2 0 73 0 0 3 0 134 0 3 3 1 97 2 1 1 1 34 3 78 35 34 38 31 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 917;
}
);
note = uni01BF;
rightMetricsKey = "=thorn";
unicode = 01BF;
},
{
glyphname = uni01E2;
lastChange = "2018-08-17 18:09:06 +0000";
layers = (
{
components = (
{
name = AE;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 1227, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1745;
},
{
components = (
{
name = AE;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 1306, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1903;
}
);
leftKerningGroup = AE;
leftMetricsKey = AE;
note = uni01E2;
rightKerningGroup = AE;
rightMetricsKey = AE;
unicode = 01E2;
},
{
glyphname = uni01E3;
lastChange = "2018-08-17 12:32:29 +0000";
layers = (
{
components = (
{
alignment = -1;
name = ae;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 620, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 956;
},
{
components = (
{
name = ae;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 675, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1040;
}
);
leftKerningGroup = ae;
leftMetricsKey = "=ae";
note = uni01E3;
rightKerningGroup = e;
rightMetricsKey = "=e";
unicode = 01E3;
},
{
glyphname = uni01E3.square;
lastChange = "2018-08-17 12:32:44 +0000";
layers = (
{
components = (
{
alignment = -1;
name = ae.square;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 537, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1070;
},
{
components = (
{
alignment = -1;
name = ae.square;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 584, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1178;
}
);
leftMetricsKey = "=ae.square";
note = uni01E3.square;
rightKerningGroup = e;
rightMetricsKey = "=ae.square";
},
{
glyphname = uni01EA;
lastChange = "2018-08-18 13:21:10 +0000";
layers = (
{
anchors = (
{
name = top;
position = "{821, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"700 -24 LINE",
"725 -27 LINE",
"560 -113 OFFCURVE",
"482 -207 OFFCURVE",
"491 -310 CURVE SMOOTH",
"502 -429 OFFCURVE",
"567 -488 OFFCURVE",
"686 -488 CURVE SMOOTH",
"775 -488 OFFCURVE",
"841 -458 OFFCURVE",
"885 -398 CURVE",
"886 -397 OFFCURVE",
"886 -394 OFFCURVE",
"885 -390 CURVE SMOOTH",
"885 -381 OFFCURVE",
"879 -375 OFFCURVE",
"869 -373 CURVE",
"827 -392 OFFCURVE",
"791 -402 OFFCURVE",
"760 -402 CURVE SMOOTH",
"676 -402 OFFCURVE",
"630 -359 OFFCURVE",
"622 -272 CURVE SMOOTH",
"617 -216 OFFCURVE",
"640 -165 OFFCURVE",
"692 -118 CURVE SMOOTH",
"743 -72 OFFCURVE",
"835 -22 OFFCURVE",
"968 32 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1334 1148 OFFCURVE",
"1135 1385 OFFCURVE",
"827 1385 CURVE SMOOTH",
"329 1385 OFFCURVE",
"61 853 OFFCURVE",
"61 515 CURVE SMOOTH",
"61 207 OFFCURVE",
"240 -27 OFFCURVE",
"574 -27 CURVE SMOOTH",
"615 -27 LINE",
"459 -108 OFFCURVE",
"380 -196 OFFCURVE",
"380 -292 CURVE SMOOTH",
"380 -344 OFFCURVE",
"394 -487 OFFCURVE",
"576 -487 CURVE SMOOTH",
"665 -487 OFFCURVE",
"731 -457 OFFCURVE",
"775 -397 CURVE",
"759 -372 LINE",
"717 -391 OFFCURVE",
"681 -401 OFFCURVE",
"650 -401 CURVE SMOOTH",
"525 -401 OFFCURVE",
"511 -300 OFFCURVE",
"511 -256 CURVE SMOOTH",
"511 -206 OFFCURVE",
"535 -160 OFFCURVE",
"582 -117 CURVE SMOOTH",
"641 -64 OFFCURVE",
"796 6 OFFCURVE",
"856 33 CURVE SMOOTH",
"1173 176 OFFCURVE",
"1334 550 OFFCURVE",
"1334 819 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"398 38 OFFCURVE",
"217 242 OFFCURVE",
"217 562 CURVE SMOOTH",
"217 852 OFFCURVE",
"412 1324 OFFCURVE",
"804 1324 CURVE SMOOTH",
"1013 1324 OFFCURVE",
"1184 1096 OFFCURVE",
"1184 794 CURVE SMOOTH",
"1184 493 OFFCURVE",
"992 38 OFFCURVE",
"599 38 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
34 32 2 2 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 3 2 3 101 0 0 0 5 97 0 5 5 98 77 0 1 1 4 97 0 4 4 93 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 5 0 0 1 5 0 105 0 2 0 3 2 3 101 0 1 1 4 97 0 4 4 93 4 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
38 51 38 46 40 35 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1311;
},
{
anchors = (
{
name = top;
position = "{885, 1363}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"1123 -27 OFFCURVE",
"1461 422 OFFCURVE",
"1461 801 CURVE SMOOTH",
"1461 1130 OFFCURVE",
"1239 1384 OFFCURVE",
"891 1384 CURVE SMOOTH",
"400 1384 OFFCURVE",
"62 911 OFFCURVE",
"62 528 CURVE SMOOTH",
"62 197 OFFCURVE",
"286 -27 OFFCURVE",
"639 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"455 68 OFFCURVE",
"344 310 OFFCURVE",
"344 569 CURVE SMOOTH",
"344 831 OFFCURVE",
"514 1296 OFFCURVE",
"870 1296 CURVE SMOOTH",
"1071 1296 OFFCURVE",
"1185 1036 OFFCURVE",
"1185 784 CURVE SMOOTH",
"1185 538 OFFCURVE",
"1052 68 OFFCURVE",
"670 68 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"697 -489 OFFCURVE",
"805 -446 OFFCURVE",
"870 -368 CURVE",
"851 -336 LINE",
"818 -357 OFFCURVE",
"782 -367 OFFCURVE",
"741 -367 CURVE SMOOTH",
"672 -367 OFFCURVE",
"637 -338 OFFCURVE",
"637 -280 CURVE SMOOTH",
"637 -195 OFFCURVE",
"712 -87 OFFCURVE",
"859 41 CURVE",
"752 41 LINE",
"549 -101 OFFCURVE",
"447 -232 OFFCURVE",
"447 -354 CURVE SMOOTH",
"447 -415 OFFCURVE",
"482 -489 OFFCURVE",
"611 -489 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1461 1130 OFFCURVE",
"1239 1384 OFFCURVE",
"891 1384 CURVE SMOOTH",
"400 1384 OFFCURVE",
"62 911 OFFCURVE",
"62 528 CURVE SMOOTH",
"62 197 OFFCURVE",
"286 -27 OFFCURVE",
"639 -27 CURVE SMOOTH",
"662 -27 LINE",
"519 -143 OFFCURVE",
"447 -252 OFFCURVE",
"447 -354 CURVE SMOOTH",
"447 -415 OFFCURVE",
"482 -489 OFFCURVE",
"611 -489 CURVE SMOOTH",
"697 -489 OFFCURVE",
"805 -446 OFFCURVE",
"870 -368 CURVE",
"851 -336 LINE",
"818 -357 OFFCURVE",
"782 -367 OFFCURVE",
"741 -367 CURVE SMOOTH",
"672 -367 OFFCURVE",
"637 -338 OFFCURVE",
"637 -280 CURVE SMOOTH",
"637 -238 OFFCURVE",
"660 -180 OFFCURVE",
"708 -123 CURVE SMOOTH",
"756 -67 OFFCURVE",
"828 -11 OFFCURVE",
"926 29 CURVE SMOOTH",
"1252 161 OFFCURVE",
"1461 503 OFFCURVE",
"1461 801 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"455 68 OFFCURVE",
"344 310 OFFCURVE",
"344 569 CURVE SMOOTH",
"344 831 OFFCURVE",
"514 1296 OFFCURVE",
"870 1296 CURVE SMOOTH",
"1071 1296 OFFCURVE",
"1185 1036 OFFCURVE",
"1185 784 CURVE SMOOTH",
"1185 538 OFFCURVE",
"1052 68 OFFCURVE",
"670 68 CURVE SMOOTH"
);
}
);
width = 1440;
}
);
leftMetricsKey = O;
note = uni01EA;
rightMetricsKey = O;
unicode = 01EA;
},
{
glyphname = uni01EB;
lastChange = "2018-08-17 11:48:23 +0000";
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = ogonek;
transform = "{1, 0, 0, 1, -18, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "NPUSHB[ ]\011/* 44 values pushed */
22 20 2 2 4 1 76 0 2 0 3 2 3 101 0 0 0 5 97 0 5 5 95 77 0 1 1 4 97 0 4 4 93 4 78 37 19 38 41 35 33 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 804;
},
{
components = (
{
name = o;
},
{
name = ogonek;
transform = "{1, 0, 0, 1, 11, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 946;
}
);
leftMetricsKey = o;
widthMetricsKey = "=o";
note = uni01EB;
unicode = 01EB;
},
{
glyphname = uni01F6;
lastChange = "2018-08-18 12:30:45 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1488 811 OFFCURVE",
"1426 751 OFFCURVE",
"1418 705 CURVE",
"1524 668 OFFCURVE",
"1577 592 OFFCURVE",
"1577 475 CURVE SMOOTH",
"1577 300 OFFCURVE",
"1439 33 OFFCURVE",
"1226 33 CURVE SMOOTH",
"1137 33 OFFCURVE",
"1051 71 OFFCURVE",
"1051 175 CURVE SMOOTH",
"1051 188 OFFCURVE",
"1052 201 OFFCURVE",
"1054 215 CURVE SMOOTH",
"1226 1192 LINE SMOOTH",
"1238 1263 OFFCURVE",
"1291 1300 OFFCURVE",
"1456 1300 CURVE",
"1456 1358 LINE",
"927 1358 LINE",
"927 1300 LINE",
"1049 1300 OFFCURVE",
"1105 1270 OFFCURVE",
"1105 1211 CURVE SMOOTH",
"1105 1205 OFFCURVE",
"1105 1199 OFFCURVE",
"1104 1192 CURVE SMOOTH",
"1024 740 LINE",
"388 740 LINE",
"468 1192 LINE SMOOTH",
"481 1263 OFFCURVE",
"530 1300 OFFCURVE",
"695 1300 CURVE",
"695 1358 LINE",
"169 1358 LINE",
"169 1300 LINE",
"342 1300 OFFCURVE",
"354 1238 OFFCURVE",
"346 1192 CURVE SMOOTH",
"165 166 LINE SMOOTH",
"152 95 OFFCURVE",
"93 58 OFFCURVE",
"-41 58 CURVE",
"-41 0 LINE",
"464 0 LINE",
"464 58 LINE",
"342 58 OFFCURVE",
"286 88 OFFCURVE",
"286 147 CURVE SMOOTH",
"286 153 OFFCURVE",
"286 159 OFFCURVE",
"287 166 CURVE SMOOTH",
"375 663 LINE",
"1010 663 LINE",
"931 214 LINE SMOOTH",
"928 197 OFFCURVE",
"927 182 OFFCURVE",
"927 167 CURVE SMOOTH",
"927 29 OFFCURVE",
"1055 -21 OFFCURVE",
"1218 -21 CURVE SMOOTH",
"1539 -21 OFFCURVE",
"1706 246 OFFCURVE",
"1706 508 CURVE SMOOTH",
"1706 661 OFFCURVE",
"1653 811 OFFCURVE",
"1540 811 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1488 811 OFFCURVE",
"1426 751 OFFCURVE",
"1418 705 CURVE",
"1524 668 OFFCURVE",
"1577 592 OFFCURVE",
"1577 475 CURVE SMOOTH",
"1577 300 OFFCURVE",
"1439 33 OFFCURVE",
"1226 33 CURVE SMOOTH",
"1137 33 OFFCURVE",
"1051 71 OFFCURVE",
"1051 175 CURVE SMOOTH",
"1051 188 OFFCURVE",
"1052 201 OFFCURVE",
"1054 215 CURVE SMOOTH",
"1226 1192 LINE SMOOTH",
"1238 1263 OFFCURVE",
"1291 1300 OFFCURVE",
"1456 1300 CURVE",
"1456 1358 LINE",
"927 1358 LINE",
"927 1300 LINE",
"1049 1300 OFFCURVE",
"1105 1270 OFFCURVE",
"1105 1211 CURVE SMOOTH",
"1105 1205 OFFCURVE",
"1105 1199 OFFCURVE",
"1104 1192 CURVE SMOOTH",
"1024 740 LINE",
"388 740 LINE",
"468 1192 LINE SMOOTH",
"481 1263 OFFCURVE",
"530 1300 OFFCURVE",
"695 1300 CURVE",
"695 1358 LINE",
"185 1358 LINE",
"185 1300 LINE",
"342 1300 OFFCURVE",
"355 1241 OFFCURVE",
"347 1195 CURVE SMOOTH",
"165 166 LINE SMOOTH",
"152 95 OFFCURVE",
"93 58 OFFCURVE",
"-41 58 CURVE",
"-41 0 LINE",
"464 0 LINE",
"464 58 LINE",
"342 58 OFFCURVE",
"286 88 OFFCURVE",
"286 147 CURVE SMOOTH",
"286 153 OFFCURVE",
"286 159 OFFCURVE",
"287 166 CURVE SMOOTH",
"375 663 LINE",
"1010 663 LINE",
"931 214 LINE SMOOTH",
"928 197 OFFCURVE",
"927 182 OFFCURVE",
"927 167 CURVE SMOOTH",
"927 29 OFFCURVE",
"1055 -21 OFFCURVE",
"1218 -21 CURVE SMOOTH",
"1539 -21 OFFCURVE",
"1706 246 OFFCURVE",
"1706 508 CURVE SMOOTH",
"1706 661 OFFCURVE",
"1653 811 OFFCURVE",
"1540 811 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
9 1 10 1 41 1 2 5 2 76 60 1 8 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 10 0 3 0 10 3 103 13 11 9 3 7 7 8 97 12 1 8 8 92 77 0 1 1 95 77 6 4 2 0 0 5 97 0 5 5 93 77 6 4 2 0 0 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 10 0 3 0 10 3 103 0 5 2 0 5 89 13 11 9 3 7 7 8 97 12 1 8 8 92 77 0 1 1 95 77 6 4 2 0 0 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
69 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 8 13 11 9 3 7 1 8 7 105 0 10 0 3 0 10 3 103 0 5 2 0 5 89 0 1 1 95 77 6 4 2 0 0 2 97 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
12 1 8 13 11 9 3 7 1 8 7 105 0 10 0 3 0 10 3 103 6 1 4 0 5 2 4 5 105 0 1 1 95 77 0 0 0 2 97 0 2 2 93 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
91 89 86 82 79 78 73 70 65 63 21 22 36 21 21 54 37 37 35 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1783;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1610 811 OFFCURVE",
"1485 731 OFFCURVE",
"1477 685 CURVE",
"1579 649 OFFCURVE",
"1624 589 OFFCURVE",
"1624 485 CURVE SMOOTH",
"1624 342 OFFCURVE",
"1549 66 OFFCURVE",
"1333 66 CURVE SMOOTH",
"1252 66 OFFCURVE",
"1217 114 OFFCURVE",
"1217 189 CURVE SMOOTH",
"1217 206 OFFCURVE",
"1218 225 OFFCURVE",
"1222 245 CURVE SMOOTH",
"1388 1184 LINE SMOOTH",
"1401 1255 OFFCURVE",
"1461 1292 OFFCURVE",
"1566 1292 CURVE",
"1566 1378 LINE",
"999 1378 LINE",
"999 1292 LINE",
"1094 1292 OFFCURVE",
"1146 1260 OFFCURVE",
"1146 1199 CURVE SMOOTH",
"1146 1194 OFFCURVE",
"1146 1189 OFFCURVE",
"1145 1184 CURVE SMOOTH",
"1068 749 LINE",
"499 749 LINE",
"573 1165 LINE SMOOTH",
"586 1236 OFFCURVE",
"636 1273 OFFCURVE",
"761 1273 CURVE",
"761 1359 LINE",
"184 1359 LINE",
"184 1273 LINE",
"289 1273 OFFCURVE",
"331 1241 OFFCURVE",
"331 1180 CURVE SMOOTH",
"331 1175 OFFCURVE",
"331 1170 OFFCURVE",
"330 1165 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"145 123 OFFCURVE",
"95 86 OFFCURVE",
"-20 86 CURVE",
"-20 0 LINE",
"547 0 LINE",
"547 86 LINE",
"442 86 OFFCURVE",
"400 118 OFFCURVE",
"400 179 CURVE SMOOTH",
"400 184 OFFCURVE",
"400 189 OFFCURVE",
"401 194 CURVE SMOOTH",
"482 654 LINE",
"1051 654 LINE",
"979 244 LINE SMOOTH",
"977 230 OFFCURVE",
"976 217 OFFCURVE",
"976 204 CURVE SMOOTH",
"976 71 OFFCURVE",
"1101 -21 OFFCURVE",
"1320 -21 CURVE SMOOTH",
"1670 -21 OFFCURVE",
"1865 230 OFFCURVE",
"1865 507 CURVE SMOOTH",
"1865 660 OFFCURVE",
"1808 811 OFFCURVE",
"1662 811 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1610 811 OFFCURVE",
"1485 731 OFFCURVE",
"1477 685 CURVE",
"1579 649 OFFCURVE",
"1624 589 OFFCURVE",
"1624 485 CURVE SMOOTH",
"1624 342 OFFCURVE",
"1549 66 OFFCURVE",
"1333 66 CURVE SMOOTH",
"1252 66 OFFCURVE",
"1217 114 OFFCURVE",
"1217 189 CURVE SMOOTH",
"1217 206 OFFCURVE",
"1218 225 OFFCURVE",
"1222 245 CURVE SMOOTH",
"1384 1164 LINE SMOOTH",
"1397 1235 OFFCURVE",
"1457 1272 OFFCURVE",
"1562 1272 CURVE",
"1562 1358 LINE",
"995 1358 LINE",
"995 1272 LINE",
"1090 1272 OFFCURVE",
"1142 1240 OFFCURVE",
"1142 1179 CURVE SMOOTH",
"1142 1174 OFFCURVE",
"1142 1169 OFFCURVE",
"1141 1164 CURVE SMOOTH",
"1068 749 LINE",
"499 749 LINE",
"573 1164 LINE SMOOTH",
"586 1235 OFFCURVE",
"636 1272 OFFCURVE",
"761 1272 CURVE",
"761 1358 LINE",
"184 1358 LINE",
"184 1272 LINE",
"334 1272 OFFCURVE",
"336 1199 OFFCURVE",
"330 1164 CURVE SMOOTH",
"158 194 LINE SMOOTH",
"145 123 OFFCURVE",
"95 86 OFFCURVE",
"-20 86 CURVE",
"-20 0 LINE",
"547 0 LINE",
"547 86 LINE",
"442 86 OFFCURVE",
"400 118 OFFCURVE",
"400 179 CURVE SMOOTH",
"400 184 OFFCURVE",
"400 189 OFFCURVE",
"401 194 CURVE SMOOTH",
"482 654 LINE",
"1051 654 LINE",
"979 244 LINE SMOOTH",
"977 230 OFFCURVE",
"976 217 OFFCURVE",
"976 204 CURVE SMOOTH",
"976 71 OFFCURVE",
"1101 -21 OFFCURVE",
"1320 -21 CURVE SMOOTH",
"1670 -21 OFFCURVE",
"1865 230 OFFCURVE",
"1865 507 CURVE SMOOTH",
"1865 660 OFFCURVE",
"1808 811 OFFCURVE",
"1662 811 CURVE SMOOTH"
);
}
);
width = 1928;
}
);
leftMetricsKey = H;
note = uni01F6;
rightMetricsKey = v;
unicode = 01F6;
},
{
glyphname = uni01F7;
lastChange = "2018-08-17 18:10:27 +0000";
layers = (
{
hints = (
{
origin = "{0, 6}";
scale = "{1, -1}";
type = Corner;
name = _corner.halfserif;
options = 1;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"194 -358 LINE",
"227 -315 LINE",
"298 93 LINE",
"263 14 LINE",
"1279 1314 LINE",
"1256 1358 LINE",
"400 1358 LINE",
"96 -364 LINE",
"154 -277 LINE",
"-76 -431 LINE",
"-34 -508 LINE"
);
},
{
closed = 1;
nodes = (
"510 1293 LINE",
"1171 1293 LINE",
"1184 1274 LINE",
"297 156 LINE",
"306 136 LINE"
);
}
);
width = 1131;
},
{
hints = (
{
origin = "{0, 6}";
scale = "{1, -1}";
type = Corner;
name = _corner.halfserif;
options = 1;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"309 -343 LINE",
"357 -266 LINE",
"429 144 LINE",
"352 -4 LINE",
"1378 1279 LINE",
"1322 1358 LINE",
"400 1358 LINE",
"97 -363 LINE",
"164 -274 LINE",
"-56 -421 LINE",
"18 -536 LINE"
);
},
{
closed = 1;
nodes = (
"626 1264 LINE",
"1211 1266 LINE",
"1223 1233 LINE",
"434 263 LINE",
"445 236 LINE"
);
}
);
width = 1236;
}
);
unicode = 01F7;
},
{
glyphname = uni021C;
lastChange = "2018-08-17 18:10:56 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"662 -57 OFFCURVE",
"833 342 OFFCURVE",
"833 531 CURVE SMOOTH",
"833 654 OFFCURVE",
"750 747 OFFCURVE",
"588 768 CURVE",
"569 734 LINE",
"823 900 OFFCURVE",
"871 1097 OFFCURVE",
"871 1190 CURVE SMOOTH",
"871 1315 OFFCURVE",
"771 1386 OFFCURVE",
"626 1386 CURVE SMOOTH",
"506 1386 OFFCURVE",
"364 1314 OFFCURVE",
"227 1201 CURVE",
"213 1114 LINE",
"326 1233 OFFCURVE",
"411 1295 OFFCURVE",
"525 1295 CURVE SMOOTH",
"652 1295 OFFCURVE",
"727 1230 OFFCURVE",
"727 1117 CURVE SMOOTH",
"727 953 OFFCURVE",
"663 843 OFFCURVE",
"294 640 CURVE",
"310 606 LINE",
"393 664 OFFCURVE",
"457 680 OFFCURVE",
"504 680 CURVE SMOOTH",
"617 680 OFFCURVE",
"685 613 OFFCURVE",
"685 489 CURVE SMOOTH",
"685 290 OFFCURVE",
"445 -2 OFFCURVE",
"22 -2 CURVE",
"13 -57 LINE"
);
},
{
closed = 1;
nodes = (
"220 960 LINE",
"287 1342 LINE",
"212 1342 LINE",
"145 960 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"662 -57 OFFCURVE",
"833 342 OFFCURVE",
"833 531 CURVE SMOOTH",
"833 654 OFFCURVE",
"754 750 OFFCURVE",
"569 771 CURVE",
"569 734 LINE",
"823 900 OFFCURVE",
"871 1097 OFFCURVE",
"871 1190 CURVE SMOOTH",
"871 1315 OFFCURVE",
"771 1386 OFFCURVE",
"626 1386 CURVE SMOOTH",
"506 1386 OFFCURVE",
"364 1314 OFFCURVE",
"227 1201 CURVE",
"213 1114 LINE",
"326 1233 OFFCURVE",
"411 1295 OFFCURVE",
"525 1295 CURVE SMOOTH",
"652 1295 OFFCURVE",
"727 1230 OFFCURVE",
"727 1117 CURVE SMOOTH",
"727 953 OFFCURVE",
"663 843 OFFCURVE",
"294 640 CURVE",
"310 606 LINE",
"393 664 OFFCURVE",
"457 680 OFFCURVE",
"504 680 CURVE SMOOTH",
"617 680 OFFCURVE",
"685 613 OFFCURVE",
"685 489 CURVE SMOOTH",
"685 290 OFFCURVE",
"445 -2 OFFCURVE",
"22 -2 CURVE",
"13 -57 LINE"
);
},
{
closed = 1;
nodes = (
"220 960 LINE",
"287 1342 LINE",
"212 1342 LINE",
"145 960 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
17 1 1 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 5 3 5 4 3 128 0 2 3 1 3 2 1 128 0 3 3 5 97 0 5 5 98 77 0 1 1 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 5 3 5 4 3 128 0 2 3 1 3 2 1 128 0 1 0 0 1 0 101 0 3 3 5 97 0 5 5 98 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
0 4 5 3 5 4 3 128 0 2 3 1 3 2 1 128 0 5 0 3 2 5 3 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
34 29 42 35 35 19 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 835;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"708 -36 OFFCURVE",
"900 348 OFFCURVE",
"900 551 CURVE SMOOTH",
"900 650 OFFCURVE",
"840 744 OFFCURVE",
"691 786 CURVE",
"658 741 LINE",
"893 926 OFFCURVE",
"929 1092 OFFCURVE",
"929 1162 CURVE SMOOTH",
"929 1300 OFFCURVE",
"792 1384 OFFCURVE",
"637 1384 CURVE SMOOTH",
"507 1384 OFFCURVE",
"366 1313 OFFCURVE",
"228 1200 CURVE",
"215 1079 LINE",
"303 1171 OFFCURVE",
"406 1251 OFFCURVE",
"536 1251 CURVE SMOOTH",
"625 1251 OFFCURVE",
"673 1183 OFFCURVE",
"673 1096 CURVE SMOOTH",
"673 1000 OFFCURVE",
"673 880 OFFCURVE",
"263 655 CURVE",
"294 588 LINE",
"401 649 OFFCURVE",
"456 666 OFFCURVE",
"497 666 CURVE SMOOTH",
"582 666 OFFCURVE",
"621 600 OFFCURVE",
"621 509 CURVE SMOOTH",
"621 330 OFFCURVE",
"439 55 OFFCURVE",
"32 55 CURVE",
"16 -39 LINE"
);
},
{
closed = 1;
nodes = (
"247 946 LINE",
"317 1341 LINE",
"212 1341 LINE",
"142 946 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"708 -36 OFFCURVE",
"900 348 OFFCURVE",
"900 551 CURVE SMOOTH",
"900 650 OFFCURVE",
"843 744 OFFCURVE",
"668 793 CURVE",
"658 741 LINE",
"893 926 OFFCURVE",
"929 1092 OFFCURVE",
"929 1162 CURVE SMOOTH",
"929 1300 OFFCURVE",
"792 1384 OFFCURVE",
"637 1384 CURVE SMOOTH",
"507 1384 OFFCURVE",
"366 1313 OFFCURVE",
"228 1200 CURVE",
"215 1079 LINE",
"303 1171 OFFCURVE",
"406 1251 OFFCURVE",
"536 1251 CURVE SMOOTH",
"625 1251 OFFCURVE",
"673 1183 OFFCURVE",
"673 1096 CURVE SMOOTH",
"673 1000 OFFCURVE",
"673 880 OFFCURVE",
"263 655 CURVE",
"294 588 LINE",
"401 649 OFFCURVE",
"456 666 OFFCURVE",
"497 666 CURVE SMOOTH",
"582 666 OFFCURVE",
"621 600 OFFCURVE",
"621 509 CURVE SMOOTH",
"621 330 OFFCURVE",
"439 55 OFFCURVE",
"32 55 CURVE",
"16 -39 LINE"
);
},
{
closed = 1;
nodes = (
"247 946 LINE",
"317 1341 LINE",
"212 1341 LINE",
"142 946 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
51 1 6 5 74 1 0 2 2 1 8 0 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 2 0 3 2 0 126 0 6 0 3 4 6 3 106 0 7 7 37 77 0 5 5 31 77 0 0 0 8 97 9 1 8 8 32 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 2 0 3 2 0 126 0 6 0 3 4 6 3 106 0 0 9 1 8 0 8 101 0 7 7 37 77 0 5 5 31 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
0 7 5 7 133 0 5 6 5 133 0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 2 0 3 2 0 126 0 6 0 3 4 6 3 106 0 0 8 8 0 89 0 0 0 8 97 9 1 8 0 8 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 17 values pushed */
0 0 0 79 0 79 35 19 22 20 30 35 25 22 10 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 899;
}
);
note = uni021C;
rightMetricsKey = B;
unicode = 021C;
},
{
glyphname = uni021D;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"69 -555 OFFCURVE",
"181 -498 OFFCURVE",
"284 -410 CURVE SMOOTH",
"431 -285 OFFCURVE",
"559 -98 OFFCURVE",
"559 74 CURVE SMOOTH",
"559 123 OFFCURVE",
"557 283 OFFCURVE",
"316 348 CURVE",
"249 276 LINE",
"505 434 OFFCURVE",
"578 558 OFFCURVE",
"578 665 CURVE SMOOTH",
"578 781 OFFCURVE",
"497 870 OFFCURVE",
"358 870 CURVE SMOOTH",
"293 870 OFFCURVE",
"156 837 OFFCURVE",
"27 708 CURVE",
"22 546 LINE",
"64 704 OFFCURVE",
"178 789 OFFCURVE",
"308 789 CURVE SMOOTH",
"425 789 OFFCURVE",
"459 683 OFFCURVE",
"459 627 CURVE SMOOTH",
"459 442 OFFCURVE",
"266 333 OFFCURVE",
"37 232 CURVE",
"61 184 LINE",
"129 222 OFFCURVE",
"192 245 OFFCURVE",
"253 245 CURVE SMOOTH",
"407 245 OFFCURVE",
"442 63 OFFCURVE",
"442 5 CURVE SMOOTH",
"442 -127 OFFCURVE",
"364 -265 OFFCURVE",
"251 -365 CURVE SMOOTH",
"191 -418 OFFCURVE",
"121 -461 OFFCURVE",
"39 -461 CURVE SMOOTH",
"32 -461 OFFCURVE",
"8 -459 OFFCURVE",
"-11 -446 CURVE SMOOTH",
"-26 -435 OFFCURVE",
"-37 -430 OFFCURVE",
"-63 -430 CURVE SMOOTH",
"-98 -430 OFFCURVE",
"-129 -450 OFFCURVE",
"-129 -490 CURVE SMOOTH",
"-129 -534 OFFCURVE",
"-93 -555 OFFCURVE",
"-15 -555 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"37 510 LINE",
"69 824 LINE",
"11 824 LINE",
"-21 510 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 1 4 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 3 1 3 4 1 128 0 1 2 2 1 112 0 6 0 3 4 6 3 105 0 5 5 7 97 0 7 7 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 4 3 1 3 4 1 128 0 1 2 2 1 112 0 7 0 5 6 7 5 105 0 6 0 3 4 6 3 105 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 7 0 5 6 7 5 105 0 6 0 3 4 6 3 105 0 2 2 0 98 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
33 44 40 17 38 34 19 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 773;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"4 -555 OFFCURVE",
"123 -490 OFFCURVE",
"244 -398 CURVE SMOOTH",
"422 -263 OFFCURVE",
"568 -95 OFFCURVE",
"568 108 CURVE SMOOTH",
"568 170 OFFCURVE",
"562 315 OFFCURVE",
"348 368 CURVE",
"350 314 LINE",
"525 411 OFFCURVE",
"634 500 OFFCURVE",
"634 654 CURVE SMOOTH",
"634 734 OFFCURVE",
"595 870 OFFCURVE",
"395 870 CURVE SMOOTH",
"312 870 OFFCURVE",
"241 869 OFFCURVE",
"23 707 CURVE",
"18 592 LINE",
"114 735 OFFCURVE",
"228 752 OFFCURVE",
"287 752 CURVE SMOOTH",
"360 752 OFFCURVE",
"395 715 OFFCURVE",
"395 641 CURVE SMOOTH",
"395 459 OFFCURVE",
"195 343 OFFCURVE",
"1 262 CURVE",
"35 190 LINE",
"88 213 OFFCURVE",
"128 225 OFFCURVE",
"155 225 CURVE SMOOTH",
"302 224 OFFCURVE",
"318 109 OFFCURVE",
"318 30 CURVE SMOOTH",
"318 -98 OFFCURVE",
"247 -255 OFFCURVE",
"164 -346 CURVE SMOOTH",
"112 -403 OFFCURVE",
"56 -432 OFFCURVE",
"-3 -432 CURVE SMOOTH",
"-18 -432 OFFCURVE",
"-37 -427 OFFCURVE",
"-56 -412 CURVE SMOOTH",
"-84 -389 OFFCURVE",
"-102 -385 OFFCURVE",
"-136 -385 CURVE SMOOTH",
"-197 -385 OFFCURVE",
"-233 -424 OFFCURVE",
"-233 -477 CURVE SMOOTH",
"-233 -529 OFFCURVE",
"-191 -555 OFFCURVE",
"-102 -555 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"29 492 LINE",
"88 809 LINE",
"12 809 LINE",
"-47 492 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
60 58 2 4 6 76 1 3 5 29 1 1 3 6 1 0 2 4 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 4 4 7 97 0 7 7 34 77 0 3 3 6 97 0 6 6 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 6 0 3 1 6 3 105 0 4 4 7 97 0 7 7 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 7 0 4 5 7 4 105 0 6 0 3 1 6 3 105 0 1 1 0 97 0 0 0 36 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
67 65 56 55 51 50 45 43 54 34 37 35 8 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 704;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "A618A649-A66C-4512-A688-B2A9E47D7D16";
name = "Aug 13 18, 19:46";
paths = (
{
closed = 1;
nodes = (
"663 209 OFFCURVE",
"605 286 OFFCURVE",
"489 336 CURVE SMOOTH",
"480 340 OFFCURVE",
"476 345 OFFCURVE",
"476 352 CURVE SMOOTH",
"476 359 OFFCURVE",
"484 367 OFFCURVE",
"499 377 CURVE SMOOTH",
"610 452 OFFCURVE",
"676 511 OFFCURVE",
"699 552 CURVE SMOOTH",
"721 593 OFFCURVE",
"732 638 OFFCURVE",
"732 687 CURVE SMOOTH",
"732 792 OFFCURVE",
"663 870 OFFCURVE",
"523 870 CURVE SMOOTH",
"466 870 OFFCURVE",
"409 853 OFFCURVE",
"352 819 CURVE SMOOTH",
"294 785 OFFCURVE",
"258 768 OFFCURVE",
"245 768 CURVE SMOOTH",
"218 768 OFFCURVE",
"205 780 OFFCURVE",
"208 804 CURVE SMOOTH",
"210 824 LINE",
"152 824 LINE",
"92 510 LINE",
"92 509 LINE SMOOTH",
"92 504 OFFCURVE",
"101 502 OFFCURVE",
"120 502 CURVE SMOOTH",
"139 502 OFFCURVE",
"149 505 OFFCURVE",
"150 510 CURVE",
"179 658 OFFCURVE",
"295 776 OFFCURVE",
"412 776 CURVE SMOOTH",
"493 776 OFFCURVE",
"557 727 OFFCURVE",
"557 630 CURVE SMOOTH",
"557 564 OFFCURVE",
"533 503 OFFCURVE",
"484 447 CURVE SMOOTH",
"435 391 OFFCURVE",
"316 320 OFFCURVE",
"129 233 CURVE",
"125 230 OFFCURVE",
"123 227 OFFCURVE",
"123 223 CURVE SMOOTH",
"123 198 OFFCURVE",
"131 185 OFFCURVE",
"146 184 CURVE",
"217 214 OFFCURVE",
"267 229 OFFCURVE",
"298 229 CURVE SMOOTH",
"355 229 OFFCURVE",
"401 213 OFFCURVE",
"434 180 CURVE SMOOTH",
"468 147 OFFCURVE",
"485 99 OFFCURVE",
"485 34 CURVE SMOOTH",
"485 -106 OFFCURVE",
"418 -257 OFFCURVE",
"288 -365 CURVE SMOOTH",
"223 -419 OFFCURVE",
"149 -446 OFFCURVE",
"67 -446 CURVE SMOOTH",
"60 -446 OFFCURVE",
"44 -440 OFFCURVE",
"19 -428 CURVE SMOOTH",
"-6 -416 OFFCURVE",
"-23 -410 OFFCURVE",
"-32 -410 CURVE SMOOTH",
"-69 -410 OFFCURVE",
"-104 -435 OFFCURVE",
"-104 -488 CURVE SMOOTH",
"-104 -533 OFFCURVE",
"-68 -555 OFFCURVE",
"5 -555 CURVE SMOOTH",
"150 -555 OFFCURVE",
"468 -330 OFFCURVE",
"580 -147 CURVE SMOOTH",
"635 -56 OFFCURVE",
"663 28 OFFCURVE",
"663 104 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
24 1 4 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 3 1 3 4 1 128 0 1 2 2 1 112 0 6 0 3 4 6 3 105 0 5 5 7 97 0 7 7 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
0 4 3 1 3 4 1 128 0 1 2 2 1 112 0 7 0 5 6 7 5 105 0 6 0 3 4 6 3 105 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 4 3 1 3 4 1 128 0 1 2 3 1 2 126 0 7 0 5 6 7 5 105 0 6 0 3 4 6 3 105 0 2 2 0 98 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
33 44 40 17 38 34 19 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 773;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "B5201971-2EB9-4241-9227-2B7FA87A4C5D";
name = "Aug 13 18, 19:59";
paths = (
{
closed = 1;
nodes = (
"191 -445 OFFCURVE",
"265 -397 OFFCURVE",
"330 -346 CURVE SMOOTH",
"528 -191 OFFCURVE",
"627 -27 OFFCURVE",
"627 145 CURVE SMOOTH",
"627 166 OFFCURVE",
"625 185 OFFCURVE",
"621 203 CURVE SMOOTH",
"607 266 OFFCURVE",
"563 315 OFFCURVE",
"489 350 CURVE",
"495 353 OFFCURVE",
"500 355 OFFCURVE",
"504 358 CURVE",
"587 409 OFFCURVE",
"646 456 OFFCURVE",
"680 500 CURVE SMOOTH",
"721 550 OFFCURVE",
"741 612 OFFCURVE",
"741 686 CURVE",
"743 727 OFFCURVE",
"733 762 OFFCURVE",
"711 791 CURVE SMOOTH",
"671 844 OFFCURVE",
"607 870 OFFCURVE",
"520 870 CURVE SMOOTH",
"459 871 OFFCURVE",
"394 858 OFFCURVE",
"326 829 CURVE SMOOTH",
"317 825 OFFCURVE",
"304 819 OFFCURVE",
"287 811 CURVE",
"252 792 OFFCURVE",
"230 782 OFFCURVE",
"219 782 CURVE",
"211 783 OFFCURVE",
"207 786 OFFCURVE",
"207 793 CURVE SMOOTH",
"207 809 LINE SMOOTH",
"207 818 OFFCURVE",
"195 823 OFFCURVE",
"172 823 CURVE SMOOTH",
"147 823 OFFCURVE",
"134 818 OFFCURVE",
"131 809 CURVE SMOOTH",
"45 492 LINE",
"45 481 OFFCURVE",
"57 475 OFFCURVE",
"80 475 CURVE SMOOTH",
"106 476 OFFCURVE",
"120 481 OFFCURVE",
"121 492 CURVE",
"136 549 OFFCURVE",
"169 604 OFFCURVE",
"221 657 CURVE SMOOTH",
"282 720 OFFCURVE",
"342 752 OFFCURVE",
"401 752 CURVE SMOOTH",
"467 752 OFFCURVE",
"500 722 OFFCURVE",
"500 662 CURVE SMOOTH",
"500 645 OFFCURVE",
"498 629 OFFCURVE",
"494 612 CURVE SMOOTH",
"477 544 OFFCURVE",
"436 481 OFFCURVE",
"369 424 CURVE SMOOTH",
"362 417 OFFCURVE",
"354 411 OFFCURVE",
"346 406 CURVE",
"285 359 OFFCURVE",
"193 311 OFFCURVE",
"72 262 CURVE",
"66 261 OFFCURVE",
"62 256 OFFCURVE",
"61 248 CURVE",
"59 225 LINE",
"62 200 OFFCURVE",
"69 187 OFFCURVE",
"80 184 CURVE",
"90 186 LINE",
"93 187 OFFCURVE",
"96 189 OFFCURVE",
"100 190 CURVE",
"155 213 OFFCURVE",
"196 225 OFFCURVE",
"223 225 CURVE SMOOTH",
"236 225 LINE",
"326 221 OFFCURVE",
"371 166 OFFCURVE",
"371 59 CURVE SMOOTH",
"370 30 OFFCURVE",
"365 -2 OFFCURVE",
"356 -37 CURVE SMOOTH",
"331 -130 OFFCURVE",
"288 -216 OFFCURVE",
"227 -295 CURVE SMOOTH",
"155 -386 OFFCURVE",
"82 -432 OFFCURVE",
"8 -432 CURVE SMOOTH",
"-7 -432 OFFCURVE",
"-24 -425 OFFCURVE",
"-43 -412 CURVE",
"-67 -394 OFFCURVE",
"-87 -385 OFFCURVE",
"-104 -385 CURVE SMOOTH",
"-121 -385 LINE",
"-178 -390 OFFCURVE",
"-212 -416 OFFCURVE",
"-223 -461 CURVE",
"-226 -470 OFFCURVE",
"-227 -479 OFFCURVE",
"-227 -487 CURVE SMOOTH",
"-227 -532 OFFCURVE",
"-185 -555 OFFCURVE",
"-102 -555 CURVE SMOOTH",
"-86 -555 OFFCURVE",
"-70 -554 OFFCURVE",
"-55 -553 CURVE",
"-11 -546 OFFCURVE",
"44 -524 OFFCURVE",
"109 -489 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
60 58 2 4 6 76 1 3 5 29 1 1 3 6 1 0 2 4 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 4 4 7 97 0 7 7 34 77 0 3 3 6 97 0 6 6 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 6 0 3 1 6 3 105 0 4 4 7 97 0 7 7 34 77 0 1 1 0 97 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 4 3 4 5 3 128 0 2 1 0 1 2 0 128 0 7 0 4 5 7 4 105 0 6 0 3 1 6 3 105 0 1 1 0 97 0 0 0 36 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 15 values pushed */
67 65 56 55 51 50 45 43 54 34 37 35 8 8 26 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 704;
}
);
note = uni021D;
unicode = 021D;
},
{
glyphname = uni0232;
lastChange = "2018-08-18 13:05:04 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 650, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = Y;
},
{
name = uni0304.case;
transform = "{1, 0, 0, 1, 701, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1414;
}
);
leftKerningGroup = Y;
leftMetricsKey = Y;
note = uni0232;
rightKerningGroup = Y;
rightMetricsKey = Y;
unicode = 0232;
},
{
glyphname = uni0233;
lastChange = "2018-08-18 12:31:26 +0000";
layers = (
{
components = (
{
name = y;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 279, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 693;
},
{
components = (
{
alignment = -1;
name = y;
},
{
name = uni0304;
transform = "{1, 0, 0, 1, 294, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 736;
}
);
leftKerningGroup = uni0233;
widthMetricsKey = y;
note = uni0233;
unicode = 0233;
},
{
glyphname = uni0237;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-44 -553 OFFCURVE",
"85 -371 OFFCURVE",
"132 -144 CURVE SMOOTH",
"156 -30 OFFCURVE",
"175 64 OFFCURVE",
"188 139 CURVE SMOOTH",
"283 665 LINE SMOOTH",
"288 693 OFFCURVE",
"292 719 OFFCURVE",
"292 750 CURVE SMOOTH",
"292 806 OFFCURVE",
"280 852 OFFCURVE",
"230 852 CURVE SMOOTH",
"156 852 OFFCURVE",
"91 784 OFFCURVE",
"2 649 CURVE",
"44 610 LINE",
"88 671 OFFCURVE",
"120 702 OFFCURVE",
"141 702 CURVE SMOOTH",
"175 702 OFFCURVE",
"182 664 OFFCURVE",
"174 623 CURVE SMOOTH",
"10 -260 LINE SMOOTH",
"-8 -360 OFFCURVE",
"-64 -477 OFFCURVE",
"-156 -477 CURVE SMOOTH",
"-171 -477 OFFCURVE",
"-188 -470 OFFCURVE",
"-209 -455 CURVE SMOOTH",
"-229 -440 OFFCURVE",
"-248 -433 OFFCURVE",
"-269 -433 CURVE SMOOTH",
"-306 -433 OFFCURVE",
"-337 -449 OFFCURVE",
"-337 -481 CURVE SMOOTH",
"-337 -511 OFFCURVE",
"-313 -553 OFFCURVE",
"-247 -553 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
52 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 3 2 2 1 114 0 3 3 4 97 0 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 1 3 2 3 1 2 128 0 3 3 4 97 0 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
40 22 33 36 35 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 420;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"43 -553 OFFCURVE",
"174 -349 OFFCURVE",
"225 -150 CURVE SMOOTH",
"251 -50 OFFCURVE",
"267 48 OFFCURVE",
"281 143 CURVE SMOOTH",
"358 666 LINE SMOOTH",
"360 681 OFFCURVE",
"361 696 OFFCURVE",
"361 710 CURVE SMOOTH",
"361 786 OFFCURVE",
"332 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"179 852 OFFCURVE",
"90 785 OFFCURVE",
"-9 651 CURVE",
"49 604 LINE",
"89 660 OFFCURVE",
"116 688 OFFCURVE",
"133 688 CURVE SMOOTH",
"157 688 OFFCURVE",
"163 672 OFFCURVE",
"159 647 CURVE SMOOTH",
"27 -229 LINE SMOOTH",
"13 -323 OFFCURVE",
"-23 -446 OFFCURVE",
"-85 -446 CURVE SMOOTH",
"-102 -446 OFFCURVE",
"-124 -434 OFFCURVE",
"-152 -408 CURVE SMOOTH",
"-179 -382 OFFCURVE",
"-202 -369 OFFCURVE",
"-223 -369 CURVE SMOOTH",
"-275 -369 OFFCURVE",
"-319 -402 OFFCURVE",
"-319 -453 CURVE SMOOTH",
"-319 -515 OFFCURVE",
"-267 -553 OFFCURVE",
"-209 -553 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 3 2 2 1 114 0 3 3 4 97 0 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 1 3 2 3 1 2 128 0 3 3 4 97 0 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
37 36 33 36 36 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 489;
}
);
note = uni0237;
unicode = 0237;
},
{
glyphname = uni0302;
lastChange = "2018-08-17 12:50:04 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{54, 856}";
},
{
name = top;
position = "{152, 1409}";
}
);
components = (
{
name = circumflex;
transform = "{1, 0, 0, 1, -476, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 15 values pushed */
16 4 1 3 0 73 0 0 0 118 22 20 1 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{44, 856}";
},
{
name = top;
position = "{141, 1409}";
}
);
components = (
{
name = circumflex;
transform = "{1, 0, 0, 1, -487, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0302;
unicode = 0302;
},
{
glyphname = uni0304;
lastChange = "2018-08-17 12:12:30 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{73, 856}";
},
{
name = top;
position = "{134, 1198}";
}
);
components = (
{
name = macron;
transform = "{1, 0, 0, 1, -396, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 6 4 0 9 1 9 3 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{80, 856}";
},
{
name = top;
position = "{143, 1216}";
}
);
components = (
{
name = macron;
transform = "{1, 0, 0, 1, -385, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0304;
unicode = 0304;
},
{
glyphname = uni0305;
lastChange = "2018-08-16 18:37:01 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"559 1093 LINE",
"559 1205 LINE",
"-303 1205 LINE",
"-303 1093 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 28 values pushed */
0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 2 0 6 3 0 7 2 7 3 12 22 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"559 1093 LINE",
"559 1224 LINE",
"-303 1224 LINE",
"-303 1093 LINE"
);
}
);
width = 0;
}
);
note = uni0305;
unicode = 0305;
},
{
glyphname = uni0306;
lastChange = "2018-08-17 12:12:37 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{77, 856}";
},
{
name = top;
position = "{155, 1295}";
}
);
components = (
{
name = breve;
transform = "{1, 0, 0, 1, -480, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 27 values pushed */
0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 18 20 17 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{79, 856}";
},
{
name = top;
position = "{162, 1327}";
}
);
components = (
{
name = breve;
transform = "{1, 0, 0, 1, -499, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0306;
unicode = 0306;
},
{
glyphname = uni0307;
lastChange = "2018-08-17 12:12:39 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{80, 856}";
},
{
name = top;
position = "{146, 1230}";
}
);
components = (
{
name = dotaccent;
transform = "{1, 0, 0, 1, -488, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 35 34 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{79, 856}";
},
{
name = top;
position = "{155, 1290}";
}
);
components = (
{
name = dotaccent;
transform = "{1, 0, 0, 1, -355, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0307;
unicode = 0307;
},
{
glyphname = uni0308;
lastChange = "2018-08-18 03:24:08 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{76, 856}";
},
{
name = top;
position = "{143, 1236}";
}
);
components = (
{
name = dieresis;
transform = "{1, 0, 0, 1, -358, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 35 35 35 34 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{77, 856}";
},
{
name = top;
position = "{151, 1273}";
}
);
components = (
{
name = dieresis;
transform = "{1, 0, 0, 1, -474, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0308;
unicode = 0308;
},
{
glyphname = uni030A;
lastChange = "2018-08-17 12:12:44 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{69, 856}";
},
{
name = top;
position = "{154, 1337}";
}
);
components = (
{
name = ring;
transform = "{1, 0, 0, 1, -466, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 36 36 36 34 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{72, 856}";
},
{
name = top;
position = "{167, 1396}";
}
);
components = (
{
name = ring;
transform = "{1, 0, 0, 1, -472, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni030A;
unicode = 030A;
},
{
glyphname = uni030C;
lastChange = "2018-08-17 12:22:34 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{76, 856}";
},
{
name = top;
position = "{178, 1436}";
}
);
components = (
{
name = caron;
transform = "{1, 0, 0, 1, -330, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 14 values pushed */
0 1 0 1 133 0 0 0 118 19 18 2 12 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{74, 856}";
},
{
name = top;
position = "{189, 1505}";
}
);
components = (
{
name = caron;
transform = "{1, 0, 0, 1, -349, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 18 values pushed */
10 1 1 74 0 1 0 1 133 0 0 0 118 26 23 2 8 24 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 030C;
},
{
glyphname = uni0325;
lastChange = "2018-08-17 12:12:55 +0000";
layers = (
{
anchors = (
{
name = _bottom;
position = "{-72, 0}";
},
{
name = bottom;
position = "{-172, -566}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"160 -279 OFFCURVE",
"162 -262 OFFCURVE",
"162 -243 CURVE SMOOTH",
"162 -202 OFFCURVE",
"149 -168 OFFCURVE",
"122 -142 CURVE SMOOTH",
"93 -114 OFFCURVE",
"54 -100 OFFCURVE",
"6 -100 CURVE SMOOTH",
"-61 -100 OFFCURVE",
"-121 -124 OFFCURVE",
"-176 -173 CURVE SMOOTH",
"-234 -224 OFFCURVE",
"-263 -282 OFFCURVE",
"-263 -347 CURVE SMOOTH",
"-263 -388 OFFCURVE",
"-249 -422 OFFCURVE",
"-221 -448 CURVE",
"-194 -475 OFFCURVE",
"-155 -489 OFFCURVE",
"-106 -489 CURVE SMOOTH",
"-47 -489 OFFCURVE",
"8 -469 OFFCURVE",
"59 -430 CURVE SMOOTH",
"108 -393 OFFCURVE",
"140 -348 OFFCURVE",
"155 -295 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"47 -331 OFFCURVE",
"29 -361 OFFCURVE",
"2 -386 CURVE",
"-26 -410 OFFCURVE",
"-56 -422 OFFCURVE",
"-87 -422 CURVE SMOOTH",
"-140 -422 OFFCURVE",
"-166 -394 OFFCURVE",
"-166 -338 CURVE SMOOTH",
"-166 -323 OFFCURVE",
"-164 -309 OFFCURVE",
"-159 -295 CURVE",
"-149 -260 OFFCURVE",
"-130 -229 OFFCURVE",
"-102 -204 CURVE SMOOTH",
"-74 -180 OFFCURVE",
"-45 -168 OFFCURVE",
"-14 -168 CURVE SMOOTH",
"38 -168 OFFCURVE",
"64 -196 OFFCURVE",
"64 -251 CURVE SMOOTH",
"64 -265 OFFCURVE",
"62 -280 OFFCURVE",
"58 -295 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-47 -566 OFFCURVE",
"72 -444 OFFCURVE",
"72 -322 CURVE SMOOTH",
"72 -276 OFFCURVE",
"43 -177 OFFCURVE",
"-104 -177 CURVE SMOOTH",
"-234 -177 OFFCURVE",
"-347 -280 OFFCURVE",
"-347 -404 CURVE SMOOTH",
"-347 -498 OFFCURVE",
"-281 -566 OFFCURVE",
"-174 -566 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-216 -498 OFFCURVE",
"-251 -458 OFFCURVE",
"-251 -399 CURVE SMOOTH",
"-251 -324 OFFCURVE",
"-194 -244 OFFCURVE",
"-116 -244 CURVE SMOOTH",
"-61 -244 OFFCURVE",
"-27 -282 OFFCURVE",
"-27 -340 CURVE SMOOTH",
"-27 -417 OFFCURVE",
"-83 -498 OFFCURVE",
"-162 -498 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 38 40 38 35 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
position = "{-92, 0}";
},
{
name = bottom;
position = "{-202, -628}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"123 -358 OFFCURVE",
"107 -313 OFFCURVE",
"76 -272 CURVE SMOOTH",
"30 -211 OFFCURVE",
"-38 -184 OFFCURVE",
"-122 -184 CURVE SMOOTH",
"-192 -184 OFFCURVE",
"-249 -205 OFFCURVE",
"-294 -246 CURVE SMOOTH",
"-343 -290 OFFCURVE",
"-368 -344 OFFCURVE",
"-368 -409 CURVE SMOOTH",
"-368 -462 OFFCURVE",
"-352 -508 OFFCURVE",
"-319 -547 CURVE SMOOTH",
"-271 -604 OFFCURVE",
"-207 -635 OFFCURVE",
"-122 -635 CURVE SMOOTH",
"-53 -635 OFFCURVE",
"5 -613 OFFCURVE",
"52 -571 CURVE SMOOTH",
"100 -528 OFFCURVE",
"123 -473 OFFCURVE",
"123 -409 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-14 -437 OFFCURVE",
"-18 -461 OFFCURVE",
"-26 -483 CURVE SMOOTH",
"-43 -531 OFFCURVE",
"-77 -553 OFFCURVE",
"-122 -553 CURVE",
"-144 -551 OFFCURVE",
"-164 -544 OFFCURVE",
"-180 -532 CURVE SMOOTH",
"-214 -507 OFFCURVE",
"-231 -467 OFFCURVE",
"-231 -411 CURVE SMOOTH",
"-231 -386 OFFCURVE",
"-227 -363 OFFCURVE",
"-219 -342 CURVE SMOOTH",
"-201 -294 OFFCURVE",
"-169 -269 OFFCURVE",
"-122 -266 CURVE",
"-112 -267 OFFCURVE",
"-102 -270 OFFCURVE",
"-92 -274 CURVE",
"-67 -287 LINE",
"-32 -312 OFFCURVE",
"-14 -354 OFFCURVE",
"-14 -411 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-55 -628 OFFCURVE",
"77 -510 OFFCURVE",
"77 -359 CURVE SMOOTH",
"77 -305 OFFCURVE",
"47 -180 OFFCURVE",
"-107 -180 CURVE SMOOTH",
"-274 -180 OFFCURVE",
"-403 -293 OFFCURVE",
"-403 -445 CURVE SMOOTH",
"-403 -511 OFFCURVE",
"-374 -628 OFFCURVE",
"-205 -628 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-223 -542 OFFCURVE",
"-260 -487 OFFCURVE",
"-260 -421 CURVE SMOOTH",
"-260 -343 OFFCURVE",
"-214 -259 OFFCURVE",
"-142 -259 CURVE SMOOTH",
"-61 -259 OFFCURVE",
"-58 -339 OFFCURVE",
"-58 -373 CURVE SMOOTH",
"-58 -442 OFFCURVE",
"-104 -542 OFFCURVE",
"-181 -542 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 23 39 38 35 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0325;
unicode = 0325;
},
{
glyphname = uni0327;
lastChange = "2018-08-17 12:12:57 +0000";
layers = (
{
anchors = (
{
name = _bottom;
position = "{-87, 0}";
},
{
name = bottom;
position = "{-161, -424}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"82.333 -258.667 OFFCURVE",
"84 -246.667 OFFCURVE",
"84 -236 CURVE SMOOTH",
"84 -184 OFFCURVE",
"56.667 -138 OFFCURVE",
"2 -98 CURVE",
"101 0 LINE",
"28 0 LINE",
"-147 -182 LINE",
"-81.667 -217.333 OFFCURVE",
"-49 -256 OFFCURVE",
"-49 -298 CURVE SMOOTH",
"-49 -307.333 OFFCURVE",
"-50.333 -316 OFFCURVE",
"-53 -324 CURVE",
"-65 -366 OFFCURVE",
"-89.333 -387 OFFCURVE",
"-126 -387 CURVE SMOOTH",
"-135.333 -387 OFFCURVE",
"-149 -377.333 OFFCURVE",
"-167 -358 CURVE",
"-187 -338 OFFCURVE",
"-204 -328 OFFCURVE",
"-218 -328 CURVE SMOOTH",
"-252 -328 OFFCURVE",
"-274 -345.667 OFFCURVE",
"-284 -381 CURVE",
"-286 -385.667 OFFCURVE",
"-287 -390.667 OFFCURVE",
"-287 -396 CURVE SMOOTH",
"-287 -434 OFFCURVE",
"-253.333 -453 OFFCURVE",
"-186 -453 CURVE SMOOTH",
"-130.667 -453 OFFCURVE",
"-77 -436 OFFCURVE",
"-25 -402 CURVE SMOOTH",
"29 -366.667 OFFCURVE",
"63.667 -323.333 OFFCURVE",
"79 -272 CURVE"
);
}
);
};
components = (
{
name = cedilla;
transform = "{1, 0, 0, 1, -360, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 13 values pushed */
25 23 20 18 4 1 3 6 1 0 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
43 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 1 3 133 0 2 1 0 1 2 114 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 3 1 3 133 0 2 1 0 1 2 0 128 0 1 2 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
22 34 36 35 4 12 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _bottom;
position = "{-100, 0}";
},
{
name = bottom;
position = "{-190, -514}";
}
);
components = (
{
name = cedilla;
transform = "{1, 0, 0, 1, -381, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0327;
unicode = 0327;
},
{
glyphname = uni0328;
lastChange = "2018-08-18 15:26:48 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
position = "{75, 10}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"89.667 -396.667 OFFCURVE",
"90 -394 OFFCURVE",
"90 -390 CURVE SMOOTH",
"90 -380.667 OFFCURVE",
"85 -375 OFFCURVE",
"75 -373 CURVE",
"31.667 -392.333 OFFCURVE",
"-5.333 -402 OFFCURVE",
"-36 -402 CURVE SMOOTH",
"-120.667 -402 OFFCURVE",
"-163 -358.667 OFFCURVE",
"-163 -272 CURVE SMOOTH",
"-163 -184.667 OFFCURVE",
"-91.667 -94 OFFCURVE",
"51 0 CURVE",
"-34 0 LINE",
"-209.333 -108.667 OFFCURVE",
"-297 -212 OFFCURVE",
"-297 -310 CURVE SMOOTH",
"-297 -428.667 OFFCURVE",
"-237.333 -488 OFFCURVE",
"-118 -488 CURVE SMOOTH",
"-29.333 -488 OFFCURVE",
"39.667 -458 OFFCURVE",
"89 -398 CURVE"
);
}
);
};
components = (
{
name = ogonek;
transform = "{1, 0, 0, 1, -450, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 33 values pushed */
15 1 2 1 1 76 0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 35 19 33 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _ogonek;
position = "{33, 10}";
}
);
components = (
{
name = ogonek;
transform = "{1, 0, 0, 1, -545, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni0328;
unicode = 0328;
},
{
glyphname = uni0337;
lastChange = "2018-08-18 12:55:31 +0000";
layers = (
{
anchors = (
{
name = _center;
position = "{-4, 408}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"302 885 LINE",
"247 918 LINE",
"-309 -70 LINE",
"-255 -103 LINE"
);
}
);
width = 0;
},
{
anchors = (
{
name = _center;
position = "{-4, 402}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"375 856 LINE",
"315 897 LINE",
"-389 -73 LINE",
"-330 -114 LINE"
);
}
);
width = 0;
}
);
unicode = 0337;
},
{
glyphname = uni0338;
lastChange = "2018-08-18 12:49:43 +0000";
layers = (
{
anchors = (
{
name = _center;
position = "{43, 672}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"688 1376 LINE",
"628 1427 LINE",
"-602 -32 LINE",
"-542 -84 LINE"
);
}
);
width = 0;
},
{
anchors = (
{
name = _center;
position = "{50, 692}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"680 1350 LINE",
"594 1423 LINE",
"-580 39 LINE",
"-498 -39 LINE"
);
}
);
width = 0;
}
);
unicode = 0338;
},
{
glyphname = uni035B;
lastChange = "2018-08-17 12:13:02 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{-55, 856}";
},
{
name = top;
position = "{75, 1593}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"258 1301 LINE",
"246 1345 LINE",
"-60 1345 LINE",
"91 1583 LINE",
"41 1593 LINE",
"-214 1278 LINE",
"-200 1239 LINE",
"110 1239 LINE",
"-43 1000 LINE",
"7 992 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 33 values pushed */
19 1 2 1 1 76 0 1 2 1 133 0 2 0 0 2 87 0 2 2 0 96 0 0 2 0 80 36 21 40 3 12 25 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
},
{
anchors = (
{
name = _top;
position = "{158, 856}";
},
{
name = top;
position = "{211, 1665}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"439 1391 LINE",
"405 1434 LINE",
"101 1434 LINE",
"221 1647 LINE",
"162 1665 LINE",
"-123 1334 LINE",
"-92 1290 LINE",
"215 1290 LINE",
"92 1077 LINE",
"156 1067 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 2 values pushed */
6 100 
WCVTP[ ]\011/* WriteCVTInPixels */
NPUSHB[ ]\011/* 39 values pushed */
0 1 1 3 1 76 0 2 3 2 133 0 0 1 0 134 0 3 1 1 3 87 0 3 3 1 96 0 1 3 1 80 51 22 51 36 4 8 26 
CALL[ ]\011/* CallFunction */
PUSHB[ ]\011/* 2 values pushed */
6 0 
WCVTP[ ]\011/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni035B;
unicode = 035B;
},
{
glyphname = uni16A0;
lastChange = "2018-08-16 17:20:40 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"149 436 LINE",
"804 977 LINE",
"747 1048 LINE",
"176 576 LINE",
"217 788 LINE",
"871 1329 LINE",
"815 1400 LINE",
"244 928 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 7 5 5 0 1 1 76 6 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 850;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"270 412 LINE",
"836 885 LINE",
"733 1004 LINE",
"313 651 LINE",
"354 887 LINE",
"909 1360 LINE",
"811 1491 LINE",
"399 1147 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 7 5 5 0 1 1 76 6 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 17 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 909;
}
);
note = uni16A0;
unicode = 16A0;
},
{
glyphname = uni16A1;
lastChange = "2018-08-16 17:23:19 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"578 1210 OFFCURVE",
"635 1248 OFFCURVE",
"635 1327 CURVE SMOOTH",
"635 1410 OFFCURVE",
"562 1458 OFFCURVE",
"497 1458 CURVE SMOOTH",
"437 1458 OFFCURVE",
"382 1422 OFFCURVE",
"382 1339 CURVE SMOOTH",
"382 1256 OFFCURVE",
"453 1210 OFFCURVE",
"520 1210 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"149 436 LINE",
"804 977 LINE",
"747 1048 LINE",
"176 576 LINE",
"217 788 LINE",
"871 1329 LINE",
"815 1400 LINE",
"244 928 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
},
{
closed = 1;
nodes = (
"557 1246 OFFCURVE",
"602 1291 OFFCURVE",
"602 1347 CURVE SMOOTH",
"602 1403 OFFCURVE",
"557 1448 OFFCURVE",
"501 1448 CURVE SMOOTH",
"445 1448 OFFCURVE",
"400 1403 OFFCURVE",
"400 1347 CURVE SMOOTH",
"400 1291 OFFCURVE",
"445 1246 OFFCURVE",
"501 1246 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 0 6 7 4 6 106 0 7 10 1 9 2 7 9 105 0 0 0 1 95 8 5 3 3 1 1 92 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
8 5 3 3 1 0 0 4 1 0 105 0 4 0 6 7 4 6 106 0 7 10 1 9 2 7 9 105 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 2 9 2 134 8 5 3 3 1 0 0 4 1 0 105 0 4 0 6 7 4 6 106 0 7 9 9 7 89 0 7 7 9 97 10 1 9 7 9 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
19 19 19 50 19 50 21 17 21 21 17 17 21 40 35 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1060;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"732.333 1398.333 OFFCURVE",
"733 1407.667 OFFCURVE",
"733 1417 CURVE",
"734.333 1440.333 OFFCURVE",
"729.667 1461 OFFCURVE",
"719 1479 CURVE",
"685.572 1528.473 OFFCURVE",
"594.059 1526.789 OFFCURVE",
"544 1482 CURVE SMOOTH",
"518.667 1459.333 OFFCURVE",
"503.333 1432.333 OFFCURVE",
"498 1401 CURVE SMOOTH",
"496.667 1393.667 OFFCURVE",
"496 1386.667 OFFCURVE",
"496 1380 CURVE SMOOTH",
"495.333 1358.667 OFFCURVE",
"502.667 1339 OFFCURVE",
"518 1321 CURVE SMOOTH",
"538.667 1297.667 OFFCURVE",
"565.333 1286 OFFCURVE",
"598 1286 CURVE SMOOTH",
"660.667 1286 OFFCURVE",
"723 1331.667 OFFCURVE",
"731 1389 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"195 0 LINE",
"248 299 LINE",
"813 772 LINE",
"713 891 LINE",
"291 541 LINE",
"322 713 LINE",
"877 1186 LINE",
"778 1317 LINE",
"367 973 LINE",
"459 1487 LINE",
"229 1487 LINE",
"-35 0 LINE"
);
},
{
closed = 1;
nodes = (
"679 1307 OFFCURVE",
"725 1353 OFFCURVE",
"725 1411 CURVE SMOOTH",
"725 1468 OFFCURVE",
"679 1514 OFFCURVE",
"622 1514 CURVE SMOOTH",
"565 1514 OFFCURVE",
"519 1468 OFFCURVE",
"519 1411 CURVE SMOOTH",
"519 1353 OFFCURVE",
"565 1307 OFFCURVE",
"622 1307 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
23 15 7 3 0 3 28 27 26 24 22 5 2 0 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 3 3 33 77 0 0 0 1 97 0 1 1 33 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 2 1 0 105 0 3 3 33 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 2 134 0 1 0 0 2 1 0 105 0 3 3 33 3 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
17 22 23 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 909;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "17BD219D-2D94-4C05-9576-05658BFFE30B";
name = "Aug 16 18, 13:20";
paths = (
{
closed = 1;
nodes = (
"727 1325 LINE",
"727 1343.667 OFFCURVE",
"722 1359.667 OFFCURVE",
"712 1373 CURVE",
"696 1391 OFFCURVE",
"676 1400 OFFCURVE",
"652 1400 CURVE SMOOTH",
"615.333 1400 OFFCURVE",
"586 1388.667 OFFCURVE",
"564 1366 CURVE",
"546.667 1346.667 OFFCURVE",
"536 1327.333 OFFCURVE",
"532 1308 CURVE SMOOTH",
"530.667 1301.333 OFFCURVE",
"530 1294.667 OFFCURVE",
"530 1288 CURVE SMOOTH",
"530 1276.667 OFFCURVE",
"532 1266.333 OFFCURVE",
"536 1257 CURVE SMOOTH",
"549.333 1227 OFFCURVE",
"576 1212 OFFCURVE",
"616 1212 CURVE SMOOTH",
"632 1212 OFFCURVE",
"647.667 1215.333 OFFCURVE",
"663 1222 CURVE SMOOTH",
"697 1238 OFFCURVE",
"717.667 1264.667 OFFCURVE",
"725 1302 CURVE"
);
},
{
closed = 1;
nodes = (
"416 656 OFFCURVE",
"508.333 676 OFFCURVE",
"605 716 CURVE SMOOTH",
"750.333 776.667 OFFCURVE",
"880 869 OFFCURVE",
"994 993 CURVE SMOOTH",
"1114.667 1124.333 OFFCURVE",
"1188.667 1260 OFFCURVE",
"1216 1400 CURVE",
"1116 1400 LINE",
"1102.667 1330 OFFCURVE",
"1074.333 1259.667 OFFCURVE",
"1031 1189 CURVE SMOOTH",
"960.333 1072.333 OFFCURVE",
"864 973.333 OFFCURVE",
"742 892 CURVE SMOOTH",
"606.667 801.333 OFFCURVE",
"475 756 OFFCURVE",
"347 756 CURVE",
"371 881 LINE",
"415 881 OFFCURVE",
"461 888.333 OFFCURVE",
"509 903 CURVE SMOOTH",
"620.333 937.667 OFFCURVE",
"722.667 1001.667 OFFCURVE",
"816 1095 CURVE SMOOTH",
"912 1192.333 OFFCURVE",
"970.333 1294 OFFCURVE",
"991 1400 CURVE",
"891 1400 LINE",
"885.667 1373.333 OFFCURVE",
"877 1346 OFFCURVE",
"865 1318 CURVE SMOOTH",
"826.333 1230 OFFCURVE",
"762.333 1153.333 OFFCURVE",
"673 1088 CURVE SMOOTH",
"577 1016.667 OFFCURVE",
"483 981 OFFCURVE",
"391 981 CURVE",
"472 1400 LINE",
"372 1400 LINE",
"100 0 LINE",
"200 0 LINE",
"328 656 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 0 6 7 4 6 106 0 7 10 1 9 2 7 9 105 0 0 0 1 95 8 5 3 3 1 1 92 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
8 5 3 3 1 0 0 4 1 0 105 0 4 0 6 7 4 6 106 0 7 10 1 9 2 7 9 105 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
0 2 9 2 134 8 5 3 3 1 0 0 4 1 0 105 0 4 0 6 7 4 6 106 0 7 9 9 7 89 0 7 7 9 97 10 1 9 7 9 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
19 19 19 50 19 50 21 17 21 21 17 17 21 40 35 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1060;
}
);
note = uni16A1;
unicode = 16A1;
},
{
glyphname = uni16A2;
lastChange = "2018-08-16 17:24:01 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"790 23 LINE",
"331 1407 LINE",
"233 1384 LINE",
"-37 0 LINE",
"63 0 LINE",
"293 1182 LINE",
"693 -23 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
3 1 2 0 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
0 0 0 93 0 78 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 4 values pushed */
0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 4 values pushed */
20 1 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 972;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"942 80 LINE",
"455 1493 LINE",
"227 1470 LINE",
"-33 0 LINE",
"197 0 LINE",
"377 1018 LINE",
"735 -20 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
3 1 2 0 74 2 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
0 0 0 32 0 78 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 4 values pushed */
0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 4 values pushed */
20 1 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1157;
}
);
note = uni16A2;
unicode = 16A2;
},
{
glyphname = uni16A3;
lastChange = "2018-08-16 17:24:15 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"790 23 LINE",
"331 1407 LINE",
"233 1384 LINE",
"-37 0 LINE",
"63 0 LINE",
"293 1182 LINE",
"693 -23 LINE"
);
},
{
closed = 1;
nodes = (
"291 0 LINE",
"384 476 LINE",
"284 476 LINE",
"191 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
5 1 0 1 1 76 7 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 1 0 1 133 2 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 1 0 1 133 2 1 0 0 118 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
0 0 9 8 0 3 0 3 17 4 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 972;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"942 80 LINE",
"455 1493 LINE",
"227 1470 LINE",
"-33 0 LINE",
"197 0 LINE",
"377 1018 LINE",
"735 -20 LINE"
);
},
{
closed = 1;
nodes = (
"492 0 LINE",
"541 276 LINE",
"367 276 LINE",
"317 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 1 0 2 1 76 3 1 2 74 2 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 0 95 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
3 1 2 0 0 2 87 3 1 2 2 0 95 1 1 0 2 0 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
7 7 7 10 7 10 19 20 4 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1157;
}
);
note = uni16A3;
unicode = 16A3;
},
{
glyphname = uni16A4;
lastChange = "2018-08-16 17:26:53 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"470 295 OFFCURVE",
"471 304.333 OFFCURVE",
"471 313 CURVE SMOOTH",
"471 337 OFFCURVE",
"464.333 357.333 OFFCURVE",
"451 374 CURVE SMOOTH",
"433 396.667 OFFCURVE",
"408.333 408 OFFCURVE",
"377 408 CURVE SMOOTH",
"331 408 OFFCURVE",
"294 393.667 OFFCURVE",
"266 365 CURVE SMOOTH",
"244.667 341.667 OFFCURVE",
"231.667 317.667 OFFCURVE",
"227 293 CURVE SMOOTH",
"225.667 285 OFFCURVE",
"225 277 OFFCURVE",
"225 269 CURVE SMOOTH",
"225 253 OFFCURVE",
"228 238.667 OFFCURVE",
"234 226 CURVE SMOOTH",
"250.667 190 OFFCURVE",
"283 172 OFFCURVE",
"331 172 CURVE SMOOTH",
"353.667 172 OFFCURVE",
"375.333 177.333 OFFCURVE",
"396 188 CURVE SMOOTH",
"435.333 209.333 OFFCURVE",
"459.333 241.667 OFFCURVE",
"468 285 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"233 1384 LINE",
"-37 0 LINE",
"63 0 LINE",
"293 1182 LINE",
"693 -23 LINE",
"790 23 LINE",
"331 1407 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"790 23 LINE",
"331 1407 LINE",
"233 1384 LINE",
"-37 0 LINE",
"63 0 LINE",
"293 1182 LINE",
"693 -23 LINE"
);
},
{
closed = 1;
nodes = (
"410 182 OFFCURVE",
"455 227 OFFCURVE",
"455 283 CURVE SMOOTH",
"455 339 OFFCURVE",
"410 384 OFFCURVE",
"354 384 CURVE SMOOTH",
"298 384 OFFCURVE",
"253 339 OFFCURVE",
"253 283 CURVE SMOOTH",
"253 227 OFFCURVE",
"298 182 OFFCURVE",
"354 182 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
18 8 2 0 1 21 1 2 0 2 76 23 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 0 0 2 1 0 105 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
25 40 35 3 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 972;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"942 80 LINE",
"455 1493 LINE",
"227 1470 LINE",
"-33 0 LINE",
"197 0 LINE",
"377 1018 LINE",
"735 -20 LINE"
);
},
{
closed = 1;
nodes = (
"501 83 OFFCURVE",
"547 129 OFFCURVE",
"547 187 CURVE SMOOTH",
"547 244 OFFCURVE",
"501 290 OFFCURVE",
"444 290 CURVE SMOOTH",
"387 290 OFFCURVE",
"341 244 OFFCURVE",
"341 187 CURVE SMOOTH",
"341 129 OFFCURVE",
"387 83 OFFCURVE",
"444 83 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
25 15 1 3 1 2 1 76 3 1 2 74 2 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 2 0 1 0 2 1 105 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 0 134 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
40 37 20 3 8 25 
CALL[ ]\011/* CallFunction */";
};
width = 1157;
}
);
note = uni16A4;
unicode = 16A4;
},
{
glyphname = uni16A5;
lastChange = "2018-08-16 17:27:33 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"548 24 LINE",
"240 907 LINE",
"293 1182 LINE",
"693 -23 LINE",
"790 23 LINE",
"331 1407 LINE",
"233 1384 LINE",
"-36 0 LINE",
"64 0 LINE",
"199 697 LINE",
"451 -24 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
10 6 4 3 2 5 0 74 5 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
0 0 0 93 0 78 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 4 values pushed */
0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 4 values pushed */
23 1 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 972;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"582 80 LINE",
"326 727 LINE",
"377 1018 LINE",
"809 -20 LINE",
"1014 80 LINE",
"455 1493 LINE",
"227 1470 LINE",
"-33 0 LINE",
"197 0 LINE",
"248 289 LINE",
"377 -20 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
7 5 4 3 1 5 0 74 6 2 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
PUSHB[ ]\011/* 6 values pushed */
0 0 0 32 0 78 
ELSE[ ]\011/* Else */
PUSHB[ ]\011/* 4 values pushed */
0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 4 values pushed */
24 1 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1228;
}
);
note = uni16A5;
unicode = 16A5;
},
{
glyphname = uni16A6;
lastChange = "2018-08-16 17:27:44 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"180 341 LINE",
"724 688 LINE",
"740 768 LINE",
"331 1115 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"307 991 LINE",
"617 728 LINE",
"204 465 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
10 9 5 4 4 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 826;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"301 299 LINE",
"877 631 LINE",
"915 852 LINE",
"453 1163 LINE",
"510 1487 LINE",
"281 1487 LINE",
"18 0 LINE"
);
},
{
closed = 1;
nodes = (
"416 944 LINE",
"737 727 LINE",
"340 522 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
10 9 5 4 4 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16A6;
unicode = 16A6;
},
{
glyphname = uni16A7;
lastChange = "2018-08-18 02:57:29 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"577 654 OFFCURVE",
"617 694 OFFCURVE",
"617 744 CURVE SMOOTH",
"617 794 OFFCURVE",
"577 834 OFFCURVE",
"527 834 CURVE SMOOTH",
"477 834 OFFCURVE",
"437 794 OFFCURVE",
"437 744 CURVE SMOOTH",
"437 694 OFFCURVE",
"477 654 OFFCURVE",
"527 654 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"180 341 LINE",
"724 688 LINE",
"740 768 LINE",
"331 1115 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"307 991 LINE",
"617 728 LINE",
"204 465 LINE"
);
},
{
closed = 1;
nodes = (
"447 649 OFFCURVE",
"487 689 OFFCURVE",
"487 739 CURVE SMOOTH",
"487 789 OFFCURVE",
"447 829 OFFCURVE",
"397 829 CURVE SMOOTH",
"347 829 OFFCURVE",
"307 789 OFFCURVE",
"307 739 CURVE SMOOTH",
"307 689 OFFCURVE",
"347 649 OFFCURVE",
"397 649 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 0 7 1 4 7 106 0 6 0 5 2 6 5 105 0 3 3 92 77 0 0 0 1 97 0 1 1 95 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 3 4 3 133 0 4 0 7 1 4 7 106 0 6 0 5 2 6 5 105 0 0 0 1 97 0 1 1 95 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 3 4 3 133 0 4 0 7 1 4 7 106 0 1 0 0 6 1 0 105 0 6 0 5 2 6 5 105 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 3 4 3 133 0 2 5 2 134 0 4 0 7 1 4 7 106 0 1 0 0 6 1 0 105 0 6 5 5 6 89 0 6 6 5 97 0 5 6 5 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
24 17 26 17 17 19 38 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 826;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"577 654 OFFCURVE",
"617 694 OFFCURVE",
"617 744 CURVE SMOOTH",
"617 794 OFFCURVE",
"577 834 OFFCURVE",
"527 834 CURVE SMOOTH",
"477 834 OFFCURVE",
"437 794 OFFCURVE",
"437 744 CURVE SMOOTH",
"437 694 OFFCURVE",
"477 654 OFFCURVE",
"527 654 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"297 270 LINE",
"920 631 LINE",
"958 852 LINE",
"461 1202 LINE",
"510 1487 LINE",
"281 1487 LINE",
"18 0 LINE"
);
},
{
closed = 1;
nodes = (
"422 983 LINE",
"780 727 LINE",
"336 492 LINE"
);
},
{
closed = 1;
nodes = (
"572 652 OFFCURVE",
"612 692 OFFCURVE",
"612 742 CURVE SMOOTH",
"612 792 OFFCURVE",
"572 832 OFFCURVE",
"522 832 CURVE SMOOTH",
"472 832 OFFCURVE",
"432 792 OFFCURVE",
"432 742 CURVE SMOOTH",
"432 692 OFFCURVE",
"472 652 OFFCURVE",
"522 652 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
9 5 4 3 3 1 19 11 2 2 3 10 1 0 2 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 1 1 33 77 0 2 2 3 97 0 3 3 34 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 3 0 2 0 3 2 106 0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 0 2 0 134 0 3 0 2 0 3 2 106 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
40 43 17 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1038;
}
);
note = uni16A7;
unicode = 16A7;
},
{
glyphname = uni16A8;
lastChange = "2018-08-16 17:31:56 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"245 930 LINE",
"450 736 LINE",
"521 811 LINE",
"269 1057 LINE",
"311 1272 LINE",
"517 1080 LINE",
"587 1154 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
11 10 9 8 7 1 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 599;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"342 819 LINE",
"551 627 LINE",
"678 772 LINE",
"385 1053 LINE",
"422 1270 LINE",
"631 1079 LINE",
"748 1212 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
10 9 8 7 6 1 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 770;
}
);
note = uni16A8;
unicode = 16A8;
},
{
glyphname = uni16A9;
lastChange = "2018-08-16 17:33:03 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"244 928 LINE",
"480 698 LINE",
"839 985 LINE",
"785 1058 LINE",
"506 832 LINE",
"269 1058 LINE",
"311 1270 LINE",
"546 1040 LINE",
"906 1327 LINE",
"851 1400 LINE",
"572 1174 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
14 13 12 11 10 9 7 2 1 9 0 1 1 76 8 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 884;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"342 819 LINE",
"598 592 LINE",
"948 952 LINE",
"831 1044 LINE",
"618 829 LINE",
"383 1053 LINE",
"422 1268 LINE",
"678 1036 LINE",
"1026 1399 LINE",
"909 1491 LINE",
"686 1266 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
15 14 13 12 11 10 9 8 7 5 10 0 1 1 76 6 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1011;
}
);
note = uni16A9;
unicode = 16A9;
},
{
glyphname = uni16AA;
lastChange = "2018-08-16 17:33:33 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"245 931 LINE",
"460 727 LINE",
"533 803 LINE",
"270 1058 LINE",
"311 1270 LINE",
"546 1040 LINE",
"906 1327 LINE",
"851 1400 LINE",
"572 1174 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
11 6 5 4 3 2 1 7 0 1 1 76 12 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 23 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 884;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"342 819 LINE",
"598 592 LINE",
"743 741 LINE",
"383 1053 LINE",
"423 1268 LINE",
"678 1036 LINE",
"1026 1399 LINE",
"909 1491 LINE",
"686 1266 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
13 12 11 10 9 8 7 5 8 0 1 1 76 6 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1011;
}
);
note = uni16AA;
unicode = 16AA;
},
{
glyphname = uni16AB;
lastChange = "2018-08-16 17:34:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"245 930 LINE",
"660 539 LINE",
"730 612 LINE",
"269 1057 LINE",
"311 1270 LINE",
"726 879 LINE",
"796 953 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
11 10 9 8 7 1 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 847;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"342 819 LINE",
"694 496 LINE",
"819 641 LINE",
"385 1053 LINE",
"422 1266 LINE",
"780 938 LINE",
"897 1071 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
11 10 9 8 7 1 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 937;
}
);
note = uni16AB;
unicode = 16AB;
},
{
glyphname = uni16AC;
lastChange = "2018-08-16 17:34:28 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"417 0 LINE",
"521 535 LINE",
"806 420 LINE",
"859 514 LINE",
"542 641 LINE",
"582 849 LINE",
"867 734 LINE",
"920 828 LINE",
"603 956 LINE",
"690 1400 LINE",
"590 1400 LINE",
"510 993 LINE",
"215 1112 LINE",
"162 1018 LINE",
"490 886 LINE",
"449 679 LINE",
"154 798 LINE",
"101 704 LINE",
"429 572 LINE",
"317 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 18 17 16 15 12 11 10 9 8 7 6 5 2 1 15 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"487 0 LINE",
"565 451 LINE",
"791 362 LINE",
"883 508 LINE",
"596 618 LINE",
"633 825 LINE",
"858 733 LINE",
"942 883 LINE",
"664 995 LINE",
"750 1487 LINE",
"520 1487 LINE",
"449 1083 LINE",
"211 1180 LINE",
"127 1032 LINE",
"420 911 LINE",
"383 702 LINE",
"145 799 LINE",
"51 653 LINE",
"352 537 LINE",
"258 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
19 18 17 16 15 12 11 10 9 8 7 6 5 2 1 15 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16AC;
unicode = 16AC;
},
{
glyphname = uni16AD;
lastChange = "2018-08-16 17:34:44 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"218 535 LINE",
"502 420 LINE",
"555 514 LINE",
"239 641 LINE",
"279 849 LINE",
"563 734 LINE",
"616 828 LINE",
"300 956 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 10 9 8 7 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 691;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"287 504 LINE",
"496 309 LINE",
"621 457 LINE",
"328 735 LINE",
"365 948 LINE",
"575 760 LINE",
"690 893 LINE",
"403 1167 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 10 9 8 7 6 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 770;
}
);
note = uni16AD;
unicode = 16AD;
},
{
glyphname = uni16AE;
lastChange = "2018-08-16 17:34:55 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"405 0 LINE",
"678 1400 LINE",
"578 1400 LINE",
"491 956 LINE",
"125 828 LINE",
"142 734 LINE",
"470 849 LINE",
"430 641 LINE",
"64 514 LINE",
"81 420 LINE",
"409 535 LINE",
"305 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
11 10 3 2 4 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 22 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 691;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"541 0 LINE",
"803 1487 LINE",
"573 1487 LINE",
"518 1167 LINE",
"133 893 LINE",
"203 760 LINE",
"479 948 LINE",
"442 735 LINE",
"49 457 LINE",
"123 309 LINE",
"401 504 LINE",
"311 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
8 7 6 4 3 2 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 770;
}
);
note = uni16AE;
unicode = 16AE;
},
{
glyphname = uni16AF;
lastChange = "2018-08-16 17:35:06 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"405 0 LINE",
"517 572 LINE",
"896 704 LINE",
"879 798 LINE",
"537 679 LINE",
"578 886 LINE",
"957 1018 LINE",
"940 1112 LINE",
"598 993 LINE",
"678 1400 LINE",
"578 1400 LINE",
"491 956 LINE",
"125 828 LINE",
"142 734 LINE",
"470 849 LINE",
"430 641 LINE",
"64 514 LINE",
"81 420 LINE",
"409 535 LINE",
"305 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
19 18 13 12 9 8 3 2 8 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 22 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"473 0 LINE",
"567 537 LINE",
"909 653 LINE",
"868 799 LINE",
"598 702 LINE",
"635 911 LINE",
"969 1032 LINE",
"938 1180 LINE",
"664 1083 LINE",
"735 1487 LINE",
"506 1487 LINE",
"420 995 LINE",
"98 883 LINE",
"131 733 LINE",
"389 825 LINE",
"352 618 LINE",
"27 508 LINE",
"68 362 LINE",
"324 451 LINE",
"244 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
18 17 16 14 13 12 7 6 4 3 2 11 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16AF;
unicode = 16AF;
},
{
glyphname = uni16B0;
lastChange = "2018-08-16 17:35:17 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"405 0 LINE",
"578 886 LINE",
"957 1018 LINE",
"940 1112 LINE",
"598 993 LINE",
"678 1400 LINE",
"578 1400 LINE",
"491 956 LINE",
"125 828 LINE",
"142 734 LINE",
"470 849 LINE",
"430 641 LINE",
"64 514 LINE",
"81 420 LINE",
"409 535 LINE",
"305 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 14 9 8 3 2 6 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 22 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"473 0 LINE",
"635 911 LINE",
"969 1032 LINE",
"938 1180 LINE",
"664 1083 LINE",
"735 1487 LINE",
"506 1487 LINE",
"420 995 LINE",
"98 883 LINE",
"131 733 LINE",
"389 825 LINE",
"352 618 LINE",
"27 508 LINE",
"68 362 LINE",
"324 451 LINE",
"244 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 12 7 6 4 3 2 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16B0;
unicode = 16B0;
},
{
glyphname = uni16B1;
lastChange = "2018-08-16 17:35:27 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"543 23 LINE",
"236 686 LINE",
"693 990 LINE",
"708 1070 LINE",
"338 1401 LINE",
"239 1400 LINE",
"-33 0 LINE",
"67 0 LINE",
"178 572 LINE",
"449 -32 LINE"
);
},
{
closed = 1;
nodes = (
"315 1274 LINE",
"588 1030 LINE",
"218 776 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
12 11 9 7 2 5 0 1 1 76 1 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 722;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"854 104 LINE",
"498 702 LINE",
"936 952 LINE",
"975 1176 LINE",
"512 1487 LINE",
"283 1487 LINE",
"20 0 LINE",
"250 0 LINE",
"348 559 LINE",
"692 -18 LINE"
);
},
{
closed = 1;
nodes = (
"473 1268 LINE",
"797 1051 LINE",
"397 846 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
12 10 9 7 2 1 6 0 1 1 76 11 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16B1;
unicode = 16B1;
},
{
glyphname = uni16B2;
lastChange = "2018-08-16 17:35:39 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"579 235 LINE",
"206 700 LINE",
"759 1165 LINE",
"702 1235 LINE",
"107 735 LINE",
"93 665 LINE",
"494 165 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
4 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 768;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"590 322 LINE",
"289 702 LINE",
"743 1079 LINE",
"600 1235 LINE",
"82 793 LINE",
"49 612 LINE",
"414 166 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
4 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 768;
}
);
note = uni16B2;
unicode = 16B2;
},
{
glyphname = uni16B3;
lastChange = "2018-08-16 17:35:47 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"156 472 LINE",
"543 0 LINE",
"627 71 LINE",
"183 612 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
4 2 1 3 0 1 1 76 3 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 7 0 7 21 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 850;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"281 471 LINE",
"651 31 LINE",
"827 182 LINE",
"338 788 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
4 3 2 1 4 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 134 2 1 1 1 33 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 7 0 7 21 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16B3;
unicode = 16B3;
},
{
glyphname = uni16B4;
lastChange = "2018-08-16 17:35:59 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"217 788 LINE",
"871 1329 LINE",
"815 1400 LINE",
"244 928 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
4 1 0 1 1 76 5 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 850;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"354 887 LINE",
"909 1360 LINE",
"811 1491 LINE",
"399 1147 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
6 4 2 0 1 1 76 5 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 909;
}
);
note = uni16B4;
unicode = 16B4;
},
{
glyphname = uni16B5;
lastChange = "2018-08-16 17:37:46 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"217 788 LINE",
"871 1329 LINE",
"815 1400 LINE",
"244 928 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
},
{
closed = 1;
nodes = (
"557 1246 OFFCURVE",
"602 1291 OFFCURVE",
"602 1347 CURVE SMOOTH",
"602 1403 OFFCURVE",
"557 1448 OFFCURVE",
"501 1448 CURVE SMOOTH",
"445 1448 OFFCURVE",
"400 1403 OFFCURVE",
"400 1347 CURVE SMOOTH",
"400 1291 OFFCURVE",
"445 1246 OFFCURVE",
"501 1246 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
18 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 0 6 2 4 6 106 0 0 0 1 95 5 3 2 1 1 92 77 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
5 3 2 1 0 0 4 1 0 105 0 4 0 6 2 4 6 106 0 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
0 2 6 2 134 5 3 2 1 0 0 4 1 0 105 0 4 6 6 4 89 0 4 4 6 98 0 6 4 6 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
21 21 17 17 20 40 35 7 12 29 
CALL[ ]\011/* CallFunction */";
};
width = 850;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"319 684 LINE",
"975 1245 LINE",
"877 1376 LINE",
"365 944 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
},
{
closed = 1;
nodes = (
"679 1287 OFFCURVE",
"725 1333 OFFCURVE",
"725 1391 CURVE SMOOTH",
"725 1448 OFFCURVE",
"679 1494 OFFCURVE",
"622 1494 CURVE SMOOTH",
"565 1494 OFFCURVE",
"519 1448 OFFCURVE",
"519 1391 CURVE SMOOTH",
"519 1333 OFFCURVE",
"565 1287 OFFCURVE",
"622 1287 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
23 16 2 0 1 24 22 2 2 0 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 3 3 33 77 0 0 0 1 97 0 1 1 33 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 0 2 1 0 105 0 3 3 33 77 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 2 134 0 1 0 0 2 1 0 105 0 3 3 33 3 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
17 21 38 20 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 985;
}
);
note = uni16B5;
unicode = 16B5;
},
{
glyphname = uni16B6;
lastChange = "2018-08-16 17:39:11 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"185 0 LINE",
"316 670 LINE",
"403 686 OFFCURVE",
"490 764 OFFCURVE",
"490 882 CURVE SMOOTH",
"490 893 OFFCURVE",
"489 902 OFFCURVE",
"487 911 CURVE",
"993 1329 LINE",
"936 1400 LINE",
"441 991 LINE",
"424 1004 OFFCURVE",
"404 1013 OFFCURVE",
"383 1018 CURVE",
"457 1400 LINE",
"357 1400 LINE",
"282 1012 LINE",
"203 987 OFFCURVE",
"125 917 OFFCURVE",
"125 808 CURVE SMOOTH",
"125 760 OFFCURVE",
"146 705 OFFCURVE",
"217 678 CURVE",
"85 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
24 20 13 9 2 5 0 1 1 76 23 1 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 23 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 970;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"338 510 LINE",
"475 564 OFFCURVE",
"532 671 OFFCURVE",
"532 793 CURVE SMOOTH",
"532 802 OFFCURVE",
"531 812 OFFCURVE",
"530 821 CURVE",
"1024 1245 LINE",
"926 1376 LINE",
"455 979 LINE",
"445 986 OFFCURVE",
"435 992 OFFCURVE",
"424 997 CURVE",
"510 1487 LINE",
"281 1487 LINE",
"195 1004 LINE",
"49 957 OFFCURVE",
"-23 809 OFFCURVE",
"-23 705 CURVE SMOOTH",
"-23 621 OFFCURVE",
"23 546 OFFCURVE",
"109 508 CURVE",
"18 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
21 18 17 14 2 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
27 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 985;
}
);
note = uni16B6;
unicode = 16B6;
},
{
glyphname = uni16B7;
lastChange = "2018-08-16 17:39:30 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"446 571 LINE",
"604 -21 LINE",
"703 21 LINE",
"524 690 LINE",
"963 1359 LINE",
"881 1401 LINE",
"492 809 LINE",
"334 1401 LINE",
"235 1359 LINE",
"414 690 LINE",
"-25 21 LINE",
"57 -21 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 924;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"428 485 LINE",
"573 -47 LINE",
"791 41 LINE",
"590 739 LINE",
"1040 1450 LINE",
"854 1536 LINE",
"514 1004 LINE",
"365 1536 LINE",
"145 1448 LINE",
"350 737 LINE",
"-88 43 LINE",
"86 -47 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 923;
}
);
note = uni16B7;
unicode = 16B7;
},
{
glyphname = uni16B8;
lastChange = "2018-08-16 17:39:53 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"446 571 LINE",
"604 -21 LINE",
"703 21 LINE",
"577 493 LINE",
"812 690 LINE",
"653 887 LINE",
"963 1359 LINE",
"881 1401 LINE",
"492 809 LINE",
"334 1401 LINE",
"235 1359 LINE",
"361 886 LINE",
"127 690 LINE",
"285 494 LINE",
"-25 21 LINE",
"57 -21 LINE"
);
},
{
closed = 1;
nodes = (
"268 690 LINE",
"387 790 LINE",
"414 690 LINE",
"349 591 LINE"
);
},
{
closed = 1;
nodes = (
"524 690 LINE",
"590 790 LINE",
"671 690 LINE",
"551 590 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
23 21 15 7 3 1 3 50 
CALL[ ]\011/* CallFunction */";
};
width = 924;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"428 485 LINE",
"573 -47 LINE",
"793 41 LINE",
"651 526 LINE",
"897 743 LINE",
"727 956 LINE",
"1040 1448 LINE",
"852 1536 LINE",
"514 1004 LINE",
"365 1536 LINE",
"147 1448 LINE",
"289 948 LINE",
"47 743 LINE",
"219 530 LINE",
"-88 43 LINE",
"86 -47 LINE"
);
},
{
closed = 1;
nodes = (
"217 743 LINE",
"322 834 LINE",
"350 737 LINE",
"295 649 LINE"
);
},
{
closed = 1;
nodes = (
"590 739 LINE",
"649 834 LINE",
"725 743 LINE",
"616 651 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
22 20 18 16 9 1 3 50 
CALL[ ]\011/* CallFunction */";
};
width = 923;
}
);
note = uni16B8;
unicode = 16B8;
},
{
glyphname = uni16B9;
lastChange = "2018-08-16 17:40:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"209 747 LINE",
"656 1032 LINE",
"672 1113 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
},
{
closed = 1;
nodes = (
"312 1274 LINE",
"549 1073 LINE",
"233 871 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
10 9 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 692;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"358 623 LINE",
"934 952 LINE",
"973 1176 LINE",
"510 1487 LINE",
"281 1487 LINE",
"18 0 LINE"
);
},
{
closed = 1;
nodes = (
"471 1268 LINE",
"795 1051 LINE",
"397 846 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
9 8 4 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16B9;
unicode = 16B9;
},
{
glyphname = uni16BA;
lastChange = "2018-08-16 17:40:22 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"238 896 LINE",
"810 372 LINE",
"738 0 LINE",
"838 0 LINE",
"1110 1400 LINE",
"1010 1400 LINE",
"835 498 LINE",
"262 1022 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
9 8 3 2 4 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 2 0 2 133 1 1 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 17 19 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1076;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"334 772 LINE",
"762 387 LINE",
"692 0 LINE",
"922 0 LINE",
"1184 1487 LINE",
"954 1487 LINE",
"807 645 LINE",
"379 1030 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
9 8 3 2 4 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 33 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
1 1 0 2 0 134 3 1 2 2 33 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 17 19 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1169;
}
);
note = uni16BA;
unicode = 16BA;
},
{
glyphname = uni16BB;
lastChange = "2018-08-16 17:40:29 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"211 758 LINE",
"784 235 LINE",
"738 0 LINE",
"838 0 LINE",
"1110 1400 LINE",
"1010 1400 LINE",
"862 636 LINE",
"289 1159 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE"
);
},
{
closed = 1;
nodes = (
"236 884 LINE",
"265 1033 LINE",
"837 510 LINE",
"808 362 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 13 9 8 3 2 6 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 2 0 2 133 1 1 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 17 19 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1076;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"291 526 LINE",
"717 141 LINE",
"692 0 LINE",
"922 0 LINE",
"1184 1487 LINE",
"954 1487 LINE",
"856 934 LINE",
"430 1317 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
},
{
closed = 1;
nodes = (
"336 782 LINE",
"385 1061 LINE",
"811 676 LINE",
"764 399 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 14 13 9 8 3 6 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 33 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
1 1 0 2 0 134 3 1 2 2 33 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 17 19 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1169;
}
);
note = uni16BB;
unicode = 16BB;
},
{
glyphname = uni16BC;
lastChange = "2018-08-16 17:40:35 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"313 0 LINE",
"437 638 LINE",
"595 464 LINE",
"677 538 LINE",
"484 751 LINE",
"759 964 LINE",
"706 1038 LINE",
"481 864 LINE",
"585 1400 LINE",
"485 1400 LINE",
"381 864 LINE",
"224 1038 LINE",
"142 964 LINE",
"335 751 LINE",
"59 538 LINE",
"112 464 LINE",
"337 638 LINE",
"213 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 15 14 11 10 9 8 7 6 5 2 1 13 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 815;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"381 0 LINE",
"475 541 LINE",
"596 412 LINE",
"725 528 LINE",
"518 750 LINE",
"799 973 LINE",
"713 1090 LINE",
"551 961 LINE",
"643 1487 LINE",
"414 1487 LINE",
"322 963 LINE",
"207 1085 LINE",
"80 971 LINE",
"285 750 LINE",
"4 526 LINE",
"90 410 LINE",
"246 532 LINE",
"152 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
17 16 15 14 13 12 11 8 7 6 5 4 3 2 14 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 894;
}
);
note = uni16BC;
unicode = 16BC;
},
{
glyphname = uni16BD;
lastChange = "2018-08-16 17:41:17 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"225 572 LINE",
"318 589 OFFCURVE",
"413 678 OFFCURVE",
"413 806 CURVE SMOOTH",
"413 869 OFFCURVE",
"382 936 OFFCURVE",
"300 955 CURVE",
"386 1400 LINE",
"286 1400 LINE",
"199 954 LINE",
"93 932 OFFCURVE",
"8 837 OFFCURVE",
"8 723 CURVE SMOOTH",
"8 658 OFFCURVE",
"44 597 OFFCURVE",
"126 575 CURVE",
"14 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
13 2 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 400;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"289 0 LINE",
"369 453 LINE",
"479 499 OFFCURVE",
"522 595 OFFCURVE",
"522 684 CURVE SMOOTH",
"522 749 OFFCURVE",
"507 816 OFFCURVE",
"440 858 CURVE",
"551 1487 LINE",
"322 1487 LINE",
"213 860 LINE",
"97 815 OFFCURVE",
"47 694 OFFCURVE",
"47 614 CURVE SMOOTH",
"47 548 OFFCURVE",
"74 494 OFFCURVE",
"139 455 CURVE",
"59 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
14 6 2 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
27 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 595;
}
);
note = uni16BD;
unicode = 16BD;
},
{
glyphname = uni16BE;
lastChange = "2018-08-16 17:41:36 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"286 0 LINE",
"423 707 LINE",
"622 614 LINE",
"679 706 LINE",
"445 816 LINE",
"558 1400 LINE",
"458 1400 LINE",
"353 859 LINE",
"168 946 LINE",
"110 854 LINE",
"332 750 LINE",
"186 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 8 7 6 5 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 766;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"487 0 LINE",
"604 670 LINE",
"829 582 LINE",
"922 725 LINE",
"635 836 LINE",
"750 1487 LINE",
"520 1487 LINE",
"420 922 LINE",
"182 1016 LINE",
"90 872 LINE",
"391 754 LINE",
"258 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
11 8 7 6 5 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16BE;
unicode = 16BE;
},
{
glyphname = uni16BF;
lastChange = "2018-08-16 17:41:45 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"286 0 LINE",
"423 707 LINE",
"622 614 LINE",
"679 706 LINE",
"445 816 LINE",
"558 1400 LINE",
"458 1400 LINE",
"186 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
7 2 1 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 766;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"315 670 LINE",
"541 582 LINE",
"633 725 LINE",
"344 836 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
7 2 1 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 735;
}
);
note = uni16BF;
unicode = 16BF;
},
{
glyphname = uni16C0;
lastChange = "2018-08-16 17:42:59 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"351 0 LINE",
"470 610 LINE",
"503 616 OFFCURVE",
"536 635 OFFCURVE",
"571 668 CURVE",
"725 596 LINE",
"782 688 LINE",
"625 762 LINE",
"630 782 OFFCURVE",
"632 801 OFFCURVE",
"632 819 CURVE SMOOTH",
"632 875 OFFCURVE",
"605 933 OFFCURVE",
"536 952 CURVE",
"623 1400 LINE",
"523 1400 LINE",
"436 952 LINE",
"397 943 OFFCURVE",
"364 925 OFFCURVE",
"335 898 CURVE",
"191 964 LINE",
"133 872 LINE",
"276 807 LINE",
"270 786 OFFCURVE",
"267 765 OFFCURVE",
"267 745 CURVE SMOOTH",
"267 688 OFFCURVE",
"296 633 OFFCURVE",
"370 612 CURVE",
"251 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
26 25 19 14 13 12 11 5 8 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
29 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 884;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"487 0 LINE",
"586 563 LINE",
"629 583 OFFCURVE",
"662 613 OFFCURVE",
"686 637 CURVE",
"829 582 LINE",
"922 725 LINE",
"754 791 LINE",
"755 800 OFFCURVE",
"756 810 OFFCURVE",
"756 821 CURVE SMOOTH",
"756 889 OFFCURVE",
"729 971 OFFCURVE",
"666 1010 CURVE",
"750 1487 LINE",
"520 1487 LINE",
"438 1024 LINE",
"397 1009 OFFCURVE",
"361 986 OFFCURVE",
"330 956 CURVE",
"182 1016 LINE",
"90 872 LINE",
"242 811 LINE",
"237 794 OFFCURVE",
"231 761 OFFCURVE",
"231 741 CURVE SMOOTH",
"231 665 OFFCURVE",
"271 593 OFFCURVE",
"356 555 CURVE",
"258 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
30 24 19 18 17 16 8 2 1 9 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
31 22 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16C0;
unicode = 16C0;
},
{
glyphname = uni16C1;
lastChange = "2018-08-16 17:43:17 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 400;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 428;
}
);
note = uni16C1;
unicode = 16C1;
},
{
glyphname = uni16C2;
lastChange = "2018-08-16 17:44:06 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"225 572 LINE",
"318 590 OFFCURVE",
"413 678 OFFCURVE",
"413 806 CURVE SMOOTH",
"413 872 OFFCURVE",
"380 937 OFFCURVE",
"300 955 CURVE",
"386 1400 LINE",
"286 1400 LINE",
"199 954 LINE",
"92 932 OFFCURVE",
"8 836 OFFCURVE",
"8 723 CURVE SMOOTH",
"8 657 OFFCURVE",
"44 597 OFFCURVE",
"126 575 CURVE",
"14 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
13 2 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 400;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"289 0 LINE",
"369 455 LINE",
"476 504 OFFCURVE",
"522 587 OFFCURVE",
"522 688 CURVE SMOOTH",
"522 755 OFFCURVE",
"504 820 OFFCURVE",
"440 860 CURVE",
"551 1487 LINE",
"322 1487 LINE",
"213 864 LINE",
"98 817 OFFCURVE",
"47 696 OFFCURVE",
"47 616 CURVE SMOOTH",
"47 552 OFFCURVE",
"77 496 OFFCURVE",
"141 457 CURVE",
"59 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
14 6 2 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
27 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 595;
}
);
note = uni16C2;
unicode = 16C2;
},
{
glyphname = uni16C3;
lastChange = "2018-08-16 17:44:18 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"544 492 LINE",
"240 804 LINE",
"666 1116 LINE",
"615 1192 LINE",
"138 842 LINE",
"124 766 LINE",
"464 416 LINE"
);
},
{
closed = 1;
nodes = (
"884 448 LINE",
"898 524 LINE",
"558 874 LINE",
"478 798 LINE",
"782 486 LINE",
"356 174 LINE",
"407 98 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
11 8 5 1 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1022;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"623 545 LINE",
"322 926 LINE",
"776 1303 LINE",
"635 1458 LINE",
"115 1016 LINE",
"84 836 LINE",
"446 387 LINE"
);
},
{
closed = 1;
nodes = (
"1112 459 LINE",
"1145 639 LINE",
"780 1081 LINE",
"584 926 LINE",
"905 549 LINE",
"471 168 LINE",
"592 10 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
11 8 6 3 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1255;
}
);
note = uni16C3;
unicode = 16C3;
},
{
glyphname = uni16C4;
lastChange = "2018-08-16 17:44:24 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"328 0 LINE",
"410 421 LINE",
"725 682 LINE",
"739 754 LINE",
"525 1015 LINE",
"600 1400 LINE",
"500 1400 LINE",
"425 1015 LINE",
"110 754 LINE",
"97 682 LINE",
"310 422 LINE",
"228 0 LINE"
);
},
{
closed = 1;
nodes = (
"210 718 LINE",
"398 874 LINE",
"337 562 LINE"
);
},
{
closed = 1;
nodes = (
"498 874 LINE",
"625 718 LINE",
"437 562 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 16 13 8 7 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 21 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 828;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"416 0 LINE",
"489 424 LINE",
"823 707 LINE",
"836 778 LINE",
"602 1059 LINE",
"678 1487 LINE",
"449 1487 LINE",
"375 1059 LINE",
"41 778 LINE",
"27 707 LINE",
"262 426 LINE",
"186 0 LINE"
);
},
{
closed = 1;
nodes = (
"180 741 LINE",
"342 879 LINE",
"295 606 LINE"
);
},
{
closed = 1;
nodes = (
"569 879 LINE",
"684 741 LINE",
"522 606 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 16 13 8 7 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 21 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 866;
}
);
note = uni16C4;
unicode = 16C4;
},
{
glyphname = uni16C5;
lastChange = "2018-08-16 17:46:18 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"320 0 LINE",
"465 750 LINE",
"727 854 LINE",
"706 946 LINE",
"487 859 LINE",
"592 1400 LINE",
"492 1400 LINE",
"378 816 LINE",
"101 706 LINE",
"123 614 LINE",
"357 707 LINE",
"220 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
11 10 5 4 4 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 797;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"473 0 LINE",
"606 754 LINE",
"948 872 LINE",
"905 1016 LINE",
"635 922 LINE",
"735 1487 LINE",
"506 1487 LINE",
"391 836 LINE",
"66 725 LINE",
"106 582 LINE",
"362 670 LINE",
"244 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
9 8 3 2 4 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = uni16C5;
unicode = 16C5;
},
{
glyphname = uni16C6;
lastChange = "2018-08-16 17:46:24 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"320 0 LINE",
"592 1400 LINE",
"492 1400 LINE",
"378 816 LINE",
"101 706 LINE",
"123 614 LINE",
"357 707 LINE",
"220 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
7 6 2 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 605;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"473 0 LINE",
"735 1487 LINE",
"506 1487 LINE",
"391 836 LINE",
"66 725 LINE",
"106 582 LINE",
"362 670 LINE",
"244 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
3 2 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 702;
}
);
note = uni16C6;
unicode = 16C6;
},
{
glyphname = uni16C7;
lastChange = "2018-08-16 17:46:30 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"384 0 LINE",
"634 1290 LINE",
"909 1160 LINE",
"967 1252 LINE",
"656 1400 LINE",
"556 1400 LINE",
"305 112 LINE",
"44 235 LINE",
"-13 143 LINE",
"284 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 2 1 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 971;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"483 0 LINE",
"707 1270 LINE",
"915 1079 LINE",
"1032 1212 LINE",
"745 1487 LINE",
"516 1487 LINE",
"293 217 LINE",
"84 410 LINE",
"-33 274 LINE",
"254 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 2 1 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 997;
}
);
note = uni16C7;
unicode = 16C7;
},
{
glyphname = uni16C8;
lastChange = "2018-08-16 17:46:59 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"538 64 LINE",
"308 280 LINE",
"89 129 LINE",
"311 1271 LINE",
"472 1120 LINE",
"785 1336 LINE",
"737 1413 LINE",
"496 1243 LINE",
"336 1400 LINE",
"236 1400 LINE",
"-36 0 LINE",
"64 0 LINE",
"64 2 LINE",
"284 157 LINE",
"460 -13 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
12 10 9 8 7 6 5 3 8 1 0 1 76 4 1 0 74 11 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
44 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 756;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"721 113 LINE",
"455 371 LINE",
"238 219 LINE",
"422 1268 LINE",
"586 1116 LINE",
"942 1372 LINE",
"860 1499 LINE",
"623 1329 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE",
"199 0 LINE",
"199 2 LINE",
"416 158 LINE",
"594 -12 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
15 14 13 12 11 9 2 7 0 1 1 76 10 1 1 74 1 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 35 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 907;
}
);
note = uni16C8;
unicode = 16C8;
},
{
glyphname = uni16C9;
lastChange = "2018-08-16 17:47:21 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"443 0 LINE",
"628 954 LINE",
"1085 1345 LINE",
"1027 1415 LINE",
"656 1098 LINE",
"715 1400 LINE",
"615 1400 LINE",
"556 1098 LINE",
"309 1415 LINE",
"224 1345 LINE",
"529 955 LINE",
"343 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
10 7 5 4 4 0 1 1 76 11 6 2 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1061;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"621 0 LINE",
"776 887 LINE",
"1331 1360 LINE",
"1233 1491 LINE",
"821 1147 LINE",
"883 1487 LINE",
"653 1487 LINE",
"594 1147 LINE",
"303 1491 LINE",
"158 1360 LINE",
"547 887 LINE",
"391 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
10 8 5 3 2 5 0 1 1 76 9 4 2 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16C9;
unicode = 16C9;
},
{
glyphname = uni16CA;
lastChange = "2018-08-16 17:47:31 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"488 65 LINE",
"150 368 LINE",
"606 671 LINE",
"614 713 LINE",
"276 1016 LINE",
"732 1319 LINE",
"688 1400 LINE",
"171 1056 LINE",
"155 976 LINE",
"472 692 LINE",
"45 408 LINE",
"29 327 LINE",
"412 -16 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 710;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"537 147 LINE",
"244 410 LINE",
"596 649 LINE",
"625 815 LINE",
"354 1057 LINE",
"743 1323 LINE",
"649 1485 LINE",
"174 1159 LINE",
"139 954 LINE",
"385 733 LINE",
"59 510 LINE",
"25 307 LINE",
"387 -14 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
7 1 1 50 
CALL[ ]\011/* CallFunction */";
};
width = 708;
}
);
note = uni16CA;
unicode = 16CA;
},
{
glyphname = uni16CB;
lastChange = "2018-08-16 17:47:39 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"708 0 LINE",
"895 964 LINE",
"795 964 LINE",
"227 580 LINE",
"386 1400 LINE",
"286 1400 LINE",
"102 454 LINE",
"202 454 LINE",
"771 838 LINE",
"608 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
7 2 2 1 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 3 2 1 2 3 1 128 0 1 0 2 1 0 126 0 2 2 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 2 3 2 133 0 3 1 3 133 0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
18 17 18 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 994;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"922 0 LINE",
"1104 1030 LINE",
"874 1030 LINE",
"311 645 LINE",
"461 1487 LINE",
"231 1487 LINE",
"37 387 LINE",
"266 387 LINE",
"829 772 LINE",
"692 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
8 3 2 3 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
4 1 3 3 0 95 0 0 0 33 77 0 1 1 2 95 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 1 2 99 4 1 3 3 0 95 0 0 0 33 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 9 0 9 17 18 17 5 8 25 
CALL[ ]\011/* CallFunction */";
};
width = 1165;
}
);
note = uni16CB;
unicode = 16CB;
},
{
glyphname = uni16CC;
lastChange = "2018-08-16 17:47:48 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"182 700 LINE",
"318 1400 LINE",
"218 1400 LINE",
"82 700 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 134 0 0 0 92 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 400;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"260 700 LINE",
"397 1487 LINE",
"170 1487 LINE",
"31 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 1 95 0 1 1 33 0 78 17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 428;
}
);
note = uni16CC;
unicode = 16CC;
},
{
glyphname = uni16CD;
lastChange = "2018-08-16 17:48:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"345 568 OFFCURVE",
"459 665 OFFCURVE",
"459 806 CURVE SMOOTH",
"459 872 OFFCURVE",
"426 937 OFFCURVE",
"346 955 CURVE",
"432 1400 LINE",
"332 1400 LINE",
"245 954 LINE",
"140 932 OFFCURVE",
"54 838 OFFCURVE",
"54 723 CURVE SMOOTH",
"54 637 OFFCURVE",
"116 568 OFFCURVE",
"228 568 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
15 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 92 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 35 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 598;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"373 555 OFFCURVE",
"479 665 OFFCURVE",
"479 815 CURVE SMOOTH",
"479 881 OFFCURVE",
"465 947 OFFCURVE",
"395 987 CURVE",
"483 1487 LINE",
"254 1487 LINE",
"166 987 LINE",
"53 942 OFFCURVE",
"4 820 OFFCURVE",
"4 741 CURVE SMOOTH",
"4 635 OFFCURVE",
"90 555 OFFCURVE",
"207 555 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
20 16 8 3 0 1 1 76 0 0 0 1 95 0 1 1 33 0 78 25 35 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 569;
}
);
note = uni16CD;
unicode = 16CD;
},
{
glyphname = uni16CE;
lastChange = "2018-08-16 17:48:58 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"516 480 LINE",
"979 767 LINE",
"937 849 LINE",
"540 604 LINE",
"695 1400 LINE",
"595 1400 LINE",
"440 605 LINE",
"140 849 LINE",
"66 767 LINE",
"416 480 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
9 8 5 4 3 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 92 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"662 481 LINE",
"1217 954 LINE",
"1118 1085 LINE",
"709 741 LINE",
"840 1491 LINE",
"610 1491 LINE",
"479 741 LINE",
"190 1085 LINE",
"43 954 LINE",
"432 481 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 33 values pushed */
8 7 6 3 2 1 6 0 1 1 76 0 0 0 1 95 2 1 1 1 33 0 78 0 0 0 9 0 9 20 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16CE;
unicode = 16CE;
},
{
glyphname = uni16CF;
lastChange = "2018-08-16 17:49:16 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"471 0 LINE",
"719 1275 LINE",
"1019 1031 LINE",
"1093 1113 LINE",
"743 1400 LINE",
"643 1400 LINE",
"180 1113 LINE",
"222 1031 LINE",
"619 1276 LINE",
"371 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 2 1 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"621 4 LINE",
"836 1231 LINE",
"1124 887 LINE",
"1272 1018 LINE",
"883 1491 LINE",
"653 1491 LINE",
"98 1018 LINE",
"197 887 LINE",
"606 1231 LINE",
"391 4 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
9 8 7 4 3 2 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16CF;
unicode = 16CF;
},
{
glyphname = uni16D0;
lastChange = "2018-08-16 17:49:30 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"471 0 LINE",
"743 1400 LINE",
"643 1400 LINE",
"180 1113 LINE",
"222 1031 LINE",
"619 1276 LINE",
"371 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
4 3 2 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
20 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 757;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"709 0 LINE",
"971 1487 LINE",
"741 1487 LINE",
"158 1071 LINE",
"227 938 LINE",
"702 1266 LINE",
"479 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
3 2 1 3 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 33 77 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 0 1 134 0 0 0 33 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 7 0 7 36 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 946;
}
);
note = uni16D0;
unicode = 16D0;
},
{
glyphname = uni16D1;
lastChange = "2018-08-16 17:50:52 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"471 0 LINE",
"567 492 LINE",
"652 514 OFFCURVE",
"741 599 OFFCURVE",
"741 723 CURVE SMOOTH",
"741 778 OFFCURVE",
"715 845 OFFCURVE",
"640 869 CURVE",
"743 1400 LINE",
"643 1400 LINE",
"180 1113 LINE",
"222 1031 LINE",
"619 1276 LINE",
"541 874 LINE",
"427 854 OFFCURVE",
"336 760 OFFCURVE",
"336 640 CURVE SMOOTH",
"336 574 OFFCURVE",
"375 506 OFFCURVE",
"466 489 CURVE",
"371 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
16 13 12 11 2 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
29 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 841;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"709 0 LINE",
"782 416 LINE",
"886 458 OFFCURVE",
"952 549 OFFCURVE",
"952 670 CURVE SMOOTH",
"952 753 OFFCURVE",
"919 821 OFFCURVE",
"858 854 CURVE",
"971 1487 LINE",
"741 1487 LINE",
"158 1071 LINE",
"227 938 LINE",
"702 1266 LINE",
"631 858 LINE",
"514 818 OFFCURVE",
"444 689 OFFCURVE",
"444 590 CURVE SMOOTH",
"444 507 OFFCURVE",
"494 445 OFFCURVE",
"553 416 CURVE",
"479 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
24 20 19 18 7 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
47 21 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 946;
}
);
note = uni16D1;
unicode = 16D1;
},
{
glyphname = uni16D2;
lastChange = "2018-08-16 17:51:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"613 297 LINE",
"637 420 LINE",
"274 699 LINE",
"748 980 LINE",
"771 1101 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"230 595 LINE",
"537 359 LINE",
"138 122 LINE"
);
},
{
closed = 1;
nodes = (
"362 1277 LINE",
"670 1041 LINE",
"270 804 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
14 13 11 10 8 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 20 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 843;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"821 311 LINE",
"860 535 LINE",
"567 743 LINE",
"934 952 LINE",
"973 1176 LINE",
"510 1487 LINE",
"281 1487 LINE",
"18 0 LINE"
);
},
{
closed = 1;
nodes = (
"360 641 LINE",
"686 436 LINE",
"287 219 LINE"
);
},
{
closed = 1;
nodes = (
"471 1268 LINE",
"795 1051 LINE",
"397 846 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
13 12 10 5 4 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 22 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16D2;
unicode = 16D2;
},
{
glyphname = uni16D3;
lastChange = "2018-08-16 17:51:08 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"225 572 LINE",
"604 704 LINE",
"587 798 LINE",
"246 679 LINE",
"286 886 LINE",
"665 1018 LINE",
"649 1112 LINE",
"307 993 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
7 6 3 2 4 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
25 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 703;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"293 537 LINE",
"635 653 LINE",
"594 799 LINE",
"322 702 LINE",
"358 911 LINE",
"694 1032 LINE",
"662 1180 LINE",
"389 1083 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
10 9 8 6 5 4 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 749;
}
);
note = uni16D3;
unicode = 16D3;
},
{
glyphname = uni16D4;
lastChange = "2018-08-16 17:53:46 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"613 297 LINE",
"637 420 LINE",
"274 699 LINE",
"748 980 LINE",
"771 1101 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"230 595 LINE",
"537 359 LINE",
"138 122 LINE"
);
},
{
closed = 1;
nodes = (
"362 1277 LINE",
"670 1041 LINE",
"270 804 LINE"
);
},
{
closed = 1;
nodes = (
"361 282 OFFCURVE",
"401 322 OFFCURVE",
"401 372 CURVE SMOOTH",
"401 422 OFFCURVE",
"361 462 OFFCURVE",
"311 462 CURVE SMOOTH",
"261 462 OFFCURVE",
"221 422 OFFCURVE",
"221 372 CURVE SMOOTH",
"221 322 OFFCURVE",
"261 282 OFFCURVE",
"311 282 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"494 963 OFFCURVE",
"534 1003 OFFCURVE",
"534 1053 CURVE SMOOTH",
"534 1103 OFFCURVE",
"494 1143 OFFCURVE",
"444 1143 CURVE SMOOTH",
"394 1143 OFFCURVE",
"354 1103 OFFCURVE",
"354 1053 CURVE SMOOTH",
"354 1003 OFFCURVE",
"394 963 OFFCURVE",
"444 963 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
8 0 2 0 1 25 16 2 2 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 10 0 8 8 10 114 0 3 4 2 4 3 2 128 0 2 5 4 2 5 126 0 1 0 0 10 1 0 105 0 8 0 4 3 8 4 106 0 9 9 7 97 0 7 7 98 77 0 5 5 6 97 11 1 6 6 93 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 10 0 8 0 10 8 128 0 3 4 2 4 3 2 128 0 2 5 4 2 5 126 0 1 0 0 10 1 0 105 0 8 0 4 3 8 4 106 0 9 9 7 97 0 7 7 98 77 0 5 5 6 97 11 1 6 6 93 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 10 0 8 0 10 8 128 0 3 4 2 4 3 2 128 0 2 5 4 2 5 126 0 1 0 0 10 1 0 105 0 8 0 4 3 8 4 106 0 5 11 1 6 5 6 101 0 9 9 7 97 0 7 7 98 9 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
0 10 0 8 0 10 8 128 0 3 4 2 4 3 2 128 0 2 5 4 2 5 126 0 7 0 9 1 7 9 105 0 1 0 0 10 1 0 105 0 8 0 4 3 8 4 106 0 5 6 6 5 89 0 5 5 6 97 11 1 6 5 6 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 23 values pushed */
44 43 71 70 69 68 55 54 47 45 43 63 44 63 17 23 38 24 38 35 12 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 843;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"248 0 LINE",
"821 311 LINE",
"860 535 LINE",
"567 743 LINE",
"934 952 LINE",
"973 1176 LINE",
"510 1487 LINE",
"281 1487 LINE",
"18 0 LINE"
);
},
{
closed = 1;
nodes = (
"360 641 LINE",
"686 436 LINE",
"287 219 LINE"
);
},
{
closed = 1;
nodes = (
"471 1268 LINE",
"795 1051 LINE",
"397 846 LINE"
);
},
{
closed = 1;
nodes = (
"492 362 OFFCURVE",
"528 398 OFFCURVE",
"528 442 CURVE SMOOTH",
"528 486 OFFCURVE",
"492 522 OFFCURVE",
"448 522 CURVE SMOOTH",
"404 522 OFFCURVE",
"368 486 OFFCURVE",
"368 442 CURVE SMOOTH",
"368 398 OFFCURVE",
"404 362 OFFCURVE",
"448 362 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"601 984 OFFCURVE",
"637 1020 OFFCURVE",
"637 1064 CURVE SMOOTH",
"637 1108 OFFCURVE",
"601 1144 OFFCURVE",
"557 1144 CURVE SMOOTH",
"513 1144 OFFCURVE",
"477 1108 OFFCURVE",
"477 1064 CURVE SMOOTH",
"477 1020 OFFCURVE",
"513 984 OFFCURVE",
"557 984 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
42 33 2 1 5 14 6 2 0 1 45 44 37 34 4 3 0 36 30 22 3 2 3 4 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 1 0 0 3 1 0 106 0 3 0 2 4 3 2 105 0 5 5 33 77 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
0 4 2 4 134 0 1 0 0 3 1 0 106 0 3 0 2 4 3 2 105 0 5 5 33 5 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
17 27 23 23 23 18 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16D4;
unicode = 16D4;
},
{
glyphname = uni16D5;
lastChange = "2018-08-16 17:54:59 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"638 30 LINE",
"269 690 LINE",
"894 1350 LINE",
"826 1410 LINE",
"278 832 LINE",
"388 1400 LINE",
"288 1400 LINE",
"16 0 LINE",
"116 0 LINE",
"222 548 LINE",
"546 -30 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
10 9 7 2 4 0 1 1 76 8 1 1 74 1 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 865;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"641 92 LINE",
"303 743 LINE",
"864 1389 LINE",
"700 1509 LINE",
"342 1090 LINE",
"412 1487 LINE",
"182 1487 LINE",
"-82 0 LINE",
"147 0 LINE",
"217 393 LINE",
"434 -27 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 8 7 6 4 5 0 1 1 76 5 1 1 74 9 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 800;
}
);
note = uni16D5;
unicode = 16D5;
},
{
glyphname = uni16D6;
lastChange = "2018-08-18 02:25:38 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"360 1265 LINE",
"668 933 LINE",
"1106 1265 LINE",
"860 0 LINE",
"960 0 LINE",
"1232 1400 LINE",
"1132 1400 LINE",
"694 1067 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
7 6 5 3 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 0 0 92 77 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 0 1 0 133 2 1 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 0 1 0 133 2 1 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
17 20 17 17 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1246;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"147 0 LINE",
"365 1233 LINE",
"653 883 LINE",
"1065 1233 LINE",
"848 0 LINE",
"1077 0 LINE",
"1339 1487 LINE",
"1110 1487 LINE",
"698 1143 LINE",
"410 1487 LINE",
"180 1487 LINE",
"-82 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
9 4 3 2 4 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 33 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
1 1 0 2 0 134 3 1 2 2 33 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
18 17 20 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
}
);
note = uni16D6;
unicode = 16D6;
},
{
glyphname = uni16D7;
lastChange = "2018-08-16 18:02:49 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"273 817 LINE",
"685 1031 LINE",
"1018 815 LINE",
"860 0 LINE",
"960 0 LINE",
"1232 1400 LINE",
"1132 1400 LINE",
"1125 1363 LINE",
"708 1147 LINE",
"378 1361 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"356 1245 LINE",
"596 1089 LINE",
"295 933 LINE"
);
},
{
closed = 1;
nodes = (
"797 1089 LINE",
"1102 1247 LINE",
"1041 931 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
19 18 13 6 5 2 1 7 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 2 0 2 133 1 1 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
20 17 20 19 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1246;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"147 0 LINE",
"238 510 LINE",
"649 863 LINE",
"938 512 LINE",
"848 0 LINE",
"1077 0 LINE",
"1339 1487 LINE",
"1110 1487 LINE",
"1106 1447 LINE",
"694 1123 LINE",
"406 1447 LINE",
"410 1487 LINE",
"180 1487 LINE",
"-82 0 LINE"
);
},
{
closed = 1;
nodes = (
"361 1213 LINE",
"543 994 LINE",
"285 777 LINE"
);
},
{
closed = 1;
nodes = (
"803 994 LINE",
"1061 1213 LINE",
"983 777 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 16 12 6 5 2 1 7 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 33 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
1 1 0 2 0 134 3 1 2 2 33 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
18 17 20 19 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
}
);
note = uni16D7;
unicode = 16D7;
},
{
glyphname = uni16D8;
lastChange = "2018-08-16 18:00:54 +0000";
layers = (
{
guideLines = (
{
position = "{742, 954}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"443 0 LINE",
"627 948 LINE",
"860 973 OFFCURVE",
"1070 1166 OFFCURVE",
"1112 1400 CURVE",
"1021 1400 LINE",
"988 1217 OFFCURVE",
"826 1065 OFFCURVE",
"645 1040 CURVE",
"715 1400 LINE",
"615 1400 LINE",
"545 1039 LINE",
"391 1060 OFFCURVE",
"287 1180 OFFCURVE",
"287 1335 CURVE SMOOTH",
"287 1356 OFFCURVE",
"289 1378 OFFCURVE",
"293 1400 CURVE",
"201 1400 LINE",
"196 1373 OFFCURVE",
"194 1346 OFFCURVE",
"194 1320 CURVE SMOOTH",
"194 1123 OFFCURVE",
"329 969 OFFCURVE",
"527 948 CURVE",
"343 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
10 7 5 4 4 0 1 1 76 11 6 2 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 18 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1061;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"559 0 LINE",
"731 973 LINE",
"936 1007 OFFCURVE",
"1187 1208 OFFCURVE",
"1235 1487 CURVE",
"1036 1487 LINE",
"1009 1334 OFFCURVE",
"890 1222 OFFCURVE",
"768 1178 CURVE",
"821 1487 LINE",
"594 1487 LINE",
"539 1178 LINE",
"442 1214 OFFCURVE",
"375 1310 OFFCURVE",
"375 1425 CURVE SMOOTH",
"375 1444 OFFCURVE",
"375 1465 OFFCURVE",
"379 1487 CURVE",
"180 1487 LINE",
"175 1454 OFFCURVE",
"172 1423 OFFCURVE",
"172 1393 CURVE SMOOTH",
"172 1176 OFFCURVE",
"313 1014 OFFCURVE",
"502 973 CURVE",
"332 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
26 23 8 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
4 3 2 3 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 0 1 0 134 4 3 2 3 1 1 33 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 30 0 30 23 25 22 5 8 25 
CALL[ ]\011/* CallFunction */";
};
width = 1153;
}
);
note = uni16D8;
unicode = 16D8;
},
{
glyphname = uni16D9;
lastChange = "2018-08-16 18:04:00 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"215 0 LINE",
"412 1012 LINE",
"506 1030 OFFCURVE",
"599 1117 OFFCURVE",
"599 1246 CURVE SMOOTH",
"599 1331 OFFCURVE",
"543 1400 OFFCURVE",
"445 1400 CURVE SMOOTH",
"304 1400 OFFCURVE",
"194 1293 OFFCURVE",
"194 1163 CURVE SMOOTH",
"194 1083 OFFCURVE",
"251 1028 OFFCURVE",
"312 1015 CURVE",
"115 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
2 1 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 98 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 98 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
40 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 598;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"197 0 LINE",
"385 1069 LINE",
"509 1124 OFFCURVE",
"541 1209 OFFCURVE",
"541 1305 CURVE SMOOTH",
"541 1416 OFFCURVE",
"485 1501 OFFCURVE",
"348 1501 CURVE SMOOTH",
"132 1501 OFFCURVE",
"66 1311 OFFCURVE",
"66 1233 CURVE SMOOTH",
"66 1166 OFFCURVE",
"92 1112 OFFCURVE",
"158 1073 CURVE",
"-33 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
6 2 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
71 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
41 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 428;
}
);
note = uni16D9;
unicode = 16D9;
},
{
glyphname = uni16DA;
lastChange = "2018-08-16 18:04:12 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"360 1265 LINE",
"668 933 LINE",
"749 1008 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
2 1 2 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 789;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"422 1266 LINE",
"780 938 LINE",
"897 1071 LINE",
"461 1487 LINE",
"231 1487 LINE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
7 6 5 3 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 946;
}
);
note = uni16DA;
unicode = 16DA;
},
{
glyphname = uni16DB;
lastChange = "2018-08-16 18:05:17 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"215 0 LINE",
"305 460 LINE",
"399 478 OFFCURVE",
"492 566 OFFCURVE",
"492 694 CURVE SMOOTH",
"492 756 OFFCURVE",
"462 824 OFFCURVE",
"379 844 CURVE",
"461 1265 LINE",
"770 933 LINE",
"851 1008 LINE",
"487 1400 LINE",
"387 1400 LINE",
"279 842 LINE",
"173 820 OFFCURVE",
"87 725 OFFCURVE",
"87 612 CURVE SMOOTH",
"87 547 OFFCURVE",
"122 485 OFFCURVE",
"205 463 CURVE",
"115 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
16 15 14 13 2 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 890;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"199 0 LINE",
"270 416 LINE",
"366 454 OFFCURVE",
"442 540 OFFCURVE",
"442 670 CURVE SMOOTH",
"442 752 OFFCURVE",
"413 820 OFFCURVE",
"348 854 CURVE",
"422 1266 LINE",
"780 938 LINE",
"897 1071 LINE",
"461 1487 LINE",
"231 1487 LINE",
"121 858 LINE",
"7 817 OFFCURVE",
"-66 689 OFFCURVE",
"-66 590 CURVE SMOOTH",
"-66 508 OFFCURVE",
"-16 448 OFFCURVE",
"43 418 CURVE",
"-31 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
19 18 17 16 2 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
28 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 946;
}
);
note = uni16DB;
unicode = 16DB;
},
{
glyphname = uni16DC;
lastChange = "2018-08-16 18:07:46 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"446 207 LINE",
"876 616 LINE",
"605 1025 LINE",
"530 1025 LINE",
"100 616 LINE",
"370 207 LINE"
);
},
{
closed = 1;
nodes = (
"232 616 LINE",
"546 916 LINE",
"744 616 LINE",
"430 316 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"446 207 LINE",
"866 607 LINE",
"866 631 LINE",
"605 1025 LINE",
"530 1025 LINE",
"108 624 LINE",
"108 604 LINE",
"370 207 LINE"
);
},
{
closed = 1;
nodes = (
"232 616 LINE",
"546 916 LINE",
"744 616 LINE",
"430 316 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 23 values pushed */
7 3 2 1 4 0 1 1 76 0 1 0 1 133 0 0 0 118 18 21 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 975;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"477 229 LINE",
"997 676 LINE",
"1030 856 LINE",
"666 1298 LINE",
"586 1298 LINE",
"66 856 LINE",
"35 676 LINE",
"397 229 LINE"
);
},
{
closed = 1;
nodes = (
"274 768 LINE",
"575 1018 LINE",
"791 768 LINE",
"485 500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
11 10 9 7 3 5 0 1 1 76 0 1 0 1 133 0 0 0 118 19 17 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1062;
}
);
note = uni16DC;
unicode = 16DC;
},
{
glyphname = uni16DD;
lastChange = "2018-08-16 18:09:19 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"528 287 LINE",
"856 -38 LINE",
"935 38 LINE",
"618 352 LINE",
"1057 666 LINE",
"1072 743 LINE",
"755 1047 LINE",
"1176 1341 LINE",
"1128 1419 LINE",
"688 1111 LINE",
"367 1419 LINE",
"289 1341 LINE",
"596 1047 LINE",
"161 743 LINE",
"145 666 LINE",
"462 352 LINE",
"23 38 LINE",
"72 -38 LINE"
);
},
{
closed = 1;
nodes = (
"263 703 LINE",
"663 983 LINE",
"954 703 LINE",
"553 417 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
21 19 10 1 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1211;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"518 203 LINE",
"815 -84 LINE",
"983 80 LINE",
"717 342 LINE",
"1081 598 LINE",
"1114 788 LINE",
"842 1047 LINE",
"1194 1303 LINE",
"1081 1456 LINE",
"694 1186 LINE",
"406 1460 LINE",
"213 1286 LINE",
"485 1038 LINE",
"139 799 LINE",
"104 598 LINE",
"369 346 LINE",
"12 98 LINE",
"125 -78 LINE"
);
},
{
closed = 1;
nodes = (
"356 690 LINE",
"639 897 LINE",
"866 692 LINE",
"567 483 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
21 19 11 2 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1210;
}
);
note = uni16DD;
unicode = 16DD;
},
{
glyphname = uni16DE;
lastChange = "2018-08-16 18:09:53 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"114 0 LINE",
"602 607 LINE",
"860 0 LINE",
"960 0 LINE",
"1232 1400 LINE",
"1132 1400 LINE",
"638 795 LINE",
"386 1400 LINE",
"286 1400 LINE",
"14 0 LINE"
);
},
{
closed = 1;
nodes = (
"346 1194 LINE",
"561 701 LINE",
"154 208 LINE"
);
},
{
closed = 1;
nodes = (
"679 701 LINE",
"1094 1203 LINE",
"899 199 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
18 17 15 14 10 3 6 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
3 1 2 0 2 133 1 1 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
19 17 20 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1246;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"147 0 LINE",
"627 555 LINE",
"911 0 LINE",
"1141 0 LINE",
"1403 1487 LINE",
"1174 1487 LINE",
"692 932 LINE",
"410 1487 LINE",
"180 1487 LINE",
"-82 0 LINE"
);
},
{
closed = 1;
nodes = (
"342 1100 LINE",
"528 739 LINE",
"213 375 LINE"
);
},
{
closed = 1;
nodes = (
"795 735 LINE",
"1104 1096 LINE",
"979 387 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
15 14 12 11 7 2 6 0 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 33 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
1 1 0 2 0 134 3 1 2 2 33 2 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
18 17 18 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1320;
}
);
note = uni16DE;
unicode = 16DE;
},
{
glyphname = uni16DF;
lastChange = "2018-08-16 18:10:10 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"520 387 LINE",
"841 -44 LINE",
"927 31 LINE",
"605 463 LINE",
"1094 893 LINE",
"716 1400 LINE",
"142 894 LINE",
"464 462 LINE",
"-25 31 LINE",
"31 -44 LINE"
);
},
{
closed = 1;
nodes = (
"284 894 LINE",
"687 1249 LINE",
"952 893 LINE",
"549 538 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
13 11 7 1 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1152;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"512 334 LINE",
"821 -72 LINE",
"983 63 LINE",
"670 471 LINE",
"1139 891 LINE",
"711 1446 LINE",
"86 889 LINE",
"406 473 LINE",
"-41 76 LINE",
"68 -63 LINE"
);
},
{
closed = 1;
nodes = (
"348 887 LINE",
"662 1165 LINE",
"870 891 LINE",
"559 612 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
13 11 7 1 2 50 
CALL[ ]\011/* CallFunction */";
};
width = 1150;
}
);
note = uni16DF;
unicode = 16DF;
},
{
glyphname = uni16E0;
lastChange = "2018-08-16 18:10:32 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"421 0 LINE",
"665 1255 LINE",
"780 1113 LINE",
"1037 1328 LINE",
"980 1398 LINE",
"807 1254 LINE",
"694 1400 LINE",
"594 1400 LINE",
"423 1254 LINE",
"306 1398 LINE",
"222 1328 LINE",
"395 1113 LINE",
"565 1255 LINE",
"321 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 17 values pushed */
14 9 7 6 5 2 1 7 0 1 1 76 15 8 2 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
38 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1014;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"647 0 LINE",
"870 1264 LINE",
"1034 1112 LINE",
"1393 1370 LINE",
"1311 1495 LINE",
"1073 1325 LINE",
"911 1487 LINE",
"682 1489 LINE",
"465 1325 LINE",
"287 1495 LINE",
"160 1370 LINE",
"426 1112 LINE",
"641 1264 LINE",
"420 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
13 12 11 9 6 4 3 2 8 0 1 1 76 10 5 2 1 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
22 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1331;
}
);
note = uni16E0;
unicode = 16E0;
},
{
glyphname = uni16E1;
lastChange = "2018-08-16 18:10:45 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"313 0 LINE",
"437 638 LINE",
"595 464 LINE",
"677 538 LINE",
"484 751 LINE",
"759 964 LINE",
"706 1038 LINE",
"481 864 LINE",
"585 1400 LINE",
"485 1400 LINE",
"381 864 LINE",
"224 1038 LINE",
"142 964 LINE",
"335 751 LINE",
"59 538 LINE",
"112 464 LINE",
"337 638 LINE",
"213 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 15 14 11 10 9 8 7 6 5 2 1 13 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
24 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 815;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"621 0 LINE",
"711 514 LINE",
"899 293 LINE",
"1044 424 LINE",
"766 764 LINE",
"1163 1104 LINE",
"1065 1235 LINE",
"799 1012 LINE",
"883 1491 LINE",
"653 1491 LINE",
"569 1012 LINE",
"379 1237 LINE",
"233 1104 LINE",
"514 764 LINE",
"113 422 LINE",
"211 291 LINE",
"481 514 LINE",
"391 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
16 15 14 13 12 11 10 7 6 5 4 3 2 1 14 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 134 2 1 1 1 33 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 17 0 17 24 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16E1;
unicode = 16E1;
},
{
glyphname = uni16E2;
lastChange = "2018-08-16 18:11:03 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"266 155 LINE",
"426 0 LINE",
"526 0 LINE",
"773 1271 LINE",
"934 1120 LINE",
"1247 1336 LINE",
"1199 1413 LINE",
"957 1243 LINE",
"798 1400 LINE",
"698 1400 LINE",
"450 127 LINE",
"290 278 LINE",
"-24 62 LINE",
"24 -15 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
14 13 11 8 7 6 4 7 1 0 1 76 5 1 0 74 12 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
23 17 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1217;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"258 158 LINE",
"422 0 LINE",
"649 0 LINE",
"874 1268 LINE",
"1036 1116 LINE",
"1395 1372 LINE",
"1313 1499 LINE",
"1075 1329 LINE",
"913 1491 LINE",
"684 1491 LINE",
"461 219 LINE",
"297 371 LINE",
"-61 113 LINE",
"20 -12 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
13 12 11 9 6 5 4 2 8 0 1 1 76 10 1 1 74 3 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
22 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1331;
}
);
note = uni16E2;
unicode = 16E2;
},
{
glyphname = uni16E3;
lastChange = "2018-08-16 18:11:13 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"405 302 LINE",
"346 0 LINE",
"446 0 LINE",
"505 302 LINE",
"752 -15 LINE",
"838 55 LINE",
"533 446 LINE",
"718 1400 LINE",
"618 1400 LINE",
"432 445 LINE",
"-24 55 LINE",
"34 -15 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
11 5 2 3 0 1 1 76 6 1 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1061;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"451 344 LINE",
"391 4 LINE",
"621 4 LINE",
"680 344 LINE",
"971 0 LINE",
"1114 131 LINE",
"725 604 LINE",
"883 1491 LINE",
"653 1491 LINE",
"498 604 LINE",
"-57 131 LINE",
"41 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
9 7 4 2 1 5 0 1 1 76 8 3 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 134 2 1 1 1 33 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 11 0 11 21 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16E3;
unicode = 16E3;
},
{
glyphname = uni16E4;
lastChange = "2018-08-16 18:11:21 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"494 498 LINE",
"397 0 LINE",
"497 0 LINE",
"594 498 LINE",
"786 -24 LINE",
"882 24 LINE",
"708 500 LINE",
"935 689 LINE",
"782 880 LINE",
"1138 1351 LINE",
"1060 1400 LINE",
"668 880 LINE",
"769 1400 LINE",
"669 1400 LINE",
"568 880 LINE",
"377 1400 LINE",
"280 1351 LINE",
"453 880 LINE",
"226 689 LINE",
"380 500 LINE",
"21 24 LINE",
"99 -24 LINE"
);
},
{
closed = 1;
nodes = (
"368 689 LINE",
"487 789 LINE",
"523 689 LINE",
"448 590 LINE"
);
},
{
closed = 1;
nodes = (
"638 689 LINE",
"713 789 LINE",
"794 689 LINE",
"675 590 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 34 values pushed */
29 28 27 25 24 23 21 20 19 18 16 13 11 10 9 8 7 5 2 19 0 1 1 76 17 12 2 1 74 6 1 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1161;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"473 377 LINE",
"408 0 LINE",
"637 0 LINE",
"707 395 LINE",
"944 -63 LINE",
"1151 57 LINE",
"897 549 LINE",
"1116 743 LINE",
"963 938 LINE",
"1389 1427 LINE",
"1225 1548 LINE",
"829 1090 LINE",
"899 1487 LINE",
"670 1487 LINE",
"604 1112 LINE",
"377 1548 LINE",
"170 1427 LINE",
"430 928 LINE",
"213 743 LINE",
"369 553 LINE",
"-57 59 LINE",
"92 -63 LINE"
);
},
{
closed = 1;
nodes = (
"383 743 LINE",
"481 827 LINE",
"528 739 LINE",
"457 655 LINE"
);
},
{
closed = 1;
nodes = (
"795 743 LINE",
"870 831 LINE",
"944 743 LINE",
"842 655 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 34 values pushed */
29 28 27 25 24 23 21 20 19 18 16 13 11 10 9 8 7 5 2 19 0 1 1 76 17 12 2 1 74 6 1 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
26 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1320;
}
);
note = uni16E4;
unicode = 16E4;
},
{
glyphname = uni16E5;
lastChange = "2018-08-16 18:12:53 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"115 0 LINE",
"120 31 LINE",
"533 245 LINE",
"866 29 LINE",
"860 0 LINE",
"960 0 LINE",
"1232 1400 LINE",
"1132 1400 LINE",
"1125 1363 LINE",
"708 1147 LINE",
"378 1361 LINE",
"386 1400 LINE",
"286 1400 LINE",
"15 0 LINE"
);
},
{
closed = 1;
nodes = (
"203 459 LINE",
"444 303 LINE",
"142 147 LINE"
);
},
{
closed = 1;
nodes = (
"644 303 LINE",
"950 461 LINE",
"888 145 LINE"
);
},
{
closed = 1;
nodes = (
"226 575 LINE",
"273 817 LINE",
"685 1031 LINE",
"1018 815 LINE",
"972 577 LINE",
"555 361 LINE"
);
},
{
closed = 1;
nodes = (
"356 1245 LINE",
"596 1089 LINE",
"295 933 LINE"
);
},
{
closed = 1;
nodes = (
"797 1089 LINE",
"1102 1247 LINE",
"1041 931 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
31 30 28 27 25 24 22 21 19 18 16 15 10 3 14 0 2 1 76 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
31 30 28 27 25 24 22 21 19 18 16 15 10 3 14 1 2 1 76 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 2 92 77 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 2 0 2 133 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
3 1 2 0 2 133 1 1 0 0 118 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
3 1 2 1 2 133 0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
20 17 20 16 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 1246;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"147 0 LINE",
"147 5 LINE",
"541 248 LINE",
"848 5 LINE",
"848 0 LINE",
"1077 0 LINE",
"1339 1491 LINE",
"1110 1491 LINE",
"1110 1486 LINE",
"717 1243 LINE",
"410 1486 LINE",
"410 1491 LINE",
"180 1491 LINE",
"-82 0 LINE"
);
},
{
closed = 1;
nodes = (
"236 498 LINE",
"426 342 LINE",
"180 182 LINE"
);
},
{
closed = 1;
nodes = (
"688 342 LINE",
"936 498 LINE",
"881 182 LINE"
);
},
{
closed = 1;
nodes = (
"268 688 LINE",
"289 803 LINE",
"684 1057 LINE",
"989 803 LINE",
"969 688 LINE",
"573 436 LINE"
);
},
{
closed = 1;
nodes = (
"379 1309 LINE",
"569 1151 LINE",
"324 993 LINE"
);
},
{
closed = 1;
nodes = (
"831 1151 LINE",
"1077 1309 LINE",
"1024 993 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
27 26 24 23 21 20 17 16 14 12 11 9 4 13 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
3 1 0 0 33 77 2 1 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 0 1 134 3 1 0 0 33 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
}
);
note = uni16E5;
unicode = 16E5;
},
{
glyphname = uni16E6;
lastChange = "2018-08-16 18:17:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"35 0 LINE",
"68 183 OFFCURVE",
"230 335 OFFCURVE",
"411 360 CURVE",
"341 0 LINE",
"441 0 LINE",
"511 361 LINE",
"665 340 OFFCURVE",
"769 220 OFFCURVE",
"769 65 CURVE SMOOTH",
"769 44 OFFCURVE",
"767 22 OFFCURVE",
"763 0 CURVE",
"855 0 LINE",
"860 27 OFFCURVE",
"862 54 OFFCURVE",
"862 80 CURVE SMOOTH",
"862 277 OFFCURVE",
"727 431 OFFCURVE",
"529 452 CURVE",
"713 1400 LINE",
"613 1400 LINE",
"429 452 LINE",
"196 427 OFFCURVE",
"-14 234 OFFCURVE",
"-56 0 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
11 5 2 3 0 1 1 76 6 1 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1061;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"117 0 LINE",
"145 153 OFFCURVE",
"264 265 OFFCURVE",
"385 309 CURVE",
"332 0 LINE",
"559 0 LINE",
"614 309 LINE",
"706 271 OFFCURVE",
"780 179 OFFCURVE",
"780 61 CURVE SMOOTH",
"780 42 OFFCURVE",
"778 22 OFFCURVE",
"774 0 CURVE",
"973 0 LINE",
"978 33 OFFCURVE",
"981 64 OFFCURVE",
"981 94 CURVE SMOOTH",
"981 278 OFFCURVE",
"869 468 OFFCURVE",
"651 514 CURVE",
"821 1487 LINE",
"594 1487 LINE",
"422 514 LINE",
"208 471 OFFCURVE",
"-34 281 OFFCURVE",
"-82 0 CURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
23 10 7 3 0 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 3 3 33 77 2 1 2 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
2 1 2 0 3 0 134 0 3 3 33 3 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
22 21 23 16 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 1153;
}
);
note = uni16E6;
unicode = 16E6;
},
{
glyphname = uni16E7;
lastChange = "2018-08-16 18:17:54 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"182 0 LINE",
"318 700 LINE",
"218 700 LINE",
"82 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 400;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"266 0 LINE",
"391 700 LINE",
"162 700 LINE",
"39 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 0 95 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 428;
}
);
note = uni16E7;
unicode = 16E7;
},
{
glyphname = uni16E8;
lastChange = "2018-08-16 18:18:03 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"471 0 LINE",
"932 287 LINE",
"891 369 LINE",
"495 125 LINE",
"719 1275 LINE",
"1019 1031 LINE",
"1093 1113 LINE",
"743 1400 LINE",
"643 1400 LINE",
"180 1113 LINE",
"222 1031 LINE",
"619 1276 LINE",
"395 124 LINE",
"93 369 LINE",
"20 287 LINE",
"371 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
15 14 13 10 9 8 7 6 5 2 1 11 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
23 19 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"621 4 LINE",
"1176 477 LINE",
"1077 608 LINE",
"666 264 LINE",
"836 1231 LINE",
"1124 887 LINE",
"1272 1018 LINE",
"883 1491 LINE",
"653 1491 LINE",
"98 1018 LINE",
"197 887 LINE",
"606 1231 LINE",
"436 264 LINE",
"147 608 LINE",
"2 477 LINE",
"391 4 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
15 14 13 10 9 8 7 6 5 2 1 11 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 33 77 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 134 0 0 0 33 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
23 19 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1271;
}
);
note = uni16E8;
unicode = 16E8;
},
{
glyphname = uni16E9;
lastChange = "2018-08-16 18:18:25 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"455 0 LINE",
"727 1400 LINE",
"627 1400 LINE",
"180 1113 LINE",
"165 1032 LINE",
"501 747 LINE",
"355 0 LINE"
);
},
{
closed = 1;
nodes = (
"287 1073 LINE",
"603 1274 LINE",
"525 871 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
10 9 7 3 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
17 34 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 741;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"766 0 LINE",
"1028 1487 LINE",
"799 1487 LINE",
"225 1176 LINE",
"186 952 LINE",
"647 623 LINE",
"537 0 LINE"
);
},
{
closed = 1;
nodes = (
"360 1051 LINE",
"760 1268 LINE",
"686 846 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
9 8 4 3 4 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
2 1 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 134 2 1 1 1 33 1 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
0 0 0 6 0 6 17 3 8 23 
CALL[ ]\011/* CallFunction */";
};
width = 995;
}
);
note = uni16E9;
unicode = 16E9;
},
{
glyphname = uni16EA;
lastChange = "2018-08-16 18:18:38 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"775 0 LINE",
"798 118 LINE",
"910 118 LINE",
"929 218 LINE",
"817 218 LINE",
"962 964 LINE",
"862 964 LINE",
"294 580 LINE",
"410 1180 LINE",
"531 1180 LINE",
"551 1280 LINE",
"430 1280 LINE",
"453 1400 LINE",
"353 1400 LINE",
"330 1280 LINE",
"213 1280 LINE",
"193 1180 LINE",
"310 1180 LINE",
"169 454 LINE",
"269 454 LINE",
"838 838 LINE",
"717 218 LINE",
"591 218 LINE",
"572 118 LINE",
"698 118 LINE",
"675 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
21 8 2 4 10 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 10 5 4 5 10 4 128 0 4 3 5 4 3 126 8 1 6 9 1 5 10 6 5 104 11 1 3 2 1 0 1 3 0 104 0 7 7 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 7 6 7 133 0 10 5 4 5 10 4 128 0 4 3 5 4 3 126 8 1 6 9 1 5 10 6 5 104 11 1 3 2 1 0 1 3 0 104 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 7 6 7 133 0 10 5 4 5 10 4 128 0 4 3 5 4 3 126 0 1 0 1 134 8 1 6 9 1 5 10 6 5 104 11 1 3 0 0 3 87 11 1 3 3 0 96 2 1 0 3 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
25 24 23 22 20 19 17 17 17 17 18 17 17 17 16 12 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1123;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1028 0 LINE",
"1065 201 LINE",
"1210 201 LINE",
"1251 428 LINE",
"1104 428 LINE",
"1210 1030 LINE",
"981 1030 LINE",
"420 645 LINE",
"496 1075 LINE",
"653 1075 LINE",
"694 1305 LINE",
"535 1305 LINE",
"567 1487 LINE",
"338 1487 LINE",
"305 1305 LINE",
"150 1305 LINE",
"109 1075 LINE",
"266 1075 LINE",
"143 387 LINE",
"373 387 LINE",
"936 772 LINE",
"874 428 LINE",
"707 428 LINE",
"666 201 LINE",
"836 201 LINE",
"799 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
21 8 2 3 10 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 10 5 3 5 10 3 128 0 4 3 0 3 4 0 128 8 1 6 9 1 5 10 6 5 104 11 1 3 2 1 0 1 3 0 104 0 7 7 33 77 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
0 10 5 3 5 10 3 128 0 4 3 0 3 4 0 128 0 1 0 1 134 8 1 6 9 1 5 10 6 5 104 11 1 3 2 1 0 1 3 0 104 0 7 7 33 7 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
25 24 23 22 20 19 17 17 17 17 18 17 17 17 16 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1355;
}
);
note = uni16EA;
unicode = 16EA;
},
{
glyphname = uni16EB;
lastChange = "2018-08-16 18:22:47 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"274 453 OFFCURVE",
"344 506 OFFCURVE",
"344 595 CURVE SMOOTH",
"344 646 OFFCURVE",
"313 689 OFFCURVE",
"250 689 CURVE SMOOTH",
"162 689 OFFCURVE",
"98 625 OFFCURVE",
"98 549 CURVE SMOOTH",
"98 500 OFFCURVE",
"130 453 OFFCURVE",
"204 453 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 38 35 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 442;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"305 418 OFFCURVE",
"379 503 OFFCURVE",
"379 592 CURVE SMOOTH",
"379 666 OFFCURVE",
"338 723 OFFCURVE",
"249 723 CURVE SMOOTH",
"145 723 OFFCURVE",
"61 641 OFFCURVE",
"61 541 CURVE SMOOTH",
"61 474 OFFCURVE",
"114 418 OFFCURVE",
"197 418 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
15 7 2 0 1 1 76 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 23 34 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 440;
}
);
note = uni16EB;
unicode = 16EB;
},
{
glyphname = uni16EC;
lastChange = "2018-08-16 18:24:55 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"330 616 OFFCURVE",
"406 673 OFFCURVE",
"406 756 CURVE SMOOTH",
"406 782 OFFCURVE",
"394 852 OFFCURVE",
"310 852 CURVE SMOOTH",
"223 852 OFFCURVE",
"160 786 OFFCURVE",
"160 708 CURVE SMOOTH",
"160 660 OFFCURVE",
"193 616 OFFCURVE",
"264 616 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"169 -25 OFFCURVE",
"196 -17 OFFCURVE",
"220 0 CURVE SMOOTH",
"261 29 OFFCURVE",
"281 68 OFFCURVE",
"281 117 CURVE SMOOTH",
"281 134 OFFCURVE",
"277 150 OFFCURVE",
"270 164 CURVE SMOOTH",
"253 195 OFFCURVE",
"225 211 OFFCURVE",
"186 211 CURVE SMOOTH",
"140 211 OFFCURVE",
"104 197 OFFCURVE",
"77 168 CURVE SMOOTH",
"49 137 OFFCURVE",
"35 103 OFFCURVE",
"35 67 CURVE SMOOTH",
"35 50 OFFCURVE",
"39 36 OFFCURVE",
"46 23 CURVE SMOOTH",
"64 -9 OFFCURVE",
"95 -25 OFFCURVE",
"140 -25 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"216 -27 OFFCURVE",
"292 30 OFFCURVE",
"292 113 CURVE SMOOTH",
"292 139 OFFCURVE",
"280 209 OFFCURVE",
"196 209 CURVE SMOOTH",
"109 209 OFFCURVE",
"46 143 OFFCURVE",
"46 65 CURVE SMOOTH",
"46 17 OFFCURVE",
"79 -27 OFFCURVE",
"150 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"330 616 OFFCURVE",
"406 673 OFFCURVE",
"406 756 CURVE SMOOTH",
"406 782 OFFCURVE",
"394 852 OFFCURVE",
"310 852 CURVE SMOOTH",
"223 852 OFFCURVE",
"160 786 OFFCURVE",
"160 708 CURVE SMOOTH",
"160 660 OFFCURVE",
"193 616 OFFCURVE",
"264 616 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 34 values pushed */
15 1 0 1 1 76 0 0 0 1 97 0 1 1 95 77 0 3 3 2 97 0 2 2 93 2 78 38 39 38 35 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 442;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"190 -25 OFFCURVE",
"231 -11 OFFCURVE",
"266 15 CURVE SMOOTH",
"301 41 OFFCURVE",
"321 72 OFFCURVE",
"328 109 CURVE SMOOTH",
"331 122 OFFCURVE",
"332 135 OFFCURVE",
"332 147 CURVE SMOOTH",
"332 178 OFFCURVE",
"324 206 OFFCURVE",
"309 229 CURVE",
"289 263 OFFCURVE",
"247 279 OFFCURVE",
"202 279 CURVE SMOOTH",
"157 279 OFFCURVE",
"110 263 OFFCURVE",
"77 234 CURVE SMOOTH",
"43 203 OFFCURVE",
"23 167 OFFCURVE",
"16 125 CURVE SMOOTH",
"15 115 OFFCURVE",
"14 106 OFFCURVE",
"14 98 CURVE",
"13 68 OFFCURVE",
"22 41 OFFCURVE",
"43 18 CURVE",
"71 -11 OFFCURVE",
"109 -25 OFFCURVE",
"150 -25 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"240 -27 OFFCURVE",
"326 39 OFFCURVE",
"326 149 CURVE SMOOTH",
"326 222 OFFCURVE",
"283 276 OFFCURVE",
"196 276 CURVE SMOOTH",
"90 276 OFFCURVE",
"9 196 OFFCURVE",
"9 93 CURVE SMOOTH",
"9 27 OFFCURVE",
"65 -27 OFFCURVE",
"145 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"346 549 OFFCURVE",
"432 615 OFFCURVE",
"432 725 CURVE SMOOTH",
"432 798 OFFCURVE",
"389 852 OFFCURVE",
"302 852 CURVE SMOOTH",
"196 852 OFFCURVE",
"115 772 OFFCURVE",
"115 669 CURVE SMOOTH",
"115 603 OFFCURVE",
"171 549 OFFCURVE",
"251 549 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
14 6 2 0 1 30 22 2 2 3 2 76 0 0 0 1 97 0 1 1 34 77 0 3 3 2 97 0 2 2 32 2 78 23 23 23 18 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 440;
}
);
note = uni16EC;
unicode = 16EC;
},
{
glyphname = uni16ED;
lastChange = "2018-08-16 18:25:11 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"486 0 LINE",
"508 318 LINE",
"819 278 LINE",
"853 458 LINE",
"528 418 LINE",
"630 736 LINE",
"450 736 LINE",
"428 418 LINE",
"117 458 LINE",
"83 278 LINE",
"408 318 LINE",
"306 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
9 8 7 6 3 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 0 95 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 20 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 936;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"535 0 LINE",
"551 317 LINE",
"860 279 LINE",
"911 557 LINE",
"586 518 LINE",
"682 836 LINE",
"401 836 LINE",
"385 518 LINE",
"76 557 LINE",
"25 279 LINE",
"350 317 LINE",
"254 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
9 8 7 6 3 2 1 7 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 34 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
64 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 1 95 0 1 1 34 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 20 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 935;
}
);
note = uni16ED;
unicode = 16ED;
},
{
glyphname = uni16EE;
lastChange = "2018-08-16 18:25:29 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"364 0 LINE",
"610 1265 LINE",
"918 933 LINE",
"999 1008 LINE",
"636 1400 LINE",
"536 1400 LINE",
"414 770 LINE",
"72 556 LINE",
"114 475 LINE",
"390 647 LINE",
"264 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
10 9 8 4 3 2 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 92 77 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 0 1 133 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 16 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 1039;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"455 0 LINE",
"678 1266 LINE",
"1038 938 LINE",
"1153 1071 LINE",
"717 1487 LINE",
"487 1487 LINE",
"373 836 LINE",
"47 725 LINE",
"88 582 LINE",
"344 670 LINE",
"225 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
11 10 9 4 3 2 6 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 5 values pushed */
21 16 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 1144;
}
);
note = uni16EE;
unicode = 16EE;
},
{
glyphname = uni16EF;
lastChange = "2018-08-16 18:27:51 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"64 0 LINE",
"93 151 OFFCURVE",
"262 309 OFFCURVE",
"423 344 CURVE",
"356 0 LINE",
"456 0 LINE",
"523 347 LINE",
"653 326 OFFCURVE",
"769 196 OFFCURVE",
"769 52 CURVE SMOOTH",
"769 35 OFFCURVE",
"767 17 OFFCURVE",
"764 0 CURVE",
"864 0 LINE",
"868 23 OFFCURVE",
"870 46 OFFCURVE",
"870 69 CURVE SMOOTH",
"870 259 OFFCURVE",
"733 423 OFFCURVE",
"543 447 CURVE",
"641 953 LINE",
"733 961 OFFCURVE",
"1071 1083 OFFCURVE",
"1136 1400 CURVE",
"1036 1400 LINE",
"993 1226 OFFCURVE",
"817 1076 OFFCURVE",
"661 1053 CURVE",
"728 1400 LINE",
"628 1400 LINE",
"561 1056 LINE",
"440 1084 OFFCURVE",
"331 1209 OFFCURVE",
"331 1348 CURVE SMOOTH",
"331 1366 OFFCURVE",
"333 1383 OFFCURVE",
"336 1400 CURVE",
"236 1400 LINE",
"232 1377 OFFCURVE",
"230 1353 OFFCURVE",
"230 1330 CURVE SMOOTH",
"230 1152 OFFCURVE",
"354 987 OFFCURVE",
"542 955 CURVE",
"442 445 LINE",
"218 408 OFFCURVE",
"8 208 OFFCURVE",
"-36 0 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
44 41 28 16 13 5 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 2 0 0 92 77 5 4 2 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 2 0 3 0 133 5 4 2 3 3 93 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 13 values pushed */
2 1 2 0 3 0 133 5 4 2 3 3 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
21 23 29 21 23 22 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 1100;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"90 0 LINE",
"117 152 OFFCURVE",
"239 267 OFFCURVE",
"358 309 CURVE",
"303 0 LINE",
"532 0 LINE",
"588 309 LINE",
"678 272 OFFCURVE",
"754 178 OFFCURVE",
"754 61 CURVE SMOOTH",
"754 42 OFFCURVE",
"752 22 OFFCURVE",
"748 0 CURVE",
"903 0 LINE",
"908 31 OFFCURVE",
"911 61 OFFCURVE",
"911 90 CURVE SMOOTH",
"911 276 OFFCURVE",
"788 428 OFFCURVE",
"616 471 CURVE",
"713 1016 LINE",
"919 1064 OFFCURVE",
"1123 1244 OFFCURVE",
"1165 1487 CURVE",
"1010 1487 LINE",
"982 1335 OFFCURVE",
"863 1221 OFFCURVE",
"741 1178 CURVE",
"795 1487 LINE",
"565 1487 LINE",
"512 1178 LINE",
"420 1211 OFFCURVE",
"346 1309 OFFCURVE",
"346 1425 CURVE SMOOTH",
"346 1444 OFFCURVE",
"348 1465 OFFCURVE",
"352 1487 CURVE",
"197 1487 LINE",
"192 1456 OFFCURVE",
"188 1426 OFFCURVE",
"188 1397 CURVE SMOOTH",
"188 1212 OFFCURVE",
"312 1059 OFFCURVE",
"483 1016 CURVE",
"387 471 LINE",
"182 423 OFFCURVE",
"-24 242 OFFCURVE",
"-66 0 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
48 45 32 22 19 6 6 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
5 4 2 0 0 33 77 3 2 2 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 15 values pushed */
3 2 2 1 0 1 134 5 4 2 0 0 33 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
23 27 21 23 27 16 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 1099;
}
);
note = uni16EF;
unicode = 16EF;
},
{
glyphname = uni16F0;
lastChange = "2018-08-16 18:30:00 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"457 0 LINE",
"495 196 LINE",
"758 231 OFFCURVE",
"998 459 OFFCURVE",
"998 727 CURVE SMOOTH",
"998 919 OFFCURVE",
"864 1065 OFFCURVE",
"669 1090 CURVE",
"727 1390 LINE",
"627 1390 LINE",
"568 1088 LINE",
"286 1043 OFFCURVE",
"82 796 OFFCURVE",
"82 558 CURVE SMOOTH",
"82 376 OFFCURVE",
"205 230 OFFCURVE",
"395 198 CURVE",
"357 0 LINE"
);
},
{
closed = 1;
nodes = (
"295 326 OFFCURVE",
"184 427 OFFCURVE",
"184 580 CURVE SMOOTH",
"184 750 OFFCURVE",
"331 941 OFFCURVE",
"549 987 CURVE",
"415 299 LINE"
);
},
{
closed = 1;
nodes = (
"649 990 LINE",
"779 971 OFFCURVE",
"895 850 OFFCURVE",
"895 699 CURVE SMOOTH",
"895 504 OFFCURVE",
"707 325 OFFCURVE",
"514 296 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
42 29 12 7 6 5 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 0 92 77 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 133 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 9 values pushed */
0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
41 40 28 27 2 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 1100;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"561 0 LINE",
"600 217 LINE",
"883 271 OFFCURVE",
"1120 537 OFFCURVE",
"1120 829 CURVE SMOOTH",
"1120 1026 OFFCURVE",
"998 1209 OFFCURVE",
"782 1255 CURVE",
"823 1487 LINE",
"596 1487 LINE",
"555 1255 LINE",
"288 1204 OFFCURVE",
"41 935 OFFCURVE",
"41 643 CURVE SMOOTH",
"41 449 OFFCURVE",
"165 267 OFFCURVE",
"371 217 CURVE",
"334 0 LINE"
);
},
{
closed = 1;
nodes = (
"310 445 OFFCURVE",
"229 560 OFFCURVE",
"229 674 CURVE SMOOTH",
"229 831 OFFCURVE",
"354 1010 OFFCURVE",
"522 1073 CURVE",
"406 414 LINE"
);
},
{
closed = 1;
nodes = (
"752 1073 LINE",
"877 1040 OFFCURVE",
"942 927 OFFCURVE",
"942 811 CURVE SMOOTH",
"942 622 OFFCURVE",
"812 470 OFFCURVE",
"635 414 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
51 34 18 7 6 5 0 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 11 values pushed */
0 1 1 33 77 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 134 0 1 1 33 1 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
33 32 17 16 2 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 1163;
}
);
note = uni16F0;
unicode = 16F0;
},
{
glyphname = uni1D79;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"478 -557 OFFCURVE",
"691 -333 OFFCURVE",
"691 -117 CURVE SMOOTH",
"691 -42 OFFCURVE",
"678 45 OFFCURVE",
"396 218 CURVE SMOOTH",
"229 320 OFFCURVE",
"220 369 OFFCURVE",
"220 394 CURVE SMOOTH",
"220 425 OFFCURVE",
"238 461 OFFCURVE",
"271 500 CURVE SMOOTH",
"307 543 OFFCURVE",
"400 626 OFFCURVE",
"548 750 CURVE",
"903 750 LINE",
"903 846 LINE",
"763 835 OFFCURVE",
"627 829 OFFCURVE",
"496 829 CURVE SMOOTH",
"255 829 LINE SMOOTH",
"208 829 OFFCURVE",
"183 839 OFFCURVE",
"182 860 CURVE SMOOTH",
"182 869 OFFCURVE",
"186 887 OFFCURVE",
"197 914 CURVE",
"151 934 LINE",
"47 761 LINE",
"55 750 LINE",
"471 750 LINE",
"223 572 OFFCURVE",
"100 447 OFFCURVE",
"100 373 CURVE SMOOTH",
"100 333 OFFCURVE",
"127 288 OFFCURVE",
"191 246 CURVE SMOOTH",
"341 147 LINE",
"330 149 OFFCURVE",
"317 150 OFFCURVE",
"304 150 CURVE SMOOTH",
"102 150 OFFCURVE",
"-133 -51 OFFCURVE",
"-133 -221 CURVE SMOOTH",
"-133 -254 OFFCURVE",
"-126 -365 OFFCURVE",
"-24 -462 CURVE SMOOTH",
"42 -525 OFFCURVE",
"121 -557 OFFCURVE",
"214 -557 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"3 -496 OFFCURVE",
"-13 -282 OFFCURVE",
"-13 -233 CURVE SMOOTH",
"-13 -93 OFFCURVE",
"145 89 OFFCURVE",
"322 89 CURVE SMOOTH",
"393 89 OFFCURVE",
"444 83 OFFCURVE",
"472 65 CURVE SMOOTH",
"560 9 OFFCURVE",
"571 -86 OFFCURVE",
"571 -121 CURVE SMOOTH",
"571 -275 OFFCURVE",
"397 -496 OFFCURVE",
"228 -496 CURVE SMOOTH"
);
}
);
width = 890;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"497 -557 OFFCURVE",
"788 -377 OFFCURVE",
"788 -102 CURVE SMOOTH",
"788 1 OFFCURVE",
"752 66 OFFCURVE",
"471 236 CURVE SMOOTH",
"334 319 OFFCURVE",
"320 370 OFFCURVE",
"320 401 CURVE SMOOTH",
"320 423 OFFCURVE",
"327 445 OFFCURVE",
"340 469 CURVE SMOOTH",
"374 532 OFFCURVE",
"461 619 OFFCURVE",
"598 731 CURVE",
"961 731 LINE",
"961 846 LINE",
"783 833 OFFCURVE",
"693 827 OFFCURVE",
"558 827 CURVE SMOOTH",
"409 827 LINE SMOOTH",
"325 827 OFFCURVE",
"254 828 OFFCURVE",
"254 865 CURVE SMOOTH",
"254 876 OFFCURVE",
"258 889 OFFCURVE",
"267 905 CURVE",
"205 936 LINE",
"94 744 LINE",
"106 731 LINE",
"489 731 LINE",
"352 634 OFFCURVE",
"122 470 OFFCURVE",
"122 370 CURVE SMOOTH",
"122 336 OFFCURVE",
"152 283 OFFCURVE",
"196 256 CURVE SMOOTH",
"359 156 LINE",
"326 155 OFFCURVE",
"293 151 OFFCURVE",
"258 143 CURVE SMOOTH",
"77 103 OFFCURVE",
"-110 -37 OFFCURVE",
"-110 -202 CURVE SMOOTH",
"-110 -252 OFFCURVE",
"-95 -351 OFFCURVE",
"-2 -444 CURVE SMOOTH",
"73 -519 OFFCURVE",
"166 -557 OFFCURVE",
"275 -557 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"170 -473 OFFCURVE",
"88 -393 OFFCURVE",
"88 -213 CURVE SMOOTH",
"88 -62 OFFCURVE",
"220 82 OFFCURVE",
"382 82 CURVE SMOOTH",
"442 82 OFFCURVE",
"485 72 OFFCURVE",
"511 53 CURVE",
"586 -1 OFFCURVE",
"592 -70 OFFCURVE",
"592 -119 CURVE SMOOTH",
"592 -260 OFFCURVE",
"438 -473 OFFCURVE",
"287 -473 CURVE SMOOTH"
);
}
);
width = 932;
}
);
rightKerningGroup = insg;
unicode = 1D79;
},
{
glyphname = uni1DD1;
lastChange = "2018-08-19 13:08:43 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{77, 856}";
},
{
name = top;
position = "{172, 1396}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"4 1037 OFFCURVE",
"151 1063 OFFCURVE",
"290 1106 CURVE SMOOTH",
"433 1150 OFFCURVE",
"509 1225 OFFCURVE",
"529 1324 CURVE SMOOTH",
"531 1334 OFFCURVE",
"532 1343 OFFCURVE",
"532 1351 CURVE SMOOTH",
"532 1383 OFFCURVE",
"518 1396 OFFCURVE",
"488 1396 CURVE SMOOTH",
"447 1396 OFFCURVE",
"427 1380 OFFCURVE",
"427 1351 CURVE SMOOTH",
"427 1345 OFFCURVE",
"428 1340 OFFCURVE",
"432 1334 CURVE SMOOTH",
"435 1329 OFFCURVE",
"437 1321 OFFCURVE",
"437 1311 CURVE SMOOTH",
"437 1268 OFFCURVE",
"411 1228 OFFCURVE",
"349 1193 CURVE SMOOTH",
"303 1167 OFFCURVE",
"256 1150 OFFCURVE",
"205 1136 CURVE SMOOTH",
"149 1121 OFFCURVE",
"21 1096 OFFCURVE",
"-36 1091 CURVE",
"-58 1050 LINE",
"88 1138 OFFCURVE",
"91 1236 OFFCURVE",
"91 1264 CURVE SMOOTH",
"91 1327 OFFCURVE",
"48 1362 OFFCURVE",
"-19 1362 CURVE SMOOTH",
"-112 1362 OFFCURVE",
"-191 1303 OFFCURVE",
"-253 1230 CURVE",
"-228 1186 LINE",
"-184 1230 OFFCURVE",
"-124 1273 OFFCURVE",
"-67 1273 CURVE SMOOTH",
"-16 1273 OFFCURVE",
"8 1251 OFFCURVE",
"8 1213 CURVE SMOOTH",
"8 1149 OFFCURVE",
"-47 1091 OFFCURVE",
"-146 1082 CURVE",
"-152 1028 LINE"
);
}
);
width = 0;
},
{
anchors = (
{
name = _top;
position = "{65, 856}";
},
{
name = top;
position = "{160, 1396}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-6 1037 OFFCURVE",
"141 1063 OFFCURVE",
"280 1106 CURVE SMOOTH",
"423 1150 OFFCURVE",
"499 1225 OFFCURVE",
"519 1324 CURVE SMOOTH",
"521 1334 OFFCURVE",
"522 1343 OFFCURVE",
"522 1351 CURVE SMOOTH",
"522 1383 OFFCURVE",
"508 1396 OFFCURVE",
"478 1396 CURVE SMOOTH",
"437 1396 OFFCURVE",
"417 1380 OFFCURVE",
"417 1351 CURVE SMOOTH",
"417 1345 OFFCURVE",
"418 1340 OFFCURVE",
"422 1334 CURVE SMOOTH",
"425 1329 OFFCURVE",
"427 1321 OFFCURVE",
"427 1311 CURVE SMOOTH",
"427 1268 OFFCURVE",
"401 1228 OFFCURVE",
"339 1193 CURVE SMOOTH",
"293 1167 OFFCURVE",
"246 1150 OFFCURVE",
"195 1136 CURVE SMOOTH",
"139 1121 OFFCURVE",
"82 1112 OFFCURVE",
"25 1107 CURVE",
"34 1096 LINE",
"75 1158 OFFCURVE",
"88 1216 OFFCURVE",
"88 1249 CURVE SMOOTH",
"88 1309 OFFCURVE",
"52 1342 OFFCURVE",
"-13 1342 CURVE SMOOTH",
"-106 1342 OFFCURVE",
"-204 1283 OFFCURVE",
"-267 1210 CURVE",
"-242 1166 LINE",
"-188 1210 OFFCURVE",
"-138 1248 OFFCURVE",
"-91 1248 CURVE SMOOTH",
"-59 1248 OFFCURVE",
"-41 1225 OFFCURVE",
"-41 1189 CURVE SMOOTH",
"-41 1128 OFFCURVE",
"-71 1089 OFFCURVE",
"-155 1089 CURVE",
"-162 1028 LINE"
);
}
);
width = 0;
}
);
unicode = 1DD1;
},
{
glyphname = uni1DD2;
lastChange = "2018-08-19 13:09:21 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{77, 856}";
},
{
name = top;
position = "{208, 1596}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"257 1033 OFFCURVE",
"379 1224 OFFCURVE",
"379 1394 CURVE SMOOTH",
"379 1522 OFFCURVE",
"309 1596 OFFCURVE",
"193 1596 CURVE SMOOTH",
"14 1596 OFFCURVE",
"-74 1443 OFFCURVE",
"-74 1352 CURVE SMOOTH",
"-74 1289 OFFCURVE",
"-39 1249 OFFCURVE",
"19 1249 CURVE SMOOTH",
"60 1249 OFFCURVE",
"97 1277 OFFCURVE",
"97 1315 CURVE SMOOTH",
"97 1336 OFFCURVE",
"84 1353 OFFCURVE",
"58 1371 CURVE SMOOTH",
"40 1383 OFFCURVE",
"28 1402 OFFCURVE",
"28 1429 CURVE SMOOTH",
"28 1463 OFFCURVE",
"59 1535 OFFCURVE",
"148 1535 CURVE SMOOTH",
"213 1535 OFFCURVE",
"261 1472 OFFCURVE",
"261 1379 CURVE SMOOTH",
"261 1261 OFFCURVE",
"187 1100 OFFCURVE",
"35 1010 CURVE",
"48 969 LINE"
);
}
);
width = 0;
},
{
anchors = (
{
name = _top;
position = "{80, 856}";
},
{
name = top;
position = "{211, 1601}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"267 1017 OFFCURVE",
"406 1211 OFFCURVE",
"406 1391 CURVE SMOOTH",
"406 1523 OFFCURVE",
"329 1601 OFFCURVE",
"196 1601 CURVE SMOOTH",
"-13 1601 OFFCURVE",
"-97 1432 OFFCURVE",
"-97 1355 CURVE SMOOTH",
"-97 1287 OFFCURVE",
"-52 1244 OFFCURVE",
"21 1244 CURVE SMOOTH",
"74 1244 OFFCURVE",
"124 1275 OFFCURVE",
"124 1314 CURVE SMOOTH",
"124 1335 OFFCURVE",
"108 1352 OFFCURVE",
"74 1375 CURVE SMOOTH",
"62 1383 OFFCURVE",
"55 1402 OFFCURVE",
"55 1425 CURVE SMOOTH",
"55 1486 OFFCURVE",
"96 1530 OFFCURVE",
"149 1530 CURVE SMOOTH",
"201 1530 OFFCURVE",
"238 1466 OFFCURVE",
"238 1382 CURVE SMOOTH",
"238 1261 OFFCURVE",
"159 1088 OFFCURVE",
"14 1008 CURVE",
"30 957 LINE"
);
}
);
width = 0;
}
);
unicode = 1DD2;
},
{
glyphname = uni1DD3;
lastChange = "2018-08-19 13:10:02 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{79, 856}";
},
{
name = top;
position = "{198, 1528}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-84 1091 OFFCURVE",
"-49 1050 OFFCURVE",
"11 1050 CURVE SMOOTH",
"71 1050 OFFCURVE",
"172 1093 OFFCURVE",
"292 1249 CURVE",
"277 1195 OFFCURVE",
"265 1137 OFFCURVE",
"265 1107 CURVE SMOOTH",
"265 1069 OFFCURVE",
"289 1050 OFFCURVE",
"319 1050 CURVE SMOOTH",
"380 1050 OFFCURVE",
"470 1106 OFFCURVE",
"539 1196 CURVE",
"509 1218 LINE",
"463 1171 OFFCURVE",
"425 1144 OFFCURVE",
"405 1144 CURVE SMOOTH",
"392 1144 OFFCURVE",
"385 1155 OFFCURVE",
"385 1175 CURVE SMOOTH",
"385 1186 OFFCURVE",
"390 1214 OFFCURVE",
"402 1255 CURVE SMOOTH",
"447 1407 LINE",
"339 1407 LINE",
"266 1248 OFFCURVE",
"134 1130 OFFCURVE",
"78 1130 CURVE SMOOTH",
"48 1130 OFFCURVE",
"33 1153 OFFCURVE",
"33 1196 CURVE SMOOTH",
"33 1276 OFFCURVE",
"81 1428 OFFCURVE",
"136 1500 CURVE",
"61 1528 LINE",
"-34 1419 OFFCURVE",
"-84 1292 OFFCURVE",
"-84 1172 CURVE SMOOTH"
);
}
);
width = 0;
},
{
anchors = (
{
name = _top;
position = "{78, 856}";
},
{
name = top;
position = "{199, 1544}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-119 1089 OFFCURVE",
"-77 1045 OFFCURVE",
"1 1045 CURVE SMOOTH",
"76 1045 OFFCURVE",
"158 1091 OFFCURVE",
"239 1174 CURVE",
"233 1146 OFFCURVE",
"230 1122 OFFCURVE",
"230 1107 CURVE SMOOTH",
"230 1068 OFFCURVE",
"263 1045 OFFCURVE",
"309 1045 CURVE SMOOTH",
"385 1045 OFFCURVE",
"485 1108 OFFCURVE",
"550 1195 CURVE",
"495 1236 LINE",
"447 1185 OFFCURVE",
"429 1167 OFFCURVE",
"416 1167 CURVE SMOOTH",
"408 1167 OFFCURVE",
"403 1176 OFFCURVE",
"403 1191 CURVE SMOOTH",
"403 1206 OFFCURVE",
"411 1236 OFFCURVE",
"416 1254 CURVE SMOOTH",
"463 1412 LINE",
"306 1412 LINE",
"230 1242 OFFCURVE",
"121 1151 OFFCURVE",
"80 1151 CURVE SMOOTH",
"68 1151 OFFCURVE",
"48 1159 OFFCURVE",
"48 1196 CURVE SMOOTH",
"48 1281 OFFCURVE",
"101 1441 OFFCURVE",
"148 1500 CURVE",
"27 1544 LINE",
"-60 1454 OFFCURVE",
"-119 1318 OFFCURVE",
"-119 1192 CURVE SMOOTH"
);
}
);
width = 0;
}
);
unicode = 1DD3;
},
{
glyphname = uni1E8E;
lastChange = "2018-08-18 13:09:53 +0000";
layers = (
{
components = (
{
name = Y;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 659, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1311;
},
{
components = (
{
name = Y;
},
{
name = uni0307.case;
transform = "{1, 0, 0, 1, 714, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1414;
}
);
note = uni1E8E;
unicode = 1E8E;
},
{
glyphname = uni1E8F;
lastChange = "2018-08-18 13:45:54 +0000";
layers = (
{
components = (
{
alignment = -1;
name = y;
transform = "{1, 0, 0, 1, -40, 0}";
},
{
name = uni0307;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 693;
},
{
components = (
{
alignment = -1;
name = y;
},
{
name = uni0307;
transform = "{1, 0, 0, 1, 295, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 736;
}
);
leftKerningGroup = uni1E8F;
widthMetricsKey = y;
note = uni1E8F;
unicode = 1E8F;
},
{
glyphname = uni1E9C;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
components = (
{
name = longs;
transform = "{1, 0, 0, 1, 32, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"568 655 LINE",
"559 752 LINE",
"-150 486 LINE",
"-141 388 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
58 57 24 23 4 1 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 4 5 1 5 4 1 128 0 1 2 2 1 112 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 94 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
51 49 45 43 39 37 34 38 37 6 12 25 
CALL[ ]\011/* CallFunction */";
};
width = 371;
},
{
components = (
{
name = longs;
transform = "{1, 0, 0, 1, 70, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"647 652 LINE",
"651 772 LINE",
"-78 507 LINE",
"-82 384 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
63 22 2 3 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 0 1 3 1 0 3 128 0 3 4 4 3 112 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 1 1 5 97 0 5 5 33 77 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 4 2 98 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 3 1 0 3 128 0 3 4 1 3 4 126 0 5 0 1 0 5 1 105 0 4 2 2 4 89 0 4 4 2 98 0 2 4 2 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
86 84 59 57 53 51 45 43 25 35 6 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 483;
}
);
note = uni1E9C;
unicode = 1E9C;
},
{
glyphname = uni1E9E;
lastChange = "2018-08-17 11:17:05 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"289 108 OFFCURVE",
"222 69 OFFCURVE",
"104 69 CURVE SMOOTH",
"83 69 OFFCURVE",
"72 -7 OFFCURVE",
"89 -7 CURVE",
"175 -2 OFFCURVE",
"261 0 OFFCURVE",
"348 0 CURVE SMOOTH",
"435 0 OFFCURVE",
"516 -2 OFFCURVE",
"592 -7 CURVE",
"612 -7 OFFCURVE",
"623 69 OFFCURVE",
"607 69 CURVE SMOOTH",
"506 69 OFFCURVE",
"453 97 OFFCURVE",
"448 152 CURVE SMOOTH",
"447 163 OFFCURVE",
"447 174 OFFCURVE",
"450 186 CURVE SMOOTH",
"559 738 LINE SMOOTH",
"627 1069 OFFCURVE",
"837 1314 OFFCURVE",
"1154 1314 CURVE SMOOTH",
"1226 1314 OFFCURVE",
"1287 1301 OFFCURVE",
"1336 1275 CURVE SMOOTH",
"1351 1267 OFFCURVE",
"1357 1256 OFFCURVE",
"1354 1242 CURVE SMOOTH",
"1351 1228 OFFCURVE",
"1338 1207 OFFCURVE",
"1316 1178 CURVE SMOOTH",
"1000 775 LINE SMOOTH",
"975 744 OFFCURVE",
"963 720 OFFCURVE",
"964 704 CURVE SMOOTH",
"966 685 OFFCURVE",
"981 676 OFFCURVE",
"1009 676 CURVE SMOOTH",
"1258 676 OFFCURVE",
"1334 556 OFFCURVE",
"1344 445 CURVE SMOOTH",
"1353 342 OFFCURVE",
"1337 240 OFFCURVE",
"1222 129 CURVE SMOOTH",
"1164 74 OFFCURVE",
"1098 46 OFFCURVE",
"1025 46 CURVE SMOOTH",
"890 46 OFFCURVE",
"821 151 OFFCURVE",
"813 244 CURVE SMOOTH",
"809 291 OFFCURVE",
"808 334 OFFCURVE",
"811 374 CURVE",
"816 405 OFFCURVE",
"743 380 OFFCURVE",
"737 346 CURVE SMOOTH",
"723 277 OFFCURVE",
"720 198 OFFCURVE",
"728 109 CURVE SMOOTH",
"729 97 OFFCURVE",
"730 85 OFFCURVE",
"732 73 CURVE",
"782 13 OFFCURVE",
"881 -35 OFFCURVE",
"990 -35 CURVE SMOOTH",
"1210 -35 OFFCURVE",
"1396 95 OFFCURVE",
"1458 252 CURVE SMOOTH",
"1488 331 OFFCURVE",
"1501 404 OFFCURVE",
"1495 473 CURVE SMOOTH",
"1484 594 OFFCURVE",
"1377 724 OFFCURVE",
"1154 739 CURVE",
"1154 756 LINE",
"1551 1247 LINE SMOOTH",
"1571 1272 OFFCURVE",
"1583 1289 OFFCURVE",
"1585 1297 CURVE",
"1587 1313 OFFCURVE",
"1590 1325 OFFCURVE",
"1575 1330 CURVE SMOOTH",
"1472 1367 OFFCURVE",
"1353 1385 OFFCURVE",
"1218 1385 CURVE SMOOTH",
"815 1385 OFFCURVE",
"502 1175 OFFCURVE",
"422 770 CURVE SMOOTH",
"305 186 LINE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1419 1287 LINE",
"1407 1330 LINE",
"1297 1367 OFFCURVE",
"1197 1385 OFFCURVE",
"1070 1385 CURVE SMOOTH",
"868 1385 OFFCURVE",
"705 1334 OFFCURVE",
"564 1230 CURVE SMOOTH",
"423 1126 OFFCURVE",
"343 973 OFFCURVE",
"307 770 CURVE SMOOTH",
"200 166 LINE SMOOTH",
"187 94 OFFCURVE",
"119 58 OFFCURVE",
"-16 58 CURVE",
"-16 0 LINE",
"500 0 LINE",
"500 58 LINE",
"365 58 OFFCURVE",
"309 94 OFFCURVE",
"322 166 CURVE SMOOTH",
"423 738 LINE SMOOTH",
"458 937 OFFCURVE",
"501 1032 OFFCURVE",
"596 1144 CURVE SMOOTH",
"691 1257 OFFCURVE",
"850 1322 OFFCURVE",
"1009 1322 CURVE SMOOTH",
"1084 1322 OFFCURVE",
"1191 1302 OFFCURVE",
"1225 1247 CURVE",
"823 719 LINE",
"838 684 LINE",
"1059 684 OFFCURVE",
"1197 577 OFFCURVE",
"1197 417 CURVE SMOOTH",
"1197 289 OFFCURVE",
"1108 41 OFFCURVE",
"906 41 CURVE SMOOTH",
"839 41 OFFCURVE",
"781 73 OFFCURVE",
"738 124 CURVE SMOOTH",
"695 175 OFFCURVE",
"675 258 OFFCURVE",
"683 374 CURVE",
"623 374 LINE",
"605 275 OFFCURVE",
"604 176 OFFCURVE",
"619 73 CURVE",
"677 8 OFFCURVE",
"770 -35 OFFCURVE",
"875 -35 CURVE SMOOTH",
"1219 -35 OFFCURVE",
"1349 281 OFFCURVE",
"1349 438 CURVE SMOOTH",
"1349 617 OFFCURVE",
"1213 735 OFFCURVE",
"986 739 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
12 1 4 5 23 1 6 2 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 4 5 2 5 4 2 128 0 2 6 5 2 6 126 0 5 5 0 97 0 0 0 98 77 8 1 6 6 7 95 0 7 7 93 77 0 3 3 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 4 5 2 5 4 2 128 0 2 6 5 2 6 126 8 1 6 0 7 1 6 7 103 0 5 5 0 97 0 0 0 98 77 0 3 3 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 4 5 2 5 4 2 128 0 2 6 5 2 6 126 0 0 0 5 4 0 5 105 8 1 6 0 7 1 6 7 103 0 3 3 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 4 5 2 5 4 2 128 0 2 6 5 2 6 126 0 0 0 5 4 0 5 105 0 3 7 1 3 89 8 1 6 0 7 1 6 7 103 0 3 3 1 97 0 1 3 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
35 67 22 40 37 36 24 46 35 9 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1399;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1487 563 OFFCURVE",
"1320 729 OFFCURVE",
"1153 739 QCURVE",
"1154 756 LINE",
"1541 1247 LINE SMOOTH",
"1578 1294 OFFCURVE",
"1576 1317 QCURVE SMOOTH",
"1575 1325 OFFCURVE",
"1565 1329 QCURVE SMOOTH",
"1415 1384 OFFCURVE",
"1218 1384 QCURVE SMOOTH",
"894 1384 OFFCURVE",
"416 1049 OFFCURVE",
"361 770 QCURVE SMOOTH",
"248 203 LINE SMOOTH",
"225 86 OFFCURVE",
"47 86 QCURVE SMOOTH",
"33 86 OFFCURVE",
"19 14 OFFCURVE",
"20 4 QCURVE SMOOTH",
"21 -6 OFFCURVE",
"27 -6 QCURVE",
"143 0 OFFCURVE",
"348 0 QCURVE SMOOTH",
"485 0 OFFCURVE",
"621 -6 QCURVE",
"635 -6 OFFCURVE",
"653 86 OFFCURVE",
"641 86 QCURVE SMOOTH",
"487 86 OFFCURVE",
"480 170 QCURVE",
"481 185 OFFCURVE",
"483 203 QCURVE",
"591 737 LINE SMOOTH",
"647 1026 OFFCURVE",
"904 1294 OFFCURVE",
"1111 1294 QCURVE SMOOTH",
"1195 1294 OFFCURVE",
"1284 1276 QCURVE",
"1310 1272 OFFCURVE",
"1304 1243 QCURVE SMOOTH",
"1300 1223 OFFCURVE",
"1267 1180 QCURVE SMOOTH",
"949 776 LINE SMOOTH",
"913 728 OFFCURVE",
"915 705 QCURVE",
"915 678 OFFCURVE",
"958 678 QCURVE SMOOTH",
"1116 678 OFFCURVE",
"1246 508 OFFCURVE",
"1254 406 QCURVE SMOOTH",
"1268 250 OFFCURVE",
"1130 63 OFFCURVE",
"1024 63 QCURVE SMOOTH",
"921 63 OFFCURVE",
"818 174 OFFCURVE",
"805 316 OFFCURVE",
"810 375 QCURVE",
"812 383 OFFCURVE",
"751 383 OFFCURVE",
"739 356 OFFCURVE",
"738 346 QCURVE",
"716 236 OFFCURVE",
"727 109 QCURVE",
"731 92 OFFCURVE",
"733 74 QCURVE",
"769 29 OFFCURVE",
"908 -35 OFFCURVE",
"990 -35 QCURVE SMOOTH",
"1156 -35 OFFCURVE",
"1411 133 OFFCURVE",
"1504 371 OFFCURVE",
"1495 473 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1477 1298 LINE",
"1466 1326 LINE",
"1370 1364 OFFCURVE",
"1232 1384 OFFCURVE",
"1072 1384 CURVE SMOOTH",
"870 1384 OFFCURVE",
"683 1331 OFFCURVE",
"538 1228 CURVE SMOOTH",
"394 1125 OFFCURVE",
"290 972 OFFCURVE",
"255 770 CURVE SMOOTH",
"154 194 LINE SMOOTH",
"141 122 OFFCURVE",
"73 86 OFFCURVE",
"-62 86 CURVE",
"-62 0 LINE",
"542 0 LINE",
"542 86 LINE",
"427 86 OFFCURVE",
"384 122 OFFCURVE",
"397 194 CURVE SMOOTH",
"492 737 LINE SMOOTH",
"520 895 OFFCURVE",
"563 1026 OFFCURVE",
"631 1121 CURVE SMOOTH",
"711 1233 OFFCURVE",
"828 1296 OFFCURVE",
"1007 1296 CURVE SMOOTH",
"1050 1296 OFFCURVE",
"1151 1288 OFFCURVE",
"1195 1259 CURVE",
"784 719 LINE",
"828 664 LINE",
"1040 664 OFFCURVE",
"1159 575 OFFCURVE",
"1159 413 CURVE SMOOTH",
"1159 256 OFFCURVE",
"1085 68 OFFCURVE",
"930 68 CURVE SMOOTH",
"869 68 OFFCURVE",
"816 89 OFFCURVE",
"772 133 CURVE SMOOTH",
"727 178 OFFCURVE",
"708 259 OFFCURVE",
"715 375 CURVE",
"619 375 LINE",
"601 268 OFFCURVE",
"601 178 OFFCURVE",
"615 74 CURVE",
"670 14 OFFCURVE",
"786 -27 OFFCURVE",
"895 -27 CURVE SMOOTH",
"1177 -27 OFFCURVE",
"1373 215 OFFCURVE",
"1373 446 CURVE SMOOTH",
"1373 615 OFFCURVE",
"1251 734 OFFCURVE",
"1038 739 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
66 1 4 8 69 27 2 3 4 7 1 2 5 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 3 4 1 4 3 1 128 0 1 5 4 1 5 126 0 4 4 8 97 0 8 8 37 77 7 1 5 5 6 95 0 6 6 32 77 0 2 2 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 3 4 1 4 3 1 128 0 1 5 4 1 5 126 7 1 5 0 6 0 5 6 103 0 4 4 8 97 0 8 8 37 77 0 2 2 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
0 3 4 1 4 3 1 128 0 1 5 4 1 5 126 0 8 0 4 3 8 4 105 7 1 5 0 6 0 5 6 103 0 2 2 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
0 3 4 1 4 3 1 128 0 1 5 4 1 5 126 0 8 0 4 3 8 4 105 0 2 6 0 2 89 7 1 5 0 6 0 5 6 103 0 2 2 0 97 0 0 2 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
36 36 82 22 41 36 36 24 35 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1441;
}
);
note = uni1E9E;
unicode = 1E9E;
},
{
glyphname = uni2000;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1024;
}
);
note = uni2000;
unicode = 2000;
},
{
glyphname = uni2001;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 2048;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 2048;
}
);
note = uni2001;
unicode = 2001;
},
{
glyphname = uni2002;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1024;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1024;
}
);
note = uni2002;
unicode = 2002;
},
{
glyphname = uni2003;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 2048;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 2048;
}
);
note = uni2003;
unicode = 2003;
},
{
glyphname = uni2004;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 682;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 681;
}
);
note = uni2004;
unicode = 2004;
},
{
glyphname = uni2005;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 512;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 512;
}
);
note = uni2005;
unicode = 2005;
},
{
glyphname = uni2006;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 341;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 339;
}
);
note = uni2006;
unicode = 2006;
},
{
glyphname = uni2007;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 956;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 954;
}
);
note = uni2007;
unicode = 2007;
},
{
glyphname = uni2008;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 520;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 518;
}
);
note = uni2008;
unicode = 2008;
},
{
glyphname = uni2009;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 204;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 202;
}
);
note = uni2009;
unicode = 2009;
},
{
glyphname = uni200A;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 20;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 18;
}
);
note = uni200A;
unicode = 200A;
},
{
glyphname = uni200B;
lastChange = "2018-08-01 21:48:14 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
note = uni200B;
unicode = 200B;
},
{
glyphname = uni2010;
lastChange = "2018-08-16 17:12:25 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"743 487 LINE",
"778 602 LINE",
"205 602 LINE",
"172 487 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 9 0 8 35 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 827;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"743 487 LINE",
"778 618 LINE",
"205 618 LINE",
"172 487 LINE"
);
}
);
width = 827;
}
);
note = uni2010;
unicode = 2010;
},
{
glyphname = uni2011;
lastChange = "2018-08-16 17:13:05 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"743 487 LINE",
"778 602 LINE",
"205 602 LINE",
"172 487 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 9 0 8 35 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 827;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"743 487 LINE",
"778 618 LINE",
"205 618 LINE",
"172 487 LINE"
);
}
);
width = 827;
}
);
note = uni2011;
unicode = 2011;
},
{
glyphname = uni2015;
lastChange = "2018-08-16 17:13:56 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"2080 473 LINE",
"2102 588 LINE",
"115 588 LINE",
"93 473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 9 0 8 35 3 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 2195;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"2080 473 LINE",
"2102 604 LINE",
"115 604 LINE",
"93 473 LINE"
);
}
);
width = 2195;
}
);
note = uni2015;
unicode = 2015;
},
{
glyphname = uni2016;
lastChange = "2018-08-16 17:14:43 +0000";
layers = (
{
components = (
{
name = bar;
transform = "{1, 0, 0, 1, -105, 0}";
},
{
name = bar;
transform = "{1, 0, 0, 1, 150, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 657;
},
{
components = (
{
name = bar;
transform = "{1, 0, 0, 1, 301, 0}";
},
{
name = bar;
transform = "{1, 0, 0, 1, -69, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 887;
}
);
note = uni2016;
unicode = 2016;
},
{
glyphname = uni201F;
lastChange = "2018-08-16 16:57:03 +0000";
layers = (
{
components = (
{
name = quotereversed;
},
{
name = quotereversed;
transform = "{1, 0, 0, 1, 340, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 729;
},
{
components = (
{
name = quotereversed;
transform = "{1, 0, 0, 1, 404, 0}";
},
{
name = quotereversed;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1004;
}
);
leftMetricsKey = quotereversed;
note = uni201F;
rightMetricsKey = quotereversed;
unicode = 201F;
},
{
glyphname = uni202F;
lastChange = "2018-08-08 20:23:25 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 559;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 600;
}
);
note = uni202F;
unicode = 202F;
},
{
glyphname = uni204A;
lastChange = "2018-08-16 17:10:48 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"782 845 LINE",
"782 851 OFFCURVE",
"771 853 OFFCURVE",
"750 851 CURVE SMOOTH",
"593 835 OFFCURVE",
"480 827 OFFCURVE",
"410 827 CURVE SMOOTH",
"340 827 OFFCURVE",
"300 829 OFFCURVE",
"291 834 CURVE SMOOTH",
"275 842 OFFCURVE",
"267 854 OFFCURVE",
"267 870 CURVE SMOOTH",
"267 881 OFFCURVE",
"271 894 OFFCURVE",
"279 909 CURVE",
"235 926 LINE",
"200 855 OFFCURVE",
"129 744 OFFCURVE",
"90 700 CURVE",
"137 674 LINE",
"168 717 OFFCURVE",
"209 748 OFFCURVE",
"248 748 CURVE SMOOTH",
"631 748 LINE",
"340 -246 LINE SMOOTH",
"302 -391 OFFCURVE",
"214 -463 OFFCURVE",
"76 -463 CURVE SMOOTH",
"56 -463 OFFCURVE",
"33 -461 OFFCURVE",
"6 -457 CURVE",
"-25 -526 LINE",
"35 -545 OFFCURVE",
"86 -555 OFFCURVE",
"129 -555 CURVE SMOOTH",
"293 -555 OFFCURVE",
"404 -455 OFFCURVE",
"461 -254 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"293 -555 OFFCURVE",
"403 -454 OFFCURVE",
"461 -254 CURVE SMOOTH",
"776 825 LINE",
"750 851 LINE",
"593 835 OFFCURVE",
"480 827 OFFCURVE",
"410 827 CURVE SMOOTH",
"340 827 OFFCURVE",
"300 829 OFFCURVE",
"291 834 CURVE SMOOTH",
"275 842 OFFCURVE",
"267 854 OFFCURVE",
"267 870 CURVE SMOOTH",
"267 881 OFFCURVE",
"271 894 OFFCURVE",
"279 909 CURVE",
"235 926 LINE",
"200 855 OFFCURVE",
"129 744 OFFCURVE",
"90 700 CURVE",
"137 674 LINE",
"168 717 OFFCURVE",
"209 748 OFFCURVE",
"248 748 CURVE SMOOTH",
"631 748 LINE",
"340 -246 LINE SMOOTH",
"298 -390 OFFCURVE",
"214 -463 OFFCURVE",
"76 -463 CURVE SMOOTH",
"56 -463 OFFCURVE",
"33 -461 OFFCURVE",
"6 -457 CURVE",
"-25 -526 LINE",
"35 -545 OFFCURVE",
"86 -555 OFFCURVE",
"129 -555 CURVE SMOOTH"
);
}
);
width = 760;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"291 -555 OFFCURVE",
"424 -476 OFFCURVE",
"496 -240 CURVE SMOOTH",
"817 813 LINE",
"789 846 LINE",
"601 830 OFFCURVE",
"449 827 OFFCURVE",
"332 827 CURVE SMOOTH",
"310 827 OFFCURVE",
"293 831 OFFCURVE",
"281 838 CURVE SMOOTH",
"267 846 OFFCURVE",
"260 859 OFFCURVE",
"260 877 CURVE SMOOTH",
"260 888 OFFCURVE",
"262 904 OFFCURVE",
"269 921 CURVE",
"207 944 LINE",
"182 860 OFFCURVE",
"145 768 OFFCURVE",
"104 688 CURVE",
"163 658 LINE",
"188 709 OFFCURVE",
"202 727 OFFCURVE",
"252 727 CURVE SMOOTH",
"592 727 LINE",
"305 -211 LINE SMOOTH",
"271 -323 OFFCURVE",
"206 -449 OFFCURVE",
"55 -449 CURVE SMOOTH",
"32 -449 OFFCURVE",
"9 -444 OFFCURVE",
"-8 -439 CURVE",
"-39 -524 LINE",
"24 -545 OFFCURVE",
"80 -555 OFFCURVE",
"131 -555 CURVE SMOOTH"
);
}
);
width = 868;
}
);
unicode = 204A;
},
{
glyphname = uni25CC;
lastChange = "2018-08-09 17:47:12 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"882 681 OFFCURVE",
"905 703 OFFCURVE",
"905 731 CURVE SMOOTH",
"905 759 OFFCURVE",
"882 781 OFFCURVE",
"854 781 CURVE SMOOTH",
"827 781 OFFCURVE",
"804 759 OFFCURVE",
"804 731 CURVE SMOOTH",
"804 703 OFFCURVE",
"827 681 OFFCURVE",
"854 681 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"282 80 OFFCURVE",
"305 102 OFFCURVE",
"305 130 CURVE SMOOTH",
"305 158 OFFCURVE",
"282 180 OFFCURVE",
"254 180 CURVE SMOOTH",
"227 180 OFFCURVE",
"204 158 OFFCURVE",
"204 130 CURVE SMOOTH",
"204 102 OFFCURVE",
"227 80 OFFCURVE",
"254 80 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"420 -12 OFFCURVE",
"443 10 OFFCURVE",
"443 38 CURVE SMOOTH",
"443 66 OFFCURVE",
"420 88 OFFCURVE",
"392 88 CURVE SMOOTH",
"365 88 OFFCURVE",
"342 66 OFFCURVE",
"342 38 CURVE SMOOTH",
"342 10 OFFCURVE",
"365 -12 OFFCURVE",
"392 -12 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190 218 OFFCURVE",
"212 241 OFFCURVE",
"212 269 CURVE SMOOTH",
"212 296 OFFCURVE",
"190 319 OFFCURVE",
"162 319 CURVE SMOOTH",
"134 319 OFFCURVE",
"112 296 OFFCURVE",
"112 269 CURVE SMOOTH",
"112 241 OFFCURVE",
"134 218 OFFCURVE",
"162 218 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"158 380 OFFCURVE",
"180 403 OFFCURVE",
"180 431 CURVE SMOOTH",
"180 458 OFFCURVE",
"158 481 OFFCURVE",
"130 481 CURVE SMOOTH",
"102 481 OFFCURVE",
"80 458 OFFCURVE",
"80 431 CURVE SMOOTH",
"80 403 OFFCURVE",
"102 380 OFFCURVE",
"130 380 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 -44 OFFCURVE",
"605 -22 OFFCURVE",
"605 6 CURVE SMOOTH",
"605 34 OFFCURVE",
"582 56 OFFCURVE",
"555 56 CURVE SMOOTH",
"527 56 OFFCURVE",
"504 34 OFFCURVE",
"504 6 CURVE SMOOTH",
"504 -22 OFFCURVE",
"527 -44 OFFCURVE",
"555 -44 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190 542 OFFCURVE",
"212 565 OFFCURVE",
"212 593 CURVE SMOOTH",
"212 620 OFFCURVE",
"190 643 OFFCURVE",
"162 643 CURVE SMOOTH",
"134 643 OFFCURVE",
"112 620 OFFCURVE",
"112 593 CURVE SMOOTH",
"112 565 OFFCURVE",
"134 542 OFFCURVE",
"162 542 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"744 -12 OFFCURVE",
"767 10 OFFCURVE",
"767 38 CURVE SMOOTH",
"767 66 OFFCURVE",
"744 88 OFFCURVE",
"717 88 CURVE SMOOTH",
"689 88 OFFCURVE",
"666 66 OFFCURVE",
"666 38 CURVE SMOOTH",
"666 10 OFFCURVE",
"689 -12 OFFCURVE",
"717 -12 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"282 680 OFFCURVE",
"304 703 OFFCURVE",
"304 731 CURVE SMOOTH",
"304 758 OFFCURVE",
"282 781 OFFCURVE",
"254 781 CURVE SMOOTH",
"226 781 OFFCURVE",
"204 758 OFFCURVE",
"204 731 CURVE SMOOTH",
"204 703 OFFCURVE",
"226 680 OFFCURVE",
"254 680 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"883 80 OFFCURVE",
"905 103 OFFCURVE",
"905 131 CURVE SMOOTH",
"905 158 OFFCURVE",
"883 181 OFFCURVE",
"855 181 CURVE SMOOTH",
"827 181 OFFCURVE",
"805 158 OFFCURVE",
"805 131 CURVE SMOOTH",
"805 103 OFFCURVE",
"827 80 OFFCURVE",
"855 80 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"975 218 OFFCURVE",
"997 241 OFFCURVE",
"997 269 CURVE SMOOTH",
"997 296 OFFCURVE",
"975 319 OFFCURVE",
"947 319 CURVE SMOOTH",
"919 319 OFFCURVE",
"897 296 OFFCURVE",
"897 269 CURVE SMOOTH",
"897 241 OFFCURVE",
"919 218 OFFCURVE",
"947 218 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"420 773 OFFCURVE",
"443 795 OFFCURVE",
"443 823 CURVE SMOOTH",
"443 851 OFFCURVE",
"420 873 OFFCURVE",
"393 873 CURVE SMOOTH",
"365 873 OFFCURVE",
"342 851 OFFCURVE",
"342 823 CURVE SMOOTH",
"342 795 OFFCURVE",
"365 773 OFFCURVE",
"393 773 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1007 380 OFFCURVE",
"1029 403 OFFCURVE",
"1029 431 CURVE SMOOTH",
"1029 458 OFFCURVE",
"1007 481 OFFCURVE",
"979 481 CURVE SMOOTH",
"951 481 OFFCURVE",
"929 458 OFFCURVE",
"929 431 CURVE SMOOTH",
"929 403 OFFCURVE",
"951 380 OFFCURVE",
"979 380 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 805 OFFCURVE",
"605 827 OFFCURVE",
"605 855 CURVE SMOOTH",
"605 883 OFFCURVE",
"582 905 OFFCURVE",
"555 905 CURVE SMOOTH",
"527 905 OFFCURVE",
"504 883 OFFCURVE",
"504 855 CURVE SMOOTH",
"504 827 OFFCURVE",
"527 805 OFFCURVE",
"555 805 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"744 773 OFFCURVE",
"767 795 OFFCURVE",
"767 823 CURVE SMOOTH",
"767 851 OFFCURVE",
"744 873 OFFCURVE",
"716 873 CURVE SMOOTH",
"689 873 OFFCURVE",
"666 851 OFFCURVE",
"666 823 CURVE SMOOTH",
"666 795 OFFCURVE",
"689 773 OFFCURVE",
"716 773 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"975 542 OFFCURVE",
"997 565 OFFCURVE",
"997 593 CURVE SMOOTH",
"997 620 OFFCURVE",
"975 643 OFFCURVE",
"947 643 CURVE SMOOTH",
"919 643 OFFCURVE",
"897 620 OFFCURVE",
"897 593 CURVE SMOOTH",
"897 565 OFFCURVE",
"919 542 OFFCURVE",
"947 542 CURVE SMOOTH"
);
}
);
width = 1094;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"882 681 OFFCURVE",
"905 703 OFFCURVE",
"905 731 CURVE SMOOTH",
"905 759 OFFCURVE",
"882 781 OFFCURVE",
"854 781 CURVE SMOOTH",
"827 781 OFFCURVE",
"804 759 OFFCURVE",
"804 731 CURVE SMOOTH",
"804 703 OFFCURVE",
"827 681 OFFCURVE",
"854 681 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"282 80 OFFCURVE",
"305 102 OFFCURVE",
"305 130 CURVE SMOOTH",
"305 158 OFFCURVE",
"282 180 OFFCURVE",
"254 180 CURVE SMOOTH",
"227 180 OFFCURVE",
"204 158 OFFCURVE",
"204 130 CURVE SMOOTH",
"204 102 OFFCURVE",
"227 80 OFFCURVE",
"254 80 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"420 -12 OFFCURVE",
"443 10 OFFCURVE",
"443 38 CURVE SMOOTH",
"443 66 OFFCURVE",
"420 88 OFFCURVE",
"392 88 CURVE SMOOTH",
"365 88 OFFCURVE",
"342 66 OFFCURVE",
"342 38 CURVE SMOOTH",
"342 10 OFFCURVE",
"365 -12 OFFCURVE",
"392 -12 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190 218 OFFCURVE",
"212 241 OFFCURVE",
"212 269 CURVE SMOOTH",
"212 296 OFFCURVE",
"190 319 OFFCURVE",
"162 319 CURVE SMOOTH",
"134 319 OFFCURVE",
"112 296 OFFCURVE",
"112 269 CURVE SMOOTH",
"112 241 OFFCURVE",
"134 218 OFFCURVE",
"162 218 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"158 380 OFFCURVE",
"180 403 OFFCURVE",
"180 431 CURVE SMOOTH",
"180 458 OFFCURVE",
"158 481 OFFCURVE",
"130 481 CURVE SMOOTH",
"102 481 OFFCURVE",
"80 458 OFFCURVE",
"80 431 CURVE SMOOTH",
"80 403 OFFCURVE",
"102 380 OFFCURVE",
"130 380 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 -44 OFFCURVE",
"605 -22 OFFCURVE",
"605 6 CURVE SMOOTH",
"605 34 OFFCURVE",
"582 56 OFFCURVE",
"555 56 CURVE SMOOTH",
"527 56 OFFCURVE",
"504 34 OFFCURVE",
"504 6 CURVE SMOOTH",
"504 -22 OFFCURVE",
"527 -44 OFFCURVE",
"555 -44 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"190 542 OFFCURVE",
"212 565 OFFCURVE",
"212 593 CURVE SMOOTH",
"212 620 OFFCURVE",
"190 643 OFFCURVE",
"162 643 CURVE SMOOTH",
"134 643 OFFCURVE",
"112 620 OFFCURVE",
"112 593 CURVE SMOOTH",
"112 565 OFFCURVE",
"134 542 OFFCURVE",
"162 542 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"744 -12 OFFCURVE",
"767 10 OFFCURVE",
"767 38 CURVE SMOOTH",
"767 66 OFFCURVE",
"744 88 OFFCURVE",
"717 88 CURVE SMOOTH",
"689 88 OFFCURVE",
"666 66 OFFCURVE",
"666 38 CURVE SMOOTH",
"666 10 OFFCURVE",
"689 -12 OFFCURVE",
"717 -12 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"282 680 OFFCURVE",
"304 703 OFFCURVE",
"304 731 CURVE SMOOTH",
"304 758 OFFCURVE",
"282 781 OFFCURVE",
"254 781 CURVE SMOOTH",
"226 781 OFFCURVE",
"204 758 OFFCURVE",
"204 731 CURVE SMOOTH",
"204 703 OFFCURVE",
"226 680 OFFCURVE",
"254 680 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"883 80 OFFCURVE",
"905 103 OFFCURVE",
"905 131 CURVE SMOOTH",
"905 158 OFFCURVE",
"883 181 OFFCURVE",
"855 181 CURVE SMOOTH",
"827 181 OFFCURVE",
"805 158 OFFCURVE",
"805 131 CURVE SMOOTH",
"805 103 OFFCURVE",
"827 80 OFFCURVE",
"855 80 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"975 218 OFFCURVE",
"997 241 OFFCURVE",
"997 269 CURVE SMOOTH",
"997 296 OFFCURVE",
"975 319 OFFCURVE",
"947 319 CURVE SMOOTH",
"919 319 OFFCURVE",
"897 296 OFFCURVE",
"897 269 CURVE SMOOTH",
"897 241 OFFCURVE",
"919 218 OFFCURVE",
"947 218 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"420 773 OFFCURVE",
"443 795 OFFCURVE",
"443 823 CURVE SMOOTH",
"443 851 OFFCURVE",
"420 873 OFFCURVE",
"393 873 CURVE SMOOTH",
"365 873 OFFCURVE",
"342 851 OFFCURVE",
"342 823 CURVE SMOOTH",
"342 795 OFFCURVE",
"365 773 OFFCURVE",
"393 773 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1007 380 OFFCURVE",
"1029 403 OFFCURVE",
"1029 431 CURVE SMOOTH",
"1029 458 OFFCURVE",
"1007 481 OFFCURVE",
"979 481 CURVE SMOOTH",
"951 481 OFFCURVE",
"929 458 OFFCURVE",
"929 431 CURVE SMOOTH",
"929 403 OFFCURVE",
"951 380 OFFCURVE",
"979 380 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 805 OFFCURVE",
"605 827 OFFCURVE",
"605 855 CURVE SMOOTH",
"605 883 OFFCURVE",
"582 905 OFFCURVE",
"555 905 CURVE SMOOTH",
"527 905 OFFCURVE",
"504 883 OFFCURVE",
"504 855 CURVE SMOOTH",
"504 827 OFFCURVE",
"527 805 OFFCURVE",
"555 805 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"744 773 OFFCURVE",
"767 795 OFFCURVE",
"767 823 CURVE SMOOTH",
"767 851 OFFCURVE",
"744 873 OFFCURVE",
"716 873 CURVE SMOOTH",
"689 873 OFFCURVE",
"666 851 OFFCURVE",
"666 823 CURVE SMOOTH",
"666 795 OFFCURVE",
"689 773 OFFCURVE",
"716 773 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"975 542 OFFCURVE",
"997 565 OFFCURVE",
"997 593 CURVE SMOOTH",
"997 620 OFFCURVE",
"975 643 OFFCURVE",
"947 643 CURVE SMOOTH",
"919 643 OFFCURVE",
"897 620 OFFCURVE",
"897 593 CURVE SMOOTH",
"897 565 OFFCURVE",
"919 542 OFFCURVE",
"947 542 CURVE SMOOTH"
);
}
);
width = 1094;
}
);
unicode = 25CC;
},
{
glyphname = uni27E8;
lastChange = "2018-08-09 17:49:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"218 522 LINE",
"865 1421 LINE",
"757 1421 LINE",
"112 522 LINE",
"342 -377 LINE",
"450 -377 LINE"
);
}
);
width = 674;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"218 522 LINE",
"865 1421 LINE",
"757 1421 LINE",
"112 522 LINE",
"342 -377 LINE",
"450 -377 LINE"
);
}
);
width = 674;
}
);
unicode = 27E8;
},
{
glyphname = uni27E9;
lastChange = "2018-08-09 17:49:43 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"412 1421 LINE",
"304 1421 LINE",
"535 522 LINE",
"-111 -377 LINE",
"-3 -377 LINE",
"643 522 LINE"
);
}
);
width = 674;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"412 1421 LINE",
"304 1421 LINE",
"535 522 LINE",
"-111 -377 LINE",
"-3 -377 LINE",
"643 522 LINE"
);
}
);
width = 674;
}
);
unicode = 27E9;
},
{
glyphname = uniA741;
lastChange = "2018-08-17 12:02:45 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"538 1046 LINE",
"560 1124 LINE",
"47 1124 LINE",
"25 1046 LINE"
);
},
{
closed = 1;
nodes = (
"676 -27 OFFCURVE",
"718 6 OFFCURVE",
"767 72 CURVE",
"727 106 LINE",
"696 72 OFFCURVE",
"666 57 OFFCURVE",
"638 57 CURVE SMOOTH",
"601 57 OFFCURVE",
"558 85 OFFCURVE",
"515 141 CURVE SMOOTH",
"330 383 LINE",
"319 349 LINE",
"511 463 OFFCURVE",
"668 593 OFFCURVE",
"668 720 CURVE SMOOTH",
"668 786 OFFCURVE",
"632 852 OFFCURVE",
"534 852 CURVE SMOOTH",
"438 852 OFFCURVE",
"321 779 OFFCURVE",
"175 557 CURVE",
"210 568 LINE",
"373 1471 LINE",
"358 1484 LINE",
"289 1451 OFFCURVE",
"214 1429 OFFCURVE",
"141 1429 CURVE",
"145 1377 LINE",
"202 1377 OFFCURVE",
"230 1344 OFFCURVE",
"230 1276 CURVE SMOOTH",
"230 1256 OFFCURVE",
"228 1230 OFFCURVE",
"222 1197 CURVE SMOOTH",
"6 0 LINE",
"108 0 LINE",
"169 340 LINE",
"199 340 LINE SMOOTH",
"232 340 OFFCURVE",
"253 331 OFFCURVE",
"265 315 CURVE SMOOTH",
"421 94 LINE SMOOTH",
"486 2 OFFCURVE",
"522 -27 OFFCURVE",
"623 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"198 500 LINE SMOOTH",
"202 522 OFFCURVE",
"215 548 OFFCURVE",
"234 575 CURVE SMOOTH",
"317 693 OFFCURVE",
"396 762 OFFCURVE",
"470 762 CURVE SMOOTH",
"519 762 OFFCURVE",
"549 716 OFFCURVE",
"549 663 CURVE SMOOTH",
"549 540 OFFCURVE",
"342 387 OFFCURVE",
"204 387 CURVE",
"177 387 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
75 1 1 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
11 1 7 12 1 6 13 7 6 104 0 1 0 4 2 1 4 105 0 10 10 94 77 0 8 8 9 97 0 9 9 98 77 0 0 0 13 97 0 13 13 95 77 0 2 2 3 97 5 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 9 0 8 7 9 8 105 11 1 7 12 1 6 13 7 6 104 0 1 0 4 2 1 4 105 0 10 10 94 77 0 0 0 13 97 0 13 13 95 77 0 2 2 3 97 5 1 3 3 93 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
80 78 74 72 69 68 66 64 63 61 20 35 18 19 36 41 43 39 33 14 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 752;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"639 1073 LINE",
"673 1180 LINE",
"100 1180 LINE",
"66 1073 LINE"
);
},
{
closed = 1;
nodes = (
"852 -27 OFFCURVE",
"917 11 OFFCURVE",
"975 86 CURVE",
"920 131 LINE",
"896 104 OFFCURVE",
"873 90 OFFCURVE",
"850 90 CURVE SMOOTH",
"813 90 OFFCURVE",
"767 124 OFFCURVE",
"710 195 CURVE SMOOTH",
"535 412 LINE",
"512 370 LINE",
"708 462 OFFCURVE",
"841 598 OFFCURVE",
"841 698 CURVE SMOOTH",
"841 792 OFFCURVE",
"770 852 OFFCURVE",
"669 852 CURVE SMOOTH",
"581 852 OFFCURVE",
"463 791 OFFCURVE",
"351 634 CURVE",
"390 641 LINE",
"536 1455 LINE",
"516 1487 LINE",
"424 1456 OFFCURVE",
"309 1432 OFFCURVE",
"221 1432 CURVE",
"228 1360 LINE",
"285 1360 OFFCURVE",
"309 1325 OFFCURVE",
"309 1253 CURVE SMOOTH",
"309 1242 OFFCURVE",
"308 1229 OFFCURVE",
"305 1214 CURVE SMOOTH",
"80 0 LINE",
"274 0 LINE",
"339 340 LINE",
"351 340 LINE SMOOTH",
"364 340 OFFCURVE",
"375 332 OFFCURVE",
"384 319 CURVE SMOOTH",
"539 109 LINE SMOOTH",
"619 1 OFFCURVE",
"668 -27 OFFCURVE",
"783 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"372 547 LINE SMOOTH",
"375 564 OFFCURVE",
"384 585 OFFCURVE",
"403 610 CURVE SMOOTH",
"468 695 OFFCURVE",
"531 739 OFFCURVE",
"595 739 CURVE SMOOTH",
"622 739 OFFCURVE",
"637 716 OFFCURVE",
"637 669 CURVE SMOOTH",
"637 546 OFFCURVE",
"508 393 OFFCURVE",
"377 393 CURVE SMOOTH",
"344 393 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
37 1 4 5 52 25 2 2 3 93 72 58 11 4 10 11 3 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 11 9 10 9 11 10 128 0 10 0 9 10 0 126 7 1 3 8 1 2 9 3 2 104 0 6 6 33 77 0 4 4 5 97 0 5 5 37 77 0 9 9 34 77 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 11 9 10 9 11 10 128 0 10 0 9 10 0 126 0 5 0 4 3 5 4 105 7 1 3 8 1 2 9 3 2 104 0 6 6 33 77 0 9 9 34 77 1 1 0 0 32 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
89 87 78 76 64 62 37 20 34 36 20 37 20 43 35 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 877;
}
);
widthMetricsKey = k;
note = uniA741;
unicode = A741;
},
{
glyphname = uniA751;
lastChange = "2018-08-17 12:01:11 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"350 -270 LINE",
"372 -192 LINE",
"-201 -192 LINE",
"-223 -270 LINE"
);
},
{
closed = 1;
nodes = (
"172 -551 LINE",
"168 -504 LINE",
"81 -504 OFFCURVE",
"39 -483 OFFCURVE",
"39 -442 CURVE SMOOTH",
"39 -436 OFFCURVE",
"40 -428 OFFCURVE",
"41 -420 CURVE SMOOTH",
"309 1068 LINE",
"287 1081 LINE",
"201 1031 LINE",
"-63 -428 LINE SMOOTH",
"-72 -479 OFFCURVE",
"-111 -504 OFFCURVE",
"-218 -504 CURVE",
"-214 -551 LINE"
);
},
{
closed = 1;
nodes = (
"475 -27 OFFCURVE",
"705 205 OFFCURVE",
"705 470 CURVE SMOOTH",
"705 676 OFFCURVE",
"588 842 OFFCURVE",
"381 842 CURVE SMOOTH",
"193 842 OFFCURVE",
"73 785 OFFCURVE",
"-63 649 CURVE",
"-16 607 LINE",
"144 762 OFFCURVE",
"301 763 OFFCURVE",
"341 763 CURVE SMOOTH",
"494 763 OFFCURVE",
"585 605 OFFCURVE",
"585 437 CURVE SMOOTH",
"585 220 OFFCURVE",
"425 34 OFFCURVE",
"239 34 CURVE SMOOTH",
"179 34 OFFCURVE",
"124 76 OFFCURVE",
"110 159 CURVE",
"70 11 LINE",
"154 -25 OFFCURVE",
"202 -27 OFFCURVE",
"226 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
57 1 11 10 70 38 2 12 11 5 1 0 12 26 19 2 4 3 4 76 24 1 4 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
57 1 11 10 70 38 2 12 11 5 1 0 12 26 19 2 5 3 4 76 24 1 4 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 9 10 9 133 8 1 1 7 1 2 3 1 2 103 0 11 11 10 97 0 10 10 95 77 0 12 12 0 97 0 0 0 93 77 6 1 3 3 4 97 5 1 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 9 10 9 133 8 1 1 7 1 2 3 1 2 103 0 11 11 10 97 0 10 10 95 77 0 12 12 0 97 0 0 0 93 77 6 1 3 3 5 97 0 5 5 97 77 6 1 3 3 4 97 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 9 10 9 133 0 10 0 11 12 10 11 106 8 1 1 7 1 2 3 1 2 103 0 12 12 0 97 0 0 0 93 77 6 1 3 3 5 97 0 5 5 97 77 6 1 3 3 4 97 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 9 10 9 133 0 10 0 11 12 10 11 106 8 1 1 7 1 2 3 1 2 103 0 5 4 3 5 89 0 12 12 0 97 0 0 0 93 77 6 1 3 3 4 97 0 4 4 97 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
73 71 66 64 60 58 55 53 35 18 36 17 19 20 35 18 34 13 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 767;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"412 -285 LINE",
"446 -178 LINE",
"-127 -178 LINE",
"-161 -285 LINE"
);
},
{
closed = 1;
nodes = (
"326 -551 LINE",
"320 -485 LINE",
"242 -484 OFFCURVE",
"201 -465 OFFCURVE",
"198 -430 CURVE SMOOTH",
"198 -421 OFFCURVE",
"198 -412 OFFCURVE",
"200 -401 CURVE SMOOTH",
"462 1053 LINE",
"432 1079 LINE",
"260 1012 LINE",
"5 -410 LINE SMOOTH",
"-4 -460 OFFCURVE",
"-34 -485 OFFCURVE",
"-129 -485 CURVE",
"-123 -551 LINE"
);
},
{
closed = 1;
nodes = (
"616 -27 OFFCURVE",
"864 215 OFFCURVE",
"864 481 CURVE SMOOTH",
"864 694 OFFCURVE",
"700 844 OFFCURVE",
"484 844 CURVE SMOOTH",
"226 844 OFFCURVE",
"64 674 OFFCURVE",
"35 639 CURVE",
"88 588 LINE",
"214 706 OFFCURVE",
"334 741 OFFCURVE",
"454 741 CURVE SMOOTH",
"587 741 OFFCURVE",
"647 601 OFFCURVE",
"647 445 CURVE SMOOTH",
"647 255 OFFCURVE",
"523 55 OFFCURVE",
"368 55 CURVE SMOOTH",
"305 55 OFFCURVE",
"294 67 OFFCURVE",
"286 163 CURVE",
"227 -7 LINE",
"266 -23 OFFCURVE",
"319 -27 OFFCURVE",
"371 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
72 1 10 9 53 1 8 12 12 1 2 1 19 1 3 2 35 25 2 4 3 5 76 33 29 2 4 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
72 1 11 9 53 1 8 12 12 1 2 1 19 1 3 2 35 25 2 4 3 5 76 33 29 2 4 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 9 10 9 133 0 8 12 13 12 8 13 128 5 1 3 2 4 2 3 4 128 7 1 1 6 1 2 3 1 2 103 0 12 12 10 97 11 1 10 10 34 77 0 13 13 0 97 0 0 0 32 77 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 9 10 9 133 0 8 12 13 12 8 13 128 5 1 3 2 4 2 3 4 128 11 1 10 0 12 8 10 12 106 7 1 1 6 1 2 3 1 2 103 0 13 13 0 97 0 0 0 32 77 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 9 10 9 133 0 8 12 13 12 8 13 128 5 1 3 2 4 2 3 4 128 0 4 4 132 11 1 10 0 12 8 10 12 106 7 1 1 6 1 2 3 1 2 103 0 13 13 0 97 0 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 9 11 9 133 0 11 10 11 133 0 8 12 13 12 8 13 128 5 1 3 2 4 2 3 4 128 0 4 4 132 0 10 0 12 8 10 12 106 7 1 1 6 1 2 3 1 2 103 0 13 13 0 97 0 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
93 91 87 85 78 77 76 75 71 69 35 37 20 38 39 36 37 18 37 14 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 903;
}
);
note = uniA751;
rightMetricsKey = p;
unicode = A751;
},
{
glyphname = uniA753;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"232 -551 LINE",
"232 -504 LINE",
"149 -504 OFFCURVE",
"108 -485 OFFCURVE",
"108 -448 CURVE SMOOTH",
"108 -441 OFFCURVE",
"109 -431 OFFCURVE",
"112 -420 CURVE SMOOTH",
"511 1068 LINE",
"490 1081 LINE",
"399 1031 LINE",
"8 -428 LINE SMOOTH",
"-6 -479 OFFCURVE",
"-47 -504 OFFCURVE",
"-154 -504 CURVE",
"-154 -551 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-29 -371 OFFCURVE",
"28 -349 OFFCURVE",
"79 -318 CURVE",
"61 -273 LINE",
"38 -282 OFFCURVE",
"-2 -295 OFFCURVE",
"-30 -295 CURVE SMOOTH",
"-131 -295 OFFCURVE",
"-146 -214 OFFCURVE",
"-146 -175 CURVE SMOOTH",
"-146 -83 OFFCURVE",
"-75 -27 OFFCURVE",
"68 -27 CURVE SMOOTH",
"436 -27 LINE SMOOTH",
"685 -27 OFFCURVE",
"915 205 OFFCURVE",
"915 470 CURVE SMOOTH",
"915 588 OFFCURVE",
"860 842 OFFCURVE",
"591 842 CURVE SMOOTH",
"403 842 OFFCURVE",
"283 785 OFFCURVE",
"147 649 CURVE",
"194 607 LINE",
"354 762 OFFCURVE",
"511 763 OFFCURVE",
"551 763 CURVE SMOOTH",
"744 763 OFFCURVE",
"795 538 OFFCURVE",
"795 438 CURVE SMOOTH",
"795 221 OFFCURVE",
"634 39 OFFCURVE",
"448 39 CURVE SMOOTH",
"33 39 LINE SMOOTH",
"-170 39 OFFCURVE",
"-267 -59 OFFCURVE",
"-267 -186 CURVE SMOOTH",
"-267 -301 OFFCURVE",
"-206 -371 OFFCURVE",
"-73 -371 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"382 -551 LINE",
"378 -504 LINE",
"291 -504 OFFCURVE",
"249 -483 OFFCURVE",
"249 -442 CURVE SMOOTH",
"249 -436 OFFCURVE",
"250 -428 OFFCURVE",
"251 -420 CURVE SMOOTH",
"519 1068 LINE",
"497 1081 LINE",
"411 1031 LINE",
"147 -428 LINE SMOOTH",
"138 -479 OFFCURVE",
"99 -504 OFFCURVE",
"-8 -504 CURVE",
"-4 -551 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
62 1 10 9 45 1 7 10 34 1 6 5 3 76 16 1 2 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 8 9 8 133 0 5 0 6 1 5 6 105 0 10 10 9 97 0 9 9 95 77 11 1 7 7 0 97 4 1 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 8 9 8 133 0 9 0 10 7 9 10 106 0 5 0 6 1 5 6 105 11 1 7 7 0 97 4 1 0 0 93 77 3 1 1 1 2 97 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
0 8 9 8 133 0 9 0 10 7 9 10 106 0 5 0 6 1 5 6 105 3 1 1 0 2 1 2 101 11 1 7 7 0 97 4 1 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
75 73 71 69 65 63 31 35 39 35 34 36 21 20 34 12 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 977;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"275 -551 LINE",
"275 -485 LINE",
"197 -484 OFFCURVE",
"158 -465 OFFCURVE",
"158 -430 CURVE SMOOTH",
"158 -421 OFFCURVE",
"159 -412 OFFCURVE",
"162 -401 CURVE SMOOTH",
"551 1053 LINE",
"524 1079 LINE",
"346 1012 LINE",
"-34 -410 LINE SMOOTH",
"-47 -460 OFFCURVE",
"-79 -485 OFFCURVE",
"-174 -485 CURVE",
"-174 -551 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"10 -377 OFFCURVE",
"47 -364 OFFCURVE",
"96 -333 CURVE",
"66 -269 LINE",
"39 -279 OFFCURVE",
"18 -283 OFFCURVE",
"-3 -283 CURVE SMOOTH",
"-59 -283 OFFCURVE",
"-102 -227 OFFCURVE",
"-102 -157 CURVE SMOOTH",
"-102 -68 OFFCURVE",
"-9 -27 OFFCURVE",
"107 -27 CURVE SMOOTH",
"510 -27 LINE SMOOTH",
"755 -27 OFFCURVE",
"1003 215 OFFCURVE",
"1003 480 CURVE SMOOTH",
"1003 594 OFFCURVE",
"928 844 OFFCURVE",
"623 844 CURVE SMOOTH",
"365 844 OFFCURVE",
"203 674 OFFCURVE",
"174 639 CURVE",
"227 588 LINE",
"353 706 OFFCURVE",
"473 741 OFFCURVE",
"593 741 CURVE SMOOTH",
"765 741 OFFCURVE",
"786 518 OFFCURVE",
"786 445 CURVE SMOOTH",
"786 255 OFFCURVE",
"662 55 OFFCURVE",
"507 55 CURVE SMOOTH",
"71 55 LINE SMOOTH",
"-107 55 OFFCURVE",
"-275 -32 OFFCURVE",
"-275 -187 CURVE SMOOTH",
"-275 -255 OFFCURVE",
"-225 -377 OFFCURVE",
"-32 -377 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"465 -551 LINE",
"459 -485 LINE",
"339 -483 OFFCURVE",
"337 -440 OFFCURVE",
"337 -423 CURVE SMOOTH",
"337 -416 OFFCURVE",
"337 -410 OFFCURVE",
"339 -401 CURVE SMOOTH",
"601 1053 LINE",
"571 1079 LINE",
"399 1012 LINE",
"144 -410 LINE SMOOTH",
"135 -460 OFFCURVE",
"105 -485 OFFCURVE",
"10 -485 CURVE",
"16 -551 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
84 1 10 9 65 1 8 12 45 1 5 0 49 1 6 5 25 15 2 2 1 5 76 23 19 2 2 73 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
84 1 11 9 65 1 8 12 45 1 5 0 49 1 6 5 25 15 2 2 1 5 76 23 19 2 2 73 
EIF[ ]\011/* EndIf */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 9 10 9 133 0 8 12 7 12 8 7 128 3 1 1 6 2 6 1 2 128 0 5 0 6 1 5 6 105 0 12 12 10 97 11 1 10 10 34 77 13 1 7 7 0 97 4 1 0 0 32 77 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 9 10 9 133 0 8 12 7 12 8 7 128 3 1 1 6 2 6 1 2 128 11 1 10 0 12 8 10 12 106 0 5 0 6 1 5 6 105 13 1 7 7 0 97 4 1 0 0 32 77 0 2 2 36 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 9 10 9 133 0 8 12 7 12 8 7 128 3 1 1 6 2 6 1 2 128 0 2 2 132 11 1 10 0 12 8 10 12 106 0 5 0 6 1 5 6 105 13 1 7 7 0 97 4 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 9 11 9 133 0 11 10 11 133 0 8 12 7 12 8 7 128 3 1 1 6 2 6 1 2 128 0 2 2 132 0 10 0 12 8 10 12 106 0 5 0 6 1 5 6 105 13 1 7 7 0 97 4 1 0 0 32 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 22 values pushed */
103 101 99 97 90 89 88 87 83 81 35 38 42 38 36 38 39 36 37 14 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1043;
}
);
note = uniA753;
rightMetricsKey = p;
unicode = A753;
},
{
glyphname = uniA757;
lastChange = "2018-08-17 12:00:39 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"838 -260 LINE",
"860 -182 LINE",
"287 -182 LINE",
"265 -260 LINE"
);
},
{
closed = 1;
nodes = (
"714 -509 LINE",
"706 -465 LINE",
"638 -473 OFFCURVE",
"581 -452 OFFCURVE",
"593 -387 CURVE SMOOTH",
"822 878 LINE",
"771 895 LINE",
"690 713 LINE",
"490 -391 LINE SMOOTH",
"478 -457 OFFCURVE",
"439 -493 OFFCURVE",
"330 -513 CURVE",
"337 -559 LINE"
);
},
{
closed = 1;
nodes = (
"318 -27 OFFCURVE",
"719 332 OFFCURVE",
"719 603 CURVE",
"717 664 LINE",
"681 812 OFFCURVE",
"625 852 OFFCURVE",
"537 852 CURVE SMOOTH",
"234 852 OFFCURVE",
"23 498 OFFCURVE",
"23 189 CURVE SMOOTH",
"23 67 OFFCURVE",
"58 -27 OFFCURVE",
"160 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"164 63 OFFCURVE",
"147 111 OFFCURVE",
"147 173 CURVE SMOOTH",
"147 405 OFFCURVE",
"341 788 OFFCURVE",
"536 788 CURVE SMOOTH",
"607 788 OFFCURVE",
"632 701 OFFCURVE",
"632 617 CURVE SMOOTH",
"632 543 OFFCURVE",
"606 462 OFFCURVE",
"553 375 CURVE SMOOTH",
"455 214 OFFCURVE",
"278 63 OFFCURVE",
"217 63 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
50 38 2 1 0 18 14 2 2 4 20 1 3 2 3 76 26 24 2 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 8 7 8 133 9 1 5 10 1 4 2 5 4 103 0 0 0 7 97 0 7 7 95 77 0 1 1 6 97 0 6 6 93 77 0 2 2 3 97 0 3 3 97 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 8 7 8 133 9 1 5 10 1 4 2 5 4 103 0 2 0 3 2 3 101 0 0 0 7 97 0 7 7 95 77 0 1 1 6 97 0 6 6 93 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
63 61 58 57 20 36 36 35 24 37 23 35 33 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 998;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"919 -265 LINE",
"953 -158 LINE",
"380 -158 LINE",
"346 -265 LINE"
);
},
{
closed = 1;
nodes = (
"838 -500 LINE",
"828 -432 LINE",
"766 -442 OFFCURVE",
"716 -431 OFFCURVE",
"727 -369 CURVE SMOOTH",
"939 844 LINE",
"816 887 LINE",
"730 720 LINE",
"531 -373 LINE SMOOTH",
"520 -437 OFFCURVE",
"503 -472 OFFCURVE",
"395 -491 CURVE",
"404 -553 LINE"
);
},
{
closed = 1;
nodes = (
"508 -27 OFFCURVE",
"797 469 OFFCURVE",
"797 631 CURVE",
"788 742 LINE",
"724 832 OFFCURVE",
"668 852 OFFCURVE",
"586 852 CURVE SMOOTH",
"285 852 OFFCURVE",
"43 487 OFFCURVE",
"43 202 CURVE SMOOTH",
"43 67 OFFCURVE",
"109 -27 OFFCURVE",
"231 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"273 98 OFFCURVE",
"266 130 OFFCURVE",
"266 182 CURVE SMOOTH",
"266 397 OFFCURVE",
"424 770 OFFCURVE",
"583 770 CURVE SMOOTH",
"654 770 OFFCURVE",
"681 686 OFFCURVE",
"681 602 CURVE SMOOTH",
"681 538 OFFCURVE",
"661 467 OFFCURVE",
"619 387 CURVE SMOOTH",
"549 254 OFFCURVE",
"384 98 OFFCURVE",
"321 98 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
66 1 9 7 47 1 10 9 17 13 2 2 1 19 1 3 2 4 76 29 26 2 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 8 7 8 133 0 10 9 6 9 10 6 128 5 1 0 4 1 1 2 0 1 104 0 9 9 7 97 0 7 7 34 77 0 6 6 32 77 0 2 2 3 97 0 3 3 36 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
0 8 7 8 133 0 10 9 6 9 10 6 128 5 1 0 4 1 1 2 0 1 104 0 2 0 3 2 3 101 0 9 9 7 97 0 7 7 34 77 0 6 6 32 6 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
87 85 78 76 37 40 52 37 31 38 19 37 19 11 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 978;
}
);
leftMetricsKey = q;
note = uniA757;
unicode = A757;
},
{
glyphname = uniA75D;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"754 300 LINE",
"685 348 LINE",
"245 -174 LINE",
"311 -220 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"508 34 LINE",
"434 0 LINE",
"767 0 LINE",
"834 104 LINE",
"523 104 LINE",
"539 70 LINE",
"718 280 LINE",
"649 328 LINE",
"431 70 LINE",
"505 104 LINE",
"208 104 LINE",
"224 69 LINE",
"438 326 LINE SMOOTH",
"516 419 OFFCURVE",
"580 543 OFFCURVE",
"580 668 CURVE SMOOTH",
"580 786 OFFCURVE",
"502 870 OFFCURVE",
"386 870 CURVE SMOOTH",
"223 870 OFFCURVE",
"82 744 OFFCURVE",
"11 641 CURVE",
"39 618 LINE",
"124 704 OFFCURVE",
"236 769 OFFCURVE",
"329 769 CURVE SMOOTH",
"407 769 OFFCURVE",
"459 697 OFFCURVE",
"459 610 CURVE SMOOTH",
"459 495 OFFCURVE",
"363 342 OFFCURVE",
"251 224 CURVE SMOOTH",
"83 46 LINE",
"105 0 LINE",
"417 0 LINE",
"401 34 LINE",
"217 -184 LINE",
"283 -230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
47 28 2 4 2 1 76 7 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 2 3 97 0 3 3 95 77 6 5 2 4 4 0 95 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
6 5 2 4 1 1 0 4 0 99 0 2 2 3 97 0 3 3 95 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 3 0 2 4 3 2 105 6 5 2 4 0 0 4 87 6 5 2 4 4 0 95 1 1 0 4 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 52 0 52 39 40 43 38 36 7 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 813;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"532 34 LINE",
"458 0 LINE",
"749 0 LINE",
"839 162 LINE",
"595 162 LINE",
"611 128 LINE",
"746 287 LINE",
"658 346 LINE",
"473 128 LINE",
"547 162 LINE",
"283 162 LINE",
"306 147 LINE",
"482 336 LINE SMOOTH",
"601 464 OFFCURVE",
"654 583 OFFCURVE",
"654 680 CURVE SMOOTH",
"654 791 OFFCURVE",
"562 870 OFFCURVE",
"414 870 CURVE SMOOTH",
"278 870 OFFCURVE",
"128 769 OFFCURVE",
"27 621 CURVE",
"79 582 LINE",
"128 638 OFFCURVE",
"197 702 OFFCURVE",
"300 702 CURVE SMOOTH",
"367 702 OFFCURVE",
"435 673 OFFCURVE",
"435 588 CURVE SMOOTH",
"435 505 OFFCURVE",
"411 406 OFFCURVE",
"326 317 CURVE SMOOTH",
"70 47 LINE",
"105 0 LINE",
"410 0 LINE",
"394 34 LINE",
"214 -178 LINE",
"302 -238 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
78 73 48 45 4 4 2 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 3 4 3 2 4 128 0 3 3 34 77 6 5 2 4 4 0 96 1 1 0 0 32 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 3 4 3 2 4 128 6 5 2 4 1 1 0 4 0 100 0 3 3 34 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
0 3 2 3 133 0 2 4 2 133 6 5 2 4 0 0 4 89 6 5 2 4 4 0 96 1 1 0 4 0 80 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 85 0 85 60 44 30 62 53 7 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 788;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "2991CB35-42D9-40F9-B335-66396F1AA9AE";
name = "Aug 14 18, 10:39";
paths = (
{
closed = 1;
nodes = (
"683 124 LINE",
"775 283 LINE",
"784 301 OFFCURVE",
"722 374 OFFCURVE",
"712 357 CURVE SMOOTH",
"577 124 LINE",
"337 124 LINE SMOOTH",
"312 124 OFFCURVE",
"316 143 OFFCURVE",
"347 182 CURVE SMOOTH",
"466 326 LINE SMOOTH",
"577 462 OFFCURVE",
"633 586 OFFCURVE",
"633 698 CURVE SMOOTH",
"633 753 OFFCURVE",
"594 825 OFFCURVE",
"523 851 CURVE SMOOTH",
"488 864 OFFCURVE",
"449 870 OFFCURVE",
"406 870 CURVE SMOOTH",
"287 870 OFFCURVE",
"187 807 OFFCURVE",
"117 747 CURVE SMOOTH",
"82 716 OFFCURVE",
"50 681 OFFCURVE",
"23 642 CURVE",
"59 613 LINE",
"169 702 OFFCURVE",
"249 747 OFFCURVE",
"299 747 CURVE SMOOTH",
"391 747 OFFCURVE",
"446 698 OFFCURVE",
"446 610 CURVE SMOOTH",
"446 569 OFFCURVE",
"432 491 OFFCURVE",
"379 384 CURVE SMOOTH",
"352 330 OFFCURVE",
"313 277 OFFCURVE",
"264 224 CURVE SMOOTH",
"114 65 LINE SMOOTH",
"91 40 OFFCURVE",
"78 25 OFFCURVE",
"77 18 CURVE SMOOTH",
"74 6 OFFCURVE",
"91 0 OFFCURVE",
"126 0 CURVE SMOOTH",
"505 0 LINE",
"425 -139 LINE SMOOTH",
"415 -156 OFFCURVE",
"479 -229 OFFCURVE",
"488 -213 CURVE SMOOTH",
"612 0 LINE",
"795 0 LINE SMOOTH",
"812 0 OFFCURVE",
"876 96 OFFCURVE",
"876 121 CURVE SMOOTH",
"876 123 OFFCURVE",
"875 124 OFFCURVE",
"873 124 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
47 28 2 4 2 1 76 7 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 2 3 97 0 3 3 95 77 6 5 2 4 4 0 95 1 1 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
6 5 2 4 1 1 0 4 0 99 0 2 2 3 97 0 3 3 95 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
0 3 0 2 4 3 2 105 6 5 2 4 0 0 4 87 6 5 2 4 4 0 95 1 1 0 4 0 79 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 52 0 52 39 40 43 38 36 7 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 903;
}
);
note = uniA75D;
unicode = A75D;
},
{
glyphname = uniA765;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"761 1279 LINE",
"795 1248 LINE",
"812 1259 LINE",
"770 1337 LINE",
"28 932 LINE",
"-7 954 LINE",
"-29 940 LINE",
"16 864 LINE"
);
}
);
};
components = (
{
name = thorn;
transform = "{1, 0, 0, 1, 60, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"720 1259 LINE",
"756 1228 LINE",
"772 1239 LINE",
"724 1317 LINE",
"17 912 LINE",
"-20 934 LINE",
"-41 920 LINE",
"11 844 LINE"
);
}
);
width = 846;
},
{
components = (
{
name = thorn;
transform = "{1, 0, 0, 1, 100, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"752 1217 LINE",
"800 1191 LINE",
"820 1205 LINE",
"770 1300 LINE",
"23 891 LINE",
"-12 917 LINE",
"-30 904 LINE",
"25 808 LINE"
);
}
);
width = 918;
}
);
widthMetricsKey = "=thorn+100";
unicode = A765;
},
{
glyphname = uniA76B;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-34 -317 OFFCURVE",
"145 -200 OFFCURVE",
"265 -40 CURVE SMOOTH",
"316 29 OFFCURVE",
"338 113 OFFCURVE",
"338 191 CURVE SMOOTH",
"338 309 OFFCURVE",
"295 354 OFFCURVE",
"160 405 CURVE",
"290 493 OFFCURVE",
"393 600 OFFCURVE",
"393 710 CURVE SMOOTH",
"393 813 OFFCURVE",
"326 870 OFFCURVE",
"205 870 CURVE SMOOTH",
"157 870 OFFCURVE",
"111 857 OFFCURVE",
"50 827 CURVE",
"56 765 LINE",
"77 770 OFFCURVE",
"99 773 OFFCURVE",
"118 773 CURVE SMOOTH",
"222 773 OFFCURVE",
"277 732 OFFCURVE",
"277 654 CURVE SMOOTH",
"277 561 OFFCURVE",
"200 475 OFFCURVE",
"40 390 CURVE",
"48 311 LINE",
"158 303 OFFCURVE",
"218 245 OFFCURVE",
"218 136 CURVE SMOOTH",
"218 -69 OFFCURVE",
"33 -230 OFFCURVE",
"-140 -301 CURVE",
"-129 -354 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
31 3 2 0 1 1 76 14 1 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 0 1 0 134 0 1 1 2 97 0 2 2 95 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 0 1 0 134 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
37 35 30 28 22 21 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 459;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"41 -331 OFFCURVE",
"204 -220 OFFCURVE",
"315 -98 CURVE SMOOTH",
"407 4 OFFCURVE",
"454 102 OFFCURVE",
"454 192 CURVE SMOOTH",
"454 300 OFFCURVE",
"384 389 OFFCURVE",
"271 420 CURVE",
"364 464 OFFCURVE",
"509 561 OFFCURVE",
"509 701 CURVE SMOOTH",
"509 806 OFFCURVE",
"441 870 OFFCURVE",
"288 870 CURVE SMOOTH",
"207 870 OFFCURVE",
"133 850 OFFCURVE",
"68 814 CURVE",
"92 744 LINE",
"110 750 OFFCURVE",
"132 754 OFFCURVE",
"155 754 CURVE SMOOTH",
"240 754 OFFCURVE",
"290 714 OFFCURVE",
"290 638 CURVE SMOOTH",
"290 544 OFFCURVE",
"209 453 OFFCURVE",
"77 389 CURVE",
"85 303 LINE",
"180 300 OFFCURVE",
"234 243 OFFCURVE",
"234 137 CURVE SMOOTH",
"234 -53 OFFCURVE",
"83 -243 OFFCURVE",
"-100 -292 CURVE",
"-70 -360 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
42 1 1 2 39 1 0 1 2 76 13 10 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 1 2 0 2 1 0 128 0 0 0 132 0 2 2 34 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
48 46 38 36 26 24 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 553;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "47770785-97F7-412E-9446-FA969BE856CC";
name = "Aug 14 18, 09:51";
paths = (
{
closed = 1;
nodes = (
"375 435 OFFCURVE",
"406 452 OFFCURVE",
"436 471 CURVE SMOOTH",
"553 546 OFFCURVE",
"612 629 OFFCURVE",
"612 719 CURVE SMOOTH",
"612 734 OFFCURVE",
"611 748 OFFCURVE",
"608 760 CURVE SMOOTH",
"589 833 OFFCURVE",
"515 870 OFFCURVE",
"385 870 CURVE SMOOTH",
"312 870 OFFCURVE",
"242 852 OFFCURVE",
"174 817 CURVE",
"180 739 LINE",
"202 749 OFFCURVE",
"226 754 OFFCURVE",
"252 754 CURVE SMOOTH",
"270 754 OFFCURVE",
"286 752 OFFCURVE",
"299 748 CURVE SMOOTH",
"343 735 OFFCURVE",
"365 704 OFFCURVE",
"365 653 CURVE SMOOTH",
"365 615 OFFCURVE",
"353 578 OFFCURVE",
"330 543 CURVE SMOOTH",
"289 480 OFFCURVE",
"223 428 OFFCURVE",
"133 387 CURVE",
"120 379 OFFCURVE",
"113 363 OFFCURVE",
"113 338 CURVE SMOOTH",
"113 315 OFFCURVE",
"120 303 OFFCURVE",
"133 303 CURVE SMOOTH",
"153 303 OFFCURVE",
"171 300 OFFCURVE",
"188 295 CURVE",
"239 276 OFFCURVE",
"264 233 OFFCURVE",
"264 168 CURVE SMOOTH",
"264 154 LINE",
"260 54 OFFCURVE",
"221 -40 OFFCURVE",
"147 -127 CURVE SMOOTH",
"79 -209 OFFCURVE",
"0 -263 OFFCURVE",
"-90 -289 CURVE",
"-97 -290 OFFCURVE",
"-101 -295 OFFCURVE",
"-104 -303 CURVE",
"-109 -324 LINE",
"-107 -344 OFFCURVE",
"-100 -356 OFFCURVE",
"-88 -360 CURVE",
"-78 -362 LINE",
"-41 -354 OFFCURVE",
"0 -338 OFFCURVE",
"45 -315 CURVE SMOOTH",
"156 -260 OFFCURVE",
"256 -188 OFFCURVE",
"346 -98 CURVE SMOOTH",
"459 15 OFFCURVE",
"516 120 OFFCURVE",
"516 215 CURVE SMOOTH",
"516 254 OFFCURVE",
"505 289 OFFCURVE",
"483 322 CURVE SMOOTH",
"450 371 OFFCURVE",
"403 403 OFFCURVE",
"342 420 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
42 1 1 2 39 1 0 1 2 76 13 10 2 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 1 2 0 2 1 0 128 0 0 0 132 0 2 2 34 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 2 1 2 133 0 1 0 1 133 0 0 0 118 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
48 46 38 36 26 24 3 8 22 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 618;
}
);
note = uniA76B;
unicode = A76B;
},
{
glyphname = uniA76F;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"199 -259 OFFCURVE",
"353 -139 OFFCURVE",
"471 11 CURVE SMOOTH",
"564 129 OFFCURVE",
"665 310 OFFCURVE",
"665 499 CURVE SMOOTH",
"665 703 OFFCURVE",
"579 823 OFFCURVE",
"409 823 CURVE SMOOTH",
"192 823 OFFCURVE",
"-6 637 OFFCURVE",
"-6 411 CURVE SMOOTH",
"-6 265 OFFCURVE",
"63 126 OFFCURVE",
"193 126 CURVE SMOOTH",
"273 126 OFFCURVE",
"372 153 OFFCURVE",
"372 240 CURVE SMOOTH",
"372 286 OFFCURVE",
"354 309 OFFCURVE",
"322 309 CURVE SMOOTH",
"305 309 OFFCURVE",
"283 303 OFFCURVE",
"250 273 CURVE SMOOTH",
"222 248 OFFCURVE",
"188 237 OFFCURVE",
"158 237 CURVE SMOOTH",
"92 237 OFFCURVE",
"64 317 OFFCURVE",
"64 373 CURVE SMOOTH",
"64 530 OFFCURVE",
"157 722 OFFCURVE",
"363 722 CURVE SMOOTH",
"515 722 OFFCURVE",
"545 604 OFFCURVE",
"545 494 CURVE SMOOTH",
"545 333 OFFCURVE",
"481 187 OFFCURVE",
"384 42 CURVE SMOOTH",
"281 -113 OFFCURVE",
"167 -211 OFFCURVE",
"-71 -349 CURVE",
"-49 -394 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 0 1 0 2 1 128 0 1 0 3 1 3 101 0 0 0 4 97 0 4 4 95 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 2 0 1 0 2 1 128 0 4 0 0 2 4 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
47 45 39 37 33 31 29 27 21 19 5 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 734;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"259 -325 OFFCURVE",
"482 -173 OFFCURVE",
"636 6 CURVE SMOOTH",
"769 161 OFFCURVE",
"835 322 OFFCURVE",
"835 488 CURVE SMOOTH",
"835 692 OFFCURVE",
"734 870 OFFCURVE",
"501 870 CURVE SMOOTH",
"231 870 OFFCURVE",
"9 641 OFFCURVE",
"9 374 CURVE SMOOTH",
"9 224 OFFCURVE",
"81 117 OFFCURVE",
"239 117 CURVE SMOOTH",
"337 117 OFFCURVE",
"462 146 OFFCURVE",
"462 262 CURVE SMOOTH",
"462 288 OFFCURVE",
"453 350 OFFCURVE",
"369 350 CURVE SMOOTH",
"330 350 OFFCURVE",
"307 337 OFFCURVE",
"268 297 CURVE SMOOTH",
"246 274 OFFCURVE",
"228 262 OFFCURVE",
"200 262 CURVE SMOOTH",
"129 262 OFFCURVE",
"94 310 OFFCURVE",
"94 411 CURVE SMOOTH",
"94 581 OFFCURVE",
"247 745 OFFCURVE",
"428 745 CURVE SMOOTH",
"549 745 OFFCURVE",
"603 613 OFFCURVE",
"603 472 CURVE SMOOTH",
"603 372 OFFCURVE",
"572 238 OFFCURVE",
"494 105 CURVE SMOOTH",
"394 -66 OFFCURVE",
"193 -263 OFFCURVE",
"-27 -377 CURVE",
"13 -451 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
35 1 2 3 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
0 3 1 2 1 3 2 128 0 0 4 0 134 0 2 0 4 0 2 4 105 0 1 1 5 97 0 5 5 34 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 3 1 2 1 3 2 128 0 0 4 0 134 0 5 0 1 3 5 1 105 0 2 4 4 2 89 0 2 2 4 97 0 4 2 4 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
40 38 36 39 45 32 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 887;
}
);
note = uniA76F;
unicode = A76F;
},
{
glyphname = uniA770;
lastChange = "2018-08-16 22:22:05 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"362 554 OFFCURVE",
"485 639 OFFCURVE",
"586 761 CURVE SMOOTH",
"687 883 OFFCURVE",
"738 1020 OFFCURVE",
"738 1172 CURVE SMOOTH",
"738 1323 OFFCURVE",
"664 1399 OFFCURVE",
"516 1399 CURVE SMOOTH",
"431 1399 OFFCURVE",
"351 1362 OFFCURVE",
"276 1289 CURVE SMOOTH",
"201 1216 OFFCURVE",
"164 1136 OFFCURVE",
"164 1051 CURVE SMOOTH",
"164 982 OFFCURVE",
"197 947 OFFCURVE",
"262 947 CURVE SMOOTH",
"310 947 OFFCURVE",
"358 993 OFFCURVE",
"358 1036 CURVE SMOOTH",
"358 1057 OFFCURVE",
"345 1079 OFFCURVE",
"320 1100 CURVE SMOOTH",
"295 1121 OFFCURVE",
"283 1142 OFFCURVE",
"283 1161 CURVE SMOOTH",
"283 1240 OFFCURVE",
"386 1310 OFFCURVE",
"463 1310 CURVE SMOOTH",
"545 1310 OFFCURVE",
"586 1255 OFFCURVE",
"586 1146 CURVE SMOOTH",
"586 1037 OFFCURVE",
"549 927 OFFCURVE",
"476 816 CURVE SMOOTH",
"403 705 OFFCURVE",
"314 621 OFFCURVE",
"209 564 CURVE",
"219 505 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
4 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 1 134 0 0 0 2 97 0 2 2 130 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
0 1 0 1 134 0 0 0 2 97 0 2 2 126 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
0 1 0 1 134 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
36 42 45 3 14 25 
CALL[ ]\011/* CallFunction */";
};
width = 735;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"386 564 OFFCURVE",
"489 622 OFFCURVE",
"598 745 CURVE SMOOTH",
"709 870 OFFCURVE",
"764 1006 OFFCURVE",
"764 1153 CURVE SMOOTH",
"764 1280 OFFCURVE",
"702 1399 OFFCURVE",
"518 1399 CURVE SMOOTH",
"434 1399 OFFCURVE",
"330 1360 OFFCURVE",
"246 1268 CURVE SMOOTH",
"181 1196 OFFCURVE",
"147 1119 OFFCURVE",
"147 1036 CURVE SMOOTH",
"147 977 OFFCURVE",
"172 924 OFFCURVE",
"258 924 CURVE SMOOTH",
"308 924 OFFCURVE",
"385 968 OFFCURVE",
"385 1032 CURVE SMOOTH",
"385 1070 OFFCURVE",
"356 1084 OFFCURVE",
"313 1104 CURVE SMOOTH",
"287 1116 OFFCURVE",
"274 1133 OFFCURVE",
"274 1155 CURVE SMOOTH",
"274 1223 OFFCURVE",
"370 1292 OFFCURVE",
"451 1292 CURVE SMOOTH",
"519 1292 OFFCURVE",
"561 1245 OFFCURVE",
"561 1143 CURVE SMOOTH",
"561 1031 OFFCURVE",
"521 917 OFFCURVE",
"446 801 CURVE SMOOTH",
"379 698 OFFCURVE",
"300 623 OFFCURVE",
"209 575 CURVE",
"231 506 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 5 values pushed */
3 0 2 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
56 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 0 2 1 2 0 1 128 0 1 1 132 0 2 2 49 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 14 values pushed */
0 2 0 2 133 0 0 1 0 133 0 1 1 118 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 6 values pushed */
40 43 30 3 9 25 
CALL[ ]\011/* CallFunction */";
};
width = 665;
}
);
note = uniA770;
unicode = A770;
},
{
glyphname = uniA77A;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"525 -27 OFFCURVE",
"713 224 OFFCURVE",
"713 542 CURVE SMOOTH",
"713 805 OFFCURVE",
"600 1117 OFFCURVE",
"-5 1307 CURVE",
"-31 1245 LINE",
"235 1139 OFFCURVE",
"417 1005 OFFCURVE",
"512 844 CURVE",
"495 849 OFFCURVE",
"472 852 OFFCURVE",
"445 852 CURVE SMOOTH",
"237 852 OFFCURVE",
"25 621 OFFCURVE",
"25 349 CURVE SMOOTH",
"25 220 OFFCURVE",
"48 -27 OFFCURVE",
"291 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"183 47 OFFCURVE",
"145 148 OFFCURVE",
"145 253 CURVE SMOOTH",
"145 524 OFFCURVE",
"283 778 OFFCURVE",
"439 778 CURVE SMOOTH",
"562 778 OFFCURVE",
"593 680 OFFCURVE",
"593 581 CURVE SMOOTH",
"593 321 OFFCURVE",
"454 47 OFFCURVE",
"306 47 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 34 values pushed */
20 1 0 3 1 76 0 0 0 3 97 0 3 3 95 77 0 1 1 2 97 0 2 2 93 2 78 35 36 35 33 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 778;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"642 -27 OFFCURVE",
"820 198 OFFCURVE",
"820 550 CURVE SMOOTH",
"820 763 OFFCURVE",
"755 1089 OFFCURVE",
"59 1311 CURVE",
"29 1235 LINE",
"273 1132 OFFCURVE",
"446 1004 OFFCURVE",
"550 850 CURVE",
"535 851 OFFCURVE",
"515 852 OFFCURVE",
"499 852 CURVE SMOOTH",
"271 852 OFFCURVE",
"45 640 OFFCURVE",
"45 366 CURVE SMOOTH",
"45 254 OFFCURVE",
"75 -27 OFFCURVE",
"355 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"287 74 OFFCURVE",
"249 157 OFFCURVE",
"249 252 CURVE SMOOTH",
"249 458 OFFCURVE",
"366 750 OFFCURVE",
"504 750 CURVE SMOOTH",
"595 750 OFFCURVE",
"617 680 OFFCURVE",
"617 591 CURVE SMOOTH",
"617 392 OFFCURVE",
"506 74 OFFCURVE",
"376 74 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
0 0 0 3 97 0 3 3 34 77 0 1 1 2 97 0 2 2 32 2 78 51 37 37 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 866;
}
);
note = uniA77A;
unicode = A77A;
},
{
glyphname = uniA77A.alt;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"537 -27 OFFCURVE",
"729 202 OFFCURVE",
"729 494 CURVE SMOOTH",
"729 649 OFFCURVE",
"661 852 OFFCURVE",
"457 852 CURVE SMOOTH",
"377 852 OFFCURVE",
"310 854 OFFCURVE",
"259 858 CURVE SMOOTH",
"100 870 OFFCURVE",
"95 915 OFFCURVE",
"95 934 CURVE SMOOTH",
"95 983 OFFCURVE",
"145 1031 OFFCURVE",
"244 1078 CURVE",
"224 1126 LINE",
"78 1060 OFFCURVE",
"5 985 OFFCURVE",
"5 900 CURVE SMOOTH",
"5 854 OFFCURVE",
"52 756 OFFCURVE",
"247 756 CURVE",
"152 679 OFFCURVE",
"25 519 OFFCURVE",
"25 337 CURVE SMOOTH",
"25 229 OFFCURVE",
"51 -27 OFFCURVE",
"315 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"188 68 OFFCURVE",
"145 162 OFFCURVE",
"145 255 CURVE SMOOTH",
"145 446 OFFCURVE",
"251 648 OFFCURVE",
"366 756 CURVE",
"448 756 LINE SMOOTH",
"594 756 OFFCURVE",
"612 627 OFFCURVE",
"612 558 CURVE SMOOTH",
"612 344 OFFCURVE",
"458 68 OFFCURVE",
"297 68 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
13 1 0 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
3 1 1 0 2 1 2 101 0 4 4 0 97 0 0 0 37 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 26 values pushed */
0 0 0 4 1 0 4 109 3 1 1 2 2 1 93 3 1 1 1 2 97 0 2 1 2 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
37 35 47 20 34 5 7 27 
CALL[ ]\011/* CallFunction */";
};
width = 800;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"641 -27 OFFCURVE",
"825 233 OFFCURVE",
"825 489 CURVE SMOOTH",
"825 682 OFFCURVE",
"720 852 OFFCURVE",
"529 852 CURVE SMOOTH",
"478 852 OFFCURVE",
"410 853 OFFCURVE",
"324 858 CURVE SMOOTH",
"275 861 OFFCURVE",
"170 870 OFFCURVE",
"170 938 CURVE SMOOTH",
"170 994 OFFCURVE",
"241 1029 OFFCURVE",
"308 1061 CURVE",
"279 1124 LINE",
"172 1074 OFFCURVE",
"27 1006 OFFCURVE",
"27 881 CURVE SMOOTH",
"27 802 OFFCURVE",
"112 731 OFFCURVE",
"215 717 CURVE",
"124 654 OFFCURVE",
"45 507 OFFCURVE",
"45 355 CURVE SMOOTH",
"45 163 OFFCURVE",
"149 -27 OFFCURVE",
"377 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"269 86 OFFCURVE",
"240 138 OFFCURVE",
"240 227 CURVE SMOOTH",
"240 380 OFFCURVE",
"322 593 OFFCURVE",
"444 709 CURVE",
"540 709 LINE SMOOTH",
"636 709 OFFCURVE",
"648 609 OFFCURVE",
"648 566 CURVE SMOOTH",
"648 408 OFFCURVE",
"490 86 OFFCURVE",
"354 86 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
24 23 20 3 0 74 12 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 99 0 3 3 0 97 0 0 0 24 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 95 0 1 2 1 79 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
52 50 43 41 37 34 35 4 7 23 
CALL[ ]\011/* CallFunction */";
};
width = 876;
}
);
note = uniA77A.alt;
rightMetricsKey = "=o";
},
{
glyphname = uniA77C;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"150 0 LINE",
"529 0 LINE SMOOTH",
"558 0 OFFCURVE",
"580 92 OFFCURVE",
"552 92 CURVE SMOOTH",
"175 92 LINE",
"193 195 OFFCURVE",
"363 490 OFFCURVE",
"467 609 CURVE SMOOTH",
"522 673 OFFCURVE",
"574 705 OFFCURVE",
"621 705 CURVE SMOOTH",
"640 705 OFFCURVE",
"661 693 OFFCURVE",
"685 670 CURVE SMOOTH",
"708 647 OFFCURVE",
"737 635 OFFCURVE",
"770 635 CURVE SMOOTH",
"837 635 OFFCURVE",
"871 698 OFFCURVE",
"871 754 CURVE",
"870 782 OFFCURVE",
"859 805 OFFCURVE",
"836 824 CURVE SMOOTH",
"813 843 OFFCURVE",
"785 852 OFFCURVE",
"750 852 CURVE SMOOTH",
"571 852 OFFCURVE",
"399 686 OFFCURVE",
"234 354 CURVE",
"220 362 LINE",
"282 705 LINE SMOOTH",
"288 736 OFFCURVE",
"291 760 OFFCURVE",
"291 778 CURVE SMOOTH",
"291 827 OFFCURVE",
"271 852 OFFCURVE",
"231 852 CURVE SMOOTH",
"161 852 OFFCURVE",
"95 787 OFFCURVE",
"-7 657 CURVE",
"-18 646 OFFCURVE",
"22 607 OFFCURVE",
"34 623 CURVE SMOOTH",
"77 681 OFFCURVE",
"113 710 OFFCURVE",
"141 710 CURVE SMOOTH",
"161 710 OFFCURVE",
"171 695 OFFCURVE",
"171 666 CURVE SMOOTH",
"171 654 OFFCURVE",
"166 627 OFFCURVE",
"159 586 CURVE SMOOTH",
"-16 -379 LINE SMOOTH",
"-25 -428 OFFCURVE",
"-43 -467 OFFCURVE",
"-160 -506 CURVE SMOOTH",
"-163 -507 OFFCURVE",
"-164 -510 OFFCURVE",
"-164 -515 CURVE SMOOTH",
"-164 -520 OFFCURVE",
"-163 -526 OFFCURVE",
"-161 -534 CURVE SMOOTH",
"-157 -550 OFFCURVE",
"-151 -558 OFFCURVE",
"-143 -558 CURVE SMOOTH",
"-142 -558 OFFCURVE",
"-140 -558 OFFCURVE",
"-139 -557 CURVE",
"6 -522 OFFCURVE",
"70 -472 OFFCURVE",
"81 -408 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"25 -512 LINE",
"47 -486 LINE",
"130 0 LINE",
"509 0 LINE",
"532 72 LINE",
"149 72 LINE",
"167 175 OFFCURVE",
"343 505 OFFCURVE",
"447 623 CURVE SMOOTH",
"500 683 OFFCURVE",
"548 714 OFFCURVE",
"592 714 CURVE SMOOTH",
"610 714 OFFCURVE",
"629 704 OFFCURVE",
"652 681 CURVE SMOOTH",
"674 659 OFFCURVE",
"701 648 OFFCURVE",
"732 648 CURVE SMOOTH",
"795 648 OFFCURVE",
"827 707 OFFCURVE",
"827 760 CURVE SMOOTH",
"827 813 OFFCURVE",
"778 852 OFFCURVE",
"713 852 CURVE SMOOTH",
"545 852 OFFCURVE",
"323 659 OFFCURVE",
"140 178 CURVE",
"168 184 LINE",
"262 705 LINE SMOOTH",
"268 736 OFFCURVE",
"271 760 OFFCURVE",
"271 778 CURVE SMOOTH",
"271 827 OFFCURVE",
"251 852 OFFCURVE",
"211 852 CURVE SMOOTH",
"141 852 OFFCURVE",
"75 787 OFFCURVE",
"-27 657 CURVE",
"14 623 LINE",
"57 681 OFFCURVE",
"93 710 OFFCURVE",
"121 710 CURVE SMOOTH",
"160 710 OFFCURVE",
"151 654 OFFCURVE",
"139 586 CURVE SMOOTH",
"-50 -456 LINE",
"-165 -512 LINE",
"-153 -559 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
32 1 5 3 1 76 2 1 6 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 3 0 5 0 3 114 4 1 0 0 1 97 2 1 1 1 95 77 0 5 5 6 95 0 6 6 93 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 0 5 0 3 5 128 4 1 0 0 1 97 2 1 1 1 95 77 0 5 5 6 95 0 6 6 93 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 0 5 0 3 5 128 0 5 0 6 5 6 99 4 1 0 0 1 97 2 1 1 1 95 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 3 4 5 4 3 5 128 0 5 0 6 5 6 99 0 0 0 1 97 2 1 1 1 95 77 0 4 4 1 97 2 1 1 1 95 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 17 values pushed */
55 53 50 49 46 44 43 41 36 34 28 26 19 17 7 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 841;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"-64 -563 LINE",
"130 -563 LINE",
"388 860 LINE",
"194 860 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"99 -494 LINE",
"151 -451 LINE",
"232 0 LINE",
"557 0 LINE",
"582 111 LINE",
"252 111 LINE",
"259 165 OFFCURVE",
"372 459 OFFCURVE",
"509 603 CURVE SMOOTH",
"560 657 OFFCURVE",
"604 686 OFFCURVE",
"643 686 CURVE SMOOTH",
"671 686 OFFCURVE",
"688 672 OFFCURVE",
"719 629 CURVE SMOOTH",
"742 597 OFFCURVE",
"778 582 OFFCURVE",
"817 582 CURVE SMOOTH",
"889 582 OFFCURVE",
"936 644 OFFCURVE",
"936 725 CURVE SMOOTH",
"936 799 OFFCURVE",
"871 852 OFFCURVE",
"778 852 CURVE SMOOTH",
"625 852 OFFCURVE",
"425 711 OFFCURVE",
"252 334 CURVE",
"291 324 LINE",
"353 668 LINE SMOOTH",
"357 688 OFFCURVE",
"359 708 OFFCURVE",
"359 731 CURVE SMOOTH",
"359 826 OFFCURVE",
"328 852 OFFCURVE",
"264 852 CURVE SMOOTH",
"166 852 OFFCURVE",
"97 784 OFFCURVE",
"-9 645 CURVE",
"46 600 LINE",
"93 655 OFFCURVE",
"120 684 OFFCURVE",
"140 684 CURVE SMOOTH",
"161 684 OFFCURVE",
"156 653 OFFCURVE",
"140 563 CURVE SMOOTH",
"-39 -429 LINE",
"-145 -494 LINE",
"-109 -557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
62 1 1 5 43 1 0 1 66 1 2 0 3 76 33 1 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 0 1 2 1 0 114 4 1 1 1 5 97 6 1 5 5 34 77 0 2 2 3 96 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 0 1 2 1 0 2 128 4 1 1 1 5 97 6 1 5 5 34 77 0 2 2 3 96 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 0 1 2 1 0 2 128 0 2 0 3 2 3 100 4 1 1 1 5 97 6 1 5 5 34 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
70 68 60 58 46 45 52 38 35 35 7 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 937;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"32 -563 LINE",
"226 -563 LINE",
"484 860 LINE",
"290 860 LINE"
);
}
);
};
layerId = "05694E6D-02E6-46D9-A2D2-F5B8C36F3AE2";
name = "Aug 14 18, 08:23";
paths = (
{
closed = 1;
nodes = (
"1032 764 OFFCURVE",
"1010 793 QCURVE SMOOTH",
"964 852 OFFCURVE",
"874 852 QCURVE SMOOTH",
"645 852 OFFCURVE",
"420 479 QCURVE",
"406 487 LINE",
"446 668 LINE SMOOTH",
"453 696 OFFCURVE",
"453 731 QCURVE SMOOTH",
"453 733 LINE",
"449 772 LINE",
"432 852 OFFCURVE",
"360 852 QCURVE SMOOTH",
"342 852 LINE",
"229 838 OFFCURVE",
"82 645 QCURVE",
"80 643 OFFCURVE",
"80 639 QCURVE SMOOTH",
"80 626 OFFCURVE",
"96 612 QCURVE",
"115 598 OFFCURVE",
"129 598 QCURVE SMOOTH",
"135 598 OFFCURVE",
"137 600 QCURVE",
"154 621 LINE SMOOTH",
"208 684 OFFCURVE",
"231 684 QCURVE SMOOTH",
"250 684 OFFCURVE",
"250 666 QCURVE",
"249 643 OFFCURVE",
"231 563 QCURVE SMOOTH",
"43 -346 LINE SMOOTH",
"37 -378 OFFCURVE",
"25 -403 QCURVE SMOOTH",
"-4 -464 OFFCURVE",
"-86 -487 QCURVE",
"-88 -488 OFFCURVE",
"-90 -492 QCURVE",
"-92 -508 LINE",
"-92 -543 OFFCURVE",
"-78 -555 QCURVE",
"-70 -557 LINE",
"-10 -548 OFFCURVE",
"41 -532 QCURVE SMOOTH",
"215 -481 OFFCURVE",
"233 -389 QCURVE SMOOTH",
"313 0 LINE",
"653 0 LINE SMOOTH",
"660 0 OFFCURVE",
"666 2 QCURVE",
"676 14 LINE SMOOTH",
"698 41 OFFCURVE",
"698 80 QCURVE SMOOTH",
"698 111 OFFCURVE",
"678 111 QCURVE SMOOTH",
"348 111 LINE",
"350 123 OFFCURVE",
"354 137 QCURVE SMOOTH",
"399 285 OFFCURVE",
"481 426 QCURVE SMOOTH",
"518 487 LINE SMOOTH",
"647 686 OFFCURVE",
"739 686 QCURVE SMOOTH",
"764 686 OFFCURVE",
"784 666 QCURVE",
"815 629 LINE SMOOTH",
"854 582 OFFCURVE",
"913 582 QCURVE SMOOTH",
"956 581 OFFCURVE",
"987 610 QCURVE SMOOTH",
"1032 653 OFFCURVE",
"1032 725 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
62 1 1 5 43 1 0 1 66 1 2 0 3 76 33 1 3 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 0 1 2 1 0 114 4 1 1 1 5 97 6 1 5 5 34 77 0 2 2 3 96 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 0 1 2 1 0 2 128 4 1 1 1 5 97 6 1 5 5 34 77 0 2 2 3 96 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 0 1 2 1 0 2 128 0 2 0 3 2 3 100 4 1 1 1 5 97 6 1 5 5 34 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 13 values pushed */
70 68 60 58 46 45 52 38 35 35 7 8 26 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 972;
}
);
leftMetricsKey = uni01BF;
note = uniA77C;
rightMetricsKey = r;
unicode = A77C;
},
{
glyphname = uniA783;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"518 -448 LINE",
"620 -448 LINE",
"884 1013 LINE",
"782 1013 LINE"
);
},
{
closed = 1;
nodes = (
"68 -448 LINE",
"170 -448 LINE",
"434 1013 LINE",
"332 1013 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-149 -559 LINE",
"29 -512 LINE",
"51 -486 LINE",
"139 0 LINE SMOOTH",
"166 151 OFFCURVE",
"275 387 OFFCURVE",
"366 541 CURVE SMOOTH",
"458 696 OFFCURVE",
"533 772 OFFCURVE",
"590 772 CURVE SMOOTH",
"615 772 OFFCURVE",
"625 749 OFFCURVE",
"625 704 CURVE SMOOTH",
"625 676 OFFCURVE",
"622 636 OFFCURVE",
"612 582 CURVE SMOOTH",
"530 137 LINE SMOOTH",
"525 108 OFFCURVE",
"519 73 OFFCURVE",
"519 44 CURVE SMOOTH",
"519 3 OFFCURVE",
"531 -27 OFFCURVE",
"569 -27 CURVE SMOOTH",
"652 -27 OFFCURVE",
"742 34 OFFCURVE",
"838 156 CURVE",
"794 195 LINE",
"739 133 OFFCURVE",
"701 102 OFFCURVE",
"678 102 CURVE SMOOTH",
"637 102 OFFCURVE",
"635 149 OFFCURVE",
"645 203 CURVE SMOOTH",
"711 567 LINE SMOOTH",
"722 626 OFFCURVE",
"735 697 OFFCURVE",
"735 746 CURVE SMOOTH",
"735 812 OFFCURVE",
"709 852 OFFCURVE",
"624 852 CURVE SMOOTH",
"500 852 OFFCURVE",
"348 702 OFFCURVE",
"200 337 CURVE",
"259 664 LINE SMOOTH",
"264 693 OFFCURVE",
"267 719 OFFCURVE",
"267 744 CURVE SMOOTH",
"267 816 OFFCURVE",
"247 852 OFFCURVE",
"206 852 CURVE SMOOTH",
"133 852 OFFCURVE",
"68 788 OFFCURVE",
"-26 659 CURVE",
"19 623 LINE",
"64 682 OFFCURVE",
"97 711 OFFCURVE",
"118 711 CURVE SMOOTH",
"150 711 OFFCURVE",
"159 673 OFFCURVE",
"151 629 CURVE SMOOTH",
"-46 -456 LINE",
"-161 -512 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 57 values pushed */
45 35 2 5 2 1 76 24 1 0 73 0 1 1 3 97 4 1 3 3 95 77 0 2 2 3 97 4 1 3 3 95 77 0 5 5 0 97 0 0 0 93 0 78 59 57 50 48 41 39 34 33 39 33 6 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 887;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"744 -27 OFFCURVE",
"827 41 OFFCURVE",
"923 176 CURVE",
"864 225 LINE",
"818 169 OFFCURVE",
"788 142 OFFCURVE",
"773 142 CURVE SMOOTH",
"747 142 OFFCURVE",
"754 185 OFFCURVE",
"762 231 CURVE SMOOTH",
"820 547 LINE SMOOTH",
"830 602 OFFCURVE",
"837 654 OFFCURVE",
"837 698 CURVE SMOOTH",
"837 791 OFFCURVE",
"803 852 OFFCURVE",
"689 852 CURVE SMOOTH",
"572 852 OFFCURVE",
"422 740 OFFCURVE",
"274 369 CURVE",
"290 335 LINE",
"349 666 LINE",
"172 621 LINE",
"61 0 LINE",
"235 0 LINE",
"264 165 OFFCURVE",
"347 383 OFFCURVE",
"435 541 CURVE SMOOTH",
"501 659 OFFCURVE",
"571 743 OFFCURVE",
"623 743 CURVE SMOOTH",
"643 743 OFFCURVE",
"649 724 OFFCURVE",
"649 699 CURVE SMOOTH",
"649 668 OFFCURVE",
"641 621 OFFCURVE",
"633 580 CURVE SMOOTH",
"557 168 LINE SMOOTH",
"554 150 OFFCURVE",
"552 132 OFFCURVE",
"552 114 CURVE SMOOTH",
"552 42 OFFCURVE",
"583 -27 OFFCURVE",
"654 -27 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-107 -557 LINE",
"101 -494 LINE",
"153 -451 LINE",
"235 0 LINE SMOOTH",
"265 165 OFFCURVE",
"347 383 OFFCURVE",
"435 541 CURVE SMOOTH",
"501 659 OFFCURVE",
"571 743 OFFCURVE",
"623 743 CURVE SMOOTH",
"643 743 OFFCURVE",
"649 724 OFFCURVE",
"649 699 CURVE SMOOTH",
"649 668 OFFCURVE",
"641 621 OFFCURVE",
"633 580 CURVE SMOOTH",
"557 168 LINE SMOOTH",
"554 150 OFFCURVE",
"552 132 OFFCURVE",
"552 114 CURVE SMOOTH",
"552 42 OFFCURVE",
"583 -27 OFFCURVE",
"654 -27 CURVE SMOOTH",
"744 -27 OFFCURVE",
"827 41 OFFCURVE",
"923 176 CURVE",
"864 225 LINE",
"818 169 OFFCURVE",
"788 142 OFFCURVE",
"773 142 CURVE SMOOTH",
"747 142 OFFCURVE",
"754 185 OFFCURVE",
"762 231 CURVE SMOOTH",
"820 547 LINE SMOOTH",
"830 602 OFFCURVE",
"837 654 OFFCURVE",
"837 698 CURVE SMOOTH",
"837 791 OFFCURVE",
"803 852 OFFCURVE",
"689 852 CURVE SMOOTH",
"584 852 OFFCURVE",
"452 762 OFFCURVE",
"319 474 CURVE",
"363 719 LINE SMOOTH",
"365 728 OFFCURVE",
"366 737 OFFCURVE",
"366 745 CURVE SMOOTH",
"366 811 OFFCURVE",
"325 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"162 852 OFFCURVE",
"80 776 OFFCURVE",
"-9 645 CURVE",
"50 602 LINE",
"89 657 OFFCURVE",
"117 685 OFFCURVE",
"136 685 CURVE SMOOTH",
"161 685 OFFCURVE",
"157 643 OFFCURVE",
"150 603 CURVE SMOOTH",
"-37 -429 LINE",
"-143 -494 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 75 values pushed */
58 1 1 4 49 1 3 2 85 83 74 61 4 6 3 3 76 29 1 0 73 0 2 1 3 1 2 3 128 0 3 6 1 3 6 126 0 6 0 1 6 0 126 0 1 1 4 97 5 1 4 4 34 77 0 0 0 32 0 78 77 75 67 65 55 53 47 44 42 40 41 35 7 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 948;
}
);
leftMetricsKey = uni01BF;
note = uniA783;
rightMetricsKey = "=n";
unicode = A783;
},
{
glyphname = uniA785;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"49 -512 LINE",
"71 -486 LINE",
"279 664 LINE SMOOTH",
"284 693 OFFCURVE",
"287 719 OFFCURVE",
"287 744 CURVE SMOOTH",
"287 816 OFFCURVE",
"267 852 OFFCURVE",
"226 852 CURVE SMOOTH",
"153 852 OFFCURVE",
"88 788 OFFCURVE",
"-6 659 CURVE",
"39 623 LINE",
"84 682 OFFCURVE",
"117 711 OFFCURVE",
"138 711 CURVE SMOOTH",
"161 711 OFFCURVE",
"174 692 OFFCURVE",
"174 653 CURVE SMOOTH",
"174 646 OFFCURVE",
"173 639 OFFCURVE",
"171 629 CURVE SMOOTH",
"-26 -456 LINE",
"-141 -512 LINE",
"-129 -559 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"29 -512 LINE",
"51 -486 LINE",
"139 0 LINE SMOOTH",
"164 140 OFFCURVE",
"267 400 OFFCURVE",
"355 570 CURVE SMOOTH",
"405 666 OFFCURVE",
"450 732 OFFCURVE",
"473 732 CURVE SMOOTH",
"491 732 OFFCURVE",
"505 728 OFFCURVE",
"516 720 CURVE",
"526 712 OFFCURVE",
"540 707 OFFCURVE",
"560 707 CURVE SMOOTH",
"599 707 OFFCURVE",
"629 739 OFFCURVE",
"629 783 CURVE SMOOTH",
"629 827 OFFCURVE",
"584 852 OFFCURVE",
"543 852 CURVE SMOOTH",
"451 852 OFFCURVE",
"332 688 OFFCURVE",
"207 379 CURVE",
"259 664 LINE SMOOTH",
"264 693 OFFCURVE",
"267 719 OFFCURVE",
"267 744 CURVE SMOOTH",
"267 816 OFFCURVE",
"247 852 OFFCURVE",
"206 852 CURVE SMOOTH",
"133 852 OFFCURVE",
"68 788 OFFCURVE",
"-26 659 CURVE",
"19 623 LINE",
"64 682 OFFCURVE",
"97 711 OFFCURVE",
"118 711 CURVE SMOOTH",
"154 711 OFFCURVE",
"157 663 OFFCURVE",
"151 629 CURVE SMOOTH",
"-46 -456 LINE",
"-161 -512 LINE",
"-149 -559 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
31 1 0 4 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 4 1 0 1 4 114 5 1 1 1 2 97 3 1 2 2 95 77 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
88 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 1 5 4 5 1 4 128 0 4 0 5 4 112 0 5 5 2 97 3 1 2 2 95 77 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
0 1 5 4 5 1 4 128 0 4 0 5 4 0 126 0 5 5 2 97 3 1 2 2 95 77 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
33 37 38 40 27 50 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 638;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"101 -494 LINE",
"153 -451 LINE",
"363 719 LINE SMOOTH",
"365 728 OFFCURVE",
"366 737 OFFCURVE",
"366 745 CURVE SMOOTH",
"366 811 OFFCURVE",
"325 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"162 852 OFFCURVE",
"80 776 OFFCURVE",
"-9 645 CURVE",
"50 602 LINE",
"89 657 OFFCURVE",
"117 685 OFFCURVE",
"136 685 CURVE SMOOTH",
"149 685 OFFCURVE",
"155 676 OFFCURVE",
"155 656 CURVE SMOOTH",
"155 643 OFFCURVE",
"154 625 OFFCURVE",
"150 603 CURVE SMOOTH",
"-37 -429 LINE",
"-143 -494 LINE",
"-107 -557 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"101 -494 LINE",
"153 -451 LINE",
"234 0 LINE SMOOTH",
"276 231 OFFCURVE",
"345 401 OFFCURVE",
"448 575 CURVE SMOOTH",
"495 654 OFFCURVE",
"532 692 OFFCURVE",
"555 692 CURVE SMOOTH",
"573 692 OFFCURVE",
"586 688 OFFCURVE",
"610 664 CURVE SMOOTH",
"630 644 OFFCURVE",
"658 635 OFFCURVE",
"688 635 CURVE SMOOTH",
"733 635 OFFCURVE",
"778 662 OFFCURVE",
"778 739 CURVE SMOOTH",
"778 800 OFFCURVE",
"724 852 OFFCURVE",
"641 852 CURVE SMOOTH",
"553 852 OFFCURVE",
"449 781 OFFCURVE",
"328 526 CURVE",
"360 703 LINE SMOOTH",
"362 712 OFFCURVE",
"365 737 OFFCURVE",
"365 750 CURVE SMOOTH",
"365 811 OFFCURVE",
"325 852 OFFCURVE",
"258 852 CURVE SMOOTH",
"162 852 OFFCURVE",
"80 776 OFFCURVE",
"-9 645 CURVE",
"50 602 LINE",
"89 657 OFFCURVE",
"117 685 OFFCURVE",
"136 685 CURVE SMOOTH",
"161 685 OFFCURVE",
"157 643 OFFCURVE",
"150 603 CURVE SMOOTH",
"-37 -429 LINE",
"-143 -494 LINE",
"-107 -557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
50 1 1 3 1 76 54 45 25 3 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 0 1 1 0 113 2 1 1 1 3 97 4 1 3 3 34 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 0 1 0 134 2 1 1 1 3 97 4 1 3 3 34 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 0 2 0 134 0 1 1 3 97 4 1 3 3 34 77 0 2 2 3 97 4 1 3 3 34 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
58 56 49 47 37 35 36 35 5 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 776;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"99 -494 LINE",
"151 -451 LINE",
"361 719 LINE SMOOTH",
"363 728 OFFCURVE",
"364 737 OFFCURVE",
"364 745 CURVE SMOOTH",
"364 811 OFFCURVE",
"323 852 OFFCURVE",
"256 852 CURVE SMOOTH",
"160 852 OFFCURVE",
"78 776 OFFCURVE",
"-11 645 CURVE",
"48 602 LINE",
"87 657 OFFCURVE",
"115 685 OFFCURVE",
"134 685 CURVE SMOOTH",
"147 685 OFFCURVE",
"153 676 OFFCURVE",
"153 656 CURVE SMOOTH",
"153 643 OFFCURVE",
"152 625 OFFCURVE",
"148 603 CURVE SMOOTH",
"-39 -429 LINE",
"-145 -494 LINE",
"-109 -557 LINE"
);
}
);
};
layerId = "0EDF76D2-973B-4D7F-9A38-D91804B4BBD1";
name = "Aug 14 18, 08:51";
paths = (
{
closed = 1;
nodes = (
"850 756 OFFCURVE",
"847 771 OFFCURVE",
"840 784 CURVE",
"823 807 LINE",
"798 837 OFFCURVE",
"761 852 OFFCURVE",
"713 852 CURVE SMOOTH",
"613 852 OFFCURVE",
"515 756 OFFCURVE",
"420 563 CURVE",
"271 598 LINE",
"158 54 LINE",
"307 4 LINE",
"311 20 OFFCURVE",
"315 38 OFFCURVE",
"319 57 CURVE",
"351 181 OFFCURVE",
"388 294 OFFCURVE",
"430 397 CURVE SMOOTH",
"459 464 OFFCURVE",
"489 523 OFFCURVE",
"520 575 CURVE SMOOTH",
"568 653 OFFCURVE",
"604 692 OFFCURVE",
"627 692 CURVE",
"632 691 OFFCURVE",
"637 690 OFFCURVE",
"641 690 CURVE",
"652 688 OFFCURVE",
"665 679 OFFCURVE",
"682 664 CURVE SMOOTH",
"704 645 OFFCURVE",
"730 635 OFFCURVE",
"760 635 CURVE SMOOTH",
"773 635 OFFCURVE",
"784 637 OFFCURVE",
"793 641 CURVE",
"831 654 OFFCURVE",
"850 687 OFFCURVE",
"850 739 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
50 1 1 3 1 76 54 45 25 3 0 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 0 1 1 0 113 2 1 1 1 3 97 4 1 3 3 34 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
146 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 0 1 0 134 2 1 1 1 3 97 4 1 3 3 34 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 0 2 0 134 0 1 1 3 97 4 1 3 3 34 77 0 2 2 3 97 4 1 3 3 34 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 11 values pushed */
58 56 49 47 37 35 36 35 5 8 24 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 768;
}
);
leftMetricsKey = uni01BF;
note = uniA785;
rightMetricsKey = r;
unicode = A785;
},
{
glyphname = uniA787;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"544 -27 OFFCURVE",
"640 87 OFFCURVE",
"762 285 CURVE",
"718 313 LINE",
"620 166 OFFCURVE",
"528 90 OFFCURVE",
"451 90 CURVE SMOOTH",
"283 90 OFFCURVE",
"257 260 OFFCURVE",
"257 338 CURVE SMOOTH",
"257 490 OFFCURVE",
"358 655 OFFCURVE",
"474 750 CURVE",
"865 750 LINE",
"879 846 LINE",
"745 835 OFFCURVE",
"620 829 OFFCURVE",
"502 829 CURVE SMOOTH",
"234 829 LINE SMOOTH",
"210 829 OFFCURVE",
"199 837 OFFCURVE",
"199 854 CURVE SMOOTH",
"199 870 OFFCURVE",
"205 897 OFFCURVE",
"218 926 CURVE",
"161 926 LINE",
"54 777 LINE",
"71 750 LINE",
"394 750 LINE",
"244 653 OFFCURVE",
"137 463 OFFCURVE",
"137 301 CURVE SMOOTH",
"137 198 OFFCURVE",
"182 -27 OFFCURVE",
"372 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
40 1 4 1 1 76 23 1 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
3 1 1 1 2 95 0 2 2 95 77 0 4 4 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 20 values pushed */
0 2 3 1 1 4 2 1 103 0 4 4 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
37 36 57 21 34 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 871;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"602 -27 OFFCURVE",
"705 142 OFFCURVE",
"797 291 CURVE",
"739 331 LINE",
"644 196 OFFCURVE",
"557 125 OFFCURVE",
"484 125 CURVE SMOOTH",
"370 125 OFFCURVE",
"323 230 OFFCURVE",
"323 346 CURVE SMOOTH",
"323 463 OFFCURVE",
"380 630 OFFCURVE",
"491 731 CURVE",
"882 731 LINE",
"896 846 LINE",
"813 839 OFFCURVE",
"615 829 OFFCURVE",
"521 829 CURVE SMOOTH",
"264 829 LINE SMOOTH",
"239 829 OFFCURVE",
"226 846 OFFCURVE",
"226 867 CURVE SMOOTH",
"226 888 OFFCURVE",
"233 909 OFFCURVE",
"251 932 CURVE",
"178 932 LINE",
"70 755 LINE",
"82 731 LINE",
"358 731 LINE",
"219 638 OFFCURVE",
"113 463 OFFCURVE",
"113 297 CURVE SMOOTH",
"113 125 OFFCURVE",
"214 -27 OFFCURVE",
"393 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
3 1 0 5 25 1 1 2 2 76 51 1 5 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 2 0 1 0 2 1 128 4 1 0 0 5 95 0 5 5 34 77 0 1 1 3 97 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 1 0 2 1 128 0 5 4 1 0 2 5 0 103 0 1 1 3 97 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
61 56 23 39 19 39 38 6 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 872;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "AC6E5FD5-0735-4B61-8957-3E344EE8EB26";
name = "Aug 14 18, 08:58";
paths = (
{
closed = 1;
nodes = (
"723 309 LINE",
"612 163 OFFCURVE",
"517 90 OFFCURVE",
"440 90 CURVE SMOOTH",
"333 90 OFFCURVE",
"275 181 OFFCURVE",
"275 316 CURVE SMOOTH",
"275 448 OFFCURVE",
"393 650 OFFCURVE",
"520 750 CURVE",
"911 750 LINE SMOOTH",
"942 750 OFFCURVE",
"963 842 OFFCURVE",
"934 846 CURVE",
"799 835 OFFCURVE",
"673 829 OFFCURVE",
"555 829 CURVE SMOOTH",
"287 829 LINE SMOOTH",
"265 829 OFFCURVE",
"254 836 OFFCURVE",
"254 851 CURVE SMOOTH",
"254 866 OFFCURVE",
"261 888 OFFCURVE",
"276 919 CURVE",
"275 929 OFFCURVE",
"267 934 OFFCURVE",
"252 934 CURVE SMOOTH",
"237 934 OFFCURVE",
"227 931 OFFCURVE",
"223 926 CURVE",
"193 878 OFFCURVE",
"48 750 OFFCURVE",
"117 750 CURVE SMOOTH",
"440 750 LINE",
"257 647 OFFCURVE",
"133 416 OFFCURVE",
"133 251 CURVE SMOOTH",
"133 86 OFFCURVE",
"219 -27 OFFCURVE",
"350 -27 CURVE SMOOTH",
"415 -27 OFFCURVE",
"478 -8 OFFCURVE",
"539 30 CURVE SMOOTH",
"599 68 OFFCURVE",
"675 153 OFFCURVE",
"768 285 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
40 1 4 1 1 76 23 1 2 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
3 1 1 1 2 95 0 2 2 95 77 0 4 4 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 20 values pushed */
0 2 3 1 1 4 2 1 103 0 4 4 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 8 values pushed */
37 36 57 21 34 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 879;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "5D0D1BEB-5CC6-408A-A28E-C9889C0713E0";
name = "Aug 14 18, 09:01";
paths = (
{
closed = 1;
nodes = (
"905 842 OFFCURVE",
"852 839 OFFCURVE",
"795 836 CURVE SMOOTH",
"709 831 OFFCURVE",
"637 829 OFFCURVE",
"580 829 CURVE SMOOTH",
"313 829 LINE",
"304 830 OFFCURVE",
"297 832 OFFCURVE",
"293 836 CURVE",
"289 841 OFFCURVE",
"287 847 OFFCURVE",
"287 854 CURVE SMOOTH",
"287 865 OFFCURVE",
"293 882 OFFCURVE",
"305 907 CURVE",
"305 913 LINE",
"306 923 OFFCURVE",
"298 931 OFFCURVE",
"283 936 CURVE",
"262 938 LINE",
"254 938 OFFCURVE",
"249 936 OFFCURVE",
"246 932 CURVE",
"184 848 LINE",
"181 845 OFFCURVE",
"179 842 OFFCURVE",
"176 838 CURVE SMOOTH",
"137 783 OFFCURVE",
"117 750 OFFCURVE",
"117 739 CURVE SMOOTH",
"117 734 OFFCURVE",
"120 731 OFFCURVE",
"127 731 CURVE SMOOTH",
"408 731 LINE",
"334 684 OFFCURVE",
"272 622 OFFCURVE",
"221 547 CURVE SMOOTH",
"156 450 OFFCURVE",
"123 355 OFFCURVE",
"123 262 CURVE SMOOTH",
"123 189 OFFCURVE",
"141 126 OFFCURVE",
"176 74 CURVE SMOOTH",
"224 7 OFFCURVE",
"291 -27 OFFCURVE",
"377 -27 CURVE SMOOTH",
"501 -27 OFFCURVE",
"616 39 OFFCURVE",
"721 170 CURVE SMOOTH",
"732 183 OFFCURVE",
"761 223 OFFCURVE",
"809 291 CURVE",
"811 297 LINE",
"811 301 OFFCURVE",
"809 305 OFFCURVE",
"805 309 CURVE SMOOTH",
"792 323 OFFCURVE",
"777 330 OFFCURVE",
"762 330 CURVE",
"755 329 OFFCURVE",
"751 327 OFFCURVE",
"748 324 CURVE",
"643 191 OFFCURVE",
"554 125 OFFCURVE",
"481 125 CURVE SMOOTH",
"461 125 OFFCURVE",
"443 128 OFFCURVE",
"426 135 CURVE SMOOTH",
"367 158 OFFCURVE",
"338 219 OFFCURVE",
"338 317 CURVE SMOOTH",
"338 369 OFFCURVE",
"350 426 OFFCURVE",
"375 489 CURVE SMOOTH",
"415 590 OFFCURVE",
"470 671 OFFCURVE",
"541 731 CURVE",
"924 731 LINE",
"932 731 LINE",
"950 738 OFFCURVE",
"963 757 OFFCURVE",
"971 788 CURVE",
"975 817 LINE",
"973 836 LINE",
"965 844 LINE",
"956 846 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
3 1 0 5 25 1 1 2 2 76 51 1 5 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 2 0 1 0 2 1 128 4 1 0 0 5 95 0 5 5 34 77 0 1 1 3 97 0 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 1 0 2 1 128 0 5 4 1 0 2 5 0 103 0 1 1 3 97 0 3 3 32 3 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 10 values pushed */
61 56 23 39 19 39 38 6 8 27 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 884;
}
);
note = uniA787;
rightKerningGroup = c;
rightMetricsKey = c;
unicode = A787;
},
{
glyphname = uniFB00;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"783 763 LINE",
"1054 763 LINE SMOOTH",
"1061 763 OFFCURVE",
"1069 771 OFFCURVE",
"1078 788 CURVE",
"1086 805 OFFCURVE",
"1090 819 OFFCURVE",
"1090 828 CURVE SMOOTH",
"1090 837 OFFCURVE",
"1088 842 OFFCURVE",
"1083 842 CURVE SMOOTH",
"798 842 LINE",
"823 973 OFFCURVE",
"843 1066 OFFCURVE",
"858 1121 CURVE SMOOTH",
"873 1176 OFFCURVE",
"899 1236 OFFCURVE",
"938 1300 CURVE SMOOTH",
"977 1363 OFFCURVE",
"1030 1395 OFFCURVE",
"1098 1395 CURVE SMOOTH",
"1167 1395 OFFCURVE",
"1201 1355 OFFCURVE",
"1201 1274 CURVE SMOOTH",
"1201 1250 OFFCURVE",
"1209 1232 OFFCURVE",
"1226 1220 CURVE SMOOTH",
"1243 1208 OFFCURVE",
"1260 1202 OFFCURVE",
"1277 1202 CURVE SMOOTH",
"1322 1202 OFFCURVE",
"1345 1234 OFFCURVE",
"1345 1298 CURVE SMOOTH",
"1345 1346 OFFCURVE",
"1327 1386 OFFCURVE",
"1291 1417 CURVE SMOOTH",
"1255 1448 OFFCURVE",
"1209 1464 OFFCURVE",
"1154 1464 CURVE SMOOTH",
"1037 1464 OFFCURVE",
"941 1425 OFFCURVE",
"866 1346 CURVE",
"851 1375 OFFCURVE",
"826 1399 OFFCURVE",
"791 1416 CURVE SMOOTH",
"756 1433 OFFCURVE",
"721 1442 OFFCURVE",
"685 1442 CURVE SMOOTH",
"581 1442 OFFCURVE",
"497 1415 OFFCURVE",
"432 1360 CURVE SMOOTH",
"367 1305 OFFCURVE",
"319 1235 OFFCURVE",
"288 1148 CURVE SMOOTH",
"257 1062 OFFCURVE",
"232 960 OFFCURVE",
"209 842 CURVE",
"38 842 LINE SMOOTH",
"30 842 OFFCURVE",
"22 834 OFFCURVE",
"15 818 CURVE SMOOTH",
"8 802 OFFCURVE",
"4 789 OFFCURVE",
"4 778 CURVE SMOOTH",
"4 768 OFFCURVE",
"6 763 OFFCURVE",
"11 763 CURVE SMOOTH",
"193 763 LINE",
"-11 -297 LINE SMOOTH",
"-18 -336 OFFCURVE",
"-36 -375 OFFCURVE",
"-65 -412 CURVE SMOOTH",
"-94 -449 OFFCURVE",
"-121 -467 OFFCURVE",
"-146 -467 CURVE SMOOTH",
"-171 -467 OFFCURVE",
"-193 -450 OFFCURVE",
"-210 -417 CURVE SMOOTH",
"-227 -384 OFFCURVE",
"-256 -367 OFFCURVE",
"-298 -367 CURVE SMOOTH",
"-315 -367 OFFCURVE",
"-329 -375 OFFCURVE",
"-342 -390 CURVE SMOOTH",
"-356 -406 OFFCURVE",
"-361 -425 OFFCURVE",
"-361 -446 CURVE SMOOTH",
"-361 -467 OFFCURVE",
"-347 -490 OFFCURVE",
"-318 -514 CURVE SMOOTH",
"-289 -538 OFFCURVE",
"-253 -551 OFFCURVE",
"-210 -551 CURVE SMOOTH",
"-134 -551 OFFCURVE",
"-72 -529 OFFCURVE",
"-23 -486 CURVE SMOOTH",
"26 -443 OFFCURVE",
"63 -384 OFFCURVE",
"88 -312 CURVE SMOOTH",
"113 -241 OFFCURVE",
"133 -174 OFFCURVE",
"145 -111 CURVE SMOOTH",
"314 763 LINE",
"662 763 LINE",
"462 -268 LINE SMOOTH",
"455 -305 OFFCURVE",
"437 -343 OFFCURVE",
"408 -381 CURVE SMOOTH",
"379 -419 OFFCURVE",
"355 -438 OFFCURVE",
"335 -438 CURVE SMOOTH",
"304 -438 OFFCURVE",
"281 -421 OFFCURVE",
"264 -388 CURVE SMOOTH",
"247 -355 OFFCURVE",
"217 -338 OFFCURVE",
"175 -338 CURVE SMOOTH",
"158 -338 OFFCURVE",
"144 -346 OFFCURVE",
"131 -361 CURVE SMOOTH",
"118 -376 OFFCURVE",
"112 -395 OFFCURVE",
"112 -416 CURVE SMOOTH",
"112 -437 OFFCURVE",
"127 -460 OFFCURVE",
"156 -485 CURVE SMOOTH",
"185 -510 OFFCURVE",
"222 -522 OFFCURVE",
"266 -522 CURVE SMOOTH",
"322 -522 OFFCURVE",
"377 -504 OFFCURVE",
"432 -468 CURVE SMOOTH",
"487 -432 OFFCURVE",
"529 -376 OFFCURVE",
"556 -300 CURVE SMOOTH",
"583 -223 OFFCURVE",
"605 -151 OFFCURVE",
"618 -82 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"754 1169 OFFCURVE",
"715 1033 OFFCURVE",
"678 842 CURVE",
"329 842 LINE",
"353 965 OFFCURVE",
"373 1056 OFFCURVE",
"388 1116 CURVE SMOOTH",
"403 1176 OFFCURVE",
"433 1234 OFFCURVE",
"474 1291 CURVE SMOOTH",
"515 1348 OFFCURVE",
"571 1376 OFFCURVE",
"640 1376 CURVE SMOOTH",
"716 1376 OFFCURVE",
"767 1334 OFFCURVE",
"794 1251 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"54 -580 OFFCURVE",
"87 -398 OFFCURVE",
"133 -140 CURVE SMOOTH",
"338 1003 LINE SMOOTH",
"390 1292 OFFCURVE",
"491 1381 OFFCURVE",
"614 1381 CURVE SMOOTH",
"700 1381 OFFCURVE",
"778 1352 OFFCURVE",
"805 1215 CURVE",
"888 1270 LINE",
"888 1321 OFFCURVE",
"848 1442 OFFCURVE",
"666 1442 CURVE SMOOTH",
"469 1442 OFFCURVE",
"296 1341 OFFCURVE",
"233 989 CURVE SMOOTH",
"-4 -326 LINE SMOOTH",
"-21 -421 OFFCURVE",
"-59 -518 OFFCURVE",
"-114 -518 CURVE SMOOTH",
"-145 -518 OFFCURVE",
"-172 -498 OFFCURVE",
"-191 -471 CURVE SMOOTH",
"-211 -443 OFFCURVE",
"-242 -430 OFFCURVE",
"-282 -430 CURVE SMOOTH",
"-308 -430 OFFCURVE",
"-339 -452 OFFCURVE",
"-339 -488 CURVE SMOOTH",
"-339 -521 OFFCURVE",
"-313 -580 OFFCURVE",
"-175 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"538 -551 OFFCURVE",
"571 -369 OFFCURVE",
"617 -111 CURVE SMOOTH",
"821 1025 LINE SMOOTH",
"873 1314 OFFCURVE",
"974 1403 OFFCURVE",
"1097 1403 CURVE SMOOTH",
"1183 1403 OFFCURVE",
"1219 1355 OFFCURVE",
"1226 1274 CURVE SMOOTH",
"1230 1238 OFFCURVE",
"1260 1202 OFFCURVE",
"1301 1202 CURVE SMOOTH",
"1336 1202 OFFCURVE",
"1353 1226 OFFCURVE",
"1353 1275 CURVE SMOOTH",
"1353 1326 OFFCURVE",
"1331 1464 OFFCURVE",
"1149 1464 CURVE SMOOTH",
"952 1464 OFFCURVE",
"780 1363 OFFCURVE",
"716 1011 CURVE SMOOTH",
"480 -297 LINE SMOOTH",
"463 -392 OFFCURVE",
"425 -489 OFFCURVE",
"370 -489 CURVE SMOOTH",
"339 -489 OFFCURVE",
"312 -469 OFFCURVE",
"293 -442 CURVE SMOOTH",
"273 -414 OFFCURVE",
"242 -401 OFFCURVE",
"202 -401 CURVE SMOOTH",
"176 -401 OFFCURVE",
"145 -423 OFFCURVE",
"145 -459 CURVE SMOOTH",
"145 -492 OFFCURVE",
"171 -551 OFFCURVE",
"309 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1031 763 LINE",
"1053 842 LINE",
"509 842 LINE",
"489 763 LINE"
);
},
{
closed = 1;
nodes = (
"552 763 LINE",
"574 842 LINE",
"30 842 LINE",
"10 763 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
66 1 11 15 89 51 2 3 8 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 2 1 114 0 5 2 6 5 112 0 12 12 10 97 0 10 10 94 77 0 15 15 9 97 0 9 9 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 2 1 114 0 5 2 6 5 112 0 9 0 15 11 9 15 105 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 9 0 15 11 9 15 105 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 9 0 15 11 9 15 105 0 2 0 0 4 2 0 106 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 0 2 0 0 4 2 0 106 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 16 13 2 8 14 7 2 3 1 8 3 103 0 2 0 0 4 2 0 106 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 16 13 2 8 14 7 2 3 1 8 3 103 0 6 0 4 6 89 0 2 0 0 4 2 0 106 0 6 6 4 98 0 4 6 4 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
104 103 98 96 94 92 87 86 81 79 75 73 69 67 63 61 37 20 34 38 38 20 34 38 37 17 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 910;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1475 1354 OFFCURVE",
"1350 1464 OFFCURVE",
"1248 1464 QCURVE SMOOTH",
"1074 1464 OFFCURVE",
"955 1360 QCURVE",
"894 1442 OFFCURVE",
"769 1442 QCURVE SMOOTH",
"537 1442 OFFCURVE",
"406 1264 QCURVE SMOOTH",
"325 1151 OFFCURVE",
"259 844 QCURVE",
"87 844 LINE SMOOTH",
"72 844 OFFCURVE",
"40 737 OFFCURVE",
"54 737 QCURVE SMOOTH",
"236 737 LINE",
"37 -250 LINE SMOOTH",
"31 -283 OFFCURVE",
"15 -352 OFFCURVE",
"-6 -410 OFFCURVE",
"-44 -446 OFFCURVE",
"-71 -446 QCURVE SMOOTH",
"-81 -446 OFFCURVE",
"-98 -438 OFFCURVE",
"-110 -424 OFFCURVE",
"-122 -406 OFFCURVE",
"-131 -385 OFFCURVE",
"-137 -375 QCURVE",
"-166 -319 OFFCURVE",
"-223 -319 QCURVE SMOOTH",
"-257 -319 OFFCURVE",
"-315 -379 OFFCURVE",
"-315 -469 OFFCURVE",
"-212 -551 OFFCURVE",
"-124 -551 QCURVE SMOOTH",
"-20 -551 OFFCURVE",
"136 -442 OFFCURVE",
"171 -379 QCURVE",
"158 -428 OFFCURVE",
"261 -522 OFFCURVE",
"359 -522 QCURVE SMOOTH",
"507 -523 OFFCURVE",
"609 -412 QCURVE",
"642 -383 OFFCURVE",
"728 -174 OFFCURVE",
"748 -70 QCURVE SMOOTH",
"912 737 LINE",
"1158 737 LINE SMOOTH",
"1174 737 OFFCURVE",
"1207 844 OFFCURVE",
"1193 844 QCURVE SMOOTH",
"932 844 LINE",
"947 940 OFFCURVE",
"1010 1206 OFFCURVE",
"1055 1278 QCURVE SMOOTH",
"1123 1382 OFFCURVE",
"1197 1382 QCURVE SMOOTH",
"1229 1382 OFFCURVE",
"1268 1356 OFFCURVE",
"1277 1315 OFFCURVE",
"1281 1266 OFFCURVE",
"1279 1243 QCURVE",
"1279 1194 OFFCURVE",
"1342 1149 OFFCURVE",
"1420 1149 OFFCURVE",
"1475 1207 OFFCURVE",
"1475 1268 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"785 1100 OFFCURVE",
"736 844 QCURVE",
"455 844 LINE",
"470 918 OFFCURVE",
"496 1057 OFFCURVE",
"545 1208 OFFCURVE",
"576 1257 QCURVE SMOOTH",
"639 1360 OFFCURVE",
"715 1360 QCURVE SMOOTH",
"744 1360 OFFCURVE",
"787 1341 OFFCURVE",
"812 1311 OFFCURVE",
"830 1274 OFFCURVE",
"838 1235 OFFCURVE",
"844 1217 QCURVE"
);
},
{
closed = 1;
nodes = (
"521 -221 LINE SMOOTH",
"517 -244 OFFCURVE",
"506 -291 OFFCURVE",
"496 -334 OFFCURVE",
"478 -375 OFFCURVE",
"459 -403 OFFCURVE",
"428 -420 OFFCURVE",
"410 -420 QCURVE SMOOTH",
"382 -420 OFFCURVE",
"345 -346 QCURVE SMOOTH",
"318 -293 OFFCURVE",
"259 -293 QCURVE SMOOTH",
"224 -293 OFFCURVE",
"195 -322 QCURVE",
"242 -215 OFFCURVE",
"267 -96 QCURVE SMOOTH",
"435 737 LINE",
"713 737 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"153 -580 OFFCURVE",
"226 -390 OFFCURVE",
"274 -125 CURVE SMOOTH",
"477 995 LINE SMOOTH",
"509 1172 OFFCURVE",
"549 1360 OFFCURVE",
"677 1360 CURVE SMOOTH",
"781 1360 OFFCURVE",
"822 1311 OFFCURVE",
"855 1198 CURVE",
"990 1254 LINE",
"990 1382 OFFCURVE",
"866 1442 OFFCURVE",
"721 1442 CURVE SMOOTH",
"492 1442 OFFCURVE",
"318 1345 OFFCURVE",
"257 1007 CURVE SMOOTH",
"26 -279 LINE SMOOTH",
"6 -393 OFFCURVE",
"-9 -475 OFFCURVE",
"-66 -475 CURVE SMOOTH",
"-87 -475 OFFCURVE",
"-110 -454 OFFCURVE",
"-134 -412 CURVE SMOOTH",
"-158 -369 OFFCURVE",
"-190 -348 OFFCURVE",
"-229 -348 CURVE SMOOTH",
"-271 -348 OFFCURVE",
"-312 -388 OFFCURVE",
"-312 -443 CURVE SMOOTH",
"-312 -467 OFFCURVE",
"-282 -580 OFFCURVE",
"-110 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"661 -551 OFFCURVE",
"734 -361 OFFCURVE",
"782 -96 CURVE SMOOTH",
"983 1017 LINE SMOOTH",
"1015 1194 OFFCURVE",
"1055 1382 OFFCURVE",
"1183 1382 CURVE SMOOTH",
"1237 1382 OFFCURVE",
"1266 1347 OFFCURVE",
"1273 1276 CURVE SMOOTH",
"1283 1169 OFFCURVE",
"1330 1149 OFFCURVE",
"1387 1149 CURVE SMOOTH",
"1444 1149 OFFCURVE",
"1472 1181 OFFCURVE",
"1472 1245 CURVE SMOOTH",
"1472 1373 OFFCURVE",
"1372 1464 OFFCURVE",
"1227 1464 CURVE SMOOTH",
"998 1464 OFFCURVE",
"824 1367 OFFCURVE",
"763 1029 CURVE SMOOTH",
"534 -250 LINE SMOOTH",
"514 -364 OFFCURVE",
"499 -446 OFFCURVE",
"442 -446 CURVE SMOOTH",
"421 -446 OFFCURVE",
"398 -425 OFFCURVE",
"374 -383 CURVE SMOOTH",
"350 -340 OFFCURVE",
"318 -319 OFFCURVE",
"279 -319 CURVE SMOOTH",
"237 -319 OFFCURVE",
"196 -359 OFFCURVE",
"196 -414 CURVE SMOOTH",
"196 -438 OFFCURVE",
"226 -551 OFFCURVE",
"398 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1158 737 LINE",
"1183 844 LINE",
"561 844 LINE",
"537 737 LINE"
);
},
{
closed = 1;
nodes = (
"656 737 LINE",
"681 844 LINE",
"59 844 LINE",
"35 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
5 1 0 12 86 29 2 16 6 2 76 62 1 12 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 16 15 114 0 6 16 7 6 112 0 1 1 11 97 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 1 1 11 97 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 10 0 12 0 10 12 105 0 1 1 11 97 0 11 11 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 10 0 12 0 10 12 105 0 16 0 4 5 16 4 106 0 1 1 11 97 0 11 11 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 11 0 1 12 11 1 105 0 10 0 12 0 10 12 105 0 16 0 4 5 16 4 106 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 11 0 1 12 11 1 105 0 10 0 12 0 10 12 105 13 9 2 2 14 8 2 3 15 2 3 103 0 7 4 5 7 89 0 16 0 4 5 16 4 106 0 7 7 5 98 0 5 7 5 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
92 91 89 87 83 82 80 79 74 72 65 63 61 59 56 54 21 38 35 36 37 34 20 38 18 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1052;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"813 763 LINE",
"1084 763 LINE SMOOTH",
"1091 763 OFFCURVE",
"1099 771 OFFCURVE",
"1108 788 CURVE",
"1116 805 OFFCURVE",
"1120 819 OFFCURVE",
"1120 828 CURVE SMOOTH",
"1120 837 OFFCURVE",
"1118 842 OFFCURVE",
"1113 842 CURVE SMOOTH",
"828 842 LINE",
"853 973 OFFCURVE",
"873 1066 OFFCURVE",
"888 1121 CURVE SMOOTH",
"903 1176 OFFCURVE",
"929 1236 OFFCURVE",
"968 1300 CURVE SMOOTH",
"1007 1363 OFFCURVE",
"1060 1395 OFFCURVE",
"1128 1395 CURVE SMOOTH",
"1197 1395 OFFCURVE",
"1231 1355 OFFCURVE",
"1231 1274 CURVE SMOOTH",
"1231 1250 OFFCURVE",
"1239 1232 OFFCURVE",
"1256 1220 CURVE SMOOTH",
"1273 1208 OFFCURVE",
"1290 1202 OFFCURVE",
"1307 1202 CURVE SMOOTH",
"1352 1202 OFFCURVE",
"1375 1234 OFFCURVE",
"1375 1298 CURVE SMOOTH",
"1375 1346 OFFCURVE",
"1357 1386 OFFCURVE",
"1321 1417 CURVE SMOOTH",
"1285 1448 OFFCURVE",
"1239 1464 OFFCURVE",
"1184 1464 CURVE SMOOTH",
"1067 1464 OFFCURVE",
"971 1425 OFFCURVE",
"896 1346 CURVE",
"881 1375 OFFCURVE",
"856 1399 OFFCURVE",
"821 1416 CURVE SMOOTH",
"786 1433 OFFCURVE",
"751 1442 OFFCURVE",
"715 1442 CURVE SMOOTH",
"611 1442 OFFCURVE",
"527 1415 OFFCURVE",
"462 1360 CURVE SMOOTH",
"397 1305 OFFCURVE",
"349 1235 OFFCURVE",
"318 1148 CURVE SMOOTH",
"287 1062 OFFCURVE",
"262 960 OFFCURVE",
"239 842 CURVE",
"68 842 LINE SMOOTH",
"60 842 OFFCURVE",
"52 834 OFFCURVE",
"45 818 CURVE SMOOTH",
"38 802 OFFCURVE",
"34 789 OFFCURVE",
"34 778 CURVE SMOOTH",
"34 768 OFFCURVE",
"36 763 OFFCURVE",
"41 763 CURVE SMOOTH",
"223 763 LINE",
"19 -297 LINE SMOOTH",
"12 -336 OFFCURVE",
"-6 -375 OFFCURVE",
"-35 -412 CURVE SMOOTH",
"-64 -449 OFFCURVE",
"-91 -467 OFFCURVE",
"-116 -467 CURVE SMOOTH",
"-141 -467 OFFCURVE",
"-163 -450 OFFCURVE",
"-180 -417 CURVE SMOOTH",
"-197 -384 OFFCURVE",
"-226 -367 OFFCURVE",
"-268 -367 CURVE SMOOTH",
"-285 -367 OFFCURVE",
"-299 -375 OFFCURVE",
"-312 -390 CURVE SMOOTH",
"-326 -406 OFFCURVE",
"-331 -425 OFFCURVE",
"-331 -446 CURVE SMOOTH",
"-331 -467 OFFCURVE",
"-317 -490 OFFCURVE",
"-288 -514 CURVE SMOOTH",
"-259 -538 OFFCURVE",
"-223 -551 OFFCURVE",
"-180 -551 CURVE SMOOTH",
"-104 -551 OFFCURVE",
"-42 -529 OFFCURVE",
"7 -486 CURVE SMOOTH",
"56 -443 OFFCURVE",
"93 -384 OFFCURVE",
"118 -312 CURVE SMOOTH",
"143 -241 OFFCURVE",
"163 -174 OFFCURVE",
"175 -111 CURVE SMOOTH",
"344 763 LINE",
"692 763 LINE",
"492 -268 LINE SMOOTH",
"485 -305 OFFCURVE",
"467 -343 OFFCURVE",
"438 -381 CURVE SMOOTH",
"409 -419 OFFCURVE",
"385 -438 OFFCURVE",
"365 -438 CURVE SMOOTH",
"334 -438 OFFCURVE",
"311 -421 OFFCURVE",
"294 -388 CURVE SMOOTH",
"277 -355 OFFCURVE",
"247 -338 OFFCURVE",
"205 -338 CURVE SMOOTH",
"188 -338 OFFCURVE",
"174 -346 OFFCURVE",
"161 -361 CURVE SMOOTH",
"148 -376 OFFCURVE",
"142 -395 OFFCURVE",
"142 -416 CURVE SMOOTH",
"142 -437 OFFCURVE",
"157 -460 OFFCURVE",
"186 -485 CURVE SMOOTH",
"215 -510 OFFCURVE",
"252 -522 OFFCURVE",
"296 -522 CURVE SMOOTH",
"352 -522 OFFCURVE",
"407 -504 OFFCURVE",
"462 -468 CURVE SMOOTH",
"517 -432 OFFCURVE",
"559 -376 OFFCURVE",
"586 -300 CURVE SMOOTH",
"613 -223 OFFCURVE",
"635 -151 OFFCURVE",
"648 -82 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"784 1169 OFFCURVE",
"745 1033 OFFCURVE",
"708 842 CURVE",
"359 842 LINE",
"383 965 OFFCURVE",
"403 1056 OFFCURVE",
"418 1116 CURVE SMOOTH",
"433 1176 OFFCURVE",
"463 1234 OFFCURVE",
"504 1291 CURVE SMOOTH",
"545 1348 OFFCURVE",
"601 1376 OFFCURVE",
"670 1376 CURVE SMOOTH",
"746 1376 OFFCURVE",
"797 1334 OFFCURVE",
"824 1251 CURVE"
);
}
);
};
layerId = "82C1E60A-56E3-49DC-83CB-949571005A7B";
name = "Aug 15 18, 12:05";
paths = (
{
closed = 1;
nodes = (
"568 -551 OFFCURVE",
"601 -369 OFFCURVE",
"647 -111 CURVE SMOOTH",
"851 1025 LINE SMOOTH",
"903 1314 OFFCURVE",
"1004 1403 OFFCURVE",
"1127 1403 CURVE SMOOTH",
"1213 1403 OFFCURVE",
"1249 1355 OFFCURVE",
"1256 1274 CURVE SMOOTH",
"1260 1238 OFFCURVE",
"1290 1202 OFFCURVE",
"1331 1202 CURVE SMOOTH",
"1366 1202 OFFCURVE",
"1383 1226 OFFCURVE",
"1383 1275 CURVE SMOOTH",
"1383 1326 OFFCURVE",
"1361 1464 OFFCURVE",
"1179 1464 CURVE SMOOTH",
"982 1464 OFFCURVE",
"810 1363 OFFCURVE",
"746 1011 CURVE SMOOTH",
"510 -297 LINE SMOOTH",
"493 -392 OFFCURVE",
"455 -489 OFFCURVE",
"400 -489 CURVE SMOOTH",
"369 -489 OFFCURVE",
"342 -469 OFFCURVE",
"323 -442 CURVE SMOOTH",
"303 -414 OFFCURVE",
"272 -401 OFFCURVE",
"232 -401 CURVE SMOOTH",
"206 -401 OFFCURVE",
"175 -423 OFFCURVE",
"175 -459 CURVE SMOOTH",
"175 -492 OFFCURVE",
"201 -551 OFFCURVE",
"339 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1061 763 LINE",
"1083 842 LINE",
"539 842 LINE",
"519 763 LINE"
);
},
{
closed = 1;
nodes = (
"582 763 LINE",
"604 842 LINE",
"60 842 LINE",
"40 763 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 11 values pushed */
66 1 11 15 89 51 2 3 8 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 2 1 114 0 5 2 6 5 112 0 12 12 10 97 0 10 10 94 77 0 15 15 9 97 0 9 9 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 2 1 114 0 5 2 6 5 112 0 9 0 15 11 9 15 105 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 9 0 15 11 9 15 105 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 2 2 0 98 0 0 0 97 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 9 0 15 11 9 15 105 0 2 0 0 4 2 0 106 0 12 12 10 97 0 10 10 94 77 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 0 2 0 0 4 2 0 106 14 7 2 3 3 8 95 16 13 2 8 8 95 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 16 13 2 8 14 7 2 3 1 8 3 103 0 2 0 0 4 2 0 106 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
0 11 15 8 15 11 8 128 0 1 3 5 3 1 5 128 0 5 2 3 5 2 126 0 10 0 12 15 10 12 105 0 9 0 15 11 9 15 105 16 13 2 8 14 7 2 3 1 8 3 103 0 6 0 4 6 89 0 2 0 0 4 2 0 106 0 6 6 4 98 0 4 6 4 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
104 103 98 96 94 92 87 86 81 79 75 73 69 67 63 61 37 20 34 38 38 20 34 38 37 17 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 958;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"1501 1354 OFFCURVE",
"1376 1464 OFFCURVE",
"1274 1464 QCURVE SMOOTH",
"1100 1464 OFFCURVE",
"981 1360 QCURVE",
"920 1442 OFFCURVE",
"795 1442 QCURVE SMOOTH",
"563 1442 OFFCURVE",
"432 1264 QCURVE SMOOTH",
"351 1151 OFFCURVE",
"285 844 QCURVE",
"113 844 LINE SMOOTH",
"98 844 OFFCURVE",
"66 737 OFFCURVE",
"80 737 QCURVE SMOOTH",
"262 737 LINE",
"63 -250 LINE SMOOTH",
"57 -283 OFFCURVE",
"41 -352 OFFCURVE",
"20 -410 OFFCURVE",
"-18 -446 OFFCURVE",
"-45 -446 QCURVE SMOOTH",
"-55 -446 OFFCURVE",
"-72 -438 OFFCURVE",
"-84 -424 OFFCURVE",
"-96 -406 OFFCURVE",
"-105 -385 OFFCURVE",
"-111 -375 QCURVE",
"-140 -319 OFFCURVE",
"-197 -319 QCURVE SMOOTH",
"-231 -319 OFFCURVE",
"-289 -379 OFFCURVE",
"-289 -469 OFFCURVE",
"-186 -551 OFFCURVE",
"-98 -551 QCURVE SMOOTH",
"6 -551 OFFCURVE",
"162 -442 OFFCURVE",
"197 -379 QCURVE",
"184 -428 OFFCURVE",
"287 -522 OFFCURVE",
"385 -522 QCURVE SMOOTH",
"533 -523 OFFCURVE",
"635 -412 QCURVE",
"668 -383 OFFCURVE",
"754 -174 OFFCURVE",
"774 -70 QCURVE SMOOTH",
"938 737 LINE",
"1184 737 LINE SMOOTH",
"1200 737 OFFCURVE",
"1233 844 OFFCURVE",
"1219 844 QCURVE SMOOTH",
"958 844 LINE",
"973 940 OFFCURVE",
"1036 1206 OFFCURVE",
"1081 1278 QCURVE SMOOTH",
"1149 1382 OFFCURVE",
"1223 1382 QCURVE SMOOTH",
"1255 1382 OFFCURVE",
"1294 1356 OFFCURVE",
"1303 1315 OFFCURVE",
"1307 1266 OFFCURVE",
"1305 1243 QCURVE",
"1305 1194 OFFCURVE",
"1368 1149 OFFCURVE",
"1446 1149 OFFCURVE",
"1501 1207 OFFCURVE",
"1501 1268 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"811 1100 OFFCURVE",
"762 844 QCURVE",
"481 844 LINE",
"496 918 OFFCURVE",
"522 1057 OFFCURVE",
"571 1208 OFFCURVE",
"602 1257 QCURVE SMOOTH",
"665 1360 OFFCURVE",
"741 1360 QCURVE SMOOTH",
"770 1360 OFFCURVE",
"813 1341 OFFCURVE",
"838 1311 OFFCURVE",
"856 1274 OFFCURVE",
"864 1235 OFFCURVE",
"870 1217 QCURVE"
);
},
{
closed = 1;
nodes = (
"547 -221 LINE SMOOTH",
"543 -244 OFFCURVE",
"532 -291 OFFCURVE",
"522 -334 OFFCURVE",
"504 -375 OFFCURVE",
"485 -403 OFFCURVE",
"454 -420 OFFCURVE",
"436 -420 QCURVE SMOOTH",
"408 -420 OFFCURVE",
"371 -346 QCURVE SMOOTH",
"344 -293 OFFCURVE",
"285 -293 QCURVE SMOOTH",
"250 -293 OFFCURVE",
"221 -322 QCURVE",
"268 -215 OFFCURVE",
"293 -96 QCURVE SMOOTH",
"461 737 LINE",
"739 737 LINE"
);
}
);
};
layerId = "A4C9BEFB-598B-442B-86B5-F11D5BF16339";
name = "Aug 15 18, 12:08";
paths = (
{
closed = 1;
nodes = (
"687 -551 OFFCURVE",
"760 -361 OFFCURVE",
"808 -96 CURVE SMOOTH",
"1009 1017 LINE SMOOTH",
"1041 1194 OFFCURVE",
"1081 1382 OFFCURVE",
"1209 1382 CURVE SMOOTH",
"1263 1382 OFFCURVE",
"1292 1347 OFFCURVE",
"1299 1276 CURVE SMOOTH",
"1309 1169 OFFCURVE",
"1356 1149 OFFCURVE",
"1413 1149 CURVE SMOOTH",
"1470 1149 OFFCURVE",
"1498 1181 OFFCURVE",
"1498 1245 CURVE SMOOTH",
"1498 1373 OFFCURVE",
"1398 1464 OFFCURVE",
"1253 1464 CURVE SMOOTH",
"1024 1464 OFFCURVE",
"850 1367 OFFCURVE",
"789 1029 CURVE SMOOTH",
"560 -250 LINE SMOOTH",
"540 -364 OFFCURVE",
"525 -446 OFFCURVE",
"468 -446 CURVE SMOOTH",
"447 -446 OFFCURVE",
"424 -425 OFFCURVE",
"400 -383 CURVE SMOOTH",
"376 -340 OFFCURVE",
"344 -319 OFFCURVE",
"305 -319 CURVE SMOOTH",
"263 -319 OFFCURVE",
"222 -359 OFFCURVE",
"222 -414 CURVE SMOOTH",
"222 -438 OFFCURVE",
"252 -551 OFFCURVE",
"424 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1184 737 LINE",
"1209 844 LINE",
"587 844 LINE",
"563 737 LINE"
);
},
{
closed = 1;
nodes = (
"682 737 LINE",
"707 844 LINE",
"85 844 LINE",
"61 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
5 1 0 12 86 29 2 16 6 2 76 62 1 12 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 16 15 114 0 6 16 7 6 112 0 1 1 11 97 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 1 1 11 97 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 10 0 12 0 10 12 105 0 1 1 11 97 0 11 11 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 16 16 4 98 0 4 4 36 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 10 0 12 0 10 12 105 0 16 0 4 5 16 4 106 0 1 1 11 97 0 11 11 33 77 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 11 0 1 12 11 1 105 0 10 0 12 0 10 12 105 0 16 0 4 5 16 4 106 14 8 2 3 3 2 95 13 9 2 2 2 34 77 0 7 7 5 98 0 5 5 36 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
0 0 12 2 12 0 2 128 0 15 3 6 3 15 6 128 0 6 16 3 6 16 126 0 11 0 1 12 11 1 105 0 10 0 12 0 10 12 105 13 9 2 2 14 8 2 3 15 2 3 103 0 7 4 5 7 89 0 16 0 4 5 16 4 106 0 7 7 5 98 0 5 7 5 82 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
92 91 89 87 83 82 80 79 74 72 65 63 61 59 56 54 21 38 35 36 37 34 20 38 18 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1244;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = uniFB00;
rightKerningGroup = f;
rightMetricsKey = "=f";
unicode = FB00;
},
{
glyphname = uniFB01;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"637 159 LINE",
"864 1434 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"669 -27 OFFCURVE",
"813 111 OFFCURVE",
"836 158 CURVE",
"794 195 LINE",
"730 133 OFFCURVE",
"690 102 OFFCURVE",
"671 102 CURVE SMOOTH",
"632 102 OFFCURVE",
"634 150 OFFCURVE",
"644 203 CURVE SMOOTH",
"719 619 LINE SMOOTH",
"738 726 OFFCURVE",
"747 775 OFFCURVE",
"764 858 CURVE",
"752 869 LINE",
"688 850 OFFCURVE",
"610 842 OFFCURVE",
"570 842 CURVE",
"549 763 LINE",
"630 763 OFFCURVE",
"631 694 OFFCURVE",
"624 655 CURVE SMOOTH",
"531 137 LINE SMOOTH",
"527 115 OFFCURVE",
"524 90 OFFCURVE",
"524 67 CURVE SMOOTH",
"524 17 OFFCURVE",
"539 -27 OFFCURVE",
"574 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"93 -369 OFFCURVE",
"139 -111 CURVE SMOOTH",
"343 1025 LINE SMOOTH",
"395 1314 OFFCURVE",
"476 1403 OFFCURVE",
"589 1403 CURVE SMOOTH",
"665 1403 OFFCURVE",
"701 1355 OFFCURVE",
"708 1274 CURVE SMOOTH",
"712 1226 OFFCURVE",
"737 1202 OFFCURVE",
"778 1202 CURVE SMOOTH",
"813 1202 OFFCURVE",
"835 1226 OFFCURVE",
"835 1275 CURVE SMOOTH",
"835 1326 OFFCURVE",
"813 1464 OFFCURVE",
"641 1464 CURVE SMOOTH",
"454 1464 OFFCURVE",
"302 1363 OFFCURVE",
"238 1011 CURVE SMOOTH",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -459 CURVE SMOOTH",
"-333 -492 OFFCURVE",
"-307 -551 OFFCURVE",
"-169 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"653 763 LINE",
"675 842 LINE",
"31 842 LINE",
"11 763 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
68 1 11 1 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 8 9 6 9 8 6 128 0 11 1 0 1 11 0 128 0 3 0 4 4 3 114 0 9 9 7 97 0 7 7 94 77 5 1 1 1 6 95 10 1 6 6 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
0 8 9 6 9 8 6 128 0 11 1 0 1 11 0 128 0 3 0 4 0 3 4 128 0 9 9 7 97 0 7 7 94 77 5 1 1 1 6 95 10 1 6 6 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 8 9 6 9 8 6 128 0 11 1 0 1 11 0 128 0 3 0 4 0 3 4 128 10 1 6 5 1 1 11 6 1 103 0 9 9 7 97 0 7 7 94 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 8 9 6 9 8 6 128 0 11 1 0 1 11 0 128 0 3 0 4 0 3 4 128 0 7 0 9 8 7 9 105 10 1 6 5 1 1 11 6 1 103 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
0 8 9 6 9 8 6 128 0 11 1 0 1 11 0 128 0 3 0 4 0 3 4 128 0 7 0 9 8 7 9 105 10 1 6 5 1 1 11 6 1 103 0 4 0 2 4 2 102 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
67 66 56 54 51 50 35 35 35 19 33 36 36 39 34 12 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 885;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"999 1354 OFFCURVE",
"881 1464 OFFCURVE",
"772 1464 QCURVE SMOOTH",
"542 1464 OFFCURVE",
"411 1286 QCURVE SMOOTH",
"358 1214 OFFCURVE",
"293 1005 OFFCURVE",
"258 831 QCURVE",
"82 831 LINE SMOOTH",
"67 831 OFFCURVE",
"35 725 OFFCURVE",
"49 725 QCURVE SMOOTH",
"235 725 LINE",
"39 -250 LINE SMOOTH",
"32 -283 OFFCURVE",
"16 -352 OFFCURVE",
"-4 -410 OFFCURVE",
"-43 -446 OFFCURVE",
"-70 -446 QCURVE SMOOTH",
"-101 -447 OFFCURVE",
"-136 -375 QCURVE SMOOTH",
"-163 -319 OFFCURVE",
"-222 -319 QCURVE SMOOTH",
"-256 -319 OFFCURVE",
"-314 -379 OFFCURVE",
"-314 -469 OFFCURVE",
"-211 -551 OFFCURVE",
"-123 -551 QCURVE SMOOTH",
"10 -551 OFFCURVE",
"129 -440 QCURVE SMOOTH",
"161 -410 OFFCURVE",
"248 -200 OFFCURVE",
"268 -96 QCURVE SMOOTH",
"434 725 LINE",
"704 725 LINE SMOOTH",
"731 725 OFFCURVE",
"751 684 OFFCURVE",
"741 653 QCURVE SMOOTH",
"600 168 LINE",
"577 109 OFFCURVE",
"619 -27 OFFCURVE",
"680 -27 QCURVE SMOOTH",
"794 -27 OFFCURVE",
"968 174 QCURVE",
"979 184 OFFCURVE",
"923 235 OFFCURVE",
"913 221 QCURVE",
"846 141 OFFCURVE",
"815 141 QCURVE SMOOTH",
"792 141 OFFCURVE",
"802 180 QCURVE SMOOTH",
"983 813 LINE SMOOTH",
"995 852 OFFCURVE",
"964 852 QCURVE SMOOTH",
"950 852 OFFCURVE",
"855 831 OFFCURVE",
"802 831 QCURVE SMOOTH",
"454 831 LINE",
"473 922 OFFCURVE",
"499 1075 OFFCURVE",
"548 1227 OFFCURVE",
"581 1278 QCURVE SMOOTH",
"651 1382 OFFCURVE",
"721 1382 QCURVE SMOOTH",
"768 1382 OFFCURVE",
"807 1337 OFFCURVE",
"800 1274 OFFCURVE",
"802 1243 QCURVE",
"802 1194 OFFCURVE",
"868 1149 OFFCURVE",
"905 1149 QCURVE SMOOTH",
"999 1149 OFFCURVE",
"999 1268 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"797 -27 OFFCURVE",
"911 67 OFFCURVE",
"985 174 CURVE",
"925 221 LINE",
"888 168 OFFCURVE",
"861 142 OFFCURVE",
"844 142 CURVE SMOOTH",
"817 142 OFFCURVE",
"814 155 OFFCURVE",
"819 180 CURVE SMOOTH",
"926 678 LINE SMOOTH",
"937 729 OFFCURVE",
"952 777 OFFCURVE",
"968 826 CURVE",
"939 865 LINE",
"894 852 OFFCURVE",
"827 844 OFFCURVE",
"746 844 CURVE",
"688 737 LINE",
"727 737 OFFCURVE",
"733 699 OFFCURVE",
"726 665 CURVE SMOOTH",
"617 168 LINE SMOOTH",
"614 155 OFFCURVE",
"613 140 OFFCURVE",
"613 122 CURVE SMOOTH",
"613 34 OFFCURVE",
"637 -27 OFFCURVE",
"724 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"552 1382 OFFCURVE",
"680 1382 CURVE SMOOTH",
"734 1382 OFFCURVE",
"763 1347 OFFCURVE",
"770 1276 CURVE SMOOTH",
"780 1169 OFFCURVE",
"827 1149 OFFCURVE",
"884 1149 CURVE SMOOTH",
"941 1149 OFFCURVE",
"969 1181 OFFCURVE",
"969 1245 CURVE SMOOTH",
"969 1373 OFFCURVE",
"869 1464 OFFCURVE",
"724 1464 CURVE SMOOTH",
"495 1464 OFFCURVE",
"321 1367 OFFCURVE",
"260 1029 CURVE SMOOTH",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"835 737 LINE",
"860 844 LINE",
"58 844 LINE",
"34 737 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
0 0 1 2 1 0 2 128 0 4 6 5 6 4 5 128 0 8 5 9 9 8 114 0 1 1 12 97 0 12 12 33 77 10 1 6 6 2 95 11 3 2 2 2 34 77 0 5 5 32 77 0 9 9 7 98 0 7 7 36 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 0 1 3 1 0 3 128 0 4 6 5 6 4 5 128 0 8 5 9 5 8 9 128 0 1 1 12 97 0 12 12 33 77 0 3 3 34 77 10 1 6 6 2 95 11 1 2 2 34 77 0 5 5 32 77 0 9 9 7 98 0 7 7 36 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 0 1 3 1 0 3 128 0 4 6 5 6 4 5 128 0 8 5 9 5 8 9 128 0 12 0 1 0 12 1 105 0 3 3 34 77 10 1 6 6 2 95 11 1 2 2 34 77 0 5 5 32 77 0 9 9 7 98 0 7 7 36 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 0 1 3 1 0 3 128 0 4 6 5 6 4 5 128 0 8 5 9 5 8 9 128 0 12 0 1 0 12 1 105 11 1 2 10 1 6 4 2 6 103 0 3 3 34 77 0 5 5 32 77 0 9 9 7 98 0 7 7 36 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 0 1 3 1 0 3 128 0 4 6 5 6 4 5 128 0 8 5 9 5 8 9 128 0 12 0 1 0 12 1 105 11 1 2 10 1 6 4 2 6 103 0 9 0 7 9 7 102 0 3 3 34 77 0 5 5 32 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 20 values pushed */
71 69 65 63 61 60 55 53 35 37 37 37 35 33 37 37 33 13 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1011;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = uniFB01;
rightMetricsKey = "=i";
unicode = FB01;
},
{
glyphname = uniFB02;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"860 179 OFFCURVE",
"824 224 OFFCURVE",
"811 207 CURVE",
"756 144 OFFCURVE",
"713 113 OFFCURVE",
"680 113 CURVE",
"661 112 OFFCURVE",
"652 123 OFFCURVE",
"652 146 CURVE SMOOTH",
"652 167 OFFCURVE",
"654 188 OFFCURVE",
"659 209 CURVE SMOOTH",
"948 1476 LINE",
"948 1519 OFFCURVE",
"862 1458 OFFCURVE",
"811 1446 CURVE",
"783 1458 OFFCURVE",
"751 1464 OFFCURVE",
"714 1464 CURVE SMOOTH",
"498 1464 OFFCURVE",
"361 1322 OFFCURVE",
"303 1110 CURVE SMOOTH",
"274 1004 OFFCURVE",
"252 915 OFFCURVE",
"238 842 CURVE",
"65 842 LINE SMOOTH",
"43 842 OFFCURVE",
"19 763 OFFCURVE",
"38 763 CURVE SMOOTH",
"223 763 LINE",
"18 -297 LINE SMOOTH",
"2 -381 OFFCURVE",
"-68 -467 OFFCURVE",
"-117 -467 CURVE SMOOTH",
"-142 -467 OFFCURVE",
"-164 -450 OFFCURVE",
"-181 -417 CURVE SMOOTH",
"-198 -384 OFFCURVE",
"-228 -367 OFFCURVE",
"-269 -367 CURVE SMOOTH",
"-302 -367 OFFCURVE",
"-332 -403 OFFCURVE",
"-332 -446 CURVE SMOOTH",
"-332 -489 OFFCURVE",
"-266 -551 OFFCURVE",
"-181 -551 CURVE SMOOTH",
"-60 -551 OFFCURVE",
"60 -475 OFFCURVE",
"116 -316 CURVE SMOOTH",
"143 -237 OFFCURVE",
"163 -168 OFFCURVE",
"174 -111 CURVE SMOOTH",
"343 763 LINE",
"665 763 LINE",
"522 135 LINE SMOOTH",
"517 114 OFFCURVE",
"515 93 OFFCURVE",
"515 72 CURVE SMOOTH",
"515 6 OFFCURVE",
"535 -27 OFFCURVE",
"575 -27 CURVE SMOOTH",
"641 -27 OFFCURVE",
"733 39 OFFCURVE",
"852 170 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"683 842 LINE",
"358 842 LINE",
"405 1082 OFFCURVE",
"419 1175 OFFCURVE",
"500 1301 CURVE SMOOTH",
"541 1364 OFFCURVE",
"593 1395 OFFCURVE",
"657 1395 CURVE SMOOTH",
"735 1395 OFFCURVE",
"774 1352 OFFCURVE",
"774 1267 CURVE SMOOTH",
"774 1247 OFFCURVE",
"771 1225 OFFCURVE",
"766 1200 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-333 -471 OFFCURVE",
"-310 -551 OFFCURVE",
"-164 -551 CURVE SMOOTH",
"60 -551 OFFCURVE",
"92 -370 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"618 763 LINE",
"504 135 LINE SMOOTH",
"501 120 OFFCURVE",
"500 104 OFFCURVE",
"500 87 CURVE SMOOTH",
"500 31 OFFCURVE",
"520 -27 OFFCURVE",
"564 -27 CURVE SMOOTH",
"635 -27 OFFCURVE",
"714 39 OFFCURVE",
"816 170 CURVE",
"772 207 LINE",
"722 144 OFFCURVE",
"681 113 OFFCURVE",
"646 113 CURVE SMOOTH",
"616 113 OFFCURVE",
"612 169 OFFCURVE",
"619 209 CURVE SMOOTH",
"847 1470 LINE",
"834 1484 LINE",
"773 1456 OFFCURVE",
"716 1438 OFFCURVE",
"661 1432 CURVE",
"633 1451 OFFCURVE",
"594 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"396 1464 OFFCURVE",
"295 1327 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"31 842 LINE",
"11 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -458 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1402 OFFCURVE",
"519 1403 CURVE SMOOTH",
"639 1405 OFFCURVE",
"723 1344 OFFCURVE",
"696 1197 CURVE SMOOTH",
"632 842 LINE",
"310 842 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
38 1 9 7 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 3 0 4 4 3 114 0 9 9 7 97 0 7 7 94 77 5 1 1 1 6 95 10 1 6 6 95 77 0 8 8 0 97 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 3 0 4 0 3 4 128 0 9 9 7 97 0 7 7 94 77 5 1 1 1 6 95 10 1 6 6 95 77 0 8 8 0 97 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 3 0 4 0 3 4 128 0 7 0 9 6 7 9 105 5 1 1 1 6 95 10 1 6 6 95 77 0 8 8 0 97 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 3 0 4 0 3 4 128 0 7 0 9 6 7 9 105 10 1 6 5 1 1 8 6 1 103 0 8 8 0 97 0 0 0 93 77 0 4 4 2 98 0 2 2 97 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 3 0 4 0 3 4 128 0 7 0 9 6 7 9 105 10 1 6 5 1 1 8 6 1 103 0 4 0 2 4 2 102 0 8 8 0 97 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 16 values pushed */
61 60 57 55 41 35 35 19 33 36 36 20 33 11 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 865;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1107 1487 OFFCURVE",
"1087 1487 QCURVE SMOOTH",
"1074 1487 OFFCURVE",
"951 1450 OFFCURVE",
"904 1442 QCURVE",
"858 1464 OFFCURVE",
"788 1464 QCURVE SMOOTH",
"558 1464 OFFCURVE",
"427 1286 QCURVE SMOOTH",
"342 1170 OFFCURVE",
"276 844 QCURVE",
"104 844 LINE SMOOTH",
"89 844 OFFCURVE",
"57 737 OFFCURVE",
"71 737 QCURVE SMOOTH",
"253 737 LINE",
"54 -250 LINE SMOOTH",
"48 -283 OFFCURVE",
"32 -352 OFFCURVE",
"11 -410 OFFCURVE",
"-27 -446 OFFCURVE",
"-54 -446 QCURVE SMOOTH",
"-64 -446 OFFCURVE",
"-81 -438 OFFCURVE",
"-93 -424 OFFCURVE",
"-105 -406 OFFCURVE",
"-114 -385 OFFCURVE",
"-120 -375 QCURVE",
"-149 -319 OFFCURVE",
"-206 -319 QCURVE SMOOTH",
"-240 -319 OFFCURVE",
"-298 -379 OFFCURVE",
"-298 -469 OFFCURVE",
"-195 -551 OFFCURVE",
"-107 -551 QCURVE SMOOTH",
"24 -551 OFFCURVE",
"145 -440 QCURVE SMOOTH",
"177 -410 OFFCURVE",
"264 -200 OFFCURVE",
"284 -96 QCURVE SMOOTH",
"452 737 LINE",
"739 737 LINE",
"601 156 LINE SMOOTH",
"585 88 OFFCURVE",
"628 -29 OFFCURVE",
"687 -29 QCURVE SMOOTH",
"808 -29 OFFCURVE",
"968 182 QCURVE",
"978 193 OFFCURVE",
"917 241 OFFCURVE",
"909 227 QCURVE",
"847 141 OFFCURVE",
"816 141 QCURVE SMOOTH",
"790 141 OFFCURVE",
"800 180 QCURVE SMOOTH",
"1099 1448 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"763 844 LINE",
"472 844 LINE",
"489 924 OFFCURVE",
"515 1071 OFFCURVE",
"564 1227 OFFCURVE",
"597 1278 QCURVE SMOOTH",
"664 1382 OFFCURVE",
"736 1382 QCURVE SMOOTH",
"814 1382 OFFCURVE",
"859 1260 OFFCURVE",
"841 1180 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH",
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"429 737 LINE",
"715 737 LINE",
"610 156 LINE SMOOTH",
"607 142 OFFCURVE",
"606 128 OFFCURVE",
"606 114 CURVE SMOOTH",
"606 42 OFFCURVE",
"641 -27 OFFCURVE",
"714 -27 CURVE SMOOTH",
"796 -27 OFFCURVE",
"884 43 OFFCURVE",
"977 182 CURVE",
"915 227 LINE",
"882 170 OFFCURVE",
"853 141 OFFCURVE",
"830 141 CURVE SMOOTH",
"804 141 OFFCURVE",
"806 164 OFFCURVE",
"812 195 CURVE SMOOTH",
"1038 1448 LINE",
"1016 1487 LINE",
"951 1464 OFFCURVE",
"882 1448 OFFCURVE",
"820 1439 CURVE",
"781 1456 OFFCURVE",
"733 1464 OFFCURVE",
"684 1464 CURVE SMOOTH",
"485 1464 OFFCURVE",
"316 1342 OFFCURVE",
"260 1029 CURVE SMOOTH",
"227 844 LINE",
"58 844 LINE",
"34 737 LINE",
"208 737 LINE",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"551 1382 OFFCURVE",
"669 1382 CURVE SMOOTH",
"779 1382 OFFCURVE",
"823 1336 OFFCURVE",
"798 1195 CURVE SMOOTH",
"735 844 LINE",
"449 844 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 6 values pushed */
51 1 10 8 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 4 1 5 5 4 114 0 9 9 33 77 0 10 10 8 97 0 8 8 33 77 6 1 2 2 7 95 11 1 7 7 34 77 0 0 0 1 97 0 1 1 32 77 0 5 5 3 98 0 3 3 36 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 4 1 5 1 4 5 128 0 9 9 33 77 0 10 10 8 97 0 8 8 33 77 6 1 2 2 7 95 11 1 7 7 34 77 0 0 0 1 97 0 1 1 32 77 0 5 5 3 98 0 3 3 36 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 4 1 5 1 4 5 128 0 8 0 10 7 8 10 105 0 9 9 33 77 6 1 2 2 7 95 11 1 7 7 34 77 0 0 0 1 97 0 1 1 32 77 0 5 5 3 98 0 3 3 36 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
0 4 1 5 1 4 5 128 0 8 0 10 7 8 10 105 11 1 7 6 1 2 0 7 2 103 0 5 0 3 5 3 102 0 9 9 33 77 0 0 0 1 97 0 1 1 32 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 18 values pushed */
66 65 60 58 55 53 35 34 21 38 35 37 19 37 34 12 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1004;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
note = uniFB02;
rightKerningGroup = l;
rightMetricsKey = l;
unicode = FB02;
},
{
glyphname = uniFB03;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"1130 177 LINE",
"1357 1452 LINE"
);
},
{
closed = 0;
nodes = (
"1130 177 LINE",
"1357 1452 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"54 -580 OFFCURVE",
"87 -398 OFFCURVE",
"133 -140 CURVE SMOOTH",
"338 1003 LINE SMOOTH",
"390 1292 OFFCURVE",
"491 1381 OFFCURVE",
"614 1381 CURVE SMOOTH",
"700 1381 OFFCURVE",
"778 1352 OFFCURVE",
"805 1215 CURVE",
"888 1270 LINE",
"888 1321 OFFCURVE",
"848 1442 OFFCURVE",
"666 1442 CURVE SMOOTH",
"469 1442 OFFCURVE",
"296 1341 OFFCURVE",
"233 989 CURVE SMOOTH",
"-4 -326 LINE SMOOTH",
"-21 -421 OFFCURVE",
"-59 -518 OFFCURVE",
"-114 -518 CURVE SMOOTH",
"-145 -518 OFFCURVE",
"-172 -498 OFFCURVE",
"-191 -471 CURVE SMOOTH",
"-211 -443 OFFCURVE",
"-242 -430 OFFCURVE",
"-282 -430 CURVE SMOOTH",
"-308 -430 OFFCURVE",
"-339 -452 OFFCURVE",
"-339 -488 CURVE SMOOTH",
"-339 -521 OFFCURVE",
"-313 -580 OFFCURVE",
"-175 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"552 763 LINE",
"574 842 LINE",
"30 842 LINE",
"10 763 LINE"
);
},
{
closed = 1;
nodes = (
"538 -551 OFFCURVE",
"571 -369 OFFCURVE",
"617 -111 CURVE SMOOTH",
"821 1025 LINE SMOOTH",
"873 1314 OFFCURVE",
"959 1403 OFFCURVE",
"1072 1403 CURVE SMOOTH",
"1158 1403 OFFCURVE",
"1201 1355 OFFCURVE",
"1201 1274 CURVE SMOOTH",
"1201 1238 OFFCURVE",
"1221 1202 OFFCURVE",
"1266 1202 CURVE SMOOTH",
"1310 1202 OFFCURVE",
"1328 1226 OFFCURVE",
"1328 1275 CURVE SMOOTH",
"1328 1326 OFFCURVE",
"1316 1464 OFFCURVE",
"1124 1464 CURVE SMOOTH",
"937 1464 OFFCURVE",
"780 1363 OFFCURVE",
"716 1011 CURVE SMOOTH",
"480 -297 LINE SMOOTH",
"463 -392 OFFCURVE",
"425 -489 OFFCURVE",
"370 -489 CURVE SMOOTH",
"339 -489 OFFCURVE",
"312 -469 OFFCURVE",
"293 -442 CURVE SMOOTH",
"273 -414 OFFCURVE",
"242 -401 OFFCURVE",
"202 -401 CURVE SMOOTH",
"176 -401 OFFCURVE",
"145 -423 OFFCURVE",
"145 -459 CURVE SMOOTH",
"145 -492 OFFCURVE",
"171 -551 OFFCURVE",
"309 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1159 -27 OFFCURVE",
"1303 111 OFFCURVE",
"1326 158 CURVE",
"1284 195 LINE",
"1220 133 OFFCURVE",
"1180 102 OFFCURVE",
"1161 102 CURVE SMOOTH",
"1122 102 OFFCURVE",
"1124 150 OFFCURVE",
"1134 203 CURVE SMOOTH",
"1209 619 LINE SMOOTH",
"1228 726 OFFCURVE",
"1237 775 OFFCURVE",
"1254 858 CURVE",
"1242 869 LINE",
"1178 850 OFFCURVE",
"1100 842 OFFCURVE",
"1060 842 CURVE",
"1039 763 LINE",
"1120 763 OFFCURVE",
"1121 694 OFFCURVE",
"1114 655 CURVE SMOOTH",
"1021 137 LINE SMOOTH",
"1017 115 OFFCURVE",
"1014 90 OFFCURVE",
"1014 67 CURVE SMOOTH",
"1014 17 OFFCURVE",
"1029 -27 OFFCURVE",
"1064 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1101 763 LINE",
"1123 842 LINE",
"509 842 LINE",
"489 763 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
79 1 13 17 66 1 1 10 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 89 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 4 3 114 0 7 4 8 7 112 0 14 14 12 97 0 12 12 94 77 0 17 17 11 97 0 11 11 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 4 3 114 0 7 4 8 7 112 0 11 0 17 13 11 17 105 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 89 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 0 4 0 2 6 4 2 106 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 14 14 12 97 0 12 12 94 77 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 12 0 14 17 12 14 105 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 12 0 14 17 12 14 105 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 8 0 6 8 6 102 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 32 values pushed */
129 128 125 123 113 111 99 97 94 92 88 86 82 80 76 74 71 69 64 63 34 38 38 20 34 38 38 39 35 19 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1375;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"1312 177 LINE",
"1539 1452 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"153 -580 OFFCURVE",
"226 -390 OFFCURVE",
"274 -125 CURVE SMOOTH",
"477 995 LINE SMOOTH",
"509 1172 OFFCURVE",
"549 1360 OFFCURVE",
"677 1360 CURVE SMOOTH",
"781 1360 OFFCURVE",
"822 1311 OFFCURVE",
"855 1198 CURVE",
"990 1254 LINE",
"990 1382 OFFCURVE",
"866 1442 OFFCURVE",
"721 1442 CURVE SMOOTH",
"492 1442 OFFCURVE",
"318 1345 OFFCURVE",
"257 1007 CURVE SMOOTH",
"26 -279 LINE SMOOTH",
"6 -393 OFFCURVE",
"-9 -475 OFFCURVE",
"-66 -475 CURVE SMOOTH",
"-87 -475 OFFCURVE",
"-110 -454 OFFCURVE",
"-134 -412 CURVE SMOOTH",
"-158 -369 OFFCURVE",
"-190 -348 OFFCURVE",
"-229 -348 CURVE SMOOTH",
"-271 -348 OFFCURVE",
"-312 -388 OFFCURVE",
"-312 -443 CURVE SMOOTH",
"-312 -467 OFFCURVE",
"-282 -580 OFFCURVE",
"-110 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"656 737 LINE",
"681 844 LINE",
"59 844 LINE",
"35 737 LINE"
);
},
{
closed = 1;
nodes = (
"661 -551 OFFCURVE",
"734 -361 OFFCURVE",
"782 -96 CURVE SMOOTH",
"983 1017 LINE SMOOTH",
"1015 1194 OFFCURVE",
"1065 1382 OFFCURVE",
"1193 1382 CURVE SMOOTH",
"1247 1382 OFFCURVE",
"1286 1347 OFFCURVE",
"1293 1276 CURVE SMOOTH",
"1304 1169 OFFCURVE",
"1350 1149 OFFCURVE",
"1407 1149 CURVE SMOOTH",
"1464 1149 OFFCURVE",
"1492 1181 OFFCURVE",
"1492 1245 CURVE SMOOTH",
"1492 1373 OFFCURVE",
"1382 1464 OFFCURVE",
"1237 1464 CURVE SMOOTH",
"1008 1464 OFFCURVE",
"824 1367 OFFCURVE",
"763 1029 CURVE SMOOTH",
"534 -250 LINE SMOOTH",
"514 -364 OFFCURVE",
"499 -446 OFFCURVE",
"442 -446 CURVE SMOOTH",
"421 -446 OFFCURVE",
"398 -425 OFFCURVE",
"374 -383 CURVE SMOOTH",
"350 -340 OFFCURVE",
"318 -319 OFFCURVE",
"279 -319 CURVE SMOOTH",
"237 -319 OFFCURVE",
"196 -359 OFFCURVE",
"196 -414 CURVE SMOOTH",
"196 -438 OFFCURVE",
"226 -551 OFFCURVE",
"398 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1277 -27 OFFCURVE",
"1391 67 OFFCURVE",
"1465 174 CURVE",
"1405 221 LINE",
"1368 168 OFFCURVE",
"1341 142 OFFCURVE",
"1324 142 CURVE SMOOTH",
"1297 142 OFFCURVE",
"1294 155 OFFCURVE",
"1299 180 CURVE SMOOTH",
"1406 678 LINE SMOOTH",
"1417 729 OFFCURVE",
"1432 777 OFFCURVE",
"1448 826 CURVE",
"1419 865 LINE",
"1374 852 OFFCURVE",
"1307 844 OFFCURVE",
"1226 844 CURVE",
"1168 737 LINE",
"1207 737 OFFCURVE",
"1213 699 OFFCURVE",
"1206 665 CURVE SMOOTH",
"1097 168 LINE SMOOTH",
"1094 155 OFFCURVE",
"1093 140 OFFCURVE",
"1093 122 CURVE SMOOTH",
"1093 34 OFFCURVE",
"1117 -27 OFFCURVE",
"1204 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1278 737 LINE",
"1303 844 LINE",
"561 844 LINE",
"537 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
5 1 0 15 109 51 2 19 9 2 76 84 1 15 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
0 0 15 2 15 0 2 128 0 4 6 5 6 4 5 128 0 18 5 9 19 18 114 0 9 19 10 9 112 0 1 1 14 97 0 14 14 33 77 0 15 15 13 97 0 13 13 33 77 17 11 2 6 6 2 95 16 12 3 3 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 96 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 1 1 14 97 0 14 14 33 77 0 15 15 13 97 0 13 13 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 13 0 15 0 13 15 105 0 1 1 14 97 0 14 14 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 92 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 13 0 15 0 13 15 105 0 19 0 7 8 19 7 106 0 1 1 14 97 0 14 14 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 0 19 0 7 8 19 7 106 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 88 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 16 12 2 2 17 11 2 6 4 2 6 103 0 19 0 7 8 19 7 106 0 3 3 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 16 12 2 2 17 11 2 6 4 2 6 103 0 19 0 7 8 19 7 106 0 10 0 8 10 8 102 0 3 3 34 77 0 5 5 32 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 34 values pushed */
115 114 112 110 106 105 103 102 96 94 87 85 83 81 78 76 74 73 68 66 60 58 36 37 37 40 19 33 37 38 18 20 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1491;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"1386 159 OFFCURVE",
"1386 161 OFFCURVE",
"1385 166 CURVE SMOOTH",
"1385 171 OFFCURVE",
"1380 177 OFFCURVE",
"1370 186 CURVE SMOOTH",
"1360 195 OFFCURVE",
"1354 199 OFFCURVE",
"1349 199 CURVE SMOOTH",
"1344 199 OFFCURVE",
"1341 198 OFFCURVE",
"1340 197 CURVE SMOOTH",
"1284 134 OFFCURVE",
"1243 102 OFFCURVE",
"1219 102 CURVE SMOOTH",
"1198 102 OFFCURVE",
"1186 115 OFFCURVE",
"1183 142 CURVE SMOOTH",
"1181 157 OFFCURVE",
"1183 177 OFFCURVE",
"1188 203 CURVE SMOOTH",
"1258 603 LINE SMOOTH",
"1277 714 OFFCURVE",
"1289 789 OFFCURVE",
"1296 828 CURVE",
"1300 841 LINE",
"1299 848 OFFCURVE",
"1296 852 OFFCURVE",
"1292 852 CURVE SMOOTH",
"1285 852 OFFCURVE",
"1265 847 OFFCURVE",
"1233 838 CURVE SMOOTH",
"1201 829 OFFCURVE",
"1167 825 OFFCURVE",
"1134 825 CURVE SMOOTH",
"813 825 LINE",
"827 973 OFFCURVE",
"835 1057 OFFCURVE",
"838 1077 CURVE SMOOTH",
"866 1289 OFFCURVE",
"939 1395 OFFCURVE",
"1056 1395 CURVE SMOOTH",
"1125 1395 OFFCURVE",
"1163 1355 OFFCURVE",
"1171 1274 CURVE SMOOTH",
"1174 1250 OFFCURVE",
"1184 1232 OFFCURVE",
"1202 1220 CURVE SMOOTH",
"1220 1208 OFFCURVE",
"1238 1202 OFFCURVE",
"1255 1202 CURVE SMOOTH",
"1300 1202 OFFCURVE",
"1319 1234 OFFCURVE",
"1313 1298 CURVE SMOOTH",
"1308 1346 OFFCURVE",
"1285 1386 OFFCURVE",
"1246 1417 CURVE SMOOTH",
"1207 1448 OFFCURVE",
"1159 1464 OFFCURVE",
"1104 1464 CURVE SMOOTH",
"987 1464 OFFCURVE",
"895 1425 OFFCURVE",
"829 1346 CURVE",
"811 1375 OFFCURVE",
"783 1399 OFFCURVE",
"746 1416 CURVE SMOOTH",
"710 1433 OFFCURVE",
"674 1442 OFFCURVE",
"638 1442 CURVE SMOOTH",
"495 1442 OFFCURVE",
"389 1386 OFFCURVE",
"322 1274 CURVE SMOOTH",
"277 1198 OFFCURVE",
"244 1048 OFFCURVE",
"223 825 CURVE",
"51 825 LINE SMOOTH",
"43 825 OFFCURVE",
"36 817 OFFCURVE",
"31 801 CURVE SMOOTH",
"26 785 OFFCURVE",
"23 772 OFFCURVE",
"24 762 CURVE SMOOTH",
"25 752 OFFCURVE",
"28 747 OFFCURVE",
"33 747 CURVE SMOOTH",
"217 747 LINE",
"124 -297 LINE SMOOTH",
"120 -337 OFFCURVE",
"106 -375 OFFCURVE",
"82 -412 CURVE SMOOTH",
"57 -449 OFFCURVE",
"32 -467 OFFCURVE",
"7 -467 CURVE SMOOTH",
"-18 -467 OFFCURVE",
"-42 -450 OFFCURVE",
"-64 -417 CURVE SMOOTH",
"-87 -384 OFFCURVE",
"-117 -367 OFFCURVE",
"-156 -367 CURVE SMOOTH",
"-171 -367 OFFCURVE",
"-185 -375 OFFCURVE",
"-196 -390 CURVE SMOOTH",
"-207 -406 OFFCURVE",
"-212 -425 OFFCURVE",
"-210 -446 CURVE SMOOTH",
"-208 -467 OFFCURVE",
"-192 -490 OFFCURVE",
"-160 -514 CURVE SMOOTH",
"-129 -539 OFFCURVE",
"-91 -551 OFFCURVE",
"-48 -551 CURVE SMOOTH",
"16 -551 OFFCURVE",
"70 -534 OFFCURVE",
"115 -501 CURVE SMOOTH",
"161 -468 OFFCURVE",
"194 -412 OFFCURVE",
"217 -333 CURVE SMOOTH",
"240 -254 OFFCURVE",
"255 -180 OFFCURVE",
"261 -111 CURVE SMOOTH",
"338 747 LINE",
"686 747 LINE",
"594 -268 LINE SMOOTH",
"591 -307 OFFCURVE",
"576 -345 OFFCURVE",
"551 -382 CURVE SMOOTH",
"526 -419 OFFCURVE",
"504 -438 OFFCURVE",
"485 -438 CURVE SMOOTH",
"454 -438 OFFCURVE",
"428 -421 OFFCURVE",
"407 -388 CURVE SMOOTH",
"384 -355 OFFCURVE",
"353 -338 OFFCURVE",
"314 -338 CURVE SMOOTH",
"297 -338 OFFCURVE",
"284 -346 OFFCURVE",
"273 -361 CURVE SMOOTH",
"261 -376 OFFCURVE",
"257 -395 OFFCURVE",
"260 -416 CURVE SMOOTH",
"262 -437 OFFCURVE",
"279 -460 OFFCURVE",
"311 -485 CURVE SMOOTH",
"342 -510 OFFCURVE",
"381 -522 OFFCURVE",
"425 -522 CURVE SMOOTH",
"469 -522 OFFCURVE",
"518 -507 OFFCURVE",
"573 -476 CURVE SMOOTH",
"628 -446 OFFCURVE",
"666 -389 OFFCURVE",
"688 -306 CURVE SMOOTH",
"710 -223 OFFCURVE",
"724 -148 OFFCURVE",
"731 -82 CURVE SMOOTH",
"807 747 LINE",
"1068 747 LINE SMOOTH",
"1111 747 OFFCURVE",
"1135 723 OFFCURVE",
"1140 676 CURVE SMOOTH",
"1142 653 OFFCURVE",
"1139 618 OFFCURVE",
"1131 571 CURVE SMOOTH",
"1054 137 LINE SMOOTH",
"1049 111 OFFCURVE",
"1048 85 OFFCURVE",
"1051 60 CURVE SMOOTH",
"1057 2 OFFCURVE",
"1078 -27 OFFCURVE",
"1114 -27 CURVE SMOOTH",
"1165 -27 OFFCURVE",
"1218 -4 OFFCURVE",
"1273 42 CURVE SMOOTH",
"1329 89 OFFCURVE",
"1366 127 OFFCURVE",
"1385 158 CURVE"
);
},
{
closed = 1;
nodes = (
"736 1169 OFFCURVE",
"711 1027 OFFCURVE",
"692 825 CURVE",
"344 825 LINE",
"357 962 OFFCURVE",
"365 1041 OFFCURVE",
"367 1063 CURVE SMOOTH",
"399 1272 OFFCURVE",
"477 1376 OFFCURVE",
"600 1376 CURVE SMOOTH",
"676 1376 OFFCURVE",
"731 1334 OFFCURVE",
"767 1251 CURVE"
);
}
);
};
components = (
{
name = uniFB00;
}
);
layerId = "152B9E25-4A12-4090-BE97-AF5B652BA9B0";
name = "Aug 15 18, 18:24";
paths = (
{
closed = 0;
nodes = (
"1068 747 LINE",
"1111 747 OFFCURVE",
"1135 723 OFFCURVE",
"1140 676 CURVE SMOOTH",
"1142 653 OFFCURVE",
"1139 618 OFFCURVE",
"1131 571 CURVE",
"1258 603 LINE",
"1276 707 OFFCURVE",
"1285 758 OFFCURVE",
"1302 841 CURVE",
"1290 852 LINE",
"1226 833 OFFCURVE",
"1174 825 OFFCURVE",
"1134 825 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
79 1 13 17 66 1 1 10 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 89 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 4 3 114 0 7 4 8 7 112 0 14 14 12 97 0 12 12 94 77 0 17 17 11 97 0 11 11 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 4 3 114 0 7 4 8 7 112 0 11 0 17 13 11 17 105 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 89 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 4 4 2 98 0 2 2 97 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 0 4 0 2 6 4 2 106 0 14 14 12 97 0 12 12 94 77 9 5 2 1 1 10 95 18 15 2 10 10 95 77 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 14 14 12 97 0 12 12 94 77 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 12 0 14 17 12 14 105 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 0 0 93 77 0 8 8 6 98 0 6 6 97 6 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
0 13 17 10 17 13 10 128 0 16 1 0 1 16 0 128 0 3 0 7 0 3 7 128 0 7 4 0 7 4 126 0 12 0 14 17 12 14 105 0 11 0 17 13 11 17 105 18 15 2 10 9 5 2 1 16 10 1 103 0 4 0 2 6 4 2 106 0 8 0 6 8 6 102 0 0 0 93 0 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 32 values pushed */
129 128 125 123 113 111 99 97 94 92 88 86 82 80 76 74 71 69 64 63 34 38 38 20 34 38 38 39 35 19 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 957;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "E66DC925-4E62-4878-8371-8D3CDD99CAD0";
name = "Aug 15 18, 18:33";
paths = (
{
closed = 1;
nodes = (
"1202 725 LINE",
"1241 725 OFFCURVE",
"1249 686 OFFCURVE",
"1239 653 CURVE",
"1439 666 LINE",
"1481 813 LINE",
"1452 852 LINE",
"1407 839 OFFCURVE",
"1351 831 OFFCURVE",
"1300 831 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
5 1 0 15 109 51 2 19 9 2 76 84 1 15 1 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
0 0 15 2 15 0 2 128 0 4 6 5 6 4 5 128 0 18 5 9 19 18 114 0 9 19 10 9 112 0 1 1 14 97 0 14 14 33 77 0 15 15 13 97 0 13 13 33 77 17 11 2 6 6 2 95 16 12 3 3 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 96 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 1 1 14 97 0 14 14 33 77 0 15 15 13 97 0 13 13 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 13 0 15 0 13 15 105 0 1 1 14 97 0 14 14 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 19 19 7 98 0 7 7 36 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 92 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 13 0 15 0 13 15 105 0 19 0 7 8 19 7 106 0 1 1 14 97 0 14 14 33 77 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 0 19 0 7 8 19 7 106 0 3 3 34 77 17 11 2 6 6 2 95 16 12 2 2 2 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 88 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 16 12 2 2 17 11 2 6 4 2 6 103 0 19 0 7 8 19 7 106 0 3 3 34 77 0 5 5 32 77 0 10 10 8 98 0 8 8 36 8 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
0 0 15 3 15 0 3 128 0 4 6 5 6 4 5 128 0 18 5 9 5 18 9 128 0 9 19 5 9 19 126 0 14 0 1 15 14 1 105 0 13 0 15 0 13 15 105 16 12 2 2 17 11 2 6 4 2 6 103 0 19 0 7 8 19 7 106 0 10 0 8 10 8 102 0 3 3 34 77 0 5 5 32 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 34 values pushed */
115 114 112 110 106 105 103 102 96 94 87 85 83 81 78 76 74 73 68 66 60 58 36 37 37 40 19 33 37 38 18 20 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1501;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = uniFB03;
rightMetricsKey = "=i";
unicode = FB03;
},
{
glyphname = uniFB04;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1413 1473 LINE",
"1413 1519 OFFCURVE",
"1326 1461 OFFCURVE",
"1273 1445 CURVE",
"1246 1458 OFFCURVE",
"1215 1464 OFFCURVE",
"1180 1464 CURVE SMOOTH",
"1063 1464 OFFCURVE",
"967 1425 OFFCURVE",
"892 1346 CURVE",
"861 1405 OFFCURVE",
"783 1442 OFFCURVE",
"711 1442 CURVE SMOOTH",
"568 1442 OFFCURVE",
"457 1386 OFFCURVE",
"378 1274 CURVE SMOOTH",
"324 1199 OFFCURVE",
"276 1055 OFFCURVE",
"235 842 CURVE",
"64 842 LINE SMOOTH",
"42 842 OFFCURVE",
"18 763 OFFCURVE",
"37 763 CURVE SMOOTH",
"219 763 LINE",
"15 -297 LINE SMOOTH",
"0 -376 OFFCURVE",
"-69 -467 OFFCURVE",
"-120 -467 CURVE SMOOTH",
"-145 -467 OFFCURVE",
"-167 -450 OFFCURVE",
"-185 -417 CURVE SMOOTH",
"-202 -384 OFFCURVE",
"-231 -367 OFFCURVE",
"-272 -367 CURVE SMOOTH",
"-303 -367 OFFCURVE",
"-335 -403 OFFCURVE",
"-335 -446 CURVE SMOOTH",
"-335 -489 OFFCURVE",
"-269 -551 OFFCURVE",
"-184 -551 CURVE SMOOTH",
"-51 -551 OFFCURVE",
"46 -486 OFFCURVE",
"107 -331 CURVE SMOOTH",
"137 -253 OFFCURVE",
"158 -180 OFFCURVE",
"171 -111 CURVE SMOOTH",
"340 763 LINE",
"688 763 LINE",
"488 -268 LINE SMOOTH",
"475 -343 OFFCURVE",
"398 -438 OFFCURVE",
"361 -438 CURVE SMOOTH",
"330 -438 OFFCURVE",
"306 -421 OFFCURVE",
"289 -388 CURVE SMOOTH",
"272 -355 OFFCURVE",
"242 -338 OFFCURVE",
"201 -338 CURVE SMOOTH",
"168 -338 OFFCURVE",
"138 -373 OFFCURVE",
"138 -416 CURVE SMOOTH",
"138 -459 OFFCURVE",
"204 -522 OFFCURVE",
"292 -522 CURVE SMOOTH",
"396 -522 OFFCURVE",
"519 -461 OFFCURVE",
"580 -302 CURVE SMOOTH",
"610 -222 OFFCURVE",
"631 -149 OFFCURVE",
"644 -82 CURVE SMOOTH",
"809 763 LINE",
"1131 763 LINE",
"988 135 LINE SMOOTH",
"983 116 OFFCURVE",
"981 98 OFFCURVE",
"981 80 CURVE SMOOTH",
"981 9 OFFCURVE",
"1001 -27 OFFCURVE",
"1041 -27 CURVE SMOOTH",
"1108 -27 OFFCURVE",
"1201 39 OFFCURVE",
"1318 170 CURVE",
"1330 182 OFFCURVE",
"1290 220 OFFCURVE",
"1277 207 CURVE",
"1222 144 OFFCURVE",
"1177 113 OFFCURVE",
"1144 113 CURVE SMOOTH",
"1127 113 OFFCURVE",
"1118 129 OFFCURVE",
"1118 162 CURVE SMOOTH",
"1118 175 OFFCURVE",
"1120 190 OFFCURVE",
"1125 209 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1148 842 LINE",
"824 842 LINE",
"849 972 OFFCURVE",
"865 1050 OFFCURVE",
"872 1075 CURVE SMOOTH",
"925 1288 OFFCURVE",
"1008 1395 OFFCURVE",
"1121 1395 CURVE SMOOTH",
"1200 1395 OFFCURVE",
"1240 1353 OFFCURVE",
"1240 1270 CURVE SMOOTH",
"1240 1250 OFFCURVE",
"1237 1227 OFFCURVE",
"1232 1200 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"780 1169 OFFCURVE",
"741 1033 OFFCURVE",
"704 842 CURVE",
"355 842 LINE",
"377 954 OFFCURVE",
"393 1030 OFFCURVE",
"402 1069 CURVE SMOOTH",
"457 1274 OFFCURVE",
"545 1376 OFFCURVE",
"666 1376 CURVE SMOOTH",
"742 1376 OFFCURVE",
"793 1334 OFFCURVE",
"820 1251 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-339 -521 OFFCURVE",
"-313 -580 OFFCURVE",
"-175 -580 CURVE SMOOTH",
"54 -580 OFFCURVE",
"87 -398 OFFCURVE",
"133 -140 CURVE SMOOTH",
"295 763 LINE",
"671 763 LINE",
"480 -297 LINE SMOOTH",
"463 -392 OFFCURVE",
"425 -489 OFFCURVE",
"370 -489 CURVE SMOOTH",
"339 -489 OFFCURVE",
"312 -469 OFFCURVE",
"293 -442 CURVE SMOOTH",
"273 -414 OFFCURVE",
"242 -401 OFFCURVE",
"202 -401 CURVE SMOOTH",
"176 -401 OFFCURVE",
"145 -423 OFFCURVE",
"145 -459 CURVE SMOOTH",
"145 -492 OFFCURVE",
"171 -551 OFFCURVE",
"309 -551 CURVE SMOOTH",
"538 -551 OFFCURVE",
"571 -369 OFFCURVE",
"617 -111 CURVE SMOOTH",
"774 763 LINE",
"1115 763 LINE",
"1001 135 LINE SMOOTH",
"998 120 OFFCURVE",
"997 104 OFFCURVE",
"997 87 CURVE SMOOTH",
"997 31 OFFCURVE",
"1017 -27 OFFCURVE",
"1061 -27 CURVE SMOOTH",
"1132 -27 OFFCURVE",
"1211 39 OFFCURVE",
"1313 170 CURVE",
"1269 207 LINE",
"1219 144 OFFCURVE",
"1178 113 OFFCURVE",
"1143 113 CURVE SMOOTH",
"1113 113 OFFCURVE",
"1109 169 OFFCURVE",
"1116 209 CURVE SMOOTH",
"1344 1470 LINE",
"1331 1484 LINE",
"1299 1470 OFFCURVE",
"1269 1458 OFFCURVE",
"1240 1449 CURVE",
"1215 1458 OFFCURVE",
"1185 1464 OFFCURVE",
"1149 1464 CURVE SMOOTH",
"1042 1464 OFFCURVE",
"942 1434 OFFCURVE",
"863 1351 CURVE",
"835 1397 OFFCURVE",
"777 1442 OFFCURVE",
"666 1442 CURVE SMOOTH",
"469 1442 OFFCURVE",
"296 1341 OFFCURVE",
"233 989 CURVE SMOOTH",
"207 842 LINE",
"30 842 LINE",
"10 763 LINE",
"192 763 LINE",
"-4 -326 LINE SMOOTH",
"-21 -421 OFFCURVE",
"-59 -518 OFFCURVE",
"-114 -518 CURVE SMOOTH",
"-145 -518 OFFCURVE",
"-172 -498 OFFCURVE",
"-191 -471 CURVE SMOOTH",
"-211 -443 OFFCURVE",
"-242 -430 OFFCURVE",
"-282 -430 CURVE SMOOTH",
"-308 -430 OFFCURVE",
"-339 -452 OFFCURVE",
"-339 -488 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"338 1003 LINE SMOOTH",
"390 1292 OFFCURVE",
"491 1381 OFFCURVE",
"614 1381 CURVE SMOOTH",
"691 1381 OFFCURVE",
"762 1358 OFFCURVE",
"795 1254 CURVE",
"761 1191 OFFCURVE",
"734 1111 OFFCURVE",
"716 1011 CURVE SMOOTH",
"686 842 LINE",
"309 842 LINE"
);
},
{
closed = 1;
nodes = (
"821 1025 LINE SMOOTH",
"873 1314 OFFCURVE",
"974 1403 OFFCURVE",
"1097 1403 CURVE SMOOTH",
"1200 1403 OFFCURVE",
"1220 1347 OFFCURVE",
"1193 1197 CURVE SMOOTH",
"1129 842 LINE",
"788 842 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
73 1 12 13 69 1 11 17 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 4 1 8 5 4 114 0 8 5 9 8 112 0 14 14 94 77 0 15 15 13 97 0 13 13 94 77 0 17 17 12 97 0 12 12 94 77 10 6 2 2 2 11 95 18 16 2 11 11 95 77 0 0 0 1 97 0 1 1 93 77 0 5 5 3 98 0 3 3 97 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 81 values pushed */
0 4 1 8 5 4 114 0 8 5 9 8 112 0 12 0 17 11 12 17 105 0 14 14 94 77 0 15 15 13 97 0 13 13 94 77 10 6 2 2 2 11 95 18 16 2 11 11 95 77 0 0 0 1 97 0 1 1 93 77 0 5 5 3 98 0 3 3 97 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 4 1 8 1 4 8 128 0 8 5 1 8 5 126 0 12 0 17 11 12 17 105 0 14 14 94 77 0 15 15 13 97 0 13 13 94 77 10 6 2 2 2 11 95 18 16 2 11 11 95 77 0 0 0 1 97 0 1 1 93 77 0 5 5 3 98 0 3 3 97 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 81 values pushed */
0 4 1 8 1 4 8 128 0 8 5 1 8 5 126 0 12 0 17 11 12 17 105 0 5 0 3 7 5 3 106 0 14 14 94 77 0 15 15 13 97 0 13 13 94 77 10 6 2 2 2 11 95 18 16 2 11 11 95 77 0 0 0 1 97 0 1 1 93 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 4 1 8 1 4 8 128 0 8 5 1 8 5 126 0 13 0 15 17 13 15 105 0 12 0 17 11 12 17 105 0 5 0 3 7 5 3 106 0 14 14 94 77 10 6 2 2 2 11 95 18 16 2 11 11 95 77 0 0 0 1 97 0 1 1 93 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
0 4 1 8 1 4 8 128 0 8 5 1 8 5 126 0 13 0 15 17 13 15 105 0 12 0 17 11 12 17 105 18 16 2 11 10 6 2 2 0 11 2 103 0 5 0 3 7 5 3 106 0 14 14 94 77 0 0 0 1 97 0 1 1 93 77 0 9 9 7 98 0 7 7 97 7 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 4 1 8 1 4 8 128 0 8 5 1 8 5 126 0 13 0 15 17 13 15 105 0 12 0 17 11 12 17 105 18 16 2 11 10 6 2 2 0 11 2 103 0 5 0 3 7 5 3 106 0 9 0 7 9 7 102 0 14 14 94 77 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 32 values pushed */
95 94 91 89 87 86 83 81 76 75 72 70 67 65 62 60 57 56 53 51 36 36 19 33 36 36 20 39 35 19 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1362;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1571 1487 OFFCURVE",
"1543 1487 QCURVE SMOOTH",
"1528 1487 OFFCURVE",
"1408 1450 OFFCURVE",
"1363 1442 QCURVE",
"1311 1464 OFFCURVE",
"1248 1464 QCURVE SMOOTH",
"1074 1464 OFFCURVE",
"955 1360 QCURVE",
"894 1442 OFFCURVE",
"769 1442 QCURVE SMOOTH",
"537 1442 OFFCURVE",
"406 1264 QCURVE SMOOTH",
"325 1153 OFFCURVE",
"259 844 QCURVE",
"87 844 LINE SMOOTH",
"72 844 OFFCURVE",
"40 737 OFFCURVE",
"54 737 QCURVE SMOOTH",
"236 737 LINE",
"37 -250 LINE SMOOTH",
"31 -283 OFFCURVE",
"15 -352 OFFCURVE",
"-6 -410 OFFCURVE",
"-44 -446 OFFCURVE",
"-71 -446 QCURVE SMOOTH",
"-81 -446 OFFCURVE",
"-98 -438 OFFCURVE",
"-110 -424 OFFCURVE",
"-122 -406 OFFCURVE",
"-131 -385 OFFCURVE",
"-137 -375 QCURVE",
"-166 -319 OFFCURVE",
"-223 -319 QCURVE SMOOTH",
"-257 -319 OFFCURVE",
"-315 -379 OFFCURVE",
"-315 -469 OFFCURVE",
"-212 -551 OFFCURVE",
"-124 -551 QCURVE SMOOTH",
"-20 -551 OFFCURVE",
"136 -442 OFFCURVE",
"171 -379 QCURVE",
"158 -428 OFFCURVE",
"261 -522 OFFCURVE",
"359 -522 QCURVE SMOOTH",
"507 -523 OFFCURVE",
"609 -412 QCURVE",
"642 -383 OFFCURVE",
"728 -174 OFFCURVE",
"748 -70 QCURVE SMOOTH",
"912 737 LINE",
"1199 737 LINE",
"1061 156 LINE SMOOTH",
"1045 88 OFFCURVE",
"1089 -27 OFFCURVE",
"1150 -27 QCURVE SMOOTH",
"1272 -27 OFFCURVE",
"1430 182 QCURVE SMOOTH",
"1440 195 OFFCURVE",
"1381 241 OFFCURVE",
"1371 227 QCURVE",
"1358 213 OFFCURVE",
"1332 174 OFFCURVE",
"1295 141 OFFCURVE",
"1281 141 QCURVE SMOOTH",
"1254 141 OFFCURVE",
"1262 180 QCURVE SMOOTH",
"1561 1448 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1223 844 LINE",
"932 844 LINE",
"947 946 OFFCURVE",
"1010 1206 OFFCURVE",
"1055 1278 QCURVE SMOOTH",
"1123 1382 OFFCURVE",
"1197 1382 QCURVE SMOOTH",
"1274 1382 OFFCURVE",
"1321 1258 OFFCURVE",
"1301 1180 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"785 1102 OFFCURVE",
"736 844 QCURVE",
"455 844 LINE",
"470 918 OFFCURVE",
"496 1057 OFFCURVE",
"545 1208 OFFCURVE",
"576 1257 QCURVE SMOOTH",
"639 1360 OFFCURVE",
"715 1360 QCURVE SMOOTH",
"744 1360 OFFCURVE",
"787 1341 OFFCURVE",
"812 1311 OFFCURVE",
"830 1274 OFFCURVE",
"838 1235 OFFCURVE",
"844 1217 QCURVE"
);
},
{
closed = 1;
nodes = (
"521 -221 LINE SMOOTH",
"517 -244 OFFCURVE",
"506 -291 OFFCURVE",
"496 -334 OFFCURVE",
"478 -375 OFFCURVE",
"459 -403 OFFCURVE",
"428 -420 OFFCURVE",
"410 -420 QCURVE SMOOTH",
"382 -420 OFFCURVE",
"345 -346 QCURVE SMOOTH",
"318 -293 OFFCURVE",
"259 -293 QCURVE SMOOTH",
"224 -293 OFFCURVE",
"195 -322 QCURVE",
"242 -215 OFFCURVE",
"267 -96 QCURVE SMOOTH",
"435 737 LINE",
"713 737 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-312 -467 OFFCURVE",
"-282 -580 OFFCURVE",
"-110 -580 CURVE SMOOTH",
"153 -580 OFFCURVE",
"226 -390 OFFCURVE",
"274 -125 CURVE SMOOTH",
"430 737 LINE",
"711 737 LINE",
"534 -250 LINE SMOOTH",
"514 -364 OFFCURVE",
"499 -446 OFFCURVE",
"442 -446 CURVE SMOOTH",
"423 -446 OFFCURVE",
"402 -425 OFFCURVE",
"380 -383 CURVE SMOOTH",
"357 -340 OFFCURVE",
"328 -319 OFFCURVE",
"292 -319 CURVE SMOOTH",
"254 -319 OFFCURVE",
"216 -359 OFFCURVE",
"216 -414 CURVE SMOOTH",
"216 -438 OFFCURVE",
"244 -551 OFFCURVE",
"402 -551 CURVE SMOOTH",
"665 -551 OFFCURVE",
"734 -361 OFFCURVE",
"782 -96 CURVE SMOOTH",
"932 737 LINE",
"1219 737 LINE",
"1114 156 LINE SMOOTH",
"1111 142 OFFCURVE",
"1110 128 OFFCURVE",
"1110 114 CURVE SMOOTH",
"1110 42 OFFCURVE",
"1145 -27 OFFCURVE",
"1218 -27 CURVE SMOOTH",
"1300 -27 OFFCURVE",
"1388 43 OFFCURVE",
"1481 182 CURVE",
"1419 227 LINE",
"1386 170 OFFCURVE",
"1357 141 OFFCURVE",
"1334 141 CURVE SMOOTH",
"1308 141 OFFCURVE",
"1310 164 OFFCURVE",
"1316 195 CURVE SMOOTH",
"1542 1448 LINE",
"1520 1487 LINE",
"1461 1466 OFFCURVE",
"1399 1451 OFFCURVE",
"1342 1442 CURVE",
"1308 1456 OFFCURVE",
"1270 1464 OFFCURVE",
"1227 1464 CURVE SMOOTH",
"1114 1464 OFFCURVE",
"1015 1441 OFFCURVE",
"936 1376 CURVE",
"886 1421 OFFCURVE",
"807 1442 OFFCURVE",
"721 1442 CURVE SMOOTH",
"492 1442 OFFCURVE",
"318 1345 OFFCURVE",
"257 1007 CURVE SMOOTH",
"228 844 LINE",
"59 844 LINE",
"35 737 LINE",
"209 737 LINE",
"26 -279 LINE SMOOTH",
"6 -393 OFFCURVE",
"-9 -475 OFFCURVE",
"-66 -475 CURVE SMOOTH",
"-87 -475 OFFCURVE",
"-110 -454 OFFCURVE",
"-134 -412 CURVE SMOOTH",
"-158 -369 OFFCURVE",
"-190 -348 OFFCURVE",
"-229 -348 CURVE SMOOTH",
"-271 -348 OFFCURVE",
"-312 -388 OFFCURVE",
"-312 -443 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"477 995 LINE SMOOTH",
"509 1172 OFFCURVE",
"549 1360 OFFCURVE",
"677 1360 CURVE SMOOTH",
"762 1360 OFFCURVE",
"805 1327 OFFCURVE",
"836 1253 CURVE",
"804 1194 OFFCURVE",
"779 1120 OFFCURVE",
"763 1029 CURVE SMOOTH",
"730 844 LINE",
"450 844 LINE"
);
},
{
closed = 1;
nodes = (
"983 1017 LINE SMOOTH",
"1015 1194 OFFCURVE",
"1055 1382 OFFCURVE",
"1183 1382 CURVE SMOOTH",
"1307 1382 OFFCURVE",
"1323 1305 OFFCURVE",
"1301 1186 CURVE SMOOTH",
"1239 844 LINE",
"952 844 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
97 26 2 18 5 1 76 63 1 9 59 1 14 2 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 17 1 5 18 17 114 0 5 18 6 5 112 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 0 14 14 9 97 0 9 9 33 77 16 7 2 2 2 8 95 15 13 2 8 8 34 77 0 0 0 1 97 0 1 1 32 77 0 18 18 3 98 0 3 3 36 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
0 17 1 5 1 17 5 128 0 5 18 1 5 18 126 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 0 14 14 9 97 0 9 9 33 77 16 7 2 2 2 8 95 15 13 2 8 8 34 77 0 0 0 1 97 0 1 1 32 77 0 18 18 3 98 0 3 3 36 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
0 17 1 5 1 17 5 128 0 5 18 1 5 18 126 0 9 0 14 8 9 14 105 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 16 7 2 2 2 8 95 15 13 2 8 8 34 77 0 0 0 1 97 0 1 1 32 77 0 18 18 3 98 0 3 3 36 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 81 values pushed */
0 17 1 5 1 17 5 128 0 5 18 1 5 18 126 0 9 0 14 8 9 14 105 0 18 0 3 4 18 3 106 0 11 11 33 77 0 12 12 10 97 0 10 10 33 77 16 7 2 2 2 8 95 15 13 2 8 8 34 77 0 0 0 1 97 0 1 1 32 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 17 1 5 1 17 5 128 0 5 18 1 5 18 126 0 10 0 12 14 10 12 105 0 9 0 14 8 9 14 105 0 18 0 3 4 18 3 106 0 11 11 33 77 16 7 2 2 2 8 95 15 13 2 8 8 34 77 0 0 0 1 97 0 1 1 32 77 0 6 6 4 98 0 4 4 36 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 17 1 5 1 17 5 128 0 5 18 1 5 18 126 0 10 0 12 14 10 12 105 0 9 0 14 8 9 14 105 15 13 2 8 16 7 2 2 0 8 2 103 0 18 0 3 4 18 3 106 0 6 0 4 6 4 102 0 11 11 33 77 0 0 0 1 97 0 1 1 32 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 32 values pushed */
103 102 100 98 94 93 91 90 85 83 77 76 72 70 67 65 62 60 58 56 34 21 38 35 36 37 19 40 18 19 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1508;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = uniFB04;
rightKerningGroup = l;
rightMetricsKey = "=l";
unicode = FB04;
},
{
glyphname = uniFB05;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"567 1403 OFFCURVE",
"601 1355 OFFCURVE",
"608 1274 CURVE SMOOTH",
"612 1231 OFFCURVE",
"647 1202 OFFCURVE",
"683 1202 CURVE SMOOTH",
"718 1202 OFFCURVE",
"735 1226 OFFCURVE",
"735 1275 CURVE SMOOTH",
"735 1389 OFFCURVE",
"654 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"574 -27 OFFCURVE",
"689 121 OFFCURVE",
"773 265 CURVE",
"730 299 LINE",
"635 166 OFFCURVE",
"567 100 OFFCURVE",
"525 100 CURVE SMOOTH",
"480 100 OFFCURVE",
"480 160 OFFCURVE",
"491 223 CURVE SMOOTH",
"633 1008 LINE",
"573 1021 LINE",
"495 808 LINE",
"376 148 LINE SMOOTH",
"372 128 OFFCURVE",
"370 111 OFFCURVE",
"370 93 CURVE SMOOTH",
"370 27 OFFCURVE",
"398 -27 OFFCURVE",
"462 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"807 730 LINE",
"822 798 LINE",
"560 798 LINE",
"544 820 LINE",
"300 775 LINE",
"304 730 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"344 1352 OFFCURVE",
"486 1352 CURVE SMOOTH",
"558 1352 OFFCURVE",
"601 1283 OFFCURVE",
"573 1127 CURVE SMOOTH",
"396 148 LINE SMOOTH",
"392 128 OFFCURVE",
"390 111 OFFCURVE",
"390 93 CURVE SMOOTH",
"390 27 OFFCURVE",
"418 -27 OFFCURVE",
"482 -27 CURVE SMOOTH",
"594 -27 OFFCURVE",
"709 121 OFFCURVE",
"793 265 CURVE",
"750 299 LINE",
"655 166 OFFCURVE",
"587 100 OFFCURVE",
"545 100 CURVE SMOOTH",
"500 100 OFFCURVE",
"500 160 OFFCURVE",
"511 223 CURVE SMOOTH",
"683 1175 LINE SMOOTH",
"710 1324 OFFCURVE",
"634 1464 OFFCURVE",
"520 1464 CURVE SMOOTH",
"415 1464 OFFCURVE",
"346 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"208 1272 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"827 730 LINE",
"842 798 LINE",
"580 798 LINE",
"564 820 LINE",
"320 775 LINE",
"324 730 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
80 26 2 2 8 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 5 1 6 6 5 114 0 3 3 7 97 0 7 7 94 77 9 1 2 2 8 95 0 8 8 95 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 5 1 6 6 5 114 0 8 9 1 2 0 8 2 103 0 3 3 7 97 0 7 7 94 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 5 1 6 1 5 6 128 0 8 9 1 2 0 8 2 103 0 3 3 7 97 0 7 7 94 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 5 1 6 1 5 6 128 0 7 0 3 8 7 3 105 0 8 9 1 2 0 8 2 103 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 1 6 1 5 6 128 0 7 0 3 8 7 3 105 0 8 9 1 2 0 8 2 103 0 6 0 4 6 4 102 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
85 83 22 39 34 38 43 43 22 42 35 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 872;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"778 -27 OFFCURVE",
"885 75 OFFCURVE",
"1004 266 CURVE",
"949 317 LINE",
"851 189 OFFCURVE",
"781 125 OFFCURVE",
"739 125 CURVE SMOOTH",
"703 125 OFFCURVE",
"705 172 OFFCURVE",
"716 233 CURVE SMOOTH",
"868 1071 LINE",
"681 1109 LINE",
"513 180 LINE SMOOTH",
"509 160 OFFCURVE",
"507 140 OFFCURVE",
"507 121 CURVE SMOOTH",
"507 39 OFFCURVE",
"541 -27 OFFCURVE",
"637 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1050 713 LINE",
"1063 819 LINE",
"723 819 LINE",
"717 848 LINE",
"437 789 LINE",
"443 713 LINE"
);
},
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"655 1382 OFFCURVE",
"660 1339 OFFCURVE",
"668 1243 CURVE",
"864 1249 LINE",
"864 1376 OFFCURVE",
"757 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1352 OFFCURVE",
"574 1352 CURVE SMOOTH",
"675 1352 OFFCURVE",
"711 1274 OFFCURVE",
"670 1046 CURVE SMOOTH",
"513 180 LINE SMOOTH",
"509 160 OFFCURVE",
"507 140 OFFCURVE",
"507 121 CURVE SMOOTH",
"507 39 OFFCURVE",
"541 -27 OFFCURVE",
"637 -27 CURVE SMOOTH",
"778 -27 OFFCURVE",
"885 75 OFFCURVE",
"1004 266 CURVE",
"949 317 LINE",
"851 189 OFFCURVE",
"781 125 OFFCURVE",
"739 125 CURVE SMOOTH",
"703 125 OFFCURVE",
"705 172 OFFCURVE",
"716 233 CURVE SMOOTH",
"868 1071 LINE SMOOTH",
"908 1293 OFFCURVE",
"827 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1050 713 LINE",
"1063 819 LINE",
"723 819 LINE",
"717 848 LINE",
"437 789 LINE",
"443 713 LINE"
);
}
);
width = 1063;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "7391BA2E-B972-4752-92D7-F37890519E82";
name = "Aug 16 18, 15:47";
paths = (
{
closed = 1;
nodes = (
"781 730 LINE",
"1005 730 LINE SMOOTH",
"1010 730 OFFCURVE",
"1016 736 OFFCURVE",
"1023 748 CURVE SMOOTH",
"1030 761 OFFCURVE",
"1034 774 OFFCURVE",
"1034 788 CURVE SMOOTH",
"1034 801 OFFCURVE",
"1031 808 OFFCURVE",
"1026 808 CURVE SMOOTH",
"802 808 LINE",
"857 990 LINE SMOOTH",
"897 1124 OFFCURVE",
"917 1221 OFFCURVE",
"917 1281 CURVE SMOOTH",
"917 1339 OFFCURVE",
"900 1384 OFFCURVE",
"867 1416 CURVE SMOOTH",
"834 1448 OFFCURVE",
"792 1464 OFFCURVE",
"743 1464 CURVE SMOOTH",
"628 1464 OFFCURVE",
"533 1426 OFFCURVE",
"456 1350 CURVE SMOOTH",
"379 1274 OFFCURVE",
"313 1093 OFFCURVE",
"258 807 CURVE SMOOTH",
"45 -297 LINE SMOOTH",
"37 -337 OFFCURVE",
"19 -375 OFFCURVE",
"-9 -412 CURVE SMOOTH",
"-38 -449 OFFCURVE",
"-65 -467 OFFCURVE",
"-90 -467 CURVE SMOOTH",
"-115 -467 OFFCURVE",
"-137 -450 OFFCURVE",
"-156 -417 CURVE SMOOTH",
"-175 -384 OFFCURVE",
"-203 -367 OFFCURVE",
"-242 -367 CURVE SMOOTH",
"-257 -367 OFFCURVE",
"-272 -375 OFFCURVE",
"-285 -390 CURVE SMOOTH",
"-298 -406 OFFCURVE",
"-305 -425 OFFCURVE",
"-305 -446 CURVE SMOOTH",
"-305 -467 OFFCURVE",
"-291 -490 OFFCURVE",
"-262 -514 CURVE SMOOTH",
"-233 -539 OFFCURVE",
"-197 -551 OFFCURVE",
"-154 -551 CURVE SMOOTH",
"-79 -551 OFFCURVE",
"-17 -530 OFFCURVE",
"32 -488 CURVE SMOOTH",
"80 -446 OFFCURVE",
"117 -392 OFFCURVE",
"142 -326 CURVE SMOOTH",
"167 -259 OFFCURVE",
"186 -188 OFFCURVE",
"201 -111 CURVE SMOOTH",
"379 807 LINE SMOOTH",
"415 993 OFFCURVE",
"441 1111 OFFCURVE",
"458 1162 CURVE SMOOTH",
"475 1212 OFFCURVE",
"502 1263 OFFCURVE",
"540 1316 CURVE SMOOTH",
"577 1369 OFFCURVE",
"626 1395 OFFCURVE",
"686 1395 CURVE SMOOTH",
"721 1395 OFFCURVE",
"749 1385 OFFCURVE",
"770 1364 CURVE SMOOTH",
"791 1344 OFFCURVE",
"802 1314 OFFCURVE",
"802 1274 CURVE SMOOTH",
"802 1245 OFFCURVE",
"799 1219 OFFCURVE",
"793 1197 CURVE SMOOTH",
"685 819 LINE",
"512 789 LINE SMOOTH",
"497 786 OFFCURVE",
"490 773 OFFCURVE",
"490 749 CURVE SMOOTH",
"490 736 OFFCURVE",
"494 730 OFFCURVE",
"502 730 CURVE SMOOTH",
"658 730 LINE",
"490 148 LINE SMOOTH",
"485 129 OFFCURVE",
"482 105 OFFCURVE",
"482 76 CURVE SMOOTH",
"482 48 OFFCURVE",
"490 24 OFFCURVE",
"505 4 CURVE SMOOTH",
"520 -17 OFFCURVE",
"541 -27 OFFCURVE",
"568 -27 CURVE SMOOTH",
"621 -27 OFFCURVE",
"673 -6 OFFCURVE",
"724 36 CURVE SMOOTH",
"795 93 OFFCURVE",
"859 168 OFFCURVE",
"917 260 CURVE SMOOTH",
"921 266 OFFCURVE",
"921 273 OFFCURVE",
"916 282 CURVE SMOOTH",
"908 297 OFFCURVE",
"899 304 OFFCURVE",
"888 304 CURVE SMOOTH",
"885 304 OFFCURVE",
"883 303 OFFCURVE",
"882 301 CURVE SMOOTH",
"793 168 OFFCURVE",
"719 102 OFFCURVE",
"659 102 CURVE SMOOTH",
"636 102 OFFCURVE",
"624 119 OFFCURVE",
"624 154 CURVE SMOOTH",
"624 173 OFFCURVE",
"628 197 OFFCURVE",
"636 225 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
80 26 2 2 8 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 5 1 6 6 5 114 0 3 3 7 97 0 7 7 94 77 9 1 2 2 8 95 0 8 8 95 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 5 1 6 6 5 114 0 8 9 1 2 0 8 2 103 0 3 3 7 97 0 7 7 94 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 5 1 6 1 5 6 128 0 8 9 1 2 0 8 2 103 0 3 3 7 97 0 7 7 94 77 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
126 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
0 5 1 6 1 5 6 128 0 7 0 3 8 7 3 105 0 8 9 1 2 0 8 2 103 0 0 0 1 97 0 1 1 93 77 0 6 6 4 98 0 4 4 97 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 1 6 1 5 6 128 0 7 0 3 8 7 3 105 0 8 9 1 2 0 8 2 103 0 6 0 4 6 4 102 0 0 0 1 97 0 1 1 93 1 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
85 83 22 39 34 38 43 43 22 42 35 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 852;
}
);
leftMetricsKey = longs;
note = uniFB05;
rightMetricsKey = t;
unicode = FB05;
},
{
glyphname = uniFB06;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"279 -27 OFFCURVE",
"420 79 OFFCURVE",
"420 236 CURVE SMOOTH",
"420 296 OFFCURVE",
"388 373 OFFCURVE",
"323 467 CURVE SMOOTH",
"258 561 OFFCURVE",
"225 631 OFFCURVE",
"225 678 CURVE SMOOTH",
"225 721 OFFCURVE",
"254 788 OFFCURVE",
"305 788 CURVE SMOOTH",
"346 788 OFFCURVE",
"374 769 OFFCURVE",
"387 730 CURVE SMOOTH",
"400 691 OFFCURVE",
"423 672 OFFCURVE",
"458 672 CURVE SMOOTH",
"481 672 OFFCURVE",
"514 699 OFFCURVE",
"514 731 CURVE SMOOTH",
"514 819 OFFCURVE",
"425 852 OFFCURVE",
"376 852 CURVE",
"373 891 OFFCURVE",
"371 925 OFFCURVE",
"371 956 CURVE SMOOTH",
"371 1056 OFFCURVE",
"401 1180 OFFCURVE",
"543 1180 CURVE SMOOTH",
"567 1180 OFFCURVE",
"614 1177 OFFCURVE",
"685 1172 CURVE SMOOTH",
"756 1167 OFFCURVE",
"810 1165 OFFCURVE",
"849 1165 CURVE SMOOTH",
"887 1165 OFFCURVE",
"919 1166 OFFCURVE",
"945 1168 CURVE",
"915 1066 OFFCURVE",
"857 902 OFFCURVE",
"807 811 CURVE",
"612 775 LINE",
"616 730 LINE",
"783 730 LINE",
"618 148 LINE SMOOTH",
"613 129 OFFCURVE",
"610 105 OFFCURVE",
"610 76 CURVE SMOOTH",
"610 26 OFFCURVE",
"638 -27 OFFCURVE",
"696 -27 CURVE SMOOTH",
"831 -25 OFFCURVE",
"943 110 OFFCURVE",
"1045 260 CURVE",
"1010 301 LINE",
"921 168 OFFCURVE",
"847 102 OFFCURVE",
"787 102 CURVE SMOOTH",
"741 102 OFFCURVE",
"749 171 OFFCURVE",
"764 225 CURVE SMOOTH",
"903 730 LINE",
"1119 730 LINE",
"1134 798 LINE",
"921 798 LINE",
"974 1007 OFFCURVE",
"1005 1112 OFFCURVE",
"1055 1188 CURVE",
"1100 1201 OFFCURVE",
"1169 1248 OFFCURVE",
"1169 1304 CURVE SMOOTH",
"1169 1338 OFFCURVE",
"1140 1356 OFFCURVE",
"1107 1356 CURVE SMOOTH",
"1046 1356 OFFCURVE",
"1000 1284 OFFCURVE",
"977 1236 CURVE",
"906 1236 OFFCURVE",
"843 1242 OFFCURVE",
"729 1260 CURVE SMOOTH",
"644 1273 OFFCURVE",
"582 1282 OFFCURVE",
"543 1282 CURVE SMOOTH",
"400 1282 OFFCURVE",
"295 1184 OFFCURVE",
"295 1072 CURVE SMOOTH",
"295 971 OFFCURVE",
"303 896 OFFCURVE",
"320 846 CURVE",
"203 824 OFFCURVE",
"129 717 OFFCURVE",
"129 592 CURVE SMOOTH",
"129 525 OFFCURVE",
"159 450 OFFCURVE",
"219 366 CURVE SMOOTH",
"279 282 OFFCURVE",
"309 219 OFFCURVE",
"309 176 CURVE SMOOTH",
"309 95 OFFCURVE",
"282 55 OFFCURVE",
"227 55 CURVE SMOOTH",
"188 55 OFFCURVE",
"159 73 OFFCURVE",
"141 108 CURVE SMOOTH",
"124 144 OFFCURVE",
"93 162 OFFCURVE",
"49 162 CURVE SMOOTH",
"10 162 OFFCURVE",
"-6 123 OFFCURVE",
"-6 82 CURVE SMOOTH",
"-6 28 OFFCURVE",
"60 -27 OFFCURVE",
"129 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
42 1 8 15 104 1 9 1 2 76 111 1 13 72 1 1 2 75 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 1 8 9 8 1 9 128 0 3 0 10 4 3 114 0 5 6 13 5 89 0 6 14 1 13 15 6 13 105 0 7 7 92 77 12 1 9 9 8 95 0 8 8 95 77 0 0 0 15 97 0 15 15 95 77 0 10 10 2 97 11 1 2 2 93 77 0 4 4 2 98 11 1 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
0 1 8 9 8 1 9 128 0 3 0 10 0 3 10 128 0 5 6 13 5 89 0 6 14 1 13 15 6 13 105 0 8 12 1 9 0 8 9 104 0 7 7 92 77 0 0 0 15 97 0 15 15 95 77 0 10 10 2 97 11 1 2 2 93 77 0 4 4 2 98 11 1 2 2 93 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
57 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
0 1 8 9 8 1 9 128 0 3 0 10 0 3 10 128 0 5 0 14 13 5 14 105 0 6 0 13 15 6 13 103 0 8 12 1 9 0 8 9 104 0 7 7 92 77 0 0 0 15 97 0 15 15 95 77 0 10 10 2 97 11 1 2 2 93 77 0 4 4 2 98 11 1 2 2 93 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
0 7 5 7 133 0 1 8 9 8 1 9 128 0 3 0 10 0 3 10 128 0 5 0 14 13 5 14 105 0 6 0 13 15 6 13 103 0 8 12 1 9 0 8 9 104 0 0 0 15 97 0 15 15 95 77 0 10 10 2 97 11 1 2 2 93 77 0 4 4 2 98 11 1 2 2 93 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 26 values pushed */
128 125 118 116 115 112 102 101 95 93 83 81 77 75 26 35 50 46 34 38 42 34 35 16 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1125;
},
{
background = {
paths = (
{
closed = 0;
nodes = (
"1069 1006 LINE",
"1087 1081 OFFCURVE",
"1113 1145 OFFCURVE",
"1143 1189 CURVE",
"1206 1212 OFFCURVE",
"1260 1257 OFFCURVE",
"1260 1304 CURVE SMOOTH",
"1260 1344 OFFCURVE",
"1212 1364 OFFCURVE",
"1162 1364 CURVE SMOOTH",
"1097 1364 OFFCURVE",
"1041 1323 OFFCURVE",
"1002 1245 CURVE",
"944 1246 OFFCURVE",
"886 1252 OFFCURVE",
"789 1268 CURVE SMOOTH",
"703 1282 OFFCURVE",
"642 1290 OFFCURVE",
"598 1290 CURVE SMOOTH",
"442 1290 OFFCURVE",
"314 1192 OFFCURVE",
"314 1072 CURVE SMOOTH",
"314 964 OFFCURVE",
"322 898 OFFCURVE",
"340 843 CURVE",
"479 787 LINE",
"469 838 OFFCURVE",
"462 928 OFFCURVE",
"462 956 CURVE SMOOTH",
"462 1096 OFFCURVE",
"509 1172 OFFCURVE",
"598 1172 CURVE SMOOTH",
"619 1172 OFFCURVE",
"667 1170 OFFCURVE",
"738 1164 CURVE SMOOTH",
"802 1159 OFFCURVE",
"859 1157 OFFCURVE",
"904 1157 CURVE SMOOTH",
"925 1157 OFFCURVE",
"943 1157 OFFCURVE",
"962 1159 CURVE",
"953 1131 OFFCURVE",
"935 1073 OFFCURVE",
"918 1029 CURVE SMOOTH",
"872 909 OFFCURVE",
"848 844 OFFCURVE",
"828 809 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"387 -27 OFFCURVE",
"513 90 OFFCURVE",
"513 230 CURVE SMOOTH",
"513 333 OFFCURVE",
"417 438 OFFCURVE",
"340 521 CURVE SMOOTH",
"277 589 OFFCURVE",
"225 653 OFFCURVE",
"225 700 CURVE SMOOTH",
"225 725 OFFCURVE",
"242 745 OFFCURVE",
"271 745 CURVE SMOOTH",
"312 745 OFFCURVE",
"347 724 OFFCURVE",
"375 682 CURVE SMOOTH",
"403 640 OFFCURVE",
"442 618 OFFCURVE",
"494 618 CURVE SMOOTH",
"531 618 OFFCURVE",
"566 662 OFFCURVE",
"566 702 CURVE SMOOTH",
"566 748 OFFCURVE",
"525 797 OFFCURVE",
"473 826 CURVE",
"466 876 OFFCURVE",
"462 934 OFFCURVE",
"462 956 CURVE SMOOTH",
"462 1096 OFFCURVE",
"509 1172 OFFCURVE",
"598 1172 CURVE SMOOTH",
"619 1172 OFFCURVE",
"667 1170 OFFCURVE",
"738 1164 CURVE SMOOTH",
"802 1159 OFFCURVE",
"859 1157 OFFCURVE",
"904 1157 CURVE SMOOTH",
"925 1157 OFFCURVE",
"943 1157 OFFCURVE",
"962 1159 CURVE",
"929 1090 OFFCURVE",
"883 956 OFFCURVE",
"848 831 CURVE",
"649 789 LINE",
"655 713 LINE",
"822 713 LINE",
"725 180 LINE SMOOTH",
"721 160 OFFCURVE",
"719 140 OFFCURVE",
"719 121 CURVE SMOOTH",
"719 39 OFFCURVE",
"753 -27 OFFCURVE",
"849 -27 CURVE SMOOTH",
"990 -27 OFFCURVE",
"1097 75 OFFCURVE",
"1216 266 CURVE",
"1161 317 LINE",
"1063 189 OFFCURVE",
"993 125 OFFCURVE",
"951 125 CURVE SMOOTH",
"915 125 OFFCURVE",
"917 172 OFFCURVE",
"928 233 CURVE SMOOTH",
"1015 713 LINE",
"1262 713 LINE",
"1275 819 LINE",
"1035 819 LINE",
"1072 1015 OFFCURVE",
"1115 1148 OFFCURVE",
"1143 1189 CURVE",
"1206 1212 OFFCURVE",
"1260 1257 OFFCURVE",
"1260 1304 CURVE SMOOTH",
"1260 1344 OFFCURVE",
"1212 1364 OFFCURVE",
"1162 1364 CURVE SMOOTH",
"1097 1364 OFFCURVE",
"1041 1323 OFFCURVE",
"1002 1245 CURVE",
"944 1246 OFFCURVE",
"886 1252 OFFCURVE",
"789 1268 CURVE SMOOTH",
"703 1282 OFFCURVE",
"642 1290 OFFCURVE",
"598 1290 CURVE SMOOTH",
"442 1290 OFFCURVE",
"314 1192 OFFCURVE",
"314 1072 CURVE SMOOTH",
"314 968 OFFCURVE",
"321 903 OFFCURVE",
"338 849 CURVE",
"205 833 OFFCURVE",
"115 744 OFFCURVE",
"115 605 CURVE SMOOTH",
"115 504 OFFCURVE",
"167 420 OFFCURVE",
"254 332 CURVE SMOOTH",
"311 274 OFFCURVE",
"385 195 OFFCURVE",
"385 154 CURVE SMOOTH",
"385 115 OFFCURVE",
"366 96 OFFCURVE",
"326 96 CURVE SMOOTH",
"289 96 OFFCURVE",
"255 116 OFFCURVE",
"224 156 CURVE SMOOTH",
"193 195 OFFCURVE",
"153 215 OFFCURVE",
"105 215 CURVE SMOOTH",
"47 215 OFFCURVE",
"21 172 OFFCURVE",
"21 120 CURVE SMOOTH",
"21 43 OFFCURVE",
"117 -27 OFFCURVE",
"208 -27 CURVE SMOOTH"
);
}
);
width = 1275;
}
);
leftKerningGroup = s;
leftMetricsKey = s;
note = uniFB06;
rightKerningGroup = f_f_t;
rightMetricsKey = t;
unicode = FB06;
},
{
glyphname = utilde;
lastChange = "2018-08-17 12:56:38 +0000";
layers = (
{
components = (
{
alignment = -1;
name = u;
transform = "{1, 0, 0, 1, -40, 0}";
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 383, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 953;
},
{
components = (
{
alignment = -1;
name = u;
},
{
name = tildecomb;
transform = "{1, 0, 0, 1, 493, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 992;
}
);
leftKerningGroup = u;
widthMetricsKey = "=u";
note = utilde;
unicode = 0169;
},
{
glyphname = v;
lastChange = "2018-08-18 09:50:09 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"77 -125 LINE",
"179 -125 LINE",
"571 1336 LINE",
"469 1336 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"390 -27 OFFCURVE",
"584 163 OFFCURVE",
"670 401 CURVE SMOOTH",
"706 501 OFFCURVE",
"721 588 OFFCURVE",
"721 663 CURVE SMOOTH",
"721 723 OFFCURVE",
"699 852 OFFCURVE",
"613 852 CURVE SMOOTH",
"559 852 OFFCURVE",
"554 821 OFFCURVE",
"554 778 CURVE",
"594 707 OFFCURVE",
"608 610 OFFCURVE",
"608 549 CURVE SMOOTH",
"608 315 OFFCURVE",
"414 66 OFFCURVE",
"301 66 CURVE SMOOTH",
"247 66 OFFCURVE",
"223 101 OFFCURVE",
"223 156 CURVE SMOOTH",
"223 172 OFFCURVE",
"225 189 OFFCURVE",
"228 207 CURVE SMOOTH",
"314 688 LINE SMOOTH",
"318 709 OFFCURVE",
"321 733 OFFCURVE",
"321 756 CURVE SMOOTH",
"321 806 OFFCURVE",
"309 852 OFFCURVE",
"266 852 CURVE SMOOTH",
"179 852 OFFCURVE",
"117 789 OFFCURVE",
"25 662 CURVE",
"69 625 LINE",
"115 682 OFFCURVE",
"147 711 OFFCURVE",
"168 711 CURVE SMOOTH",
"198 711 OFFCURVE",
"196 649 OFFCURVE",
"192 625 CURVE SMOOTH",
"113 141 LINE SMOOTH",
"111 128 OFFCURVE",
"110 116 OFFCURVE",
"110 104 CURVE SMOOTH",
"110 23 OFFCURVE",
"149 -27 OFFCURVE",
"223 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
38 1 1 2 15 1 3 1 2 76 0 1 1 2 97 4 1 2 2 95 77 0 3 3 0 97 0 0 0 93 0 78 37 40 40 39 35 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 771;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"51 -136 LINE",
"245 -136 LINE",
"627 1287 LINE",
"433 1287 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"447 -27 OFFCURVE",
"659 149 OFFCURVE",
"749 390 CURVE SMOOTH",
"787 492 OFFCURVE",
"806 584 OFFCURVE",
"806 665 CURVE SMOOTH",
"806 745 OFFCURVE",
"779 852 OFFCURVE",
"671 852 CURVE SMOOTH",
"581 852 OFFCURVE",
"581 791 OFFCURVE",
"581 750 CURVE",
"625 680 OFFCURVE",
"647 609 OFFCURVE",
"647 539 CURVE SMOOTH",
"647 345 OFFCURVE",
"488 88 OFFCURVE",
"377 88 CURVE SMOOTH",
"331 88 OFFCURVE",
"314 127 OFFCURVE",
"314 173 CURVE SMOOTH",
"314 187 OFFCURVE",
"316 201 OFFCURVE",
"319 215 CURVE SMOOTH",
"399 662 LINE SMOOTH",
"402 677 OFFCURVE",
"403 693 OFFCURVE",
"403 709 CURVE SMOOTH",
"403 780 OFFCURVE",
"381 852 OFFCURVE",
"312 852 CURVE SMOOTH",
"235 852 OFFCURVE",
"143 786 OFFCURVE",
"39 655 CURVE",
"97 606 LINE",
"135 661 OFFCURVE",
"165 688 OFFCURVE",
"187 688 CURVE SMOOTH",
"224 688 OFFCURVE",
"212 622 OFFCURVE",
"203 582 CURVE SMOOTH",
"116 174 LINE SMOOTH",
"113 160 OFFCURVE",
"112 146 OFFCURVE",
"112 133 CURVE SMOOTH",
"112 44 OFFCURVE",
"169 -27 OFFCURVE",
"272 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 39 values pushed */
38 1 1 2 1 76 0 1 2 3 2 1 3 128 4 1 2 2 34 77 0 3 3 0 98 0 0 0 32 0 78 37 40 40 39 35 5 8 27 
CALL[ ]\011/* CallFunction */";
};
width = 841;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "49C321F3-9DD9-432F-AC30-F3DFFAB4A805";
name = "Aug 13 18, 08:41";
paths = (
{
closed = 1;
nodes = (
"831 770 OFFCURVE",
"802 852 OFFCURVE",
"735 852 CURVE SMOOTH",
"689 852 OFFCURVE",
"666 827 OFFCURVE",
"666 778 CURVE",
"690 728 OFFCURVE",
"702 663 OFFCURVE",
"702 584 CURVE SMOOTH",
"702 340 OFFCURVE",
"473 76 OFFCURVE",
"364 76 CURVE SMOOTH",
"310 76 OFFCURVE",
"283 100 OFFCURVE",
"283 147 CURVE SMOOTH",
"283 164 OFFCURVE",
"286 184 OFFCURVE",
"293 207 CURVE SMOOTH",
"429 689 LINE SMOOTH",
"436 714 OFFCURVE",
"440 740 OFFCURVE",
"440 768 CURVE SMOOTH",
"440 821 OFFCURVE",
"422 852 OFFCURVE",
"385 852 CURVE SMOOTH",
"308 852 OFFCURVE",
"218 789 OFFCURVE",
"115 662 CURVE",
"114 661 OFFCURVE",
"113 659 OFFCURVE",
"113 657 CURVE SMOOTH",
"113 652 OFFCURVE",
"118 644 OFFCURVE",
"128 635 CURVE SMOOTH",
"141 623 OFFCURVE",
"151 620 OFFCURVE",
"156 625 CURVE",
"207 682 OFFCURVE",
"242 711 OFFCURVE",
"263 711 CURVE SMOOTH",
"284 711 OFFCURVE",
"295 695 OFFCURVE",
"295 662 CURVE SMOOTH",
"295 651 OFFCURVE",
"293 639 OFFCURVE",
"289 625 CURVE SMOOTH",
"152 141 LINE SMOOTH",
"136 84 OFFCURVE",
"174 -27 OFFCURVE",
"258 -27 CURVE SMOOTH",
"435 -27 OFFCURVE",
"647 163 OFFCURVE",
"752 401 CURVE SMOOTH",
"805 520 OFFCURVE",
"831 621 OFFCURVE",
"831 705 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 40 values pushed */
38 1 1 2 15 1 3 1 2 76 0 1 1 2 97 4 1 2 2 95 77 0 3 3 0 97 0 0 0 93 0 78 37 40 40 39 35 5 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 823;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "5354D1D4-A579-4BA9-A71A-4BECDDE26A40";
name = "Aug 13 18, 08:41";
paths = (
{
closed = 1;
nodes = (
"868 766 OFFCURVE",
"807 852 OFFCURVE",
"748 852 QCURVE SMOOTH",
"649 852 OFFCURVE",
"649 750 QCURVE",
"698 659 OFFCURVE",
"698 567 QCURVE SMOOTH",
"698 420 OFFCURVE",
"475 88 OFFCURVE",
"387 88 QCURVE SMOOTH",
"344 88 OFFCURVE",
"334 131 QCURVE SMOOTH",
"326 170 OFFCURVE",
"340 215 QCURVE SMOOTH",
"479 662 LINE SMOOTH",
"489 694 OFFCURVE",
"489 729 QCURVE SMOOTH",
"489 782 OFFCURVE",
"444 852 OFFCURVE",
"399 852 QCURVE SMOOTH",
"283 852 OFFCURVE",
"111 655 QCURVE",
"109 651 OFFCURVE",
"109 647 QCURVE SMOOTH",
"109 636 OFFCURVE",
"127 618 QCURVE",
"154 594 OFFCURVE",
"164 606 QCURVE SMOOTH",
"229 688 OFFCURVE",
"262 688 QCURVE",
"279 689 OFFCURVE",
"279 664 QCURVE SMOOTH",
"279 656 OFFCURVE",
"256 582 QCURVE SMOOTH",
"129 174 LINE SMOOTH",
"113 123 OFFCURVE",
"139 29 OFFCURVE",
"209 -27 OFFCURVE",
"272 -27 QCURVE SMOOTH",
"403 -27 OFFCURVE",
"702 209 OFFCURVE",
"868 570 OFFCURVE",
"868 707 QCURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 39 values pushed */
38 1 1 2 1 76 0 1 2 3 2 1 3 128 4 1 2 2 34 77 0 3 3 0 98 0 0 0 32 0 78 37 40 40 39 35 5 8 27 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 841;
}
);
leftKerningGroup = u;
note = v;
rightKerningGroup = w;
unicode = 0076;
},
{
glyphname = w;
lastChange = "2018-08-18 09:49:33 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"470 -215 LINE",
"572 -215 LINE",
"964 1246 LINE",
"862 1246 LINE"
);
},
{
closed = 1;
nodes = (
"83 -105 LINE",
"185 -105 LINE",
"577 1356 LINE",
"475 1356 LINE"
);
},
{
closed = 1;
nodes = (
"831 -27 OFFCURVE",
"1042 163 OFFCURVE",
"1148 401 CURVE SMOOTH",
"1201 520 OFFCURVE",
"1224 621 OFFCURVE",
"1224 705 CURVE SMOOTH",
"1224 770 OFFCURVE",
"1195 852 OFFCURVE",
"1131 852 CURVE SMOOTH",
"1088 852 OFFCURVE",
"1065 827 OFFCURVE",
"1065 778 CURVE",
"1089 728 OFFCURVE",
"1101 663 OFFCURVE",
"1101 584 CURVE SMOOTH",
"1101 340 OFFCURVE",
"869 66 OFFCURVE",
"750 66 CURVE SMOOTH",
"700 66 OFFCURVE",
"679 96 OFFCURVE",
"679 143 CURVE SMOOTH",
"679 162 OFFCURVE",
"683 184 OFFCURVE",
"689 207 CURVE SMOOTH",
"818 688 LINE SMOOTH",
"826 717 OFFCURVE",
"832 751 OFFCURVE",
"832 780 CURVE SMOOTH",
"832 820 OFFCURVE",
"820 852 OFFCURVE",
"784 852 CURVE SMOOTH",
"697 852 OFFCURVE",
"629 789 OFFCURVE",
"526 662 CURVE",
"567 625 LINE",
"618 682 OFFCURVE",
"653 711 OFFCURVE",
"674 711 CURVE SMOOTH",
"698 711 OFFCURVE",
"700 666 OFFCURVE",
"690 625 CURVE SMOOTH",
"569 141 LINE SMOOTH",
"563 119 OFFCURVE",
"561 99 OFFCURVE",
"561 80 CURVE SMOOTH",
"561 13 OFFCURVE",
"598 -27 OFFCURVE",
"664 -27 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"319 -27 OFFCURVE",
"423 38 OFFCURVE",
"510 145 CURVE",
"494 51 OFFCURVE",
"519 -27 OFFCURVE",
"610 -27 CURVE SMOOTH",
"878 -27 OFFCURVE",
"1141 374 OFFCURVE",
"1141 665 CURVE SMOOTH",
"1141 732 OFFCURVE",
"1118 852 OFFCURVE",
"1030 852 CURVE SMOOTH",
"989 852 OFFCURVE",
"974 824 OFFCURVE",
"974 778 CURVE",
"1012 712 OFFCURVE",
"1029 613 OFFCURVE",
"1029 560 CURVE SMOOTH",
"1029 363 OFFCURVE",
"841 66 OFFCURVE",
"709 66 CURVE SMOOTH",
"646 66 OFFCURVE",
"620 102 OFFCURVE",
"620 161 CURVE SMOOTH",
"620 175 OFFCURVE",
"622 190 OFFCURVE",
"625 207 CURVE SMOOTH",
"740 848 LINE",
"638 848 LINE",
"540 304 LINE SMOOTH",
"521 197 OFFCURVE",
"414 66 OFFCURVE",
"312 66 CURVE SMOOTH",
"251 66 OFFCURVE",
"224 104 OFFCURVE",
"224 167 CURVE SMOOTH",
"224 179 OFFCURVE",
"226 193 OFFCURVE",
"229 207 CURVE SMOOTH",
"304 625 LINE SMOOTH",
"312 669 OFFCURVE",
"319 715 OFFCURVE",
"319 753 CURVE SMOOTH",
"319 810 OFFCURVE",
"304 852 OFFCURVE",
"257 852 CURVE SMOOTH",
"180 852 OFFCURVE",
"117 789 OFFCURVE",
"25 662 CURVE",
"69 625 LINE",
"116 682 OFFCURVE",
"149 711 OFFCURVE",
"170 711 CURVE SMOOTH",
"214 711 OFFCURVE",
"208 657 OFFCURVE",
"202 625 CURVE SMOOTH",
"114 141 LINE SMOOTH",
"111 126 OFFCURVE",
"110 113 OFFCURVE",
"110 99 CURVE SMOOTH",
"110 24 OFFCURVE",
"148 -27 OFFCURVE",
"224 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 49 values pushed */
57 46 2 2 3 21 8 6 3 4 2 2 76 0 2 2 3 97 7 5 2 3 3 95 77 6 1 4 4 0 98 1 1 0 0 93 0 78 37 23 21 39 40 24 36 35 8 12 30 
CALL[ ]\011/* CallFunction */";
};
width = 1190;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"445 -221 LINE",
"639 -221 LINE",
"1021 1202 LINE",
"827 1202 LINE"
);
},
{
closed = 1;
nodes = (
"42 -168 LINE",
"236 -168 LINE",
"618 1255 LINE",
"424 1255 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"360 -27 OFFCURVE",
"448 8 OFFCURVE",
"539 76 CURVE",
"563 6 OFFCURVE",
"618 -27 OFFCURVE",
"691 -27 CURVE SMOOTH",
"967 -27 OFFCURVE",
"1225 372 OFFCURVE",
"1225 666 CURVE SMOOTH",
"1225 735 OFFCURVE",
"1204 852 OFFCURVE",
"1091 852 CURVE SMOOTH",
"1010 852 OFFCURVE",
"999 797 OFFCURVE",
"999 743 CURVE",
"1047 671 OFFCURVE",
"1065 592 OFFCURVE",
"1065 539 CURVE SMOOTH",
"1065 369 OFFCURVE",
"916 88 OFFCURVE",
"807 88 CURVE SMOOTH",
"753 88 OFFCURVE",
"731 118 OFFCURVE",
"731 169 CURVE SMOOTH",
"731 182 OFFCURVE",
"731 196 OFFCURVE",
"734 211 CURVE SMOOTH",
"849 848 LINE",
"655 848 LINE",
"571 381 LINE SMOOTH",
"549 257 OFFCURVE",
"477 88 OFFCURVE",
"378 88 CURVE SMOOTH",
"334 88 OFFCURVE",
"314 129 OFFCURVE",
"314 175 CURVE SMOOTH",
"314 188 OFFCURVE",
"315 201 OFFCURVE",
"317 213 CURVE SMOOTH",
"398 659 LINE SMOOTH",
"401 677 OFFCURVE",
"403 696 OFFCURVE",
"403 715 CURVE SMOOTH",
"403 785 OFFCURVE",
"379 852 OFFCURVE",
"309 852 CURVE SMOOTH",
"232 852 OFFCURVE",
"142 788 OFFCURVE",
"40 659 CURVE",
"96 606 LINE",
"139 663 OFFCURVE",
"167 692 OFFCURVE",
"183 692 CURVE SMOOTH",
"208 692 OFFCURVE",
"198 624 OFFCURVE",
"190 580 CURVE SMOOTH",
"116 174 LINE SMOOTH",
"113 156 OFFCURVE",
"112 138 OFFCURVE",
"112 121 CURVE SMOOTH",
"112 31 OFFCURVE",
"171 -27 OFFCURVE",
"275 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 50 values pushed */
55 45 2 2 3 8 1 0 4 2 76 0 2 3 4 3 2 4 128 7 5 2 3 3 34 77 6 1 4 4 0 98 1 1 0 0 32 0 78 37 22 21 39 40 23 36 35 8 8 30 
CALL[ ]\011/* CallFunction */";
};
width = 1260;
}
);
leftKerningGroup = u;
leftMetricsKey = "=v";
note = w;
rightKerningGroup = w;
rightMetricsKey = "=v";
unicode = 0077;
},
{
glyphname = x;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"733 -263 LINE",
"825 -220 LINE",
"195 1098 LINE",
"103 1054 LINE"
);
},
{
closed = 1;
nodes = (
"658 634 LINE",
"279 109 LINE",
"238 146 LINE",
"613 653 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"134 -27 OFFCURVE",
"194 25 OFFCURVE",
"264 135 CURVE SMOOTH",
"586 645 LINE SMOOTH",
"627 709 OFFCURVE",
"662 745 OFFCURVE",
"691 745 CURVE SMOOTH",
"710 745 OFFCURVE",
"719 729 OFFCURVE",
"731 706 CURVE SMOOTH",
"743 683 OFFCURVE",
"763 672 OFFCURVE",
"784 672 CURVE SMOOTH",
"824 672 OFFCURVE",
"845 697 OFFCURVE",
"845 741 CURVE SMOOTH",
"845 784 OFFCURVE",
"820 852 OFFCURVE",
"744 852 CURVE SMOOTH",
"687 852 OFFCURVE",
"624 790 OFFCURVE",
"545 670 CURVE SMOOTH",
"221 174 LINE SMOOTH",
"192 130 OFFCURVE",
"161 92 OFFCURVE",
"143 92 CURVE SMOOTH",
"129 92 OFFCURVE",
"123 101 OFFCURVE",
"108 126 CURVE SMOOTH",
"98 143 OFFCURVE",
"72 158 OFFCURVE",
"52 158 CURVE SMOOTH",
"14 158 OFFCURVE",
"-16 108 OFFCURVE",
"-16 64 CURVE SMOOTH",
"-16 11 OFFCURVE",
"19 -27 OFFCURVE",
"75 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"736 -27 OFFCURVE",
"780 60 OFFCURVE",
"792 233 CURVE",
"753 240 LINE",
"735 157 OFFCURVE",
"706 99 OFFCURVE",
"679 99 CURVE SMOOTH",
"651 99 OFFCURVE",
"620 139 OFFCURVE",
"575 218 CURVE SMOOTH",
"276 745 LINE SMOOTH",
"236 816 OFFCURVE",
"201 852 OFFCURVE",
"164 852 CURVE SMOOTH",
"115 852 OFFCURVE",
"92 778 OFFCURVE",
"45 629 CURVE",
"88 603 LINE",
"108 658 OFFCURVE",
"139 715 OFFCURVE",
"162 715 CURVE SMOOTH",
"174 715 OFFCURVE",
"185 706 OFFCURVE",
"195 688 CURVE SMOOTH",
"518 117 LINE SMOOTH",
"574 19 OFFCURVE",
"615 -27 OFFCURVE",
"657 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
52 37 22 8 4 5 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 0 1 5 1 0 114 0 5 2 2 5 112 7 1 1 1 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 0 7 5 1 0 114 0 5 2 2 5 112 0 1 1 8 97 9 1 8 8 95 77 0 7 7 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
0 0 1 5 1 0 114 0 5 2 2 5 112 7 1 1 1 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 0 7 5 1 0 114 0 5 2 2 5 112 0 1 1 8 97 9 1 8 8 95 77 0 7 7 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 0 7 5 7 0 5 128 0 5 2 2 5 112 0 1 1 8 97 9 1 8 8 95 77 0 7 7 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 0 7 5 7 0 5 128 0 5 2 7 5 2 126 0 1 1 8 97 9 1 8 8 95 77 0 7 7 8 97 9 1 8 8 95 77 6 1 2 2 3 98 4 1 3 3 93 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 0 7 5 7 0 5 128 0 5 2 7 5 2 126 0 1 1 8 97 9 1 8 8 95 77 0 7 7 8 97 9 1 8 8 95 77 0 2 2 3 97 4 1 3 3 93 77 0 6 6 3 98 4 1 3 3 93 3 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
56 54 39 36 33 36 36 38 36 33 33 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 872;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"200 -27 OFFCURVE",
"269 31 OFFCURVE",
"344 147 CURVE SMOOTH",
"659 635 LINE SMOOTH",
"689 682 OFFCURVE",
"717 705 OFFCURVE",
"743 705 CURVE SMOOTH",
"760 705 OFFCURVE",
"775 692 OFFCURVE",
"787 666 CURVE SMOOTH",
"799 639 OFFCURVE",
"819 627 OFFCURVE",
"842 627 CURVE SMOOTH",
"893 627 OFFCURVE",
"919 658 OFFCURVE",
"919 722 CURVE SMOOTH",
"919 802 OFFCURVE",
"884 852 OFFCURVE",
"800 852 CURVE SMOOTH",
"731 852 OFFCURVE",
"659 788 OFFCURVE",
"577 662 CURVE SMOOTH",
"265 180 LINE SMOOTH",
"241 144 OFFCURVE",
"219 125 OFFCURVE",
"206 125 CURVE SMOOTH",
"192 125 OFFCURVE",
"181 137 OFFCURVE",
"164 162 CURVE SMOOTH",
"147 187 OFFCURVE",
"126 199 OFFCURVE",
"103 199 CURVE SMOOTH",
"60 199 OFFCURVE",
"26 143 OFFCURVE",
"26 77 CURVE SMOOTH",
"26 37 OFFCURVE",
"46 -27 OFFCURVE",
"131 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"796 -27 OFFCURVE",
"848 66 OFFCURVE",
"867 250 CURVE",
"807 264 LINE",
"782 196 OFFCURVE",
"761 162 OFFCURVE",
"743 162 CURVE SMOOTH",
"726 162 OFFCURVE",
"698 197 OFFCURVE",
"659 264 CURVE SMOOTH",
"385 731 LINE SMOOTH",
"336 814 OFFCURVE",
"290 852 OFFCURVE",
"239 852 CURVE SMOOTH",
"177 852 OFFCURVE",
"118 773 OFFCURVE",
"63 614 CURVE",
"128 580 LINE",
"143 617 OFFCURVE",
"166 670 OFFCURVE",
"185 670 CURVE SMOOTH",
"197 670 OFFCURVE",
"220 639 OFFCURVE",
"252 578 CURVE",
"530 125 LINE SMOOTH",
"593 23 OFFCURVE",
"656 -27 OFFCURVE",
"713 -27 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
52 37 22 8 4 5 0 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
0 0 7 5 1 0 114 0 5 2 6 5 112 0 1 1 8 97 9 1 8 8 34 77 0 7 7 8 97 9 1 8 8 34 77 0 2 2 3 97 4 1 3 3 32 77 0 6 6 3 98 4 1 3 3 32 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 0 7 5 7 0 5 128 0 5 2 6 5 112 0 1 1 8 97 9 1 8 8 34 77 0 7 7 8 97 9 1 8 8 34 77 0 2 2 3 97 4 1 3 3 32 77 0 6 6 3 98 4 1 3 3 32 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
0 0 7 5 7 0 5 128 0 5 2 7 5 2 126 0 1 1 8 97 9 1 8 8 34 77 0 7 7 8 97 9 1 8 8 34 77 0 2 2 3 97 4 1 3 3 32 77 0 6 6 3 98 4 1 3 3 32 3 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
56 54 39 36 33 36 36 38 36 33 33 10 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 921;
}
);
leftKerningGroup = x;
note = x;
unicode = 0078;
},
{
glyphname = y;
lastChange = "2018-08-18 09:52:08 +0000";
layers = (
{
anchors = (
{
name = bottom;
position = "{272, 0}";
},
{
name = top;
position = "{352, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"803 831 OFFCURVE",
"779 852 OFFCURVE",
"731 852 CURVE SMOOTH",
"683 852 OFFCURVE",
"659 829 OFFCURVE",
"659 784 CURVE",
"672 734 OFFCURVE",
"678 686 OFFCURVE",
"678 639 CURVE SMOOTH",
"678 526 OFFCURVE",
"588 212 OFFCURVE",
"489 39 CURVE",
"479 39 LINE",
"484 106 OFFCURVE",
"487 169 OFFCURVE",
"487 227 CURVE SMOOTH",
"487 400 OFFCURVE",
"472 547 OFFCURVE",
"443 669 CURVE SMOOTH",
"413 791 OFFCURVE",
"370 852 OFFCURVE",
"313 852 CURVE SMOOTH",
"235 852 OFFCURVE",
"161 769 OFFCURVE",
"92 604 CURVE",
"139 586 LINE",
"182 673 OFFCURVE",
"219 717 OFFCURVE",
"250 717 CURVE SMOOTH",
"283 717 OFFCURVE",
"311 658 OFFCURVE",
"334 540 CURVE SMOOTH",
"357 422 OFFCURVE",
"368 287 OFFCURVE",
"368 135 CURVE SMOOTH",
"368 -86 OFFCURVE",
"330 -224 OFFCURVE",
"231 -348 CURVE SMOOTH",
"182 -409 OFFCURVE",
"135 -440 OFFCURVE",
"92 -440 CURVE SMOOTH",
"66 -440 OFFCURVE",
"46 -429 OFFCURVE",
"33 -406 CURVE SMOOTH",
"20 -383 OFFCURVE",
"-1 -371 OFFCURVE",
"-28 -371 CURVE SMOOTH",
"-83 -371 OFFCURVE",
"-103 -406 OFFCURVE",
"-103 -459 CURVE SMOOTH",
"-103 -506 OFFCURVE",
"-57 -555 OFFCURVE",
"12 -555 CURVE SMOOTH",
"180 -555 OFFCURVE",
"377 -282 OFFCURVE",
"443 -172 CURVE SMOOTH",
"476 -117 OFFCURVE",
"529 -15 OFFCURVE",
"604 132 CURVE SMOOTH",
"678 279 OFFCURVE",
"744 498 OFFCURVE",
"803 788 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"160 -555 OFFCURVE",
"333 -282 OFFCURVE",
"389 -172 CURVE SMOOTH",
"560 161 OFFCURVE",
"621 402 OFFCURVE",
"666 788 CURVE",
"662 831 OFFCURVE",
"636 852 OFFCURVE",
"588 852 CURVE SMOOTH",
"540 852 OFFCURVE",
"522 829 OFFCURVE",
"522 784 CURVE",
"543 723 OFFCURVE",
"555 653 OFFCURVE",
"555 615 CURVE SMOOTH",
"555 480 OFFCURVE",
"492 139 OFFCURVE",
"337 -136 CURVE",
"394 -101 LINE",
"401 -27 OFFCURVE",
"397 149 OFFCURVE",
"389 227 CURVE SMOOTH",
"367 469 OFFCURVE",
"299 852 OFFCURVE",
"160 852 CURVE SMOOTH",
"82 852 OFFCURVE",
"25 769 OFFCURVE",
"-29 604 CURVE",
"19 586 LINE",
"55 673 OFFCURVE",
"86 737 OFFCURVE",
"117 737 CURVE SMOOTH",
"150 737 OFFCURVE",
"194 657 OFFCURVE",
"228 540 CURVE SMOOTH",
"276 375 OFFCURVE",
"303 141 OFFCURVE",
"303 27 CURVE SMOOTH",
"303 -133 OFFCURVE",
"266 -246 OFFCURVE",
"193 -348 CURVE SMOOTH",
"149 -409 OFFCURVE",
"106 -455 OFFCURVE",
"63 -455 CURVE SMOOTH",
"37 -455 OFFCURVE",
"20 -445 OFFCURVE",
"2 -425 CURVE SMOOTH",
"-17 -404 OFFCURVE",
"-39 -395 OFFCURVE",
"-68 -395 CURVE SMOOTH",
"-109 -395 OFFCURVE",
"-130 -424 OFFCURVE",
"-130 -462 CURVE SMOOTH",
"-130 -485 OFFCURVE",
"-109 -555 OFFCURVE",
"-8 -555 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
41 1 3 4 35 1 1 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 3 2 2 1 114 0 3 3 4 97 5 1 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
0 1 3 2 3 1 2 128 0 3 3 4 97 5 1 4 4 95 77 0 2 2 0 98 0 0 0 97 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
27 38 37 33 36 37 6 12 28 
CALL[ ]\011/* CallFunction */";
};
width = 693;
},
{
anchors = (
{
name = bottom;
position = "{334, 0}";
},
{
name = top;
position = "{374, 856}";
}
);
background = {
paths = (
{
closed = 1;
nodes = (
"828 823 OFFCURVE",
"797 852 OFFCURVE",
"734 852 CURVE SMOOTH",
"671 852 OFFCURVE",
"640 821 OFFCURVE",
"640 760 CURVE",
"657 720 OFFCURVE",
"666 682 OFFCURVE",
"666 645 CURVE SMOOTH",
"666 514 OFFCURVE",
"604 271 OFFCURVE",
"525 115 CURVE",
"513 119 LINE",
"520 180 OFFCURVE",
"523 244 OFFCURVE",
"523 309 CURVE SMOOTH",
"523 590 OFFCURVE",
"447 852 OFFCURVE",
"316 852 CURVE SMOOTH",
"227 852 OFFCURVE",
"146 769 OFFCURVE",
"72 604 CURVE",
"62 583 OFFCURVE",
"129 553 OFFCURVE",
"136 573 CURVE",
"174 648 OFFCURVE",
"207 686 OFFCURVE",
"236 686 CURVE SMOOTH",
"273 686 OFFCURVE",
"299 627 OFFCURVE",
"314 509 CURVE SMOOTH",
"329 391 OFFCURVE",
"336 245 OFFCURVE",
"336 72 CURVE SMOOTH",
"336 -125 OFFCURVE",
"306 -268 OFFCURVE",
"216 -362 CURVE SMOOTH",
"171 -409 OFFCURVE",
"134 -432 OFFCURVE",
"107 -432 CURVE SMOOTH",
"80 -432 OFFCURVE",
"33 -401 OFFCURVE",
"-32 -338 CURVE",
"-95 -338 OFFCURVE",
"-133 -378 OFFCURVE",
"-133 -446 CURVE SMOOTH",
"-133 -510 OFFCURVE",
"-66 -555 OFFCURVE",
"15 -555 CURVE SMOOTH",
"156 -555 OFFCURVE",
"293 -443 OFFCURVE",
"450 -170 CURVE SMOOTH",
"607 103 OFFCURVE",
"700 223 OFFCURVE",
"828 764 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"156 -555 OFFCURVE",
"282 -443 OFFCURVE",
"416 -170 CURVE SMOOTH",
"550 103 OFFCURVE",
"635 278 OFFCURVE",
"713 764 CURVE",
"707 823 OFFCURVE",
"674 852 OFFCURVE",
"611 852 CURVE SMOOTH",
"548 852 OFFCURVE",
"525 821 OFFCURVE",
"525 760 CURVE",
"556 698 OFFCURVE",
"563 653 OFFCURVE",
"563 601 CURVE SMOOTH",
"563 454 OFFCURVE",
"516 184 OFFCURVE",
"411 -22 CURVE",
"446 -28 LINE",
"461 54 OFFCURVE",
"454 227 OFFCURVE",
"447 309 CURVE SMOOTH",
"423 590 OFFCURVE",
"324 852 OFFCURVE",
"193 852 CURVE SMOOTH",
"104 852 OFFCURVE",
"30 769 OFFCURVE",
"-29 604 CURVE",
"37 573 LINE",
"69 648 OFFCURVE",
"98 686 OFFCURVE",
"127 686 CURVE SMOOTH",
"164 686 OFFCURVE",
"196 627 OFFCURVE",
"221 509 CURVE SMOOTH",
"256 343 OFFCURVE",
"287 66 OFFCURVE",
"287 -54 CURVE SMOOTH",
"287 -187 OFFCURVE",
"262 -289 OFFCURVE",
"199 -362 CURVE SMOOTH",
"158 -409 OFFCURVE",
"123 -432 OFFCURVE",
"96 -432 CURVE SMOOTH",
"82 -432 OFFCURVE",
"42 -408 OFFCURVE",
"22 -384 CURVE SMOOTH",
"-2 -355 OFFCURVE",
"-38 -338 OFFCURVE",
"-61 -338 CURVE SMOOTH",
"-110 -338 OFFCURVE",
"-143 -373 OFFCURVE",
"-143 -433 CURVE SMOOTH",
"-143 -473 OFFCURVE",
"-111 -555 OFFCURVE",
"15 -555 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
40 1 3 4 34 1 1 3 2 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 3 2 2 1 114 0 3 3 4 97 5 1 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
0 1 3 2 3 1 2 128 0 3 3 4 97 5 1 4 4 34 77 0 2 2 0 98 0 0 0 36 0 78 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 9 values pushed */
27 38 37 17 36 37 6 8 28 
CALL[ ]\011/* CallFunction */";
};
width = 736;
}
);
leftKerningGroup = y;
note = y;
unicode = 0079;
},
{
glyphname = yacute;
lastChange = "2018-08-18 12:31:17 +0000";
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 207, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 693;
},
{
components = (
{
alignment = -1;
name = y;
},
{
name = acutecomb;
transform = "{1, 0, 0, 1, 214, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 736;
}
);
leftKerningGroup = uni0233;
leftMetricsKey = y;
widthMetricsKey = y;
note = yacute;
unicode = 00FD;
},
{
glyphname = ydieresis;
lastChange = "2018-08-18 12:31:22 +0000";
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 276, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 693;
},
{
components = (
{
alignment = -1;
name = y;
transform = "{1, 0, 0, 1, 37, 0}";
},
{
name = uni0308;
transform = "{1, 0, 0, 1, 334, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 736;
}
);
leftKerningGroup = uni0233;
leftMetricsKey = y;
widthMetricsKey = y;
note = ydieresis;
unicode = 00FF;
},
{
glyphname = yen;
lastChange = "2018-08-18 02:23:11 +0000";
layers = (
{
components = (
{
alignment = -1;
name = Y;
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1087 472 LINE",
"1087 572 LINE",
"256 572 LINE",
"256 472 LINE"
);
},
{
closed = 1;
nodes = (
"620 737 LINE",
"588 839 LINE",
"317 839 LINE",
"317 737 LINE"
);
},
{
closed = 1;
nodes = (
"1148 737 LINE",
"1148 839 LINE",
"912 839 LINE",
"838 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
92 82 60 50 4 7 8 104 40 2 5 6 113 30 2 3 4 18 8 2 1 0 4 76 90 1 8 74 16 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 10 5 4 5 10 4 128 16 1 4 17 1 3 0 4 3 104 13 11 9 3 7 7 8 95 12 1 8 8 94 77 15 1 5 5 6 95 14 1 6 6 95 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
0 10 5 4 5 10 4 128 16 1 4 17 1 3 0 4 3 104 2 1 0 0 1 0 1 101 13 11 9 3 7 7 8 95 12 1 8 8 94 77 15 1 5 5 6 95 14 1 6 6 95 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 10 5 4 5 10 4 128 12 1 8 13 11 9 3 7 6 8 7 105 16 1 4 17 1 3 0 4 3 104 2 1 0 0 1 0 1 101 15 1 5 5 6 95 14 1 6 6 95 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 10 5 4 5 10 4 128 12 1 8 13 11 9 3 7 6 8 7 105 14 1 6 15 1 5 10 6 5 103 16 1 4 17 1 3 0 4 3 104 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
116 114 111 110 107 105 102 101 97 95 89 85 80 79 74 72 65 63 85 20 35 20 35 20 38 39 21 18 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1228;
},
{
components = (
{
name = Y;
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1162 452 LINE",
"1162 572 LINE",
"301 572 LINE",
"301 452 LINE"
);
},
{
closed = 1;
nodes = (
"650 739 LINE",
"618 859 LINE",
"347 859 LINE",
"347 739 LINE"
);
},
{
closed = 1;
nodes = (
"1208 739 LINE",
"1208 859 LINE",
"992 859 LINE",
"898 739 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
43 24 2 5 74 73 1 15 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
12 1 1 13 1 0 14 1 0 103 9 7 6 3 4 4 5 97 8 1 5 5 31 77 11 1 2 2 3 95 10 1 3 3 34 77 16 1 14 14 15 97 0 15 15 32 15 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
12 1 1 13 1 0 14 1 0 103 16 1 14 0 15 14 15 101 9 7 6 3 4 4 5 97 8 1 5 5 31 77 11 1 2 2 3 95 10 1 3 3 34 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
8 1 5 9 7 6 3 4 3 5 4 105 12 1 1 13 1 0 14 1 0 103 16 1 14 0 15 14 15 101 11 1 2 2 3 95 10 1 3 3 34 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
77 75 72 71 67 66 63 61 59 58 55 53 51 50 47 45 20 24 35 20 19 34 19 34 17 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1267;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "863545C2-98B5-4BAC-839A-7B8994F07BF7";
name = "Aug 16 18, 18:24";
paths = (
{
closed = 1;
nodes = (
"1235 737 LINE",
"1235 839 LINE",
"344 839 LINE",
"344 737 LINE"
);
},
{
closed = 1;
nodes = (
"1174 472 LINE",
"1174 572 LINE",
"283 572 LINE",
"283 472 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
92 82 60 50 4 7 8 104 40 2 5 6 113 30 2 3 4 18 8 2 1 0 4 76 90 1 8 74 16 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 10 5 4 5 10 4 128 16 1 4 17 1 3 0 4 3 104 13 11 9 3 7 7 8 95 12 1 8 8 94 77 15 1 5 5 6 95 14 1 6 6 95 77 2 1 0 0 1 97 0 1 1 93 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
0 10 5 4 5 10 4 128 16 1 4 17 1 3 0 4 3 104 2 1 0 0 1 0 1 101 13 11 9 3 7 7 8 95 12 1 8 8 94 77 15 1 5 5 6 95 14 1 6 6 95 5 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 10 5 4 5 10 4 128 12 1 8 13 11 9 3 7 6 8 7 105 16 1 4 17 1 3 0 4 3 104 2 1 0 0 1 0 1 101 15 1 5 5 6 95 14 1 6 6 95 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 10 5 4 5 10 4 128 12 1 8 13 11 9 3 7 6 8 7 105 14 1 6 15 1 5 10 6 5 103 16 1 4 17 1 3 0 4 3 104 2 1 0 1 1 0 89 2 1 0 0 1 97 0 1 0 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 30 values pushed */
116 114 111 110 107 105 102 101 97 95 89 85 80 79 74 72 65 63 85 20 35 20 35 20 38 39 21 18 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 1317;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "3E98D804-C2B1-4187-BDB4-D91A5240CB08";
name = "Aug 16 18, 18:24";
paths = (
{
closed = 1;
nodes = (
"411 141 OFFCURVE",
"340 86 OFFCURVE",
"256 86 QCURVE SMOOTH",
"242 86 OFFCURVE",
"219 -8 OFFCURVE",
"231 -8 QCURVE",
"307 0 OFFCURVE",
"682 0 OFFCURVE",
"758 -8 QCURVE",
"772 -8 OFFCURVE",
"796 86 OFFCURVE",
"782 86 QCURVE SMOOTH",
"698 86 OFFCURVE",
"646 131 OFFCURVE",
"666 201 QCURVE SMOOTH",
"741 465 LINE",
"1104 465 LINE",
"1118 467 OFFCURVE",
"1145 569 OFFCURVE",
"1133 569 QCURVE SMOOTH",
"774 567 LINE",
"786 608 OFFCURVE",
"819 641 QCURVE SMOOTH",
"924 752 LINE",
"1180 752 LINE",
"1196 754 OFFCURVE",
"1220 856 OFFCURVE",
"1208 856 QCURVE SMOOTH",
"1020 854 LINE",
"1198 1044 LINE SMOOTH",
"1341 1198 OFFCURVE",
"1454 1270 OFFCURVE",
"1554 1270 QCURVE SMOOTH",
"1571 1270 OFFCURVE",
"1593 1364 OFFCURVE",
"1579 1364 QCURVE",
"1520 1358 OFFCURVE",
"1208 1358 OFFCURVE",
"1151 1364 QCURVE",
"1139 1364 OFFCURVE",
"1112 1270 OFFCURVE",
"1126 1270 QCURVE SMOOTH",
"1206 1270 OFFCURVE",
"1233 1220 OFFCURVE",
"1174 1157 QCURVE SMOOTH",
"786 752 LINE",
"749 709 OFFCURVE",
"733 754 QCURVE SMOOTH",
"602 1157 LINE SMOOTH",
"580 1227 OFFCURVE",
"629 1270 OFFCURVE",
"713 1270 QCURVE SMOOTH",
"725 1270 OFFCURVE",
"749 1364 OFFCURVE",
"733 1364 QCURVE",
"676 1358 OFFCURVE",
"284 1358 OFFCURVE",
"227 1364 QCURVE",
"213 1364 OFFCURVE",
"193 1270 OFFCURVE",
"207 1270 QCURVE SMOOTH",
"276 1270 OFFCURVE",
"345 1205 OFFCURVE",
"365 1139 QCURVE SMOOTH",
"457 854 LINE",
"264 854 LINE",
"250 856 OFFCURVE",
"222 754 OFFCURVE",
"236 754 QCURVE SMOOTH",
"492 752 LINE",
"516 678 LINE SMOOTH",
"537 614 OFFCURVE",
"539 567 QCURVE",
"186 567 LINE",
"174 569 OFFCURVE",
"144 467 OFFCURVE",
"160 467 QCURVE SMOOTH",
"510 465 LINE",
"434 217 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 9 values pushed */
43 24 2 5 74 73 1 15 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
12 1 1 13 1 0 14 1 0 103 9 7 6 3 4 4 5 97 8 1 5 5 31 77 11 1 2 2 3 95 10 1 3 3 34 77 16 1 14 14 15 97 0 15 15 32 15 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
59 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
12 1 1 13 1 0 14 1 0 103 16 1 14 0 15 14 15 101 9 7 6 3 4 4 5 97 8 1 5 5 31 77 11 1 2 2 3 95 10 1 3 3 34 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
8 1 5 9 7 6 3 4 3 5 4 105 12 1 1 13 1 0 14 1 0 103 16 1 14 0 15 14 15 101 11 1 2 2 3 95 10 1 3 3 34 2 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
77 75 72 71 67 66 63 61 59 58 55 53 51 50 47 45 20 24 35 20 19 34 19 34 17 17 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 1267;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = ygrave;
lastChange = "2018-08-18 12:31:20 +0000";
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 274, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 693;
},
{
components = (
{
alignment = -1;
name = y;
},
{
name = gravecomb;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 736;
}
);
leftKerningGroup = uni0233;
leftMetricsKey = y;
widthMetricsKey = y;
note = ygrave;
unicode = 1EF3;
},
{
glyphname = z;
lastChange = "2018-08-17 11:48:04 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"694 -59 OFFCURVE",
"797 26 OFFCURVE",
"797 155 CURVE SMOOTH",
"797 207 OFFCURVE",
"772 282 OFFCURVE",
"711 282 CURVE SMOOTH",
"673 282 OFFCURVE",
"654 264 OFFCURVE",
"654 228 CURVE SMOOTH",
"654 203 OFFCURVE",
"663 182 OFFCURVE",
"684 163 CURVE SMOOTH",
"708 142 OFFCURVE",
"713 122 OFFCURVE",
"713 102 CURVE SMOOTH",
"713 52 OFFCURVE",
"690 28 OFFCURVE",
"645 28 CURVE SMOOTH",
"622 28 OFFCURVE",
"556 46 OFFCURVE",
"472 81 CURVE SMOOTH",
"388 116 OFFCURVE",
"326 136 OFFCURVE",
"287 138 CURVE SMOOTH",
"245 140 OFFCURVE",
"230 140 OFFCURVE",
"184 138 CURVE",
"211 128 LINE",
"779 824 LINE",
"728 861 LINE",
"686 811 LINE SMOOTH",
"672 794 OFFCURVE",
"648 786 OFFCURVE",
"613 786 CURVE SMOOTH",
"582 786 OFFCURVE",
"535 795 OFFCURVE",
"471 814 CURVE SMOOTH",
"407 833 OFFCURVE",
"319 842 OFFCURVE",
"277 842 CURVE SMOOTH",
"131 842 OFFCURVE",
"38 725 OFFCURVE",
"38 634 CURVE SMOOTH",
"38 614 OFFCURVE",
"44 542 OFFCURVE",
"117 542 CURVE SMOOTH",
"150 542 OFFCURVE",
"168 559 OFFCURVE",
"168 594 CURVE SMOOTH",
"168 618 OFFCURVE",
"162 640 OFFCURVE",
"145 660 CURVE SMOOTH",
"127 680 OFFCURVE",
"124 691 OFFCURVE",
"124 705 CURVE SMOOTH",
"124 738 OFFCURVE",
"151 755 OFFCURVE",
"201 755 CURVE SMOOTH",
"267 755 OFFCURVE",
"457 736 OFFCURVE",
"586 671 CURVE",
"587 735 LINE",
"6 19 LINE",
"72 -37 LINE",
"128 37 OFFCURVE",
"176 66 OFFCURVE",
"217 66 CURVE SMOOTH",
"251 66 OFFCURVE",
"326 35 OFFCURVE",
"393 3 CURVE SMOOTH",
"462 -30 OFFCURVE",
"542 -59 OFFCURVE",
"602 -59 CURVE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
41 35 2 7 6 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 6 6 8 97 0 8 8 95 77 0 5 5 93 77 0 1 1 3 98 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 1 0 3 1 3 102 0 6 6 8 97 0 8 8 95 77 0 5 5 93 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 8 0 6 7 8 6 105 0 1 0 3 1 3 102 0 5 5 93 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
55 53 35 37 43 19 34 36 37 33 18 10 12 31 
CALL[ ]\011/* CallFunction */";
};
width = 859;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"749 -59 OFFCURVE",
"858 64 OFFCURVE",
"858 195 CURVE SMOOTH",
"858 254 OFFCURVE",
"822 328 OFFCURVE",
"754 328 CURVE SMOOTH",
"696 328 OFFCURVE",
"667 306 OFFCURVE",
"667 264 CURVE SMOOTH",
"667 226 OFFCURVE",
"680 197 OFFCURVE",
"703 175 CURVE SMOOTH",
"730 149 OFFCURVE",
"736 135 OFFCURVE",
"736 122 CURVE SMOOTH",
"736 88 OFFCURVE",
"719 72 OFFCURVE",
"680 72 CURVE SMOOTH",
"670 72 OFFCURVE",
"637 87 OFFCURVE",
"583 118 CURVE SMOOTH",
"527 150 OFFCURVE",
"465 170 OFFCURVE",
"395 182 CURVE SMOOTH",
"331 193 OFFCURVE",
"273 199 OFFCURVE",
"210 202 CURVE",
"269 114 LINE",
"850 776 LINE",
"759 860 LINE",
"716 811 LINE SMOOTH",
"702 795 OFFCURVE",
"680 786 OFFCURVE",
"646 786 CURVE SMOOTH",
"617 786 OFFCURVE",
"569 795 OFFCURVE",
"502 814 CURVE SMOOTH",
"435 833 OFFCURVE",
"383 842 OFFCURVE",
"347 842 CURVE SMOOTH",
"192 842 OFFCURVE",
"53 734 OFFCURVE",
"53 608 CURVE SMOOTH",
"53 569 OFFCURVE",
"65 479 OFFCURVE",
"170 479 CURVE SMOOTH",
"231 479 OFFCURVE",
"262 506 OFFCURVE",
"262 555 CURVE SMOOTH",
"262 583 OFFCURVE",
"249 615 OFFCURVE",
"222 635 CURVE SMOOTH",
"195 655 OFFCURVE",
"184 665 OFFCURVE",
"184 675 CURVE SMOOTH",
"184 695 OFFCURVE",
"227 696 OFFCURVE",
"260 696 CURVE SMOOTH",
"339 696 OFFCURVE",
"441 682 OFFCURVE",
"556 630 CURVE",
"554 702 LINE",
"-1 84 LINE",
"107 -21 LINE",
"142 36 OFFCURVE",
"196 66 OFFCURVE",
"251 66 CURVE SMOOTH",
"288 66 OFFCURVE",
"371 31 OFFCURVE",
"446 -2 CURVE SMOOTH",
"513 -32 OFFCURVE",
"575 -59 OFFCURVE",
"630 -59 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
41 1 6 5 30 7 2 0 1 2 76 59 1 7 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 5 5 7 97 0 7 7 34 77 0 4 4 32 77 0 0 0 2 98 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 0 0 2 0 2 102 0 5 5 7 97 0 7 7 34 77 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 7 0 5 6 7 5 105 0 0 0 2 0 2 102 0 4 4 32 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
33 35 37 43 19 34 36 37 36 9 8 31 
CALL[ ]\011/* CallFunction */";
};
width = 893;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
layerId = "6537D9DA-C23A-4A15-A20C-B2F174FDD950";
name = "Aug 13 18, 13:48";
paths = (
{
closed = 1;
nodes = (
"874 817 LINE",
"876 819 OFFCURVE",
"877 822 OFFCURVE",
"877 825 CURVE SMOOTH",
"877 830 OFFCURVE",
"875 835 OFFCURVE",
"872 840 CURVE SMOOTH",
"863 854 OFFCURVE",
"852 861 OFFCURVE",
"837 861 CURVE SMOOTH",
"831 861 OFFCURVE",
"826 859 OFFCURVE",
"823 856 CURVE",
"782 811 LINE SMOOTH",
"767 794 OFFCURVE",
"742 786 OFFCURVE",
"707 786 CURVE SMOOTH",
"677 786 OFFCURVE",
"632 795 OFFCURVE",
"572 814 CURVE SMOOTH",
"512 833 OFFCURVE",
"461 842 OFFCURVE",
"420 842 CURVE SMOOTH",
"252 842 OFFCURVE",
"137 703 OFFCURVE",
"137 612 CURVE SMOOTH",
"137 559 OFFCURVE",
"163 532 OFFCURVE",
"215 532 CURVE SMOOTH",
"256 532 OFFCURVE",
"276 553 OFFCURVE",
"276 596 CURVE SMOOTH",
"276 615 OFFCURVE",
"270 633 OFFCURVE",
"257 650 CURVE SMOOTH",
"244 667 OFFCURVE",
"238 679 OFFCURVE",
"238 688 CURVE SMOOTH",
"238 726 OFFCURVE",
"268 745 OFFCURVE",
"328 745 CURVE SMOOTH",
"401 745 OFFCURVE",
"481 732 OFFCURVE",
"569 705 CURVE SMOOTH",
"596 697 OFFCURVE",
"609 688 OFFCURVE",
"609 677 CURVE SMOOTH",
"609 672 OFFCURVE",
"606 666 OFFCURVE",
"600 659 CURVE SMOOTH",
"36 31 LINE",
"34 29 OFFCURVE",
"33 26 OFFCURVE",
"33 23 CURVE SMOOTH",
"33 19 OFFCURVE",
"36 13 OFFCURVE",
"42 4 CURVE",
"59 -18 OFFCURVE",
"76 -29 OFFCURVE",
"92 -29 CURVE SMOOTH",
"99 -29 OFFCURVE",
"103 -27 OFFCURVE",
"106 -23 CURVE",
"159 36 OFFCURVE",
"207 66 OFFCURVE",
"248 66 CURVE SMOOTH",
"303 66 OFFCURVE",
"445 -9 OFFCURVE",
"522 -37 CURVE SMOOTH",
"564 -52 OFFCURVE",
"600 -59 OFFCURVE",
"629 -59 CURVE SMOOTH",
"737 -59 OFFCURVE",
"868 49 OFFCURVE",
"868 190 CURVE SMOOTH",
"868 241 OFFCURVE",
"835 295 OFFCURVE",
"782 295 CURVE SMOOTH",
"736 295 OFFCURVE",
"713 274 OFFCURVE",
"713 231 CURVE SMOOTH",
"713 210 OFFCURVE",
"722 192 OFFCURVE",
"741 176 CURVE SMOOTH",
"759 159 OFFCURVE",
"768 144 OFFCURVE",
"768 129 CURVE SMOOTH",
"768 70 OFFCURVE",
"740 41 OFFCURVE",
"684 41 CURVE SMOOTH",
"659 41 OFFCURVE",
"603 59 OFFCURVE",
"518 94 CURVE SMOOTH",
"432 129 OFFCURVE",
"369 148 OFFCURVE",
"328 151 CURVE SMOOTH",
"285 154 LINE",
"283 162 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 7 values pushed */
41 35 2 7 6 1 76 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 6 6 8 97 0 8 8 95 77 0 5 5 93 77 0 1 1 3 98 0 3 3 93 3 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 1 0 3 1 3 102 0 6 6 8 97 0 8 8 95 77 0 5 5 93 5 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 9 8 6 8 9 6 128 0 7 6 2 6 7 2 128 0 2 0 6 2 0 126 0 0 4 6 0 4 126 0 4 1 6 4 1 126 0 8 0 6 7 8 6 105 0 1 0 3 1 3 102 0 5 5 93 5 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
55 53 35 37 43 19 34 36 37 33 18 10 12 31 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 891;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
layerId = "1EED4F4D-B7A2-4553-B355-AFF79268D286";
name = "Aug 13 18, 13:57";
paths = (
{
closed = 1;
nodes = (
"940 770 LINE SMOOTH",
"946 776 OFFCURVE",
"946 784 QCURVE",
"947 800 OFFCURVE",
"918 831 QCURVE",
"888 860 OFFCURVE",
"872 860 QCURVE SMOOTH",
"862 860 OFFCURVE",
"856 854 QCURVE SMOOTH",
"815 811 LINE",
"794 786 OFFCURVE",
"743 786 QCURVE SMOOTH",
"700 786 OFFCURVE",
"512 842 OFFCURVE",
"459 842 QCURVE SMOOTH",
"342 842 OFFCURVE",
"154 692 OFFCURVE",
"154 592 QCURVE SMOOTH",
"154 479 OFFCURVE",
"256 479 QCURVE SMOOTH",
"352 481 OFFCURVE",
"352 567 QCURVE SMOOTH",
"352 604 OFFCURVE",
"287 666 OFFCURVE",
"287 674 QCURVE SMOOTH",
"287 694 OFFCURVE",
"340 696 QCURVE SMOOTH",
"459 701 OFFCURVE",
"553 664 QCURVE",
"573 655 OFFCURVE",
"573 641 QCURVE SMOOTH",
"573 630 OFFCURVE",
"561 618 QCURVE SMOOTH",
"43 92 LINE SMOOTH",
"37 86 OFFCURVE",
"37 76 QCURVE SMOOTH",
"37 53 OFFCURVE",
"74 12 QCURVE SMOOTH",
"109 -27 OFFCURVE",
"129 -27 QCURVE",
"143 -26 OFFCURVE",
"147 -20 QCURVE SMOOTH",
"203 66 OFFCURVE",
"285 66 QCURVE SMOOTH",
"319 66 OFFCURVE",
"471 0 OFFCURVE",
"619 -59 OFFCURVE",
"666 -59 QCURVE SMOOTH",
"762 -59 OFFCURVE",
"924 111 OFFCURVE",
"924 215 QCURVE SMOOTH",
"924 260 OFFCURVE",
"868 328 OFFCURVE",
"827 328 QCURVE SMOOTH",
"731 328 OFFCURVE",
"731 254 QCURVE SMOOTH",
"731 205 OFFCURVE",
"791 145 OFFCURVE",
"791 127 QCURVE SMOOTH",
"790 72 OFFCURVE",
"729 72 QCURVE SMOOTH",
"713 72 OFFCURVE",
"550 164 OFFCURVE",
"444 182 QCURVE SMOOTH",
"403 190 LINE",
"399 209 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 15 values pushed */
41 1 6 5 30 7 2 0 1 2 76 59 1 7 74 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
33 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 5 5 7 97 0 7 7 34 77 0 4 4 32 77 0 0 0 2 98 0 2 2 32 2 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
100 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 0 0 2 0 2 102 0 5 5 7 97 0 7 7 34 77 0 4 4 32 4 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
0 8 7 5 7 8 5 128 0 6 5 1 5 6 1 128 0 1 0 5 1 0 126 0 3 0 4 0 3 4 128 0 7 0 5 6 7 5 105 0 0 0 2 0 2 102 0 4 4 32 4 78 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 12 values pushed */
33 35 37 43 19 34 36 37 36 9 8 31 
CALL[ ]\011/* CallFunction */";
};
visible = 1;
width = 915;
}
);
leftKerningGroup = z;
note = z;
unicode = 007A;
},
{
glyphname = zero;
lastChange = "2018-08-16 03:42:36 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1026 1214.333 OFFCURVE",
"935.333 1333 OFFCURVE",
"754 1333 CURVE SMOOTH",
"479.333 1333 OFFCURVE",
"261.5 1017.833 OFFCURVE",
"179.5 714.5 CURVE SMOOTH",
"138.5 562.833 OFFCURVE",
"118 437.333 OFFCURVE",
"118 338 CURVE SMOOTH",
"118 102 OFFCURVE",
"209 -16 OFFCURVE",
"391 -16 CURVE SMOOTH",
"667 -16 OFFCURVE",
"889.5 320 OFFCURVE",
"967.5 608 CURVE SMOOTH",
"1006.5 752 OFFCURVE",
"1026 875 OFFCURVE",
"1026 977 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"873 862 OFFCURVE",
"765.167 452.333 OFFCURVE",
"636.5 223 CURVE SMOOTH",
"572.167 108.333 OFFCURVE",
"495.333 51 OFFCURVE",
"406 51 CURVE SMOOTH",
"316.667 51 OFFCURVE",
"272 127.667 OFFCURVE",
"272 281 CURVE SMOOTH",
"272 455.667 OFFCURVE",
"368.5 843.333 OFFCURVE",
"506.5 1086 CURVE SMOOTH",
"575.5 1207.333 OFFCURVE",
"653 1268 OFFCURVE",
"739 1268 CURVE SMOOTH",
"828.333 1268 OFFCURVE",
"873 1210 OFFCURVE",
"873 1094 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"702 -16 OFFCURVE",
"858 575 OFFCURVE",
"858 890 CURVE SMOOTH",
"858 1157 OFFCURVE",
"761 1333 OFFCURVE",
"570 1333 CURVE SMOOTH",
"197 1333 OFFCURVE",
"40 744 OFFCURVE",
"40 418 CURVE SMOOTH",
"40 152 OFFCURVE",
"137 -16 OFFCURVE",
"327 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"209 47 OFFCURVE",
"167 186 OFFCURVE",
"167 364 CURVE SMOOTH",
"167 604 OFFCURVE",
"277 1272 OFFCURVE",
"561 1272 CURVE SMOOTH",
"692 1272 OFFCURVE",
"735 1140 OFFCURVE",
"735 963 CURVE SMOOTH",
"735 743 OFFCURVE",
"644 47 OFFCURVE",
"339 47 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 2 2 1 97 0 1 1 92 77 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 1 0 2 3 1 2 105 0 3 3 0 97 0 0 0 93 0 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 34 36 35 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"84 188 OFFCURVE",
"225 -16 OFFCURVE",
"391 -16 QCURVE SMOOTH",
"580 -16 OFFCURVE",
"889 289 OFFCURVE",
"1059 751 OFFCURVE",
"1059 958 QCURVE SMOOTH",
"1059 1122 OFFCURVE",
"918 1333 OFFCURVE",
"754 1333 QCURVE SMOOTH",
"557 1333 OFFCURVE",
"272 1053 OFFCURVE",
"84 563 OFFCURVE",
"84 344 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"307 397 OFFCURVE",
"446 932 OFFCURVE",
"625 1243 OFFCURVE",
"731 1243 QCURVE SMOOTH",
"838 1241 OFFCURVE",
"838 1079 QCURVE SMOOTH",
"838 940 OFFCURVE",
"705 399 OFFCURVE",
"535 76 OFFCURVE",
"406 76 QCURVE SMOOTH",
"307 76 OFFCURVE",
"307 264 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"781 -16 OFFCURVE",
"942 559 OFFCURVE",
"942 870 CURVE SMOOTH",
"942 1130 OFFCURVE",
"846 1333 OFFCURVE",
"598 1333 CURVE SMOOTH",
"167 1333 OFFCURVE",
"13 748 OFFCURVE",
"13 435 CURVE SMOOTH",
"13 177 OFFCURVE",
"110 -16 OFFCURVE",
"358 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"277 76 OFFCURVE",
"246 182 OFFCURVE",
"246 323 CURVE SMOOTH",
"246 515 OFFCURVE",
"332 1243 OFFCURVE",
"584 1243 CURVE SMOOTH",
"678 1243 OFFCURVE",
"709 1142 OFFCURVE",
"709 1002 CURVE SMOOTH",
"709 782 OFFCURVE",
"624 76 OFFCURVE",
"372 76 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
0 3 3 0 97 0 0 0 31 77 0 2 2 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
93 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 0 0 3 2 0 3 105 0 2 2 1 97 0 1 1 32 1 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 105 0 2 1 1 2 89 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
36 35 37 35 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = zero.oldstyle;
lastChange = "2018-08-16 03:44:24 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1128 734.667 OFFCURVE",
"999.667 852 OFFCURVE",
"801 852 CURVE SMOOTH",
"610.333 852 OFFCURVE",
"419.167 735 OFFCURVE",
"302.5 563 CURVE SMOOTH",
"244.167 477 OFFCURVE",
"215 387 OFFCURVE",
"215 293 CURVE SMOOTH",
"215 105 OFFCURVE",
"336 -25 OFFCURVE",
"544 -25 CURVE SMOOTH",
"750.667 -25 OFFCURVE",
"951.833 117.833 OFFCURVE",
"1052.5 290.5 CURVE SMOOTH",
"1102.833 376.833 OFFCURVE",
"1128 454.667 OFFCURVE",
"1128 524 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1001 391.333 OFFCURVE",
"921.5 235.667 OFFCURVE",
"783.5 137 CURVE SMOOTH",
"714.5 87.667 OFFCURVE",
"643 63 OFFCURVE",
"569 63 CURVE SMOOTH",
"438.333 63 OFFCURVE",
"342 151.667 OFFCURVE",
"342 305 CURVE SMOOTH",
"342 438.333 OFFCURVE",
"418.833 581.5 OFFCURVE",
"559.5 683.5 CURVE SMOOTH",
"629.833 734.5 OFFCURVE",
"701.333 760 OFFCURVE",
"774 760 CURVE SMOOTH",
"912.667 760 OFFCURVE",
"1001 663.333 OFFCURVE",
"1001 522 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"784 -25 OFFCURVE",
"999 262 OFFCURVE",
"999 506 CURVE SMOOTH",
"999 714 OFFCURVE",
"852 872 OFFCURVE",
"633 872 CURVE SMOOTH",
"324 872 OFFCURVE",
"108 587 OFFCURVE",
"108 342 CURVE SMOOTH",
"108 133 OFFCURVE",
"255 -25 OFFCURVE",
"475 -25 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"320 69 OFFCURVE",
"233 186 OFFCURVE",
"233 344 CURVE SMOOTH",
"233 527 OFFCURVE",
"370 786 OFFCURVE",
"617 786 CURVE SMOOTH",
"780 786 OFFCURVE",
"873 658 OFFCURVE",
"873 501 CURVE SMOOTH",
"873 317 OFFCURVE",
"742 69 OFFCURVE",
"490 69 CURVE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
144 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 37 3 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 109 0 2 1 1 2 93 0 2 2 1 97 0 1 2 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
37 36 37 35 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 1052;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1184 659 OFFCURVE",
"1106 743 QCURVE SMOOTH",
"1003 852 OFFCURVE",
"819 852 QCURVE SMOOTH",
"721 852 OFFCURVE",
"623 817 QCURVE SMOOTH",
"449 753 OFFCURVE",
"326 610 QCURVE SMOOTH",
"197 463 OFFCURVE",
"197 303 QCURVE SMOOTH",
"196 176 OFFCURVE",
"272 90 QCURVE SMOOTH",
"373 -25 OFFCURVE",
"563 -25 QCURVE SMOOTH",
"592 -25 LINE",
"790 -12 OFFCURVE",
"958 123 QCURVE SMOOTH",
"1018 168 OFFCURVE",
"1063 225 QCURVE SMOOTH",
"1184 376 OFFCURVE",
"1184 532 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"983 475 OFFCURVE",
"973 436 QCURVE SMOOTH",
"940 311 OFFCURVE",
"838 215 QCURVE SMOOTH",
"719 106 OFFCURVE",
"588 106 QCURVE SMOOTH",
"518 106 OFFCURVE",
"471 143 QCURVE SMOOTH",
"399 200 OFFCURVE",
"399 313 QCURVE SMOOTH",
"400 356 OFFCURVE",
"412 399 QCURVE SMOOTH",
"446 524 OFFCURVE",
"557 618 QCURVE SMOOTH",
"672 717 OFFCURVE",
"793 717 QCURVE SMOOTH",
"842 716 OFFCURVE",
"883 696 QCURVE",
"911 680 LINE",
"983 623 OFFCURVE",
"983 514 QCURVE SMOOTH"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"884 -25 OFFCURVE",
"1051 317 OFFCURVE",
"1051 501 CURVE SMOOTH",
"1051 714 OFFCURVE",
"884 870 OFFCURVE",
"648 870 CURVE SMOOTH",
"266 870 OFFCURVE",
"87 531 OFFCURVE",
"87 350 CURVE SMOOTH",
"87 136 OFFCURVE",
"256 -25 OFFCURVE",
"490 -25 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"385 115 OFFCURVE",
"290 225 OFFCURVE",
"290 364 CURVE SMOOTH",
"290 522 OFFCURVE",
"430 725 OFFCURVE",
"622 725 CURVE SMOOTH",
"768 725 OFFCURVE",
"850 611 OFFCURVE",
"850 477 CURVE SMOOTH",
"850 324 OFFCURVE",
"717 115 OFFCURVE",
"515 115 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 25 values pushed */
0 2 0 1 2 1 101 0 3 3 0 97 0 0 0 24 3 78 40 39 40 53 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 1089;
}
);
note = zero.oldstyle;
},
{
glyphname = zero.oldstylezero;
lastChange = "2018-08-16 03:48:18 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"784 -25 OFFCURVE",
"999 262 OFFCURVE",
"999 506 CURVE SMOOTH",
"999 714 OFFCURVE",
"852 872 OFFCURVE",
"633 872 CURVE SMOOTH",
"324 872 OFFCURVE",
"108 587 OFFCURVE",
"108 342 CURVE SMOOTH",
"108 133 OFFCURVE",
"255 -25 OFFCURVE",
"475 -25 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"320 69 OFFCURVE",
"233 186 OFFCURVE",
"233 344 CURVE SMOOTH",
"233 527 OFFCURVE",
"370 786 OFFCURVE",
"617 786 CURVE SMOOTH",
"780 786 OFFCURVE",
"873 658 OFFCURVE",
"873 501 CURVE SMOOTH",
"873 317 OFFCURVE",
"742 69 OFFCURVE",
"490 69 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"909 615 LINE",
"854 703 LINE",
"183 232 LINE",
"232 139 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
15 1 1 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
144 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 3 0 1 3 1 101 0 2 2 0 97 0 0 0 37 2 78 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 2 3 0 2 109 0 3 1 1 3 93 0 3 3 1 97 0 1 3 1 81 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 7 values pushed */
38 36 37 35 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 1052;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1037 604 LINE",
"978 714 LINE",
"307 243 LINE",
"360 128 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"884 -25 OFFCURVE",
"1051 317 OFFCURVE",
"1051 501 CURVE SMOOTH",
"1051 714 OFFCURVE",
"884 870 OFFCURVE",
"648 870 CURVE SMOOTH",
"266 870 OFFCURVE",
"87 531 OFFCURVE",
"87 350 CURVE SMOOTH",
"87 136 OFFCURVE",
"256 -25 OFFCURVE",
"490 -25 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"385 115 OFFCURVE",
"290 225 OFFCURVE",
"290 364 CURVE SMOOTH",
"290 522 OFFCURVE",
"430 725 OFFCURVE",
"622 725 CURVE SMOOTH",
"768 725 OFFCURVE",
"850 611 OFFCURVE",
"850 477 CURVE SMOOTH",
"850 324 OFFCURVE",
"717 115 OFFCURVE",
"515 115 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"926 598 LINE",
"867 708 LINE",
"196 237 LINE",
"249 122 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
30 15 2 1 73 0 3 0 1 3 1 101 0 2 2 0 97 0 0 0 24 2 78 38 36 37 35 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 1089;
}
);
note = zero.oldstylezero;
},
{
glyphname = zero.zero;
lastChange = "2018-08-16 03:51:01 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"702 -16 OFFCURVE",
"858 575 OFFCURVE",
"858 890 CURVE SMOOTH",
"858 1157 OFFCURVE",
"761 1333 OFFCURVE",
"570 1333 CURVE SMOOTH",
"197 1333 OFFCURVE",
"40 744 OFFCURVE",
"40 418 CURVE SMOOTH",
"40 152 OFFCURVE",
"137 -16 OFFCURVE",
"327 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"209 47 OFFCURVE",
"167 186 OFFCURVE",
"167 364 CURVE SMOOTH",
"167 604 OFFCURVE",
"277 1272 OFFCURVE",
"561 1272 CURVE SMOOTH",
"692 1272 OFFCURVE",
"735 1140 OFFCURVE",
"735 963 CURVE SMOOTH",
"735 743 OFFCURVE",
"644 47 OFFCURVE",
"339 47 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"831 843 LINE",
"776 931 LINE",
"85 446 LINE",
"134 353 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
31 7 2 2 73 0 0 0 2 0 2 101 0 3 3 1 97 0 1 1 37 3 78 36 36 42 33 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 956;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"781 -16 OFFCURVE",
"942 559 OFFCURVE",
"942 870 CURVE SMOOTH",
"942 1130 OFFCURVE",
"846 1333 OFFCURVE",
"598 1333 CURVE SMOOTH",
"167 1333 OFFCURVE",
"13 748 OFFCURVE",
"13 435 CURVE SMOOTH",
"13 177 OFFCURVE",
"110 -16 OFFCURVE",
"358 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"277 76 OFFCURVE",
"246 182 OFFCURVE",
"246 323 CURVE SMOOTH",
"246 515 OFFCURVE",
"332 1243 OFFCURVE",
"584 1243 CURVE SMOOTH",
"678 1243 OFFCURVE",
"709 1142 OFFCURVE",
"709 1002 CURVE SMOOTH",
"709 782 OFFCURVE",
"624 76 OFFCURVE",
"372 76 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"846 842 LINE",
"787 952 LINE",
"46 432 LINE",
"99 317 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
29 5 2 1 73 0 3 0 1 3 1 101 0 0 0 2 97 0 2 2 24 0 78 37 37 40 33 4 7 26 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = zero.zero;
},
{
glyphname = c_t;
lastChange = "2018-08-20 10:09:27 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"425 888 OFFCURVE",
"390 947 OFFCURVE",
"390 1011 CURVE SMOOTH",
"390 1162 OFFCURVE",
"513 1269 OFFCURVE",
"682 1269 CURVE SMOOTH",
"790 1269 OFFCURVE",
"879 1212 OFFCURVE",
"985 1135 CURVE",
"1012 1174 LINE",
"894 1301 OFFCURVE",
"797 1366 OFFCURVE",
"654 1366 CURVE SMOOTH",
"579 1366 OFFCURVE",
"494 1339 OFFCURVE",
"428 1287 CURVE SMOOTH",
"371 1243 OFFCURVE",
"337 1168 OFFCURVE",
"337 1095 CURVE SMOOTH",
"337 989 OFFCURVE",
"350 926 OFFCURVE",
"408 824 CURVE",
"501 822 LINE"
);
},
{
closed = 1;
nodes = (
"1041 1068 LINE",
"1041 1071 OFFCURVE",
"1044 1080 OFFCURVE",
"1046 1086 CURVE",
"1056 1122 OFFCURVE",
"1069 1167 OFFCURVE",
"1092 1208 CURVE",
"1102 1201 OFFCURVE",
"1115 1199 OFFCURVE",
"1132 1199 CURVE SMOOTH",
"1198 1199 OFFCURVE",
"1230 1232 OFFCURVE",
"1228 1296 CURVE SMOOTH",
"1227 1339 OFFCURVE",
"1191 1372 OFFCURVE",
"1146 1372 CURVE SMOOTH",
"1057 1372 OFFCURVE",
"1017 1277 OFFCURVE",
"976 1180 CURVE SMOOTH",
"962 1147 OFFCURVE",
"952 1100 OFFCURVE",
"943 1055 CURVE SMOOTH",
"937 1025 OFFCURVE",
"934 1010 OFFCURVE",
"930 993 CURVE",
"1016 982 LINE"
);
},
{
closed = 1;
nodes = (
"425 888 OFFCURVE",
"390 947 OFFCURVE",
"390 1011 CURVE SMOOTH",
"390 1162 OFFCURVE",
"513 1269 OFFCURVE",
"682 1269 CURVE SMOOTH",
"790 1269 OFFCURVE",
"879 1212 OFFCURVE",
"985 1135 CURVE",
"1012 1174 LINE",
"894 1301 OFFCURVE",
"797 1366 OFFCURVE",
"654 1366 CURVE SMOOTH",
"579 1366 OFFCURVE",
"493 1338 OFFCURVE",
"428 1287 CURVE SMOOTH",
"371 1243 OFFCURVE",
"337 1168 OFFCURVE",
"337 1095 CURVE SMOOTH",
"337 989 OFFCURVE",
"350 926 OFFCURVE",
"408 824 CURVE",
"501 822 LINE"
);
},
{
closed = 1;
nodes = (
"1041 1068 LINE",
"1041 1071 OFFCURVE",
"1044 1080 OFFCURVE",
"1046 1086 CURVE",
"1056 1122 OFFCURVE",
"1069 1167 OFFCURVE",
"1092 1208 CURVE",
"1102 1201 OFFCURVE",
"1115 1199 OFFCURVE",
"1132 1199 CURVE SMOOTH",
"1198 1199 OFFCURVE",
"1230 1232 OFFCURVE",
"1228 1296 CURVE SMOOTH",
"1227 1339 OFFCURVE",
"1191 1372 OFFCURVE",
"1146 1372 CURVE SMOOTH",
"1057 1372 OFFCURVE",
"1017 1277 OFFCURVE",
"976 1180 CURVE SMOOTH",
"962 1147 OFFCURVE",
"952 1100 OFFCURVE",
"943 1055 CURVE SMOOTH",
"937 1025 OFFCURVE",
"934 1010 OFFCURVE",
"930 993 CURVE",
"1016 982 LINE"
);
},
{
closed = 1;
nodes = (
"1191 730 LINE",
"1206 798 LINE",
"944 798 LINE",
"928 820 LINE",
"684 775 LINE",
"688 730 LINE"
);
}
);
};
backgroundImage = {
crop = "{{0, 0}, {435, 481}}";
imagePath = "hickes images/c_t-ital.png";
locked = "1";
transform = "{3.79257, 0, -0.13244, 3.79257, -175, -236}";
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"958 -27 OFFCURVE",
"1073 121 OFFCURVE",
"1157 265 CURVE",
"1114 299 LINE",
"1019 166 OFFCURVE",
"951 100 OFFCURVE",
"909 100 CURVE SMOOTH",
"864 100 OFFCURVE",
"863 160 OFFCURVE",
"875 223 CURVE SMOOTH",
"1016 982 LINE SMOOTH",
"1030 1055 OFFCURVE",
"1064 1161 OFFCURVE",
"1092 1208 CURVE",
"1102 1201 OFFCURVE",
"1115 1199 OFFCURVE",
"1132 1199 CURVE SMOOTH",
"1198 1199 OFFCURVE",
"1230 1232 OFFCURVE",
"1228 1296 CURVE SMOOTH",
"1227 1339 OFFCURVE",
"1191 1372 OFFCURVE",
"1146 1372 CURVE SMOOTH",
"998 1372 OFFCURVE",
"928 1082 OFFCURVE",
"879 808 CURVE SMOOTH",
"760 148 LINE SMOOTH",
"756 128 OFFCURVE",
"754 111 OFFCURVE",
"754 93 CURVE SMOOTH",
"754 27 OFFCURVE",
"782 -27 OFFCURVE",
"846 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"425 888 OFFCURVE",
"400 957 OFFCURVE",
"400 1021 CURVE SMOOTH",
"400 1172 OFFCURVE",
"513 1269 OFFCURVE",
"682 1269 CURVE SMOOTH",
"790 1269 OFFCURVE",
"879 1212 OFFCURVE",
"985 1135 CURVE",
"1012 1174 LINE",
"894 1301 OFFCURVE",
"797 1366 OFFCURVE",
"654 1366 CURVE SMOOTH",
"483 1366 OFFCURVE",
"327 1238 OFFCURVE",
"327 1065 CURVE SMOOTH",
"327 969 OFFCURVE",
"336 916 OFFCURVE",
"408 824 CURVE",
"501 822 LINE"
);
},
{
closed = 1;
nodes = (
"1191 730 LINE",
"1206 798 LINE",
"944 798 LINE",
"928 820 LINE",
"684 775 LINE",
"688 730 LINE"
);
},
{
closed = 1;
nodes = (
"491 150 LINE",
"437 96 OFFCURVE",
"395 58 OFFCURVE",
"320 58 CURVE SMOOTH",
"204 58 OFFCURVE",
"144 218 OFFCURVE",
"144 356 CURVE SMOOTH",
"144 542 OFFCURVE",
"268 791 OFFCURVE",
"392 791 CURVE SMOOTH",
"427 791 OFFCURVE",
"463 779 OFFCURVE",
"478 762 CURVE",
"496 696 LINE",
"504 683 OFFCURVE",
"516 677 OFFCURVE",
"534 677 CURVE SMOOTH",
"568 677 OFFCURVE",
"602 708 OFFCURVE",
"602 749 CURVE SMOOTH",
"602 803 OFFCURVE",
"515 852 OFFCURVE",
"429 852 CURVE SMOOTH",
"212 852 OFFCURVE",
"26 561 OFFCURVE",
"26 300 CURVE SMOOTH",
"26 135 OFFCURVE",
"105 -27 OFFCURVE",
"250 -27 CURVE SMOOTH",
"345 -27 OFFCURVE",
"440 21 OFFCURVE",
"526 120 CURVE"
);
}
);
width = 1236;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"336 926 OFFCURVE",
"323 989 OFFCURVE",
"323 1095 CURVE SMOOTH",
"323 1167 OFFCURVE",
"357 1241 OFFCURVE",
"419 1291 CURVE SMOOTH",
"483 1341 OFFCURVE",
"575 1371 OFFCURVE",
"654 1371 CURVE SMOOTH",
"805 1371 OFFCURVE",
"908 1301 OFFCURVE",
"1025 1174 CURVE",
"990 1122 LINE",
"875 1206 OFFCURVE",
"788 1264 OFFCURVE",
"682 1264 CURVE SMOOTH",
"531 1264 OFFCURVE",
"404 1169 OFFCURVE",
"404 1011 CURVE SMOOTH",
"404 956 OFFCURVE",
"429 893 OFFCURVE",
"521 817 CURVE",
"397 819 LINE"
);
},
{
closed = 1;
nodes = (
"930.998 1053.994 OFFCURVE",
"940 1128 OFFCURVE",
"963 1182 CURVE SMOOTH",
"1003 1276 OFFCURVE",
"1045 1377 OFFCURVE",
"1146 1377 CURVE SMOOTH",
"1185 1377 OFFCURVE",
"1241 1351 OFFCURVE",
"1242 1296 CURVE SMOOTH",
"1244 1239 OFFCURVE",
"1215 1194 OFFCURVE",
"1132 1194 CURVE SMOOTH",
"1123 1194 OFFCURVE",
"1107 1195 OFFCURVE",
"1098 1198 CURVE",
"1078 1155 OFFCURVE",
"1064 1101 OFFCURVE",
"1054 1067 CURVE SMOOTH",
"1028 975 LINE",
"915 990 LINE"
);
},
{
closed = 1;
nodes = (
"1373 713 LINE",
"1386 819 LINE",
"1046 819 LINE",
"1040 848 LINE",
"760 789 LINE",
"766 713 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1101 -27 OFFCURVE",
"1208 75 OFFCURVE",
"1327 266 CURVE",
"1272 317 LINE",
"1174 189 OFFCURVE",
"1104 125 OFFCURVE",
"1062 125 CURVE SMOOTH",
"1026 125 OFFCURVE",
"1028 172 OFFCURVE",
"1039 233 CURVE SMOOTH",
"1163 926 LINE SMOOTH",
"1189 1072 OFFCURVE",
"1211 1139 OFFCURVE",
"1231 1181 CURVE",
"1242 1179 OFFCURVE",
"1262 1178 OFFCURVE",
"1268 1178 CURVE SMOOTH",
"1364 1178 OFFCURVE",
"1418 1222 OFFCURVE",
"1417 1301 CURVE SMOOTH",
"1416 1357 OFFCURVE",
"1353 1402 OFFCURVE",
"1283 1402 CURVE SMOOTH",
"1102 1402 OFFCURVE",
"1018 1186 OFFCURVE",
"975 948 CURVE SMOOTH",
"836 180 LINE SMOOTH",
"832 160 OFFCURVE",
"830 140 OFFCURVE",
"830 121 CURVE SMOOTH",
"830 39 OFFCURVE",
"864 -27 OFFCURVE",
"960 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"522 893 OFFCURVE",
"470 961 OFFCURVE",
"470 1042 CURVE SMOOTH",
"470 1176 OFFCURVE",
"583 1275 OFFCURVE",
"732 1275 CURVE SMOOTH",
"832 1275 OFFCURVE",
"928 1249 OFFCURVE",
"1062 1151 CURVE",
"1100 1195 LINE",
"966 1342 OFFCURVE",
"852 1402 OFFCURVE",
"694 1402 CURVE SMOOTH",
"529 1402 OFFCURVE",
"348 1290 OFFCURVE",
"348 1116 CURVE SMOOTH",
"348 1000 OFFCURVE",
"376 939 OFFCURVE",
"488 830 CURVE",
"610 827 LINE"
);
},
{
closed = 1;
nodes = (
"1373 713 LINE",
"1386 819 LINE",
"1046 819 LINE",
"1040 848 LINE",
"760 789 LINE",
"766 713 LINE"
);
},
{
closed = 1;
nodes = (
"547 158 LINE",
"526 135 OFFCURVE",
"470 90 OFFCURVE",
"399 90 CURVE SMOOTH",
"298 90 OFFCURVE",
"249 242 OFFCURVE",
"249 383 CURVE SMOOTH",
"249 570 OFFCURVE",
"331 770 OFFCURVE",
"448 770 CURVE SMOOTH",
"469 770 OFFCURVE",
"498 761 OFFCURVE",
"514 749 CURVE",
"538 674 LINE",
"551 653 OFFCURVE",
"571 643 OFFCURVE",
"600 643 CURVE SMOOTH",
"647 643 OFFCURVE",
"694 685 OFFCURVE",
"694 731 CURVE SMOOTH",
"694 799 OFFCURVE",
"602 852 OFFCURVE",
"492 852 CURVE SMOOTH",
"261 852 OFFCURVE",
"46 565 OFFCURVE",
"46 304 CURVE SMOOTH",
"46 126 OFFCURVE",
"149 -27 OFFCURVE",
"315 -27 CURVE SMOOTH",
"434 -27 OFFCURVE",
"528 22 OFFCURVE",
"598 115 CURVE"
);
}
);
width = 1386;
},
{
associatedMasterId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
background = {
paths = (
{
closed = 1;
nodes = (
"425 888 OFFCURVE",
"390 947 OFFCURVE",
"390 1011 CURVE SMOOTH",
"390 1162 OFFCURVE",
"513 1269 OFFCURVE",
"682 1269 CURVE SMOOTH",
"790 1269 OFFCURVE",
"879 1212 OFFCURVE",
"985 1135 CURVE",
"1012 1174 LINE",
"894 1301 OFFCURVE",
"797 1366 OFFCURVE",
"654 1366 CURVE SMOOTH",
"579 1366 OFFCURVE",
"493 1338 OFFCURVE",
"428 1287 CURVE SMOOTH",
"372 1242 OFFCURVE",
"337 1168 OFFCURVE",
"337 1095 CURVE SMOOTH",
"337 989 OFFCURVE",
"350 926 OFFCURVE",
"408 824 CURVE",
"501 822 LINE"
);
},
{
closed = 1;
nodes = (
"1041 1068 LINE",
"1041 1071 OFFCURVE",
"1044 1080 OFFCURVE",
"1046 1086 CURVE",
"1056 1122 OFFCURVE",
"1069 1167 OFFCURVE",
"1092 1208 CURVE",
"1102 1201 OFFCURVE",
"1115 1199 OFFCURVE",
"1132 1199 CURVE SMOOTH",
"1198 1199 OFFCURVE",
"1230 1232 OFFCURVE",
"1228 1296 CURVE SMOOTH",
"1227 1339 OFFCURVE",
"1191 1372 OFFCURVE",
"1146 1372 CURVE SMOOTH",
"1057 1372 OFFCURVE",
"1017 1277 OFFCURVE",
"976 1180 CURVE SMOOTH",
"962 1147 OFFCURVE",
"952 1100 OFFCURVE",
"943 1055 CURVE SMOOTH",
"937 1025 OFFCURVE",
"934 1010 OFFCURVE",
"930 993 CURVE",
"1016 982 LINE"
);
}
);
};
backgroundImage = {
crop = "{{0, 0}, {435, 481}}";
imagePath = "hickes images/c_t-ital.png";
locked = "1";
transform = "{3.79257, 0, -0.13244, 3.79257, -175, -236}";
};
components = (
{
name = c;
},
{
name = t;
transform = "{1, 0, 0, 1, 643, 0}";
}
);
layerId = "2CE5C225-8FAF-4C31-96D3-CC2945B95DC9";
name = "Aug 20 18, 05:49";
paths = (
{
closed = 1;
nodes = (
"336 926 OFFCURVE",
"323 989 OFFCURVE",
"323 1095 CURVE SMOOTH",
"323 1167 OFFCURVE",
"357 1241 OFFCURVE",
"419 1291 CURVE SMOOTH",
"483 1341 OFFCURVE",
"575 1371 OFFCURVE",
"654 1371 CURVE SMOOTH",
"805 1371 OFFCURVE",
"908 1301 OFFCURVE",
"1025 1174 CURVE",
"990 1122 LINE",
"875 1206 OFFCURVE",
"788 1264 OFFCURVE",
"682 1264 CURVE SMOOTH",
"531 1264 OFFCURVE",
"404 1169 OFFCURVE",
"404 1011 CURVE SMOOTH",
"404 956 OFFCURVE",
"429 893 OFFCURVE",
"521 817 CURVE",
"397 819 LINE"
);
},
{
closed = 1;
nodes = (
"930.998 1053.994 OFFCURVE",
"940 1128 OFFCURVE",
"963 1182 CURVE SMOOTH",
"1003 1276 OFFCURVE",
"1045 1377 OFFCURVE",
"1146 1377 CURVE SMOOTH",
"1185 1377 OFFCURVE",
"1241 1351 OFFCURVE",
"1242 1296 CURVE SMOOTH",
"1244 1239 OFFCURVE",
"1215 1194 OFFCURVE",
"1132 1194 CURVE SMOOTH",
"1123 1194 OFFCURVE",
"1107 1195 OFFCURVE",
"1098 1198 CURVE",
"1078 1155 OFFCURVE",
"1064 1101 OFFCURVE",
"1054 1067 CURVE SMOOTH",
"1028 975 LINE",
"915 990 LINE"
);
}
);
width = 1236;
},
{
associatedMasterId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
background = {
paths = (
{
closed = 1;
nodes = (
"336 926 OFFCURVE",
"323 989 OFFCURVE",
"323 1095 CURVE SMOOTH",
"323 1167 OFFCURVE",
"357 1241 OFFCURVE",
"419 1291 CURVE SMOOTH",
"483 1341 OFFCURVE",
"575 1371 OFFCURVE",
"654 1371 CURVE SMOOTH",
"805 1371 OFFCURVE",
"908 1301 OFFCURVE",
"1025 1174 CURVE",
"990 1122 LINE",
"875 1206 OFFCURVE",
"788 1264 OFFCURVE",
"682 1264 CURVE SMOOTH",
"531 1264 OFFCURVE",
"404 1169 OFFCURVE",
"404 1011 CURVE SMOOTH",
"404 956 OFFCURVE",
"429 893 OFFCURVE",
"521 817 CURVE",
"397 819 LINE"
);
},
{
closed = 1;
nodes = (
"930.998 1053.994 OFFCURVE",
"940 1128 OFFCURVE",
"963 1182 CURVE SMOOTH",
"1003 1276 OFFCURVE",
"1045 1377 OFFCURVE",
"1146 1377 CURVE SMOOTH",
"1185 1377 OFFCURVE",
"1241 1351 OFFCURVE",
"1242 1296 CURVE SMOOTH",
"1244 1239 OFFCURVE",
"1215 1194 OFFCURVE",
"1132 1194 CURVE SMOOTH",
"1123 1194 OFFCURVE",
"1107 1195 OFFCURVE",
"1098 1198 CURVE",
"1078 1155 OFFCURVE",
"1064 1101 OFFCURVE",
"1054 1067 CURVE SMOOTH",
"1028 975 LINE",
"915 990 LINE"
);
}
);
};
components = (
{
name = c;
},
{
name = t;
transform = "{1, 0, 0, 1, 696, 0}";
}
);
layerId = "AC8AC64E-47E7-4647-A4A8-52F69EF650DC";
name = "Aug 20 18, 05:58";
paths = (
{
closed = 1;
nodes = (
"336 926 OFFCURVE",
"323 989 OFFCURVE",
"323 1095 CURVE SMOOTH",
"323 1167 OFFCURVE",
"357 1241 OFFCURVE",
"419 1291 CURVE SMOOTH",
"483 1341 OFFCURVE",
"575 1371 OFFCURVE",
"654 1371 CURVE SMOOTH",
"805 1371 OFFCURVE",
"908 1301 OFFCURVE",
"1025 1174 CURVE",
"990 1122 LINE",
"875 1206 OFFCURVE",
"788 1264 OFFCURVE",
"682 1264 CURVE SMOOTH",
"531 1264 OFFCURVE",
"404 1169 OFFCURVE",
"404 1011 CURVE SMOOTH",
"404 956 OFFCURVE",
"429 893 OFFCURVE",
"521 817 CURVE",
"397 819 LINE"
);
},
{
closed = 1;
nodes = (
"930.998 1053.994 OFFCURVE",
"940 1128 OFFCURVE",
"963 1182 CURVE SMOOTH",
"1003 1276 OFFCURVE",
"1045 1377 OFFCURVE",
"1146 1377 CURVE SMOOTH",
"1185 1377 OFFCURVE",
"1241 1351 OFFCURVE",
"1242 1296 CURVE SMOOTH",
"1244 1239 OFFCURVE",
"1215 1194 OFFCURVE",
"1132 1194 CURVE SMOOTH",
"1123 1194 OFFCURVE",
"1107 1195 OFFCURVE",
"1098 1198 CURVE",
"1078 1155 OFFCURVE",
"1064 1101 OFFCURVE",
"1054 1067 CURVE SMOOTH",
"1028 975 LINE",
"915 990 LINE"
);
}
);
width = 1386;
}
);
leftMetricsKey = c;
rightMetricsKey = t;
},
{
glyphname = f_f_u;
lastChange = "2018-08-18 09:34:40 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"1209 619 LINE",
"1228 726 OFFCURVE",
"1237 775 OFFCURVE",
"1254 858 CURVE",
"1242 869 LINE",
"1178 850 OFFCURVE",
"1100 842 OFFCURVE",
"1060 842 CURVE",
"1039 763 LINE",
"1120 763 OFFCURVE",
"1121 694 OFFCURVE",
"1114 655 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"1144 -27 OFFCURVE",
"1240 82 OFFCURVE",
"1321 182 CURVE SMOOTH",
"1386 263 OFFCURVE",
"1460 367 OFFCURVE",
"1521 466 CURVE",
"1462 137 LINE SMOOTH",
"1458 115 OFFCURVE",
"1454 90 OFFCURVE",
"1454 66 CURVE SMOOTH",
"1454 16 OFFCURVE",
"1470 -27 OFFCURVE",
"1514 -27 CURVE SMOOTH",
"1594 -27 OFFCURVE",
"1670 34 OFFCURVE",
"1768 156 CURVE",
"1724 195 LINE",
"1668 133 OFFCURVE",
"1630 102 OFFCURVE",
"1607 102 CURVE SMOOTH",
"1561 102 OFFCURVE",
"1568 157 OFFCURVE",
"1576 203 CURVE SMOOTH",
"1692 848 LINE",
"1590 848 LINE",
"1557 659 OFFCURVE",
"1490 528 OFFCURVE",
"1386 363 CURVE SMOOTH",
"1328 271 OFFCURVE",
"1195 102 OFFCURVE",
"1136 102 CURVE SMOOTH",
"1111 102 OFFCURVE",
"1102 128 OFFCURVE",
"1102 169 CURVE SMOOTH",
"1102 213 OFFCURVE",
"1112 273 OFFCURVE",
"1123 334 CURVE SMOOTH",
"1178 636 LINE SMOOTH",
"1197 743 OFFCURVE",
"1203 775 OFFCURVE",
"1220 858 CURVE",
"1208 869 LINE",
"1144 850 OFFCURVE",
"1066 842 OFFCURVE",
"1026 842 CURVE",
"1005 763 LINE",
"1086 763 OFFCURVE",
"1087 694 OFFCURVE",
"1080 655 CURVE SMOOTH",
"994 180 LINE SMOOTH",
"987 142 OFFCURVE",
"983 106 OFFCURVE",
"983 75 CURVE SMOOTH",
"983 14 OFFCURVE",
"1005 -27 OFFCURVE",
"1066 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"54 -580 OFFCURVE",
"87 -398 OFFCURVE",
"133 -140 CURVE SMOOTH",
"338 1003 LINE SMOOTH",
"390 1292 OFFCURVE",
"491 1381 OFFCURVE",
"614 1381 CURVE SMOOTH",
"700 1381 OFFCURVE",
"778 1352 OFFCURVE",
"805 1215 CURVE",
"888 1270 LINE",
"888 1321 OFFCURVE",
"848 1442 OFFCURVE",
"666 1442 CURVE SMOOTH",
"469 1442 OFFCURVE",
"296 1341 OFFCURVE",
"233 989 CURVE SMOOTH",
"-4 -326 LINE SMOOTH",
"-21 -421 OFFCURVE",
"-59 -518 OFFCURVE",
"-114 -518 CURVE SMOOTH",
"-145 -518 OFFCURVE",
"-172 -498 OFFCURVE",
"-191 -471 CURVE SMOOTH",
"-211 -443 OFFCURVE",
"-242 -430 OFFCURVE",
"-282 -430 CURVE SMOOTH",
"-308 -430 OFFCURVE",
"-339 -452 OFFCURVE",
"-339 -488 CURVE SMOOTH",
"-339 -521 OFFCURVE",
"-313 -580 OFFCURVE",
"-175 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"538 -551 OFFCURVE",
"571 -369 OFFCURVE",
"617 -111 CURVE SMOOTH",
"821 1025 LINE SMOOTH",
"873 1314 OFFCURVE",
"974 1403 OFFCURVE",
"1097 1403 CURVE SMOOTH",
"1183 1403 OFFCURVE",
"1219 1355 OFFCURVE",
"1226 1274 CURVE SMOOTH",
"1230 1238 OFFCURVE",
"1260 1202 OFFCURVE",
"1301 1202 CURVE SMOOTH",
"1336 1202 OFFCURVE",
"1353 1226 OFFCURVE",
"1353 1275 CURVE SMOOTH",
"1353 1326 OFFCURVE",
"1331 1464 OFFCURVE",
"1149 1464 CURVE SMOOTH",
"952 1464 OFFCURVE",
"780 1363 OFFCURVE",
"716 1011 CURVE SMOOTH",
"480 -297 LINE SMOOTH",
"463 -392 OFFCURVE",
"425 -489 OFFCURVE",
"370 -489 CURVE SMOOTH",
"339 -489 OFFCURVE",
"312 -469 OFFCURVE",
"293 -442 CURVE SMOOTH",
"273 -414 OFFCURVE",
"242 -401 OFFCURVE",
"202 -401 CURVE SMOOTH",
"176 -401 OFFCURVE",
"145 -423 OFFCURVE",
"145 -459 CURVE SMOOTH",
"145 -492 OFFCURVE",
"171 -551 OFFCURVE",
"309 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1031 763 LINE",
"1053 842 LINE",
"509 842 LINE",
"489 763 LINE"
);
},
{
closed = 1;
nodes = (
"552 763 LINE",
"574 842 LINE",
"30 842 LINE",
"10 763 LINE"
);
}
);
width = 1817;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"1491 678 LINE",
"1502 729 OFFCURVE",
"1517 777 OFFCURVE",
"1533 826 CURVE",
"1504 865 LINE",
"1459 852 OFFCURVE",
"1392 844 OFFCURVE",
"1311 844 CURVE",
"1253 737 LINE",
"1292 737 OFFCURVE",
"1298 699 OFFCURVE",
"1291 665 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"1266 -27 OFFCURVE",
"1339 23 OFFCURVE",
"1413 99 CURVE SMOOTH",
"1474 161 OFFCURVE",
"1536 240 OFFCURVE",
"1588 322 CURVE",
"1562 170 LINE SMOOTH",
"1559 150 OFFCURVE",
"1556 130 OFFCURVE",
"1556 110 CURVE SMOOTH",
"1556 33 OFFCURVE",
"1585 -27 OFFCURVE",
"1668 -27 CURVE SMOOTH",
"1747 -27 OFFCURVE",
"1836 41 OFFCURVE",
"1935 176 CURVE",
"1878 225 LINE",
"1834 169 OFFCURVE",
"1802 142 OFFCURVE",
"1785 142 CURVE SMOOTH",
"1750 142 OFFCURVE",
"1760 200 OFFCURVE",
"1766 231 CURVE SMOOTH",
"1877 848 LINE",
"1684 848 LINE",
"1645 638 OFFCURVE",
"1627 545 OFFCURVE",
"1526 372 CURVE SMOOTH",
"1459 257 OFFCURVE",
"1370 133 OFFCURVE",
"1319 133 CURVE SMOOTH",
"1302 133 OFFCURVE",
"1296 155 OFFCURVE",
"1296 184 CURVE SMOOTH",
"1296 225 OFFCURVE",
"1305 278 OFFCURVE",
"1315 332 CURVE SMOOTH",
"1381 678 LINE SMOOTH",
"1391 729 OFFCURVE",
"1407 777 OFFCURVE",
"1423 826 CURVE",
"1394 865 LINE",
"1349 852 OFFCURVE",
"1282 844 OFFCURVE",
"1201 844 CURVE",
"1143 737 LINE",
"1182 737 OFFCURVE",
"1187 699 OFFCURVE",
"1181 665 CURVE SMOOTH",
"1100 209 LINE SMOOTH",
"1093 172 OFFCURVE",
"1089 138 OFFCURVE",
"1089 108 CURVE SMOOTH",
"1089 26 OFFCURVE",
"1119 -27 OFFCURVE",
"1214 -27 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"153 -580 OFFCURVE",
"226 -390 OFFCURVE",
"274 -125 CURVE SMOOTH",
"477 995 LINE SMOOTH",
"509 1172 OFFCURVE",
"549 1360 OFFCURVE",
"677 1360 CURVE SMOOTH",
"781 1360 OFFCURVE",
"822 1311 OFFCURVE",
"855 1198 CURVE",
"990 1254 LINE",
"990 1382 OFFCURVE",
"866 1442 OFFCURVE",
"721 1442 CURVE SMOOTH",
"492 1442 OFFCURVE",
"318 1345 OFFCURVE",
"257 1007 CURVE SMOOTH",
"26 -279 LINE SMOOTH",
"6 -393 OFFCURVE",
"-9 -475 OFFCURVE",
"-66 -475 CURVE SMOOTH",
"-87 -475 OFFCURVE",
"-110 -454 OFFCURVE",
"-134 -412 CURVE SMOOTH",
"-158 -369 OFFCURVE",
"-190 -348 OFFCURVE",
"-229 -348 CURVE SMOOTH",
"-271 -348 OFFCURVE",
"-312 -388 OFFCURVE",
"-312 -443 CURVE SMOOTH",
"-312 -467 OFFCURVE",
"-282 -580 OFFCURVE",
"-110 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"661 -551 OFFCURVE",
"734 -361 OFFCURVE",
"782 -96 CURVE SMOOTH",
"983 1017 LINE SMOOTH",
"1015 1194 OFFCURVE",
"1055 1382 OFFCURVE",
"1183 1382 CURVE SMOOTH",
"1237 1382 OFFCURVE",
"1266 1347 OFFCURVE",
"1273 1276 CURVE SMOOTH",
"1283 1169 OFFCURVE",
"1330 1149 OFFCURVE",
"1387 1149 CURVE SMOOTH",
"1444 1149 OFFCURVE",
"1472 1181 OFFCURVE",
"1472 1245 CURVE SMOOTH",
"1472 1373 OFFCURVE",
"1372 1464 OFFCURVE",
"1227 1464 CURVE SMOOTH",
"998 1464 OFFCURVE",
"824 1367 OFFCURVE",
"763 1029 CURVE SMOOTH",
"534 -250 LINE SMOOTH",
"514 -364 OFFCURVE",
"499 -446 OFFCURVE",
"442 -446 CURVE SMOOTH",
"421 -446 OFFCURVE",
"398 -425 OFFCURVE",
"374 -383 CURVE SMOOTH",
"350 -340 OFFCURVE",
"318 -319 OFFCURVE",
"279 -319 CURVE SMOOTH",
"237 -319 OFFCURVE",
"196 -359 OFFCURVE",
"196 -414 CURVE SMOOTH",
"196 -438 OFFCURVE",
"226 -551 OFFCURVE",
"398 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1158 737 LINE",
"1253 844 LINE",
"561 844 LINE",
"537 737 LINE"
);
},
{
closed = 1;
nodes = (
"656 737 LINE",
"681 844 LINE",
"59 844 LINE",
"35 737 LINE"
);
}
);
width = 1960;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
rightMetricsKey = u;
},
{
glyphname = f_u;
lastChange = "2018-08-18 09:34:50 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"60 -551 OFFCURVE",
"93 -369 OFFCURVE",
"139 -111 CURVE SMOOTH",
"296 763 LINE",
"641 763 LINE SMOOTH",
"678 763 OFFCURVE",
"678 708 OFFCURVE",
"673 678 CURVE SMOOTH",
"583 180 LINE SMOOTH",
"576 142 OFFCURVE",
"572 106 OFFCURVE",
"572 75 CURVE SMOOTH",
"572 14 OFFCURVE",
"594 -27 OFFCURVE",
"655 -27 CURVE SMOOTH",
"733 -27 OFFCURVE",
"829 82 OFFCURVE",
"910 182 CURVE SMOOTH",
"975 263 OFFCURVE",
"1049 367 OFFCURVE",
"1110 466 CURVE",
"1051 137 LINE SMOOTH",
"1047 115 OFFCURVE",
"1043 90 OFFCURVE",
"1043 66 CURVE SMOOTH",
"1043 16 OFFCURVE",
"1059 -27 OFFCURVE",
"1103 -27 CURVE SMOOTH",
"1183 -27 OFFCURVE",
"1259 34 OFFCURVE",
"1357 156 CURVE",
"1313 195 LINE",
"1257 133 OFFCURVE",
"1219 102 OFFCURVE",
"1196 102 CURVE SMOOTH",
"1150 102 OFFCURVE",
"1157 157 OFFCURVE",
"1165 203 CURVE SMOOTH",
"1281 848 LINE",
"1179 848 LINE",
"1146 659 OFFCURVE",
"1079 528 OFFCURVE",
"975 363 CURVE SMOOTH",
"917 271 OFFCURVE",
"784 102 OFFCURVE",
"725 102 CURVE SMOOTH",
"700 102 OFFCURVE",
"691 128 OFFCURVE",
"691 169 CURVE SMOOTH",
"691 213 OFFCURVE",
"701 273 OFFCURVE",
"712 334 CURVE SMOOTH",
"767 636 LINE SMOOTH",
"778 698 OFFCURVE",
"790 764 OFFCURVE",
"806 826 CURVE",
"777 855 LINE",
"741 846 OFFCURVE",
"701 842 OFFCURVE",
"664 842 CURVE SMOOTH",
"310 842 LINE",
"343 1025 LINE SMOOTH",
"390 1287 OFFCURVE",
"436 1403 OFFCURVE",
"519 1403 CURVE SMOOTH",
"599 1403 OFFCURVE",
"607 1355 OFFCURVE",
"614 1274 CURVE SMOOTH",
"617 1238 OFFCURVE",
"648 1202 OFFCURVE",
"689 1202 CURVE SMOOTH",
"724 1202 OFFCURVE",
"741 1226 OFFCURVE",
"741 1275 CURVE SMOOTH",
"741 1332 OFFCURVE",
"707 1464 OFFCURVE",
"543 1464 CURVE SMOOTH",
"469 1464 OFFCURVE",
"408 1430 OFFCURVE",
"356 1355 CURVE SMOOTH",
"318 1301 OFFCURVE",
"267 1177 OFFCURVE",
"238 1011 CURVE SMOOTH",
"208 842 LINE",
"31 842 LINE",
"16 763 LINE",
"193 763 LINE",
"2 -297 LINE SMOOTH",
"-15 -392 OFFCURVE",
"-53 -489 OFFCURVE",
"-108 -489 CURVE SMOOTH",
"-139 -489 OFFCURVE",
"-166 -469 OFFCURVE",
"-185 -442 CURVE SMOOTH",
"-205 -414 OFFCURVE",
"-236 -401 OFFCURVE",
"-276 -401 CURVE SMOOTH",
"-302 -401 OFFCURVE",
"-333 -423 OFFCURVE",
"-333 -459 CURVE SMOOTH",
"-333 -492 OFFCURVE",
"-307 -551 OFFCURVE",
"-169 -551 CURVE SMOOTH"
);
}
);
width = 1406;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"158 -551 OFFCURVE",
"231 -361 OFFCURVE",
"279 -96 CURVE SMOOTH",
"429 737 LINE",
"731 737 LINE SMOOTH",
"768 737 OFFCURVE",
"768 682 OFFCURVE",
"763 652 CURVE SMOOTH",
"681 209 LINE SMOOTH",
"674 172 OFFCURVE",
"670 138 OFFCURVE",
"670 108 CURVE SMOOTH",
"670 26 OFFCURVE",
"700 -27 OFFCURVE",
"795 -27 CURVE SMOOTH",
"847 -27 OFFCURVE",
"920 23 OFFCURVE",
"994 99 CURVE SMOOTH",
"1055 161 OFFCURVE",
"1117 240 OFFCURVE",
"1169 322 CURVE",
"1143 170 LINE SMOOTH",
"1139 150 OFFCURVE",
"1137 130 OFFCURVE",
"1137 110 CURVE SMOOTH",
"1137 33 OFFCURVE",
"1166 -27 OFFCURVE",
"1249 -27 CURVE SMOOTH",
"1328 -27 OFFCURVE",
"1417 41 OFFCURVE",
"1516 176 CURVE",
"1459 225 LINE",
"1415 169 OFFCURVE",
"1383 142 OFFCURVE",
"1366 142 CURVE SMOOTH",
"1331 142 OFFCURVE",
"1341 200 OFFCURVE",
"1347 231 CURVE SMOOTH",
"1458 848 LINE",
"1265 848 LINE",
"1226 638 OFFCURVE",
"1208 545 OFFCURVE",
"1107 372 CURVE SMOOTH",
"1040 257 OFFCURVE",
"951 133 OFFCURVE",
"900 133 CURVE SMOOTH",
"883 133 OFFCURVE",
"877 155 OFFCURVE",
"877 184 CURVE SMOOTH",
"877 225 OFFCURVE",
"886 278 OFFCURVE",
"896 332 CURVE SMOOTH",
"953 639 LINE SMOOTH",
"964 701 OFFCURVE",
"975 767 OFFCURVE",
"991 829 CURVE",
"958 862 LINE",
"922 853 OFFCURVE",
"872 845 OFFCURVE",
"825 845 CURVE SMOOTH",
"449 844 LINE",
"480 1017 LINE SMOOTH",
"512 1194 OFFCURVE",
"547 1382 OFFCURVE",
"650 1382 CURVE SMOOTH",
"677 1382 OFFCURVE",
"719 1354 OFFCURVE",
"719 1289 CURVE SMOOTH",
"719 1224 OFFCURVE",
"771 1195 OFFCURVE",
"814 1195 CURVE SMOOTH",
"856 1195 OFFCURVE",
"889 1243 OFFCURVE",
"889 1307 CURVE SMOOTH",
"889 1414 OFFCURVE",
"775 1464 OFFCURVE",
"668 1464 CURVE SMOOTH",
"579 1464 OFFCURVE",
"513 1438 OFFCURVE",
"442 1385 CURVE SMOOTH",
"378 1337 OFFCURVE",
"290 1197 OFFCURVE",
"260 1029 CURVE SMOOTH",
"227 844 LINE",
"-1 844 LINE",
"-20 737 LINE",
"208 737 LINE",
"31 -250 LINE SMOOTH",
"11 -364 OFFCURVE",
"-4 -446 OFFCURVE",
"-61 -446 CURVE SMOOTH",
"-82 -446 OFFCURVE",
"-105 -425 OFFCURVE",
"-129 -383 CURVE SMOOTH",
"-153 -340 OFFCURVE",
"-185 -319 OFFCURVE",
"-224 -319 CURVE SMOOTH",
"-266 -319 OFFCURVE",
"-307 -359 OFFCURVE",
"-307 -414 CURVE SMOOTH",
"-307 -438 OFFCURVE",
"-277 -551 OFFCURVE",
"-105 -551 CURVE SMOOTH"
);
}
);
width = 1541;
}
);
leftKerningGroup = f;
leftMetricsKey = f;
rightMetricsKey = u;
},
{
glyphname = longs_b;
lastChange = "2018-08-18 09:36:28 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH",
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"598 1403 OFFCURVE",
"613 1338 OFFCURVE",
"588 1200 CURVE SMOOTH",
"412 225 LINE SMOOTH",
"409 205 OFFCURVE",
"407 183 OFFCURVE",
"407 164 CURVE SMOOTH",
"407 46 OFFCURVE",
"445 -27 OFFCURVE",
"559 -27 CURVE SMOOTH",
"853 -27 OFFCURVE",
"1079 284 OFFCURVE",
"1079 603 CURVE SMOOTH",
"1079 752 OFFCURVE",
"1041 852 OFFCURVE",
"904 852 CURVE SMOOTH",
"821 852 OFFCURVE",
"713 792 OFFCURVE",
"588 636 CURVE",
"737 1468 LINE",
"723 1485 LINE",
"689 1471 OFFCURVE",
"655 1459 OFFCURVE",
"622 1449 CURVE",
"597 1459 OFFCURVE",
"570 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"544 391 LINE SMOOTH",
"555 451 OFFCURVE",
"574 515 OFFCURVE",
"629 594 CURVE SMOOTH",
"680 667 OFFCURVE",
"764 754 OFFCURVE",
"852 754 CURVE SMOOTH",
"927 754 OFFCURVE",
"960 665 OFFCURVE",
"960 570 CURVE SMOOTH",
"960 354 OFFCURVE",
"787 45 OFFCURVE",
"617 45 CURVE SMOOTH",
"538 45 OFFCURVE",
"495 115 OFFCURVE",
"508 190 CURVE SMOOTH"
);
}
);
width = 1141;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH",
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"681 1382 OFFCURVE",
"703 1323 OFFCURVE",
"681 1202 CURVE SMOOTH",
"513 262 LINE SMOOTH",
"509 241 OFFCURVE",
"507 221 OFFCURVE",
"507 200 CURVE SMOOTH",
"507 58 OFFCURVE",
"558 -27 OFFCURVE",
"685 -27 CURVE SMOOTH",
"1030 -27 OFFCURVE",
"1276 246 OFFCURVE",
"1276 557 CURVE SMOOTH",
"1276 730 OFFCURVE",
"1214 852 OFFCURVE",
"1049 852 CURVE SMOOTH",
"970 852 OFFCURVE",
"879 795 OFFCURVE",
"780 670 CURVE",
"922 1461 LINE",
"898 1487 LINE",
"852 1468 OFFCURVE",
"789 1453 OFFCURVE",
"729 1443 CURVE",
"696 1457 OFFCURVE",
"659 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"740 459 LINE SMOOTH",
"748 501 OFFCURVE",
"776 580 OFFCURVE",
"808 625 CURVE SMOOTH",
"861 700 OFFCURVE",
"916 731 OFFCURVE",
"980 731 CURVE SMOOTH",
"1046 731 OFFCURVE",
"1057 646 OFFCURVE",
"1057 560 CURVE SMOOTH",
"1057 323 OFFCURVE",
"936 63 OFFCURVE",
"767 63 CURVE SMOOTH",
"713 63 OFFCURVE",
"678 109 OFFCURVE",
"689 172 CURVE SMOOTH"
);
}
);
width = 1324;
}
);
leftMetricsKey = longs;
rightKerningGroup = b;
rightMetricsKey = b;
},
{
glyphname = longs_h;
lastChange = "2018-08-17 14:04:15 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"598 1403 OFFCURVE",
"613 1338 OFFCURVE",
"588 1201 CURVE SMOOTH",
"372 0 LINE",
"473 0 LINE",
"513 222 LINE SMOOTH",
"533 334 OFFCURVE",
"568 414 OFFCURVE",
"597 461 CURVE SMOOTH",
"717 656 OFFCURVE",
"807 753 OFFCURVE",
"885 753 CURVE SMOOTH",
"970 753 OFFCURVE",
"986 595 OFFCURVE",
"986 512 CURVE SMOOTH",
"986 378 OFFCURVE",
"952 212 OFFCURVE",
"915 130 CURVE SMOOTH",
"894 83 OFFCURVE",
"873 59 OFFCURVE",
"851 59 CURVE SMOOTH",
"840 59 OFFCURVE",
"806 81 OFFCURVE",
"788 113 CURVE SMOOTH",
"774 138 OFFCURVE",
"748 162 OFFCURVE",
"719 162 CURVE SMOOTH",
"686 162 OFFCURVE",
"668 140 OFFCURVE",
"668 86 CURVE SMOOTH",
"668 19 OFFCURVE",
"712 -27 OFFCURVE",
"792 -27 CURVE SMOOTH",
"989 -27 OFFCURVE",
"1105 316 OFFCURVE",
"1105 560 CURVE SMOOTH",
"1105 687 OFFCURVE",
"1080 852 OFFCURVE",
"926 852 CURVE SMOOTH",
"816 852 OFFCURVE",
"696 772 OFFCURVE",
"560 483 CURVE",
"737 1468 LINE",
"723 1485 LINE",
"689 1471 OFFCURVE",
"655 1459 OFFCURVE",
"622 1449 CURVE",
"597 1459 OFFCURVE",
"570 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
}
);
width = 1157;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"681 1382 OFFCURVE",
"703 1323 OFFCURVE",
"681 1202 CURVE SMOOTH",
"465 0 LINE",
"659 0 LINE",
"702 240 LINE SMOOTH",
"725 371 OFFCURVE",
"758 457 OFFCURVE",
"780 496 CURVE SMOOTH",
"865 647 OFFCURVE",
"939 721 OFFCURVE",
"999 721 CURVE SMOOTH",
"1102 721 OFFCURVE",
"1104 591 OFFCURVE",
"1104 494 CURVE SMOOTH",
"1104 377 OFFCURVE",
"1089 248 OFFCURVE",
"1068 167 CURVE SMOOTH",
"1055 116 OFFCURVE",
"1038 90 OFFCURVE",
"1019 90 CURVE SMOOTH",
"1004 90 OFFCURVE",
"976 118 OFFCURVE",
"957 147 CURVE SMOOTH",
"938 176 OFFCURVE",
"896 205 OFFCURVE",
"872 205 CURVE SMOOTH",
"819 205 OFFCURVE",
"793 166 OFFCURVE",
"793 110 CURVE SMOOTH",
"793 64 OFFCURVE",
"831 -27 OFFCURVE",
"947 -27 CURVE SMOOTH",
"1169 -27 OFFCURVE",
"1303 332 OFFCURVE",
"1303 564 CURVE SMOOTH",
"1303 705 OFFCURVE",
"1257 852 OFFCURVE",
"1079 852 CURVE SMOOTH",
"987 852 OFFCURVE",
"886 796 OFFCURVE",
"766 594 CURVE",
"922 1461 LINE",
"898 1487 LINE",
"852 1468 OFFCURVE",
"789 1453 OFFCURVE",
"729 1443 CURVE",
"696 1457 OFFCURVE",
"659 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
}
);
width = 1332;
}
);
leftMetricsKey = longs;
rightMetricsKey = h;
},
{
glyphname = longs_i;
lastChange = "2018-08-16 23:27:30 +0000";
layers = (
{
components = (
{
alignment = -1;
name = longs;
},
{
name = dotlessi;
transform = "{1, 0, 0, 1, 330, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 800;
},
{
components = (
{
alignment = -1;
name = longs;
},
{
alignment = -1;
name = dotlessi;
transform = "{1, 0, 0, 1, 403, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 902;
}
);
leftMetricsKey = longs;
rightMetricsKey = i;
},
{
glyphname = longs_k;
lastChange = "2018-08-18 09:36:16 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"598 1403 OFFCURVE",
"613 1338 OFFCURVE",
"588 1200 CURVE SMOOTH",
"372 0 LINE",
"474 0 LINE",
"535 340 LINE",
"565 340 LINE SMOOTH",
"598 340 OFFCURVE",
"619 331 OFFCURVE",
"631 315 CURVE SMOOTH",
"787 94 LINE SMOOTH",
"852 2 OFFCURVE",
"888 -27 OFFCURVE",
"989 -27 CURVE SMOOTH",
"1042 -27 OFFCURVE",
"1084 6 OFFCURVE",
"1133 72 CURVE",
"1093 106 LINE",
"1062 72 OFFCURVE",
"1032 57 OFFCURVE",
"1004 57 CURVE SMOOTH",
"967 57 OFFCURVE",
"924 85 OFFCURVE",
"881 141 CURVE SMOOTH",
"710 364 LINE",
"891 475 OFFCURVE",
"1034 599 OFFCURVE",
"1034 720 CURVE SMOOTH",
"1034 786 OFFCURVE",
"998 852 OFFCURVE",
"900 852 CURVE SMOOTH",
"814 852 OFFCURVE",
"711 793 OFFCURVE",
"586 621 CURVE",
"737 1468 LINE",
"723 1485 LINE",
"689 1471 OFFCURVE",
"655 1459 OFFCURVE",
"622 1449 CURVE",
"597 1459 OFFCURVE",
"570 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"564 500 LINE SMOOTH",
"568 522 OFFCURVE",
"581 548 OFFCURVE",
"600 575 CURVE SMOOTH",
"683 693 OFFCURVE",
"762 762 OFFCURVE",
"836 762 CURVE SMOOTH",
"885 762 OFFCURVE",
"915 716 OFFCURVE",
"915 663 CURVE SMOOTH",
"915 540 OFFCURVE",
"708 387 OFFCURVE",
"570 387 CURVE SMOOTH",
"543 387 LINE"
);
}
);
width = 1118;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"681 1382 OFFCURVE",
"703 1323 OFFCURVE",
"681 1203 CURVE SMOOTH",
"458 0 LINE",
"652 0 LINE",
"717 340 LINE",
"729 340 LINE SMOOTH",
"742 340 OFFCURVE",
"753 332 OFFCURVE",
"762 319 CURVE SMOOTH",
"917 109 LINE SMOOTH",
"997 1 OFFCURVE",
"1046 -27 OFFCURVE",
"1161 -27 CURVE SMOOTH",
"1230 -27 OFFCURVE",
"1295 11 OFFCURVE",
"1353 86 CURVE",
"1298 131 LINE",
"1274 104 OFFCURVE",
"1251 90 OFFCURVE",
"1228 90 CURVE SMOOTH",
"1191 90 OFFCURVE",
"1145 124 OFFCURVE",
"1088 195 CURVE SMOOTH",
"931 390 LINE",
"1104 481 OFFCURVE",
"1219 605 OFFCURVE",
"1219 698 CURVE SMOOTH",
"1219 792 OFFCURVE",
"1148 852 OFFCURVE",
"1047 852 CURVE SMOOTH",
"972 852 OFFCURVE",
"875 807 OFFCURVE",
"778 696 CURVE",
"915 1461 LINE",
"891 1487 LINE",
"845 1468 OFFCURVE",
"789 1453 OFFCURVE",
"729 1443 CURVE",
"696 1457 OFFCURVE",
"659 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"750 547 LINE SMOOTH",
"753 564 OFFCURVE",
"762 585 OFFCURVE",
"781 610 CURVE SMOOTH",
"846 695 OFFCURVE",
"909 739 OFFCURVE",
"973 739 CURVE SMOOTH",
"1000 739 OFFCURVE",
"1015 716 OFFCURVE",
"1015 669 CURVE SMOOTH",
"1015 546 OFFCURVE",
"886 393 OFFCURVE",
"755 393 CURVE SMOOTH",
"722 393 LINE"
);
}
);
width = 1315;
}
);
leftMetricsKey = longs;
rightKerningGroup = k;
rightMetricsKey = k;
},
{
glyphname = longs_l;
lastChange = "2018-08-17 20:39:00 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"247 1436 OFFCURVE",
"180 1385 OFFCURVE",
"220 1246 CURVE",
"189 1161 OFFCURVE",
"158 1000 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH",
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"606 1403 OFFCURVE",
"661 1337 OFFCURVE",
"636 1197 CURVE SMOOTH",
"444 135 LINE SMOOTH",
"441 120 OFFCURVE",
"440 104 OFFCURVE",
"440 87 CURVE SMOOTH",
"440 31 OFFCURVE",
"460 -27 OFFCURVE",
"504 -27 CURVE SMOOTH",
"575 -27 OFFCURVE",
"654 39 OFFCURVE",
"756 170 CURVE",
"712 207 LINE",
"662 144 OFFCURVE",
"621 113 OFFCURVE",
"586 113 CURVE SMOOTH",
"556 113 OFFCURVE",
"552 169 OFFCURVE",
"559 209 CURVE SMOOTH",
"787 1470 LINE",
"774 1484 LINE",
"728 1463 OFFCURVE",
"685 1448 OFFCURVE",
"644 1439 CURVE",
"614 1455 OFFCURVE",
"579 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"445 1464 OFFCURVE",
"365 1433 OFFCURVE",
"298 1370 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"606 1403 OFFCURVE",
"661 1337 OFFCURVE",
"636 1197 CURVE SMOOTH",
"444 135 LINE SMOOTH",
"441 120 OFFCURVE",
"440 104 OFFCURVE",
"440 87 CURVE SMOOTH",
"440 31 OFFCURVE",
"460 -27 OFFCURVE",
"504 -27 CURVE SMOOTH",
"575 -27 OFFCURVE",
"654 39 OFFCURVE",
"756 170 CURVE",
"712 207 LINE",
"662 144 OFFCURVE",
"621 113 OFFCURVE",
"586 113 CURVE SMOOTH",
"556 113 OFFCURVE",
"552 169 OFFCURVE",
"559 209 CURVE SMOOTH",
"787 1470 LINE",
"774 1484 LINE",
"728 1463 OFFCURVE",
"685 1448 OFFCURVE",
"644 1439 CURVE",
"614 1455 OFFCURVE",
"579 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"399 1464 OFFCURVE",
"317 1401 OFFCURVE",
"267 1332 CURVE SMOOTH",
"201 1241 OFFCURVE",
"164 1034 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
}
);
width = 805;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"294 1438 OFFCURVE",
"222 1349 OFFCURVE",
"258 1245 CURVE",
"206 1132 OFFCURVE",
"179 978 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH",
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"659 1382 OFFCURVE",
"710 1348 OFFCURVE",
"683 1198 CURVE SMOOTH",
"494 156 LINE SMOOTH",
"491 142 OFFCURVE",
"490 128 OFFCURVE",
"490 114 CURVE SMOOTH",
"490 42 OFFCURVE",
"525 -27 OFFCURVE",
"598 -27 CURVE SMOOTH",
"680 -27 OFFCURVE",
"768 43 OFFCURVE",
"861 182 CURVE",
"799 227 LINE",
"766 170 OFFCURVE",
"737 141 OFFCURVE",
"714 141 CURVE SMOOTH",
"688 141 OFFCURVE",
"690 164 OFFCURVE",
"696 195 CURVE SMOOTH",
"922 1448 LINE",
"900 1487 LINE",
"844 1467 OFFCURVE",
"784 1452 OFFCURVE",
"729 1443 CURVE",
"696 1457 OFFCURVE",
"659 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"509 1464 OFFCURVE",
"415 1435 OFFCURVE",
"347 1372 CURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"574 1382 CURVE SMOOTH",
"659 1382 OFFCURVE",
"710 1348 OFFCURVE",
"683 1198 CURVE SMOOTH",
"494 156 LINE SMOOTH",
"491 142 OFFCURVE",
"490 128 OFFCURVE",
"490 114 CURVE SMOOTH",
"490 42 OFFCURVE",
"525 -27 OFFCURVE",
"598 -27 CURVE SMOOTH",
"680 -27 OFFCURVE",
"768 43 OFFCURVE",
"861 182 CURVE",
"799 227 LINE",
"766 170 OFFCURVE",
"737 141 OFFCURVE",
"714 141 CURVE SMOOTH",
"688 141 OFFCURVE",
"690 164 OFFCURVE",
"696 195 CURVE SMOOTH",
"922 1448 LINE",
"900 1487 LINE",
"844 1467 OFFCURVE",
"784 1452 OFFCURVE",
"729 1443 CURVE",
"696 1457 OFFCURVE",
"659 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"422 1464 OFFCURVE",
"313 1367 OFFCURVE",
"258 1245 CURVE SMOOTH",
"207 1133 OFFCURVE",
"179 978 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
}
);
width = 888;
}
);
leftMetricsKey = longs;
rightMetricsKey = l;
},
{
glyphname = longs_longs;
lastChange = "2018-08-18 09:35:41 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"-23 -580 OFFCURVE",
"10 -398 OFFCURVE",
"56 -140 CURVE SMOOTH",
"261 1003 LINE SMOOTH",
"313 1292 OFFCURVE",
"414 1381 OFFCURVE",
"537 1381 CURVE SMOOTH",
"623 1381 OFFCURVE",
"701 1352 OFFCURVE",
"728 1215 CURVE",
"811 1270 LINE",
"811 1321 OFFCURVE",
"771 1442 OFFCURVE",
"589 1442 CURVE SMOOTH",
"392 1442 OFFCURVE",
"219 1341 OFFCURVE",
"156 989 CURVE SMOOTH",
"-81 -326 LINE SMOOTH",
"-98 -421 OFFCURVE",
"-136 -518 OFFCURVE",
"-191 -518 CURVE SMOOTH",
"-222 -518 OFFCURVE",
"-249 -498 OFFCURVE",
"-268 -471 CURVE SMOOTH",
"-288 -443 OFFCURVE",
"-319 -430 OFFCURVE",
"-359 -430 CURVE SMOOTH",
"-385 -430 OFFCURVE",
"-416 -452 OFFCURVE",
"-416 -488 CURVE SMOOTH",
"-416 -521 OFFCURVE",
"-390 -580 OFFCURVE",
"-252 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"461 -551 OFFCURVE",
"494 -369 OFFCURVE",
"540 -111 CURVE SMOOTH",
"744 1025 LINE SMOOTH",
"796 1314 OFFCURVE",
"897 1403 OFFCURVE",
"1020 1403 CURVE SMOOTH",
"1106 1403 OFFCURVE",
"1142 1355 OFFCURVE",
"1149 1274 CURVE SMOOTH",
"1152 1238 OFFCURVE",
"1183 1202 OFFCURVE",
"1224 1202 CURVE SMOOTH",
"1259 1202 OFFCURVE",
"1276 1226 OFFCURVE",
"1276 1275 CURVE SMOOTH",
"1276 1326 OFFCURVE",
"1254 1464 OFFCURVE",
"1072 1464 CURVE SMOOTH",
"875 1464 OFFCURVE",
"703 1363 OFFCURVE",
"639 1011 CURVE SMOOTH",
"403 -297 LINE SMOOTH",
"386 -392 OFFCURVE",
"348 -489 OFFCURVE",
"293 -489 CURVE SMOOTH",
"262 -489 OFFCURVE",
"235 -469 OFFCURVE",
"216 -442 CURVE SMOOTH",
"196 -414 OFFCURVE",
"165 -401 OFFCURVE",
"125 -401 CURVE SMOOTH",
"99 -401 OFFCURVE",
"68 -423 OFFCURVE",
"68 -459 CURVE SMOOTH",
"68 -492 OFFCURVE",
"94 -551 OFFCURVE",
"232 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"954 763 LINE",
"976 842 LINE",
"432 842 LINE",
"412 763 LINE"
);
},
{
closed = 1;
nodes = (
"475 763 LINE",
"497 842 LINE",
"-47 842 LINE",
"-67 763 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"559 1403 OFFCURVE",
"641 1385 OFFCURVE",
"681 1246 CURVE",
"650 1161 OFFCURVE",
"619 1000 OFFCURVE",
"584 807 CURVE SMOOTH",
"386 -297 LINE SMOOTH",
"373 -370 OFFCURVE",
"320 -467 OFFCURVE",
"260 -467 CURVE SMOOTH",
"237 -467 OFFCURVE",
"215 -450 OFFCURVE",
"194 -417 CURVE SMOOTH",
"173 -384 OFFCURVE",
"146 -367 OFFCURVE",
"110 -367 CURVE SMOOTH",
"82 -367 OFFCURVE",
"58 -399 OFFCURVE",
"58 -437 CURVE SMOOTH",
"58 -503 OFFCURVE",
"148 -551 OFFCURVE",
"217 -551 CURVE SMOOTH",
"442 -551 OFFCURVE",
"471 -380 OFFCURVE",
"520 -111 CURVE SMOOTH",
"686 807 LINE SMOOTH",
"750 1161 OFFCURVE",
"794 1403 OFFCURVE",
"956 1403 CURVE SMOOTH",
"1028 1403 OFFCURVE",
"1062 1355 OFFCURVE",
"1069 1274 CURVE SMOOTH",
"1073 1231 OFFCURVE",
"1108 1202 OFFCURVE",
"1144 1202 CURVE SMOOTH",
"1179 1202 OFFCURVE",
"1196 1226 OFFCURVE",
"1196 1275 CURVE SMOOTH",
"1196 1389 OFFCURVE",
"1115 1464 OFFCURVE",
"1001 1464 CURVE SMOOTH",
"906 1464 OFFCURVE",
"826 1433 OFFCURVE",
"759 1370 CURVE",
"708 1436 OFFCURVE",
"634 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH",
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH"
);
}
);
width = 720;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"80 -580 OFFCURVE",
"153 -390 OFFCURVE",
"201 -125 CURVE SMOOTH",
"404 995 LINE SMOOTH",
"436 1172 OFFCURVE",
"476 1360 OFFCURVE",
"604 1360 CURVE SMOOTH",
"708 1360 OFFCURVE",
"749 1311 OFFCURVE",
"782 1198 CURVE",
"917 1254 LINE",
"917 1382 OFFCURVE",
"793 1442 OFFCURVE",
"648 1442 CURVE SMOOTH",
"419 1442 OFFCURVE",
"245 1345 OFFCURVE",
"184 1007 CURVE SMOOTH",
"-47 -279 LINE SMOOTH",
"-67 -393 OFFCURVE",
"-82 -475 OFFCURVE",
"-139 -475 CURVE SMOOTH",
"-160 -475 OFFCURVE",
"-183 -454 OFFCURVE",
"-207 -412 CURVE SMOOTH",
"-231 -369 OFFCURVE",
"-263 -348 OFFCURVE",
"-302 -348 CURVE SMOOTH",
"-344 -348 OFFCURVE",
"-385 -388 OFFCURVE",
"-385 -443 CURVE SMOOTH",
"-385 -467 OFFCURVE",
"-355 -580 OFFCURVE",
"-183 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"588 -551 OFFCURVE",
"661 -361 OFFCURVE",
"709 -96 CURVE SMOOTH",
"910 1017 LINE SMOOTH",
"942 1194 OFFCURVE",
"982 1382 OFFCURVE",
"1110 1382 CURVE SMOOTH",
"1164 1382 OFFCURVE",
"1193 1347 OFFCURVE",
"1200 1276 CURVE SMOOTH",
"1211 1169 OFFCURVE",
"1257 1149 OFFCURVE",
"1314 1149 CURVE SMOOTH",
"1371 1149 OFFCURVE",
"1399 1181 OFFCURVE",
"1399 1245 CURVE SMOOTH",
"1399 1373 OFFCURVE",
"1299 1464 OFFCURVE",
"1154 1464 CURVE SMOOTH",
"925 1464 OFFCURVE",
"751 1367 OFFCURVE",
"690 1029 CURVE SMOOTH",
"461 -250 LINE SMOOTH",
"441 -364 OFFCURVE",
"426 -446 OFFCURVE",
"369 -446 CURVE SMOOTH",
"348 -446 OFFCURVE",
"325 -425 OFFCURVE",
"301 -383 CURVE SMOOTH",
"277 -340 OFFCURVE",
"245 -319 OFFCURVE",
"206 -319 CURVE SMOOTH",
"164 -319 OFFCURVE",
"123 -359 OFFCURVE",
"123 -414 CURVE SMOOTH",
"123 -438 OFFCURVE",
"153 -551 OFFCURVE",
"325 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1085 737 LINE",
"1110 844 LINE",
"488 844 LINE",
"464 737 LINE"
);
},
{
closed = 1;
nodes = (
"583 737 LINE",
"608 844 LINE",
"-14 844 LINE",
"-38 737 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"584 1382 CURVE SMOOTH",
"665 1382 OFFCURVE",
"726 1349 OFFCURVE",
"762 1245 CURVE",
"710 1132 OFFCURVE",
"683 978 OFFCURVE",
"651 801 CURVE SMOOTH",
"461 -250 LINE SMOOTH",
"439 -372 OFFCURVE",
"425 -446 OFFCURVE",
"375 -446 CURVE SMOOTH",
"343 -446 OFFCURVE",
"329 -424 OFFCURVE",
"303 -375 CURVE SMOOTH",
"283 -338 OFFCURVE",
"251 -319 OFFCURVE",
"212 -319 CURVE SMOOTH",
"159 -319 OFFCURVE",
"128 -360 OFFCURVE",
"128 -411 CURVE SMOOTH",
"128 -498 OFFCURVE",
"239 -551 OFFCURVE",
"331 -551 CURVE SMOOTH",
"581 -551 OFFCURVE",
"636 -352 OFFCURVE",
"682 -96 CURVE SMOOTH",
"876 977 LINE SMOOTH",
"915 1191 OFFCURVE",
"950 1382 OFFCURVE",
"1078 1382 CURVE SMOOTH",
"1159 1382 OFFCURVE",
"1164 1339 OFFCURVE",
"1172 1243 CURVE SMOOTH",
"1177 1189 OFFCURVE",
"1221 1149 OFFCURVE",
"1283 1149 CURVE SMOOTH",
"1341 1149 OFFCURVE",
"1368 1188 OFFCURVE",
"1368 1249 CURVE SMOOTH",
"1368 1376 OFFCURVE",
"1261 1464 OFFCURVE",
"1123 1464 CURVE SMOOTH",
"1013 1464 OFFCURVE",
"919 1435 OFFCURVE",
"851 1372 CURVE",
"798 1438 OFFCURVE",
"721 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH",
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH"
);
}
);
width = 877;
}
);
leftMetricsKey = longs;
rightKerningGroup = longs;
rightMetricsKey = longs;
},
{
glyphname = longs_longs_i;
lastChange = "2018-08-17 13:52:02 +0000";
layers = (
{
components = (
{
alignment = -1;
name = longs_longs;
},
{
alignment = -1;
name = dotlessi;
transform = "{1, 0, 0, 1, 810, 0}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 1280;
},
{
components = (
{
alignment = -1;
name = longs_longs;
},
{
alignment = -1;
name = dotlessi;
transform = "{1, 0, 0, 1, 937, 0}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 1436;
}
);
leftMetricsKey = longs;
rightMetricsKey = i;
},
{
glyphname = longs_longs_l;
lastChange = "2018-08-17 13:56:15 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"-403 -503 OFFCURVE",
"-313 -551 OFFCURVE",
"-244 -551 CURVE SMOOTH",
"-19 -551 OFFCURVE",
"10 -380 OFFCURVE",
"59 -111 CURVE SMOOTH",
"225 807 LINE SMOOTH",
"289 1161 OFFCURVE",
"333 1403 OFFCURVE",
"495 1403 CURVE SMOOTH",
"559 1403 OFFCURVE",
"641 1385 OFFCURVE",
"681 1246 CURVE",
"650 1161 OFFCURVE",
"619 1000 OFFCURVE",
"584 807 CURVE SMOOTH",
"386 -297 LINE SMOOTH",
"373 -370 OFFCURVE",
"320 -467 OFFCURVE",
"260 -467 CURVE SMOOTH",
"237 -467 OFFCURVE",
"215 -450 OFFCURVE",
"194 -417 CURVE SMOOTH",
"173 -384 OFFCURVE",
"146 -367 OFFCURVE",
"110 -367 CURVE SMOOTH",
"82 -367 OFFCURVE",
"58 -399 OFFCURVE",
"58 -437 CURVE SMOOTH",
"58 -503 OFFCURVE",
"148 -551 OFFCURVE",
"217 -551 CURVE SMOOTH",
"442 -551 OFFCURVE",
"471 -380 OFFCURVE",
"520 -111 CURVE SMOOTH",
"686 807 LINE SMOOTH",
"750 1161 OFFCURVE",
"794 1403 OFFCURVE",
"956 1403 CURVE SMOOTH",
"1067 1403 OFFCURVE",
"1122 1337 OFFCURVE",
"1097 1197 CURVE SMOOTH",
"905 135 LINE SMOOTH",
"902 120 OFFCURVE",
"901 104 OFFCURVE",
"901 87 CURVE SMOOTH",
"901 31 OFFCURVE",
"921 -27 OFFCURVE",
"965 -27 CURVE SMOOTH",
"1036 -27 OFFCURVE",
"1115 39 OFFCURVE",
"1217 170 CURVE",
"1173 207 LINE",
"1123 144 OFFCURVE",
"1082 113 OFFCURVE",
"1047 113 CURVE SMOOTH",
"1017 113 OFFCURVE",
"1013 169 OFFCURVE",
"1020 209 CURVE SMOOTH",
"1248 1470 LINE",
"1235 1484 LINE",
"1189 1463 OFFCURVE",
"1146 1448 OFFCURVE",
"1105 1439 CURVE",
"1075 1455 OFFCURVE",
"1040 1464 OFFCURVE",
"1001 1464 CURVE SMOOTH",
"906 1464 OFFCURVE",
"826 1433 OFFCURVE",
"759 1370 CURVE",
"708 1436 OFFCURVE",
"634 1464 OFFCURVE",
"540 1464 CURVE SMOOTH",
"435 1464 OFFCURVE",
"349 1426 OFFCURVE",
"278 1350 CURVE SMOOTH",
"207 1273 OFFCURVE",
"173 1088 OFFCURVE",
"123 807 CURVE SMOOTH",
"-75 -297 LINE SMOOTH",
"-88 -370 OFFCURVE",
"-141 -467 OFFCURVE",
"-201 -467 CURVE SMOOTH",
"-224 -467 OFFCURVE",
"-246 -450 OFFCURVE",
"-267 -417 CURVE SMOOTH",
"-288 -384 OFFCURVE",
"-315 -367 OFFCURVE",
"-351 -367 CURVE SMOOTH",
"-379 -367 OFFCURVE",
"-403 -399 OFFCURVE",
"-403 -437 CURVE SMOOTH"
);
}
);
width = 1266;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"-376 -498 OFFCURVE",
"-265 -551 OFFCURVE",
"-173 -551 CURVE SMOOTH",
"77 -551 OFFCURVE",
"132 -352 OFFCURVE",
"178 -96 CURVE SMOOTH",
"372 977 LINE SMOOTH",
"411 1191 OFFCURVE",
"446 1382 OFFCURVE",
"584 1382 CURVE SMOOTH",
"665 1382 OFFCURVE",
"726 1349 OFFCURVE",
"762 1245 CURVE",
"710 1132 OFFCURVE",
"683 978 OFFCURVE",
"651 801 CURVE SMOOTH",
"461 -250 LINE SMOOTH",
"439 -372 OFFCURVE",
"425 -446 OFFCURVE",
"375 -446 CURVE SMOOTH",
"343 -446 OFFCURVE",
"329 -424 OFFCURVE",
"303 -375 CURVE SMOOTH",
"283 -338 OFFCURVE",
"251 -319 OFFCURVE",
"212 -319 CURVE SMOOTH",
"159 -319 OFFCURVE",
"128 -360 OFFCURVE",
"128 -411 CURVE SMOOTH",
"128 -498 OFFCURVE",
"239 -551 OFFCURVE",
"331 -551 CURVE SMOOTH",
"581 -551 OFFCURVE",
"636 -352 OFFCURVE",
"682 -96 CURVE SMOOTH",
"876 977 LINE SMOOTH",
"915 1191 OFFCURVE",
"950 1382 OFFCURVE",
"1078 1382 CURVE SMOOTH",
"1163 1382 OFFCURVE",
"1214 1348 OFFCURVE",
"1187 1198 CURVE SMOOTH",
"998 156 LINE SMOOTH",
"995 142 OFFCURVE",
"994 128 OFFCURVE",
"994 114 CURVE SMOOTH",
"994 42 OFFCURVE",
"1029 -27 OFFCURVE",
"1102 -27 CURVE SMOOTH",
"1184 -27 OFFCURVE",
"1272 43 OFFCURVE",
"1365 182 CURVE",
"1303 227 LINE",
"1270 170 OFFCURVE",
"1241 141 OFFCURVE",
"1218 141 CURVE SMOOTH",
"1192 141 OFFCURVE",
"1194 164 OFFCURVE",
"1200 195 CURVE SMOOTH",
"1426 1448 LINE",
"1404 1487 LINE",
"1348 1467 OFFCURVE",
"1288 1452 OFFCURVE",
"1233 1443 CURVE",
"1200 1457 OFFCURVE",
"1163 1464 OFFCURVE",
"1123 1464 CURVE SMOOTH",
"1013 1464 OFFCURVE",
"919 1435 OFFCURVE",
"851 1372 CURVE",
"798 1438 OFFCURVE",
"721 1464 OFFCURVE",
"619 1464 CURVE SMOOTH",
"496 1464 OFFCURVE",
"394 1428 OFFCURVE",
"324 1349 CURVE SMOOTH",
"225 1238 OFFCURVE",
"190 1040 OFFCURVE",
"147 801 CURVE SMOOTH",
"-43 -250 LINE SMOOTH",
"-65 -372 OFFCURVE",
"-79 -446 OFFCURVE",
"-129 -446 CURVE SMOOTH",
"-161 -446 OFFCURVE",
"-175 -424 OFFCURVE",
"-201 -375 CURVE SMOOTH",
"-221 -338 OFFCURVE",
"-253 -319 OFFCURVE",
"-292 -319 CURVE SMOOTH",
"-345 -319 OFFCURVE",
"-376 -360 OFFCURVE",
"-376 -411 CURVE SMOOTH"
);
}
);
width = 1392;
}
);
leftMetricsKey = longs;
rightMetricsKey = l;
},
{
glyphname = uniFB00.alt;
lastChange = "2018-08-18 09:34:56 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"872 1075 OFFCURVE",
"914 1225 OFFCURVE",
"952 1293 CURVE SMOOTH",
"989 1361 OFFCURVE",
"1029 1395 OFFCURVE",
"1070 1395 CURVE SMOOTH",
"1117 1395 OFFCURVE",
"1141 1355 OFFCURVE",
"1141 1274 CURVE SMOOTH",
"1141 1235 OFFCURVE",
"1171 1202 OFFCURVE",
"1216 1202 CURVE SMOOTH",
"1260 1202 OFFCURVE",
"1282 1234 OFFCURVE",
"1282 1298 CURVE SMOOTH",
"1282 1387 OFFCURVE",
"1206 1464 OFFCURVE",
"1099 1464 CURVE SMOOTH",
"1026 1464 OFFCURVE",
"955 1427 OFFCURVE",
"888 1353 CURVE",
"857 1405 OFFCURVE",
"783 1442 OFFCURVE",
"711 1442 CURVE SMOOTH",
"503 1442 OFFCURVE",
"375 1321 OFFCURVE",
"315 1149 CURVE SMOOTH",
"284 1062 OFFCURVE",
"258 960 OFFCURVE",
"235 842 CURVE",
"64 842 LINE SMOOTH",
"42 842 OFFCURVE",
"18 763 OFFCURVE",
"37 763 CURVE SMOOTH",
"219 763 LINE",
"15 -297 LINE SMOOTH",
"8 -337 OFFCURVE",
"-10 -375 OFFCURVE",
"-39 -412 CURVE SMOOTH",
"-68 -449 OFFCURVE",
"-95 -467 OFFCURVE",
"-120 -467 CURVE SMOOTH",
"-145 -467 OFFCURVE",
"-167 -450 OFFCURVE",
"-184 -417 CURVE SMOOTH",
"-201 -384 OFFCURVE",
"-230 -367 OFFCURVE",
"-272 -367 CURVE SMOOTH",
"-305 -367 OFFCURVE",
"-335 -403 OFFCURVE",
"-335 -446 CURVE SMOOTH",
"-335 -489 OFFCURVE",
"-269 -551 OFFCURVE",
"-184 -551 CURVE SMOOTH",
"-32 -551 OFFCURVE",
"63 -456 OFFCURVE",
"114 -312 CURVE SMOOTH",
"140 -241 OFFCURVE",
"159 -174 OFFCURVE",
"171 -111 CURVE SMOOTH",
"340 763 LINE",
"688 763 LINE",
"488 -268 LINE SMOOTH",
"481 -307 OFFCURVE",
"463 -344 OFFCURVE",
"434 -381 CURVE SMOOTH",
"405 -419 OFFCURVE",
"381 -438 OFFCURVE",
"361 -438 CURVE SMOOTH",
"330 -438 OFFCURVE",
"307 -421 OFFCURVE",
"290 -388 CURVE SMOOTH",
"273 -355 OFFCURVE",
"243 -338 OFFCURVE",
"201 -338 CURVE SMOOTH",
"168 -338 OFFCURVE",
"138 -373 OFFCURVE",
"138 -416 CURVE SMOOTH",
"138 -459 OFFCURVE",
"204 -522 OFFCURVE",
"292 -522 CURVE SMOOTH",
"404 -522 OFFCURVE",
"527 -452 OFFCURVE",
"582 -300 CURVE SMOOTH",
"610 -224 OFFCURVE",
"631 -151 OFFCURVE",
"644 -82 CURVE SMOOTH",
"809 763 LINE",
"1080 763 LINE SMOOTH",
"1101 763 OFFCURVE",
"1129 842 OFFCURVE",
"1109 842 CURVE SMOOTH",
"825 842 LINE"
);
},
{
closed = 1;
nodes = (
"778 1155 OFFCURVE",
"739 1020 OFFCURVE",
"703 842 CURVE",
"355 842 LINE",
"403 1087 OFFCURVE",
"417 1178 OFFCURVE",
"500 1291 CURVE SMOOTH",
"541 1348 OFFCURVE",
"597 1376 OFFCURVE",
"666 1376 CURVE SMOOTH",
"743 1376 OFFCURVE",
"794 1333 OFFCURVE",
"821 1247 CURVE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"54 -580 OFFCURVE",
"87 -398 OFFCURVE",
"133 -140 CURVE SMOOTH",
"338 1003 LINE SMOOTH",
"390 1292 OFFCURVE",
"491 1381 OFFCURVE",
"614 1381 CURVE SMOOTH",
"700 1381 OFFCURVE",
"778 1352 OFFCURVE",
"805 1215 CURVE",
"888 1270 LINE",
"888 1321 OFFCURVE",
"848 1442 OFFCURVE",
"666 1442 CURVE SMOOTH",
"469 1442 OFFCURVE",
"296 1341 OFFCURVE",
"233 989 CURVE SMOOTH",
"-4 -326 LINE SMOOTH",
"-21 -421 OFFCURVE",
"-59 -518 OFFCURVE",
"-114 -518 CURVE SMOOTH",
"-145 -518 OFFCURVE",
"-172 -498 OFFCURVE",
"-191 -471 CURVE SMOOTH",
"-211 -443 OFFCURVE",
"-242 -430 OFFCURVE",
"-282 -430 CURVE SMOOTH",
"-308 -430 OFFCURVE",
"-339 -452 OFFCURVE",
"-339 -488 CURVE SMOOTH",
"-339 -521 OFFCURVE",
"-313 -580 OFFCURVE",
"-175 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"552 763 LINE",
"574 842 LINE",
"30 842 LINE",
"10 763 LINE"
);
},
{
closed = 1;
nodes = (
"564 -551 OFFCURVE",
"596 -370 OFFCURVE",
"643 -111 CURVE SMOOTH",
"847 1025 LINE SMOOTH",
"894 1287 OFFCURVE",
"940 1403 OFFCURVE",
"1023 1403 CURVE SMOOTH",
"1103 1403 OFFCURVE",
"1111 1355 OFFCURVE",
"1118 1274 CURVE SMOOTH",
"1121 1238 OFFCURVE",
"1152 1202 OFFCURVE",
"1193 1202 CURVE SMOOTH",
"1228 1202 OFFCURVE",
"1245 1226 OFFCURVE",
"1245 1275 CURVE SMOOTH",
"1245 1332 OFFCURVE",
"1211 1464 OFFCURVE",
"1047 1464 CURVE SMOOTH",
"900 1464 OFFCURVE",
"799 1327 OFFCURVE",
"742 1011 CURVE SMOOTH",
"506 -297 LINE SMOOTH",
"489 -392 OFFCURVE",
"451 -489 OFFCURVE",
"396 -489 CURVE SMOOTH",
"365 -489 OFFCURVE",
"338 -469 OFFCURVE",
"319 -442 CURVE SMOOTH",
"299 -414 OFFCURVE",
"268 -401 OFFCURVE",
"228 -401 CURVE SMOOTH",
"202 -401 OFFCURVE",
"171 -423 OFFCURVE",
"171 -458 CURVE SMOOTH",
"171 -471 OFFCURVE",
"194 -551 OFFCURVE",
"340 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1057 763 LINE",
"1079 842 LINE",
"535 842 LINE",
"515 763 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 4 values pushed */
60 1 12 73 
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
0 7 4 3 8 7 117 0 3 1 4 3 115 0 13 0 15 0 13 15 131 0 6 0 8 4 6 8 109 0 2 0 4 7 2 4 109 9 5 2 1 16 10 2 0 13 1 0 107 0 14 11 12 14 93 0 15 0 11 12 15 11 109 0 14 14 12 97 0 12 14 12 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
0 7 4 3 4 7 3 131 0 3 1 4 3 1 129 0 13 0 15 0 13 15 131 0 6 0 8 4 6 8 109 0 2 0 4 7 2 4 109 9 5 2 1 16 10 2 0 13 1 0 107 0 14 11 12 14 93 0 15 0 11 12 15 11 109 0 14 14 12 97 0 12 14 12 81 
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 28 values pushed */
82 81 78 76 73 71 68 66 63 61 58 56 53 51 48 47 33 36 37 20 33 36 37 35 16 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 957;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"521 -221 LINE SMOOTH",
"517 -244 OFFCURVE",
"506 -291 OFFCURVE",
"496 -334 OFFCURVE",
"478 -375 OFFCURVE",
"459 -403 OFFCURVE",
"428 -420 OFFCURVE",
"410 -420 QCURVE SMOOTH",
"382 -420 OFFCURVE",
"345 -346 QCURVE SMOOTH",
"318 -293 OFFCURVE",
"259 -293 QCURVE SMOOTH",
"224 -293 OFFCURVE",
"195 -322 QCURVE",
"242 -215 OFFCURVE",
"267 -96 QCURVE SMOOTH",
"435 737 LINE",
"713 737 LINE"
);
},
{
closed = 1;
nodes = (
"912 737 LINE",
"1158 737 LINE SMOOTH",
"1174 737 OFFCURVE",
"1207 844 OFFCURVE",
"1193 844 QCURVE SMOOTH",
"932 844 LINE",
"973 1069 LINE SMOOTH",
"998 1204 OFFCURVE",
"1092 1382 OFFCURVE",
"1145 1382 QCURVE SMOOTH",
"1207 1382 OFFCURVE",
"1207 1284 QCURVE SMOOTH",
"1207 1235 OFFCURVE",
"1272 1190 OFFCURVE",
"1309 1190 QCURVE SMOOTH",
"1348 1190 OFFCURVE",
"1404 1245 OFFCURVE",
"1404 1370 OFFCURVE",
"1336 1417 QCURVE SMOOTH",
"1266 1464 OFFCURVE",
"1160 1464 QCURVE SMOOTH",
"1047 1462 OFFCURVE",
"949 1366 QCURVE",
"888 1442 OFFCURVE",
"769 1442 QCURVE SMOOTH",
"537 1442 OFFCURVE",
"406 1264 QCURVE SMOOTH",
"327 1155 OFFCURVE",
"259 844 QCURVE",
"87 844 LINE SMOOTH",
"72 844 OFFCURVE",
"40 737 OFFCURVE",
"54 737 QCURVE SMOOTH",
"236 737 LINE",
"37 -250 LINE SMOOTH",
"25 -305 OFFCURVE",
"23 -317 QCURVE",
"15 -352 OFFCURVE",
"-6 -410 OFFCURVE",
"-44 -446 OFFCURVE",
"-71 -446 QCURVE SMOOTH",
"-81 -446 OFFCURVE",
"-98 -438 OFFCURVE",
"-110 -424 OFFCURVE",
"-122 -406 OFFCURVE",
"-131 -385 OFFCURVE",
"-137 -375 QCURVE SMOOTH",
"-170 -319 OFFCURVE",
"-223 -319 QCURVE SMOOTH",
"-257 -319 OFFCURVE",
"-315 -379 OFFCURVE",
"-315 -469 OFFCURVE",
"-212 -551 OFFCURVE",
"-124 -551 QCURVE SMOOTH",
"-20 -551 OFFCURVE",
"136 -442 OFFCURVE",
"171 -379 QCURVE",
"158 -428 OFFCURVE",
"261 -522 OFFCURVE",
"359 -522 QCURVE SMOOTH",
"503 -523 OFFCURVE",
"609 -412 QCURVE SMOOTH",
"646 -375 OFFCURVE",
"685 -279 QCURVE SMOOTH",
"725 -179 OFFCURVE",
"748 -70 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"817 1170 OFFCURVE",
"803 1114 QCURVE SMOOTH",
"763 965 OFFCURVE",
"736 844 QCURVE",
"455 844 LINE",
"470 918 OFFCURVE",
"496 1057 OFFCURVE",
"545 1208 OFFCURVE",
"576 1257 QCURVE SMOOTH",
"639 1360 OFFCURVE",
"715 1360 QCURVE SMOOTH",
"744 1360 OFFCURVE",
"787 1341 OFFCURVE",
"812 1311 OFFCURVE",
"830 1275 OFFCURVE",
"834 1255 QCURVE",
"836 1235 OFFCURVE",
"842 1219 QCURVE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"153 -580 OFFCURVE",
"226 -390 OFFCURVE",
"274 -125 CURVE SMOOTH",
"477 995 LINE SMOOTH",
"509 1172 OFFCURVE",
"549 1360 OFFCURVE",
"677 1360 CURVE SMOOTH",
"781 1360 OFFCURVE",
"822 1311 OFFCURVE",
"855 1198 CURVE",
"990 1254 LINE",
"990 1382 OFFCURVE",
"866 1442 OFFCURVE",
"721 1442 CURVE SMOOTH",
"492 1442 OFFCURVE",
"318 1345 OFFCURVE",
"257 1007 CURVE SMOOTH",
"26 -279 LINE SMOOTH",
"6 -393 OFFCURVE",
"-9 -475 OFFCURVE",
"-66 -475 CURVE SMOOTH",
"-87 -475 OFFCURVE",
"-110 -454 OFFCURVE",
"-134 -412 CURVE SMOOTH",
"-158 -369 OFFCURVE",
"-190 -348 OFFCURVE",
"-229 -348 CURVE SMOOTH",
"-271 -348 OFFCURVE",
"-312 -388 OFFCURVE",
"-312 -443 CURVE SMOOTH",
"-312 -467 OFFCURVE",
"-282 -580 OFFCURVE",
"-110 -580 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"656 737 LINE",
"681 844 LINE",
"59 844 LINE",
"35 737 LINE"
);
},
{
closed = 1;
nodes = (
"642 -551 OFFCURVE",
"715 -361 OFFCURVE",
"763 -96 CURVE SMOOTH",
"964 1017 LINE SMOOTH",
"996 1194 OFFCURVE",
"1035 1382 OFFCURVE",
"1153 1382 CURVE SMOOTH",
"1183 1382 OFFCURVE",
"1215 1349 OFFCURVE",
"1215 1284 CURVE SMOOTH",
"1215 1219 OFFCURVE",
"1268 1190 OFFCURVE",
"1317 1190 CURVE SMOOTH",
"1365 1190 OFFCURVE",
"1402 1247 OFFCURVE",
"1402 1307 CURVE SMOOTH",
"1402 1414 OFFCURVE",
"1289 1464 OFFCURVE",
"1168 1464 CURVE SMOOTH",
"969 1464 OFFCURVE",
"800 1342 OFFCURVE",
"744 1029 CURVE SMOOTH",
"515 -250 LINE SMOOTH",
"495 -364 OFFCURVE",
"480 -446 OFFCURVE",
"423 -446 CURVE SMOOTH",
"402 -446 OFFCURVE",
"379 -425 OFFCURVE",
"355 -383 CURVE SMOOTH",
"331 -340 OFFCURVE",
"299 -319 OFFCURVE",
"260 -319 CURVE SMOOTH",
"218 -319 OFFCURVE",
"177 -359 OFFCURVE",
"177 -414 CURVE SMOOTH",
"177 -438 OFFCURVE",
"207 -551 OFFCURVE",
"379 -551 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1139 737 LINE",
"1164 844 LINE",
"542 844 LINE",
"518 737 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 109 values pushed */
61 27 4 3 10 73 0 2 6 5 6 2 5 131 0 5 1 6 5 1 129 0 11 8 15 8 11 15 131 0 4 0 6 2 4 6 109 0 3 0 1 0 3 1 109 14 7 2 0 16 13 2 8 11 0 8 107 0 12 9 10 12 93 0 15 0 9 10 15 9 109 0 12 12 10 97 0 10 12 10 81 98 97 92 90 83 81 79 78 75 73 70 68 64 62 60 58 34 22 38 35 36 45 18 36 16 17 7 31 
CALL[ ]\011/* CallFunction */";
};
width = 1033;
}
);
leftKerningGroup = f;
leftMetricsKey = "=f";
note = f_f.alt;
rightKerningGroup = f.alt;
rightMetricsKey = "=f.alt";
},
{
glyphname = uni030C.alt;
lastChange = "2018-08-18 13:50:58 +0000";
layers = (
{
anchors = (
{
name = _topright;
position = "{187, 856}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"281 1110 OFFCURVE",
"297 1122 OFFCURVE",
"312 1145 CURVE SMOOTH",
"398 1277 OFFCURVE",
"447 1384 OFFCURVE",
"447 1473 CURVE SMOOTH",
"447 1486 OFFCURVE",
"433 1492 OFFCURVE",
"404 1492 CURVE SMOOTH",
"340 1492 OFFCURVE",
"308 1479 OFFCURVE",
"308 1454 CURVE SMOOTH",
"308 1451 OFFCURVE",
"309 1445 OFFCURVE",
"310 1437 CURVE SMOOTH",
"311 1428 OFFCURVE",
"311 1415 OFFCURVE",
"311 1397 CURVE SMOOTH",
"311 1319 OFFCURVE",
"291 1241 OFFCURVE",
"247 1165 CURVE SMOOTH",
"240 1153 OFFCURVE",
"237 1143 OFFCURVE",
"237 1135 CURVE SMOOTH",
"237 1118 OFFCURVE",
"252 1110 OFFCURVE",
"265 1110 CURVE SMOOTH"
);
}
);
width = 0;
},
{
anchors = (
{
name = _topright;
position = "{187, 856}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"261 1110 OFFCURVE",
"281 1122 OFFCURVE",
"302 1145 CURVE SMOOTH",
"421 1275 OFFCURVE",
"479 1375 OFFCURVE",
"479 1440 CURVE SMOOTH",
"479 1474 OFFCURVE",
"460 1491 OFFCURVE",
"423 1491 CURVE SMOOTH",
"340 1491 OFFCURVE",
"298 1474 OFFCURVE",
"298 1440 CURVE SMOOTH",
"298 1436 OFFCURVE",
"299 1428 OFFCURVE",
"300 1419 CURVE SMOOTH",
"301 1410 OFFCURVE",
"302 1396 OFFCURVE",
"302 1378 CURVE SMOOTH",
"302 1314 OFFCURVE",
"274 1242 OFFCURVE",
"218 1165 CURVE SMOOTH",
"210 1154 OFFCURVE",
"206 1144 OFFCURVE",
"206 1136 CURVE SMOOTH",
"206 1119 OFFCURVE",
"220 1110 OFFCURVE",
"241 1110 CURVE SMOOTH"
);
}
);
width = 0;
}
);
},
{
glyphname = uni0307.case;
lastChange = "2018-08-18 13:11:52 +0000";
layers = (
{
anchors = (
{
name = _top;
position = "{162, 1363}";
},
{
name = top;
position = "{191, 1526}";
}
);
components = (
{
name = dotaccent;
transform = "{1, 0, 0, 1, -418, 462}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
width = 0;
},
{
anchors = (
{
name = _top;
position = "{158, 1363}";
},
{
name = top;
position = "{202, 1615}";
}
);
components = (
{
name = dotaccent;
transform = "{1, 0, 0, 1, -274, 466}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
width = 0;
}
);
},
{
glyphname = caron.case;
lastChange = "2018-08-15 13:36:33 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"678 1494 LINE SMOOTH",
"688 1481 OFFCURVE",
"700 1474 OFFCURVE",
"714 1474 CURVE SMOOTH",
"727 1474 OFFCURVE",
"743 1481 OFFCURVE",
"760 1494 CURVE SMOOTH",
"1064 1727 LINE",
"1045 1756 LINE",
"785 1626 LINE SMOOTH",
"770 1619 OFFCURVE",
"758 1615 OFFCURVE",
"751 1615 CURVE SMOOTH",
"743 1615 OFFCURVE",
"733 1619 OFFCURVE",
"722 1626 CURVE SMOOTH",
"527 1756 LINE",
"496 1727 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"493 1475 LINE",
"535 1475 LINE",
"864 1727 LINE",
"845 1756 LINE",
"506 1586 LINE",
"582 1586 LINE",
"327 1756 LINE",
"296 1727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
17 6 2 1 74 0 1 0 1 136 0 0 0 118 28 26 2 7 24 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"631 1497 LINE",
"663 1468 OFFCURVE",
"700 1466 OFFCURVE",
"733 1493 CURVE SMOOTH",
"1083 1763 LINE",
"1047 1819 LINE",
"745 1686 LINE",
"718 1671 OFFCURVE",
"690 1675 OFFCURVE",
"666 1686 CURVE",
"395 1819 LINE",
"362 1763 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"528 1475 LINE",
"585 1475 LINE",
"958 1763 LINE",
"922 1819 LINE",
"508 1637 LINE",
"642 1637 LINE",
"270 1819 LINE",
"237 1763 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 13 values pushed */
11 1 0 74 0 0 0 118 20 19 1 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = CapCaron;
},
{
glyphname = circumflex.case;
lastChange = "2018-08-15 13:40:09 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"815 1738 LINE SMOOTH",
"805 1751 OFFCURVE",
"793 1758 OFFCURVE",
"780 1758 CURVE SMOOTH",
"766 1758 OFFCURVE",
"750 1751 OFFCURVE",
"733 1738 CURVE SMOOTH",
"429 1505 LINE",
"448 1476 LINE",
"708 1606 LINE SMOOTH",
"723 1614 OFFCURVE",
"735 1618 OFFCURVE",
"743 1618 CURVE SMOOTH",
"750 1618 OFFCURVE",
"760 1614 OFFCURVE",
"771 1606 CURVE SMOOTH",
"966 1476 LINE",
"997 1505 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"649 1758 LINE",
"609 1758 LINE",
"279 1505 LINE",
"298 1476 LINE",
"646 1650 LINE",
"555 1650 LINE",
"816 1476 LINE",
"847 1505 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 19 values pushed */
13 6 2 0 73 0 1 0 1 133 0 0 0 118 27 26 2 12 24 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
background = {
paths = (
{
closed = 1;
nodes = (
"817 1794 LINE SMOOTH",
"782 1827 OFFCURVE",
"748 1827 OFFCURVE",
"715 1800 CURVE SMOOTH",
"365 1530 LINE",
"401 1477 LINE",
"702 1610 LINE",
"716 1615 OFFCURVE",
"730 1618 OFFCURVE",
"744 1618 CURVE SMOOTH",
"757 1618 OFFCURVE",
"770 1615 OFFCURVE",
"782 1610 CURVE",
"1053 1477 LINE",
"1085 1530 LINE"
);
}
);
};
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"694 1817 LINE",
"637 1817 LINE",
"265 1530 LINE",
"301 1477 LINE",
"731 1667 LINE",
"566 1667 LINE",
"953 1477 LINE",
"985 1530 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 27 25 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = CapCircumflex;
},
{
glyphname = dieresis.case;
lastChange = "2018-08-15 14:35:35 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"415 1500 OFFCURVE",
"468 1548 OFFCURVE",
"468 1625 CURVE SMOOTH",
"468 1684 OFFCURVE",
"440 1714 OFFCURVE",
"383 1715 CURVE SMOOTH",
"323 1716 OFFCURVE",
"268 1658 OFFCURVE",
"268 1589 CURVE SMOOTH",
"268 1530 OFFCURVE",
"297 1500 OFFCURVE",
"355 1500 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"815 1500 OFFCURVE",
"867 1548 OFFCURVE",
"867 1625 CURVE SMOOTH",
"867 1684 OFFCURVE",
"839 1714 OFFCURVE",
"782 1715 CURVE SMOOTH",
"722 1716 OFFCURVE",
"668 1658 OFFCURVE",
"668 1589 CURVE SMOOTH",
"668 1530 OFFCURVE",
"697 1500 OFFCURVE",
"755 1500 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 2 1 0 1 0 81 35 35 35 34 4 12 26 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"432 1502 OFFCURVE",
"503 1542 OFFCURVE",
"503 1633 CURVE SMOOTH",
"503 1704 OFFCURVE",
"465 1751 OFFCURVE",
"391 1751 CURVE SMOOTH",
"317 1751 OFFCURVE",
"251 1701 OFFCURVE",
"251 1589 CURVE SMOOTH",
"251 1534 OFFCURVE",
"307 1502 OFFCURVE",
"366 1502 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"876 1501 OFFCURVE",
"946 1541 OFFCURVE",
"946 1633 CURVE SMOOTH",
"946 1704 OFFCURVE",
"904 1751 OFFCURVE",
"833 1751 CURVE SMOOTH",
"762 1751 OFFCURVE",
"694 1701 OFFCURVE",
"694 1589 CURVE SMOOTH",
"694 1534 OFFCURVE",
"751 1501 OFFCURVE",
"810 1501 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 3 1 1 0 1 81 19 20 19 18 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = CapDieresis;
},
{
glyphname = grave.case;
lastChange = "2018-08-15 13:44:23 +0000";
layers = (
{
background = {
paths = (
{
closed = 1;
nodes = (
"576 1735 LINE",
"571.333 1738.333 OFFCURVE",
"566.667 1740 OFFCURVE",
"562 1740 CURVE SMOOTH",
"534.71 1740 OFFCURVE",
"500 1683.746 OFFCURVE",
"500 1651 CURVE SMOOTH",
"500 1644.333 OFFCURVE",
"501.333 1639 OFFCURVE",
"504 1635 CURVE SMOOTH",
"506.667 1631 OFFCURVE",
"508.667 1629 OFFCURVE",
"510 1629 CURVE",
"830 1478 LINE SMOOTH",
"840 1473.333 OFFCURVE",
"849 1471 OFFCURVE",
"857 1471 CURVE SMOOTH",
"875.667 1471 OFFCURVE",
"898 1486.333 OFFCURVE",
"898 1505 CURVE SMOOTH",
"898 1518.333 OFFCURVE",
"888.667 1532.667 OFFCURVE",
"874 1542 CURVE SMOOTH"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"908 1526 LINE",
"554 1749 LINE",
"488 1643 LINE",
"864 1462 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]\011/* 8 values pushed */
0 0 0 118 37 1 12 23 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"954 1532 LINE",
"594 1775 LINE",
"510 1636 LINE",
"919 1459 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
11 1 1 0 1 76 0 0 1 0 133 0 1 1 118 22 37 2 8 24 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = CapGrave;
},
{
glyphname = macron.case;
lastChange = "2018-08-15 13:47:54 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"846 1557 LINE",
"873 1645 LINE",
"278 1645 LINE",
"256 1557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 0 1 0 1 79 1 0 5 2 0 7 1 6 3 12 22 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"925 1557 LINE",
"950 1670 LINE",
"313 1670 LINE",
"292 1557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 29 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 0 1 0 1 79 1 0 5 2 0 7 1 6 3 8 22 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = CapMacron;
},
{
glyphname = tilde.case;
lastChange = "2018-08-15 13:31:37 +0000";
layers = (
{
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 1;
nodes = (
"819 1701 LINE",
"814 1657 OFFCURVE",
"771 1607 OFFCURVE",
"727 1607 CURVE SMOOTH",
"698 1607 OFFCURVE",
"650 1621 OFFCURVE",
"585 1650 CURVE SMOOTH",
"519 1679 OFFCURVE",
"470 1693 OFFCURVE",
"438 1693 CURVE SMOOTH",
"343 1693 OFFCURVE",
"282 1627 OFFCURVE",
"257 1496 CURVE",
"306 1496 LINE",
"317 1549 OFFCURVE",
"353 1588 OFFCURVE",
"406 1588 CURVE SMOOTH",
"430 1588 OFFCURVE",
"476 1573 OFFCURVE",
"543 1544 CURVE SMOOTH",
"610 1515 OFFCURVE",
"658 1500 OFFCURVE",
"689 1500 CURVE SMOOTH",
"781 1500 OFFCURVE",
"843 1596 OFFCURVE",
"868 1701 CURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 4 1 0 4 89 6 5 2 3 0 1 0 3 1 105 0 4 4 0 97 2 1 0 4 0 81 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
114 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
6 1 5 3 5 133 0 4 1 0 4 89 0 3 0 1 0 3 1 105 0 4 4 0 97 2 1 0 4 0 81 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
6 1 5 3 5 133 0 2 0 2 134 0 4 1 0 4 89 0 3 0 1 0 3 1 105 0 4 4 0 97 0 0 4 0 81 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 18 0 18 33 33 18 33 34 7 12 27 
CALL[ ]\011/* CallFunction */";
};
width = 730;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 1;
nodes = (
"819 1721 LINE",
"814 1677 OFFCURVE",
"771 1627 OFFCURVE",
"727 1627 CURVE SMOOTH",
"698 1627 OFFCURVE",
"650 1641 OFFCURVE",
"585 1670 CURVE SMOOTH",
"519 1699 OFFCURVE",
"470 1713 OFFCURVE",
"438 1713 CURVE SMOOTH",
"343 1713 OFFCURVE",
"282 1607 OFFCURVE",
"257 1476 CURVE",
"306 1476 LINE",
"317 1529 OFFCURVE",
"353 1568 OFFCURVE",
"406 1568 CURVE SMOOTH",
"430 1568 OFFCURVE",
"476 1553 OFFCURVE",
"543 1524 CURVE SMOOTH",
"610 1495 OFFCURVE",
"658 1480 OFFCURVE",
"689 1480 CURVE SMOOTH",
"781 1480 OFFCURVE",
"843 1616 OFFCURVE",
"868 1721 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 1 76 29 1 2 74 12 1 0 73 0 3 1 0 3 89 0 2 0 1 0 2 1 105 0 3 3 0 97 0 0 3 0 81 34 44 19 34 4 8 26 
CALL[ ]\011/* CallFunction */";
};
width = 737;
}
);
note = CapTilde;
},
{
export = 0;
glyphname = _cap.fullserif;
lastChange = "2018-08-14 17:06:17 +0000";
layers = (
{
anchors = (
{
name = origin;
position = "{0, 166}";
}
);
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 0;
nodes = (
"0 166 LINE",
"0 94 OFFCURVE",
"-62 58 OFFCURVE",
"-197 58 CURVE",
"-197 0 LINE",
"319 0 LINE",
"319 58 LINE",
"184 58 OFFCURVE",
"122 94 OFFCURVE",
"122 166 CURVE"
);
}
);
width = 600;
},
{
anchors = (
{
name = origin;
position = "{0, 186}";
}
);
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 0;
nodes = (
"0 194 LINE",
"0 122 OFFCURVE",
"-62 86 OFFCURVE",
"-197 86 CURVE",
"-197 0 LINE",
"440 0 LINE",
"440 86 LINE",
"305 86 OFFCURVE",
"243 122 OFFCURVE",
"243 194 CURVE"
);
}
);
width = 600;
}
);
},
{
export = 0;
glyphname = _corner.halfserif;
lastChange = "2018-08-14 16:20:58 +0000";
layers = (
{
background = {
paths = (
{
closed = 0;
nodes = (
"32 434 LINE",
"-58 -81 LINE"
);
}
);
};
layerId = "98F9B6AB-A1D0-4874-9186-59FDE6DAF116";
paths = (
{
closed = 0;
nodes = (
"0 166 LINE",
"0 94 OFFCURVE",
"-62 58 OFFCURVE",
"-197 58 CURVE",
"-197 0 LINE",
"40 0 LINE"
);
}
);
width = 600;
},
{
layerId = "2899D53B-47B8-4BF9-853D-5BC6961E25E7";
paths = (
{
closed = 0;
nodes = (
"0 194 LINE",
"0 122 OFFCURVE",
"-62 86 OFFCURVE",
"-197 86 CURVE",
"-197 0 LINE",
"40 0 LINE"
);
}
);
width = 600;
}
);
}
);
instances = (
{
customParameters = (
{
name = postscriptFullName;
value = "Elstob Light Italic";
},
{
name = postscriptFontName;
value = "Elstob-LtIt";
},
{
name = "Save as TrueType";
value = 1;
}
);
interpolationWeight = 300;
instanceInterpolations = {
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = 1;
};
isItalic = 1;
linkStyle = Light;
name = "Light Italic";
weightClass = Light;
},
{
customParameters = (
{
name = postscriptFullName;
value = "Elstob Italic";
},
{
name = postscriptFontName;
value = "Elstob-It";
},
{
name = "Save as TrueType";
value = 1;
}
);
interpolationWeight = 400;
instanceInterpolations = {
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = 0.25;
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = 0.75;
};
isItalic = 1;
linkStyle = Regular;
name = "Regular Italic";
},
{
customParameters = (
{
name = postscriptFullName;
value = "Elstob Medium Italic";
},
{
name = postscriptFontName;
value = "Elstob-MdIt";
},
{
name = "Save as TrueType";
value = 1;
}
);
interpolationWeight = 500;
instanceInterpolations = {
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = 0.5;
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = 0.5;
};
isItalic = 1;
linkStyle = Medium;
name = "Medium Italic";
weightClass = Medium;
},
{
customParameters = (
{
name = postscriptFullName;
value = "Elstob DemiBold Italic";
},
{
name = postscriptFontName;
value = "Elstob-DmBdIt";
},
{
name = "Save as TrueType";
value = 1;
}
);
interpolationWeight = 600;
instanceInterpolations = {
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = 0.75;
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = 0.25;
};
isItalic = 1;
linkStyle = DemiBold;
name = "DemiBold Italic";
weightClass = DemiBold;
},
{
customParameters = (
{
name = postscriptFullName;
value = "Elstob Bold Italic";
},
{
name = postscriptFontName;
value = "Elstob-BdIt";
},
{
name = "Save as TrueType";
value = 1;
}
);
interpolationWeight = 700;
instanceInterpolations = {
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = 1;
};
isBold = 1;
isItalic = 1;
linkStyle = Regular;
name = "Bold Italic";
weightClass = Bold;
}
);
kerning = {
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = {
"@MMK_L_A" = {
"@MMK_R_C" = -110;
"@MMK_R_J" = -60;
"@MMK_R_S" = -50;
"@MMK_R_T" = -210;
"@MMK_R_U" = -170;
"@MMK_R_V" = -280;
"@MMK_R_W" = -270;
"@MMK_R_Y" = -270;
};
"@MMK_L_B" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = 60;
"@MMK_R_J" = -20;
"@MMK_R_T" = -30;
"@MMK_R_U" = -60;
"@MMK_R_V" = -160;
"@MMK_R_W" = -150;
"@MMK_R_X" = -60;
"@MMK_R_Y" = -130;
Z = -20;
};
"@MMK_L_C" = {
"@MMK_R_A" = -40;
"@MMK_R_T" = -40;
"@MMK_R_U" = -90;
"@MMK_R_V" = -70;
"@MMK_R_W" = -80;
"@MMK_R_X" = -80;
"@MMK_R_Y" = -80;
Z = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -110;
"@MMK_R_C" = 60;
"@MMK_R_T" = -50;
"@MMK_R_U" = -80;
"@MMK_R_V" = -140;
"@MMK_R_W" = -140;
"@MMK_R_X" = -180;
"@MMK_R_Y" = -160;
Z = -90;
};
"@MMK_L_F" = {
"@MMK_R_A" = -150;
"@MMK_R_X" = -30;
Z = -60;
};
"@MMK_L_G" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = 60;
"@MMK_R_U" = -70;
"@MMK_R_V" = -60;
"@MMK_R_W" = -80;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -80;
Z = -30;
};
"@MMK_L_J" = {
"@MMK_R_A" = -80;
"@MMK_R_X" = -20;
Z = -30;
};
"@MMK_L_K" = {
"@MMK_R_C" = -180;
"@MMK_R_J" = -130;
"@MMK_R_S" = -70;
"@MMK_R_T" = -130;
"@MMK_R_U" = -160;
"@MMK_R_V" = -140;
"@MMK_R_W" = -150;
"@MMK_R_X" = 20;
"@MMK_R_Y" = -110;
};
"@MMK_L_L" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -250;
"@MMK_R_U" = -170;
"@MMK_R_V" = -330;
"@MMK_R_W" = -420;
"@MMK_R_Y" = -270;
};
"@MMK_L_N" = {
Z = -40;
};
"@MMK_L_O" = {
"@MMK_R_A" = -90;
"@MMK_R_C" = 50;
"@MMK_R_J" = -30;
"@MMK_R_T" = -40;
"@MMK_R_U" = -60;
"@MMK_R_V" = -110;
"@MMK_R_W" = -140;
"@MMK_R_X" = -140;
"@MMK_R_Y" = -100;
Z = -40;
};
"@MMK_L_P" = {
"@MMK_R_A" = -100;
"@MMK_R_C" = 80;
"@MMK_R_U" = -50;
"@MMK_R_V" = -50;
"@MMK_R_W" = -100;
"@MMK_R_X" = -120;
"@MMK_R_Y" = -80;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -60;
"@MMK_R_V" = -120;
};
"@MMK_L_R" = {
"@MMK_R_C" = -140;
"@MMK_R_J" = -40;
"@MMK_R_S" = -60;
"@MMK_R_U" = -240;
"@MMK_R_V" = -340;
"@MMK_R_W" = -350;
"@MMK_R_Y" = -320;
};
"@MMK_L_S" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = 50;
"@MMK_R_U" = -70;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_X" = -60;
"@MMK_R_Y" = -100;
};
"@MMK_L_T" = {
"@MMK_R_A" = -160;
"@MMK_R_X" = -40;
};
"@MMK_L_U" = {
"@MMK_R_A" = -170;
"@MMK_R_C" = -30;
"@MMK_R_J" = -30;
"@MMK_R_X" = -60;
Z = -50;
};
"@MMK_L_V" = {
"@MMK_R_A" = -250;
"@MMK_R_C" = -80;
"@MMK_R_S" = -60;
"@MMK_R_X" = -40;
Z = -60;
};
"@MMK_L_X" = {
"@MMK_R_C" = -100;
"@MMK_R_S" = -60;
"@MMK_R_T" = -50;
"@MMK_R_U" = -70;
"@MMK_R_V" = -40;
"@MMK_R_W" = -50;
"@MMK_R_X" = -80;
"@MMK_R_Y" = -40;
Z = -100;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -270;
"@MMK_R_C" = -90;
"@MMK_R_S" = -40;
Z = -50;
};
"@MMK_L_b" = {
"@MMK_R_j" = 20;
};
"@MMK_L_c" = {
"@MMK_R_c" = -40;
"@MMK_R_h" = -20;
};
"@MMK_L_g" = {
"@MMK_R_a" = -50;
"@MMK_R_y" = 90;
};
"@MMK_L_insg" = {
"@MMK_R_a" = -90;
"@MMK_R_c" = -70;
};
"@MMK_L_k" = {
"@MMK_R_s" = 50;
};
"@MMK_L_r" = {
"@MMK_R_a" = -90;
"@MMK_R_c" = -60;
"@MMK_R_d" = -100;
"@MMK_R_g" = -40;
"@MMK_R_h" = -40;
"@MMK_R_s" = -50;
};
};
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = {
"@MMK_L_A" = {
"@MMK_R_C" = -110;
"@MMK_R_J" = -60;
"@MMK_R_S" = -50;
"@MMK_R_T" = -210;
"@MMK_R_U" = -170;
"@MMK_R_V" = -280;
"@MMK_R_W" = -270;
"@MMK_R_Y" = -270;
};
"@MMK_L_B" = {
"@MMK_R_A" = -30;
"@MMK_R_C" = 60;
"@MMK_R_J" = -20;
"@MMK_R_T" = -30;
"@MMK_R_U" = -60;
"@MMK_R_V" = -160;
"@MMK_R_W" = -150;
"@MMK_R_X" = -60;
"@MMK_R_Y" = -130;
"@MMK_R_Z" = -20;
};
"@MMK_L_C" = {
"@MMK_R_A" = -40;
"@MMK_R_T" = -40;
"@MMK_R_U" = -90;
"@MMK_R_V" = -70;
"@MMK_R_W" = -80;
"@MMK_R_X" = -80;
"@MMK_R_Y" = -80;
"@MMK_R_Z" = -20;
};
"@MMK_L_D" = {
"@MMK_R_A" = -110;
"@MMK_R_C" = 60;
"@MMK_R_T" = -50;
"@MMK_R_U" = -80;
"@MMK_R_V" = -140;
"@MMK_R_W" = -140;
"@MMK_R_X" = -180;
"@MMK_R_Y" = -160;
"@MMK_R_Z" = -90;
};
"@MMK_L_F" = {
"@MMK_R_A" = -150;
"@MMK_R_X" = -30;
"@MMK_R_Z" = -60;
};
"@MMK_L_G" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = 60;
"@MMK_R_U" = -70;
"@MMK_R_V" = -60;
"@MMK_R_W" = -80;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -80;
"@MMK_R_Z" = -30;
};
"@MMK_L_J" = {
"@MMK_R_A" = -80;
"@MMK_R_X" = -20;
"@MMK_R_Z" = -30;
};
"@MMK_L_K" = {
"@MMK_R_C" = -180;
"@MMK_R_J" = -130;
"@MMK_R_S" = -70;
"@MMK_R_T" = -130;
"@MMK_R_U" = -160;
"@MMK_R_V" = -140;
"@MMK_R_W" = -150;
"@MMK_R_X" = 20;
"@MMK_R_Y" = -110;
};
"@MMK_L_L" = {
"@MMK_R_C" = -30;
"@MMK_R_T" = -250;
"@MMK_R_U" = -170;
"@MMK_R_V" = -330;
"@MMK_R_W" = -420;
"@MMK_R_Y" = -270;
};
"@MMK_L_N" = {
"@MMK_R_Z" = -40;
};
"@MMK_L_O" = {
"@MMK_R_A" = -90;
"@MMK_R_C" = 50;
"@MMK_R_J" = -30;
"@MMK_R_T" = -40;
"@MMK_R_U" = -60;
"@MMK_R_V" = -110;
"@MMK_R_W" = -140;
"@MMK_R_X" = -140;
"@MMK_R_Y" = -100;
"@MMK_R_Z" = -40;
};
"@MMK_L_P" = {
"@MMK_R_A" = -100;
"@MMK_R_C" = 80;
"@MMK_R_U" = -50;
"@MMK_R_V" = -50;
"@MMK_R_W" = -100;
"@MMK_R_X" = -120;
"@MMK_R_Y" = -80;
};
"@MMK_L_Q" = {
"@MMK_R_A" = -60;
"@MMK_R_V" = -120;
};
"@MMK_L_R" = {
"@MMK_R_C" = -140;
"@MMK_R_J" = -40;
"@MMK_R_S" = -60;
"@MMK_R_U" = -240;
"@MMK_R_V" = -340;
"@MMK_R_W" = -350;
"@MMK_R_Y" = -320;
};
"@MMK_L_S" = {
"@MMK_R_A" = -40;
"@MMK_R_C" = 50;
"@MMK_R_U" = -70;
"@MMK_R_V" = -80;
"@MMK_R_W" = -70;
"@MMK_R_X" = -60;
"@MMK_R_Y" = -100;
};
"@MMK_L_T" = {
"@MMK_R_A" = -160;
"@MMK_R_X" = -40;
};
"@MMK_L_U" = {
"@MMK_R_A" = -170;
"@MMK_R_C" = -30;
"@MMK_R_J" = -30;
"@MMK_R_X" = -60;
"@MMK_R_Z" = -50;
};
"@MMK_L_V" = {
"@MMK_R_A" = -250;
"@MMK_R_C" = -80;
"@MMK_R_S" = -60;
"@MMK_R_X" = -40;
"@MMK_R_Z" = -60;
};
"@MMK_L_X" = {
"@MMK_R_C" = -100;
"@MMK_R_S" = -60;
"@MMK_R_T" = -50;
"@MMK_R_U" = -70;
"@MMK_R_V" = -40;
"@MMK_R_W" = -50;
"@MMK_R_X" = -80;
"@MMK_R_Y" = -40;
"@MMK_R_Z" = -100;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -270;
"@MMK_R_C" = -90;
"@MMK_R_S" = -40;
"@MMK_R_Z" = -50;
};
"@MMK_L_b" = {
"@MMK_R_j" = 20;
};
"@MMK_L_c" = {
"@MMK_R_c" = -40;
"@MMK_R_h" = -20;
};
"@MMK_L_g" = {
"@MMK_R_a" = -50;
"@MMK_R_u" = 20;
"@MMK_R_y" = 130;
};
"@MMK_L_insg" = {
"@MMK_R_a" = -90;
"@MMK_R_c" = -70;
};
"@MMK_L_k" = {
"@MMK_R_s" = 50;
};
"@MMK_L_r" = {
"@MMK_R_a" = -90;
"@MMK_R_c" = -60;
"@MMK_R_d" = -100;
"@MMK_R_g" = -40;
"@MMK_R_h" = -40;
"@MMK_R_s" = -50;
};
"@MMK_L_w" = {
"@MMK_R_a" = -20;
};
};
};
unitsPerEm = 2048;
userData = {
GSDimensionPlugin.Dimensions = {
"2899D53B-47B8-4BF9-853D-5BC6961E25E7" = {
nV = "194";
oV = "219";
};
"98F9B6AB-A1D0-4874-9186-59FDE6DAF116" = {
nV = "102";
oH = "61";
oV = "123";
};
};
};
versionMajor = 1;
versionMinor = 0;
}
